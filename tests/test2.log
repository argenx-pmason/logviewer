1                                                          The SAS System                     Tuesday, February 14, 2023 11:51:00 PM

NOTE: Copyright (c) 2016 by SAS Institute Inc., Cary, NC, USA. 
NOTE: SAS (r) Proprietary Software 9.4 (TS1M7 MBCS3170) 
      Licensed to ARGENX VIA OCS CONSULTING_SAS LSAF_SAAS, Site 70265777.
NOTE: This session is executing on the Linux 4.18.0-305.19.1.el8_4.x86_64 (LIN X64) platform.



NOTE: Analytical products:
      
      SAS/STAT 15.2
      SAS/IML 15.2

NOTE: Additional host information:

 Linux LIN X64 4.18.0-305.19.1.el8_4.x86_64 #1 SMP Tue Sep 7 07:07:31 EDT 2021 x86_64 Red Hat Enterprise Linux release 8.4 (Ootpa) 

You are running SAS 9. Some SAS 8 files will be automatically converted 
by the V9 engine; others are incompatible.  Please see 
http://support.sas.com/rnd/migration/planning/platform/64bit.html

PROC MIGRATE will preserve current SAS file attributes and is 
recommended for converting all your SAS libraries from any 
SAS 8 release to SAS 9.  For details and examples, please see
http://support.sas.com/rnd/migration/index.html


This message is contained in the SAS news file, and is presented upon
initialization.  Edit the file "news" in the "misc/base" directory to
display site-specific news and information in the program log.
The command line option "-nonews" will prevent this display.




NOTE: SAS Initialization used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      
NOTE: The autoexec file, /sso/biconfig/940/Lev1/LSAFApp/WorkspaceServer/autoexec.sas, was executed at server initialization.
1          options nofmterr;
2          options dtreset;
3          options locale=EN_US;
4          %let _SDDUSR_=%bquote(jbodart);
5          %let _SASWS_ =
5        ! %nrstr("/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15");
6          %let _SASWS_ = %qsubstr(&_SASWS_, 2, %length(&_SASWS_) - 2);
7          %let _SASUSRWS_ =
7        ! %nrstr("/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/Users/jbodar
7        ! t");
8          %let _SASUSRWS_ = %qsubstr(&_SASUSRWS_, 2, %length(&_SASUSRWS_) - 2);
9          %let _SASINSTANCE_ = %nrstr("xarprod.ondemand.sas.com");
10         %let _SASINSTANCE_ = %qsubstr(&_SASINSTANCE_, 2, %length(&_SASINSTANCE_) - 2);
11         options nosource;

NOTE: DATA statement used (Total process time):
      real time           1.02 seconds
      cpu time            0.01 seconds
      
2                                                          The SAS System                     Tuesday, February 14, 2023 11:51:40 PM


18         

/**********************************************************************************************************************
 * Submission Start: lsaf_get_last_sdtm.sas
 * Feb 14, 2023 23:51:41 GMT by jbodart
 *********************************************************************************************************************/
3                                                          The SAS System                     Tuesday, February 14, 2023 11:51:41 PM

19         options nosyntaxcheck errorcheck=strict notes;
20         ;*';*";*/;*); run; quit;
21         
22         %let _SASFILELOCATION_ = %nrstr("/general/biostat/jobs/gadam_ongoing_studies/prod/programs");
23         %let _SASFILELOCATION_ = %qsubstr(&_SASFILELOCATION_, 2, %length(&_SASFILELOCATION_) - 2);
24         %let _SASFILEPATH_ = %nrstr("/general/biostat/jobs/gadam_ongoing_studies/prod/programs/lsaf_get_last_sdtm.sas");
25         %let _SASFILEPATH_ = %qsubstr(&_SASFILEPATH_, 2, %length(&_SASFILEPATH_) - 2);
26         
27         /********************************************************************************************************************/
28         proc scaproc; record "&_SASWS_/.sessions/11/sca_b7a57f92-5759-4ac5-a9bd-bb4c2d005822.txt" EXPANDMACROS; run;

NOTE: PROCEDURE SCAPROC used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

29         
30         options nomprint;
31         /********************************************************************************************************************/
32         /* Macro Variables for Job Parameters */
33         %let create_folder=Y;
34         %let refresh_sdtm=Y;
35         %let create_gadam_folder=Y;
36         %let setup_gadam_folder=N;
37         %let gadam_files_source=/general/biostat/gadam;
38         %let rebuild_gadam_datasets=Y;
39         %let qc_gadam_vs_study=Y;
40         %let check_and_load_gadam=Y;
41         %let run_gadam_tables=Y;
42         %let wait=Y;
43         %let force=N;
44         %let mock=N;
45         %let run_next_job=N;
46         %let next_job=/general/biostat/jobs/gadam_rebuild_adam/dev/jobs/job_gadam_rebuild_adam.job;
47         %let compounds=argx-117;
48         %let indications=;
49         %let studies=;
50         %let domains=;
51         %let last_refresh_reldy=. - 0;
52         %let job_instance=Ngos117Prod_4;
53         %let
53       ! _PARENTJOB_WS_=/lsafshared/SASWorkspaces/.transient/job_gadam_ongoing_studies.job-46e1f72b-2c77-4ab6-8028-33761e4697ba;
54         %let _PARENTJOB_WRK_=/saswork/sas_tmp/SAS_work89DD00193DB6_xar08auv.vsp.sas.com/SAS_work944F00193DB6_xar08auv.vsp.sas.com
54       ! ;
55         %let USE_SAS_WORKSPACE_MACROS=;
56         
57         /********************************************************************************************************************/
58         
59         /************************************************************************************************************************
59       ! *******************
60         @file
61         @brief      Retrieve paths of most recent sdtm files per study from Lsaf repository.
62         @details    For each identified source and target paths, submit job
63                     /general/biostat/jobs/gadam_refresh_sdtm_last/dev/jobs/job_gadam_refresh_sdtm_last.job
64                     to refresh the contents of LSAF biostat folder
64       ! /clinical/<compound>/<indic>/<study>/biostat/staging/data_received[/sdtm]/sdtm_last
65                     from the corresponding LSAF data management folder below
65       ! /clinical/<compound>/<indic>/<study>/dm/staging/current/
4                                                          The SAS System                     Tuesday, February 14, 2023 11:51:41 PM

66         
67         @author     author_name
68         @date       2021-08-16
69         @note       Uses FCMP function runmacro in order to execute data and proc steps synchronously 'on the side' (wrapped
69       ! within a macro) within
70                     a running data step, and retrieve some results via macro-variable &result.  (See also
70       ! ../programs/fcmp_run.sas).
71         @note       Workflow: This macro is meant to be called by ../programs/gadam_ongoing_studies.sas via the LSAF job
72                     /general/biostat/jobs/gadam_refresh_sdtm_last/dev/jobs/job_gadam_refresh_sdtm_last.job
73         
74         #### Update History ####
75         
76             Date             Name                        Description
77             ------------     --------------------------
77       ! -------------------------------------------------------------------------------------------
78             2021-09-30       J-M Bodart                  -  Include refresh of SDTM metadata (add prefix meta_ to target
78       ! datasets)
79             2021-12-06       J-M Bodart                  -  Get extra SDTM sources - especially those with non-standard paths -
79       ! from spreadsheet
80                                                             ../input/sdtm_extra_sources.xlsx
81             2021-12-23       J-M Bodart                  -  Optionally create and setup generic_adam folders.  Apply MPRINT and
81       ! NOTES in runmacro()
82                                                             only when &debug > 0.
83             2022-01-12       J-M Bodart                  -  Optionally (re-)run gadam dataset programs, check and load datasets,
83       ! (re-)run gadam
84                                                             table programs.
85             2022-01-19       J-M Bodart                  -  For paths provided in sdtm_extra_sources.xlsx, allow paths not
85       ! matching
86                                                             ^((/[^/]+){4})/dm/staging/transfers/.*$.
87                                                             Add 'proc print' to follow execution.
88             2022-01-20       J-M Bodart                  -  Extract metadata from define.xml only if &refresh_sdtm = Y and the
88       ! study is not 'final'
89                                                             (i.e.
89       ! /clinical/<compound>/<indication>/<study>/biostat/staging/generic_adam/jobs/job_finalchecks.job
90                                                             does not exist)
91                                                             Skip refreshing SDTM data and define metadata if already existing and
91       !  up-to-date.
92             2022-02-02       J-M Bodart                  -  Harmonize variable lenghs between lsaf_sdtm_last3 and
92       ! lsaf_dm_current6 before merging.
93             2022-02-07       J-M Bodart                  -  Check study Biostat folder exists/ is visible to current job user.
94                                                             If not, skip sdtm_last folder creation.
95             2022-03-08       J-M Bodart                  -  Assign default location to study adam folder (to compare with
95       ! generic_adam).
96             2022-03-15       J-M Bodart                  -  Create / update job:
96       ! /general/biostat/jobs/gadam_rebuild_adam/dev/jobs/job_gadam_qc_overviews.job
97             2022-03-16       J-M Bodart                  -  fix: job job_gadam_qc_overviews.job path needs &_SASWS_. prefix to
97       ! write to + other
98                                                             issues in job creation.
99                                                          -  add program: gadam_consolidate_qc_overviews.sas in job:
99       ! job_gadam_qc_overviews.job
100            2022-03-18       J-M Bodart                  -  add outpath also as recursive input path.
101            2022-07-01       J-M Bodart                  -  Use [..]/prod/jobs/setup_reporting_event_folder.job rather than
102                                                            [..]/dev/jobs/setup_reporting_event_folder.job
103            2022-07-10       J-M Bodart                  -  Specify parameter sdtm_last_path= in %rebuild_generic_adam().
104                                                            Specify study_adam_path in %setup_generic_adam().
105            2022-07-11       pschrauben                  -  Add 'narratives' generic_adam folder.
106            2022-07-18       J-M Bodart                  -  In %get_lasf_children, add formattedsize character(20) if not present
106      !  to avoid a
5                                                          The SAS System                     Tuesday, February 14, 2023 11:51:41 PM

107                                                            war-ning in proc append.
108                                                         -  In %setup_generic_adam, replace war-ning with not-ice message when
108      ! the standard folder
109                                                            for final study adam (.../<study>/biostat/staging/data_received/adam)
109      !  does not exist.
110            2022-08-23       J-M Bodart                  -  In %submit_sdtm_refresh_job, track _lsafJobSubmissionId_; after
110      ! launching multiple
111                                                            jobs in parallel, wait until all jobs have completed and update
111      ! submission status.
112                                                         -  Track datetime of generic adam creation, setup and rerun.
113                                                         -  Sort lsaf_sdtm_last2 rather than create an index (which can lead to
113      ! er-rors due to large
114                                                            index size) at least on Windows.
115            2022-08-24       J-M Bodart                  -  Fix checking job completion status.
116                                                         -  print er-ror / war-ning / not-te according to sdtm refresh job
116      ! completion status.
117            2022-08-25       J-M Bodart                  -  compute and report elapsed time for sdtm_refresh_job.
118            2022-08-29       J-M Bodart                  -  Call job_gadam_refresh_sdtm_last.job with distinct &job_instance
118      ! values to avoid
119                                                            collisions between parallel jobs.
120                                                            Then retrieve and combine refresh information from all individual job
120      !  instances.
121            2022-09-02       J-M Bodart                  -  Fix macro %submit_update_refresh_job().
122                                                            Delete the processed transaction data after updating the main refresh
122      !  dataset.
123            2022-09-08       J-M Bodart                  -  Use %submit_job with parent_job_instance = &job_instance.
124                                                            But in %submit_sdtm_refresh_job, use specific job_instance passed as
124      ! parameter,
125                                                            for later reference.
126                                                            In %submit_sdtm_refresh_job(), fix reporting job parameters name,
126      ! value and applicable
127                                                            attributes.
128                                                            Check whether dataset work.job_Parameters exists.
129            2022-09-09       J-M Bodart                  -  Integrate &num_jobs_spawned in %submit_sdtm_refresh_job().
130            2022-09-12       J-M Bodart                  -  Optimize use of %lsaf_search to prevent reaching LSAF Search Limit
130      ! and risk missing
131                                                            some search results.
132            2022-09-13       J-M Bodart                  -  Fix index issue (length too large for index page size) for dataset
132      ! LSAF_SDTM_LAST3 by
133                                                            using proc sort instead.
134            2022-09-15       J-M Bodart                  -  Remove spurious comment that prevented calculation of
134      ! update_refresh_endtm.
135            2022-09-26       J-M Bodart                  -  Skip SDTM refresh if target folder does not exists or is not visible.
136            2022-10-13       J-M Bodart                  -  Delete dmain names starting with meta_meta_.
137                                                         -  Include in %lsaf_search() Study names not starting with 'argx-'.
138            2022-11-15       J-M Bodart                  -  Exclude jobtrack files from sdtm refresh.
139                                                         -  Stop refreshing generic ADaMs in SDTM Pools within/across indications
139      !  prior to updating the SDTM pools themselves.
140                                                         -  Include collecting and combining datasets ../generic_var_all.sas7bdat
140      !  across studies in job_gadam_qc_overviews.job.
141                                                         -  Include all studies with generic_adam/qc folder in job to pool
141      ! generic_adam QC overviews.
142            2022-11-23       J-M Bodart                  -  Add infos to print output.
143            2022-12-01       J-M Bodart                  -  Keep ods listing open.
144            2022-12-14       J-M Bodart                  -  Log additional information.
145                                                         -  Always setup newly created generic_adam folders.
146            2023-01-11       J-M Bodart                  -  Better log gadam folder created/setup/rebuild or skipped.
147            2023-01-13       J-M Bodart                  -  Perform gadam study setup only if target is not up-to-date.
6                                                          The SAS System                     Tuesday, February 14, 2023 11:51:41 PM

148            2023-01-18       J-M Bodart                  -  Make sure &action is defined in %setup_generic_adam().
149            2023-02-01       J-M Bodart                  -  Use %gen_job_env() to refer to the environment (dev, test or prod)
149      ! closest to the running program
150                                                            where the transaction datasets should be deleted.
151            2023-02-06       J-M Bodart                  -  In data setp source_target_files, use PRXCHANGE to convert custom
151      ! datetime format into DATETIME format (ddMMMyyyy:hh:mm:ss).
152            2023-02-10       J-M Bodart                  -  in the assignment of libname refresh, use updated %gen_job_env() call
152      !  with location=LOCAL.
153        
154        
155        
156        @cond
157        *************************************************************************************************************************
157      ! ******************/
158        
159        %setenv(ini=0);
MPRINT(SETENV):   source source2 nofmterr notes spool nodate nonumber MAUTOCOMPLOC NOMAUTOLOCDISPLAY;
MPRINT(SETENV):   * in case run in batch;
(SETENV): _SASFILEPATH_ = /general/biostat/jobs/gadam_ongoing_studies/prod/programs/lsaf_get_last_sdtm.sas
(SETENV): path1 = /general/biostat/jobs/gadam_ongoing_studies/prod/programs/lsaf_get_last_sdtm.sas
(SETENV): _sasws_ = /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15
(SETENV): runenvironment = repository
MPRINT(SETENV):   *libname projmeta "&projectsmetapath" access=readonly;
MPRINT(SETENV):   data gen_setenv(keep=fname ver maxver);
MPRINT(SETENV):   length fref $8 dirname fname $400;
MPRINT(SETENV):   direxists = 0;
MPRINT(SETENV):   found = 0;
MPRINT(SETENV):   maxver = .;
MPRINT(SETENV):   
dirname="/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/macros
/_library";
MPRINT(SETENV):   rc=filename(fref, dirname);
MPRINT(SETENV):   did=dopen(fref);
MPRINT(SETENV):   if did > 0 then do;
MPRINT(SETENV):   direxists=1;
MPRINT(SETENV):   memcount=dnum(did);
MPRINT(SETENV):   do i = 1 to memcount;
MPRINT(SETENV):   fname=dread(did, i);
MPRINT(SETENV):   if prxmatch('/^setenv\d+\.sas$/', cats(fname)) then do;
MPRINT(SETENV):   found+1;
MPRINT(SETENV):   ver = input(prxchange('s/^setenv(\d+)\.sas$/\1/', 1, cats(fname)), best32.);
MPRINT(SETENV):   if ver > maxver then maxver = ver;
MPRINT(SETENV):   put "(SETENV):" found= fname= ver= rc= did= fref= dirname=;
MPRINT(SETENV):   output;
MPRINT(SETENV):   end;
MPRINT(SETENV):   *put "(&sysmacroname):" found= fname= ver= rc= did= fref= dirname=;
MPRINT(SETENV):   end;
MPRINT(SETENV):   rc=dclose(did);
MPRINT(SETENV):   end;
MPRINT(SETENV):   else do;
MPRINT(SETENV):   msg = put(sysmsg(), $400.);
MPRINT(SETENV):   put "Failed to open directory: " rc= did= fref= dirname= "sysmsg=" msg;
MPRINT(SETENV):   end;
MPRINT(SETENV):   rc=filename(fref);
MPRINT(SETENV):   run;

(SETENV):found=1 fname=setenv01.sas ver=1 rc=0 did=1 fref=#LN00016
dirname=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/macros/
                                                           The SAS System

_library
(SETENV):found=2 fname=setenv02.sas ver=2 rc=0 did=1 fref=#LN00016
dirname=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/macros/
_library
NOTE: The data set WORK.GEN_SETENV has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SETENV):   proc sql noprint;
MPRINT(SETENV):   select fname into :gen_setenv trimmed from gen_setenv having ver = max(ver) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(SETENV):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

gen_setenv = setenv02.sas
MPRINT(SETENV):   data repev_setenv(keep=fname ver maxver);
MPRINT(SETENV):   length fref frefsrc $8 setenv $32 d dirname fname msg $400;
MPRINT(SETENV):   direxists = 0;
MPRINT(SETENV):   found = 0;
MPRINT(SETENV):   maxver = .;
MPRINT(SETENV):   do 
d="/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_o
ngoing_studies/prod/macros/global_macros", 
"/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ong
oing_studies/prod/macros/global-macros" while(direxists=0);
MPRINT(SETENV):   put d=;
MPRINT(SETENV):   rc=filename(fref, d);
MPRINT(SETENV):   did=dopen(fref);
MPRINT(SETENV):   if did > 0 then do;
MPRINT(SETENV):   direxists=1;
MPRINT(SETENV):   dirname=d;
MPRINT(SETENV):   memcount=dnum(did);
MPRINT(SETENV):   do i = 1 to memcount;
MPRINT(SETENV):   fname=dread(did, i);
MPRINT(SETENV):   if prxmatch('/^setenv\d+\.sas$/', cats(fname)) then do;
MPRINT(SETENV):   found+1;
MPRINT(SETENV):   ver = input(prxchange('s/^setenv(\d+)\.sas$/\1/', 1, cats(fname)), best32.);
MPRINT(SETENV):   if ver > maxver then do;
MPRINT(SETENV):   maxver = ver;
MPRINT(SETENV):   setenv = fname;
MPRINT(SETENV):   end;
MPRINT(SETENV):   put "(SETENV):" found= fname= ver= rc= did= fref= dirname=;
MPRINT(SETENV):   output;
MPRINT(SETENV):   end;
MPRINT(SETENV):   *put "(&sysmacroname):" found= fname= ver= rc= did= fref= dirname=;
MPRINT(SETENV):   end;
MPRINT(SETENV):   rc=dclose(did);
MPRINT(SETENV):   end;
MPRINT(SETENV):   else do;
MPRINT(SETENV):   put "Failed to open directory: " rc= did= fref= dirname=;
MPRINT(SETENV):   end;
MPRINT(SETENV):   rc=filename(fref);
MPRINT(SETENV):   end;
                                                           The SAS System

MPRINT(SETENV):   if direxists=0 then do;
MPRINT(SETENV):   *- JMBodart 2021-10-13 - create macros folder if it does not exist (START) -*;
MPRINT(SETENV):   rc=filename(fref, 
"/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ong
oing_studies/prod/macros");
MPRINT(SETENV):   did=dopen(fref);
MPRINT(SETENV):   if did > 0 then do;
MPRINT(SETENV):   rc=dclose(did);
MPRINT(SETENV):   end;
MPRINT(SETENV):   else do;
MPRINT(SETENV):   dirname = dcreate("macros", 
"/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ong
oing_studies/prod/");
MPRINT(SETENV):   dirname = ' ';
MPRINT(SETENV):   end;
MPRINT(SETENV):   rc=filename(fref);
MPRINT(SETENV):   *- JMBodart 2021-10-13 - create macros folder if it does not exist (END) -*;
MPRINT(SETENV):   dirname=dcreate("global_macros", 
"/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ong
oing_studies/prod/macros");
MPRINT(SETENV):   if dirname ^= ' ' then do;
MPRINT(SETENV):   rc=filename(fref, dirname);
MPRINT(SETENV):   did=dopen(fref);
MPRINT(SETENV):   if did > 0 then do;
MPRINT(SETENV):   direxists=1;
MPRINT(SETENV):   rc=dclose(did);
MPRINT(SETENV):   end;
MPRINT(SETENV):   rc=filename(fref);
MPRINT(SETENV):   end;
MPRINT(SETENV):   end;
MPRINT(SETENV):   put dirname= direxists=;
MPRINT(SETENV):   if direxists then do;
MPRINT(SETENV):   call execute("option insert=(sasautos="||quote(cats(dirname))||");");
MPRINT(SETENV):   if found = 0 then do;
MPRINT(SETENV):   cumrc = 0;
MPRINT(SETENV):   rc=filename(frefsrc, 
"/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/macros/_librar
y/setenv02.sas");
MPRINT(SETENV):   if rc ne 0 then do;
MPRINT(SETENV):   msg = sysmsg();
MPRINT(SETENV):   put msg;
MPRINT(SETENV):   cumrc=rc;
MPRINT(SETENV):   end;
MPRINT(SETENV):   rc=filename(fref, cats(dirname, "/setenv02.sas"));
MPRINT(SETENV):   if rc ne 0 then do;
MPRINT(SETENV):   msg = sysmsg();
MPRINT(SETENV):   put msg;
MPRINT(SETENV):   cumrc=rc;
MPRINT(SETENV):   end;
MPRINT(SETENV):   if cumrc = 0 then do;
MPRINT(SETENV):   put "Copying  
""/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/macros/_libra
ry/setenv02.sas"" to" dirname $quote. ;
MPRINT(SETENV):   rc = fcopy(frefsrc, fref);
MPRINT(SETENV):   if rc ne 0 then do;
MPRINT(SETENV):   put "Failed.";
MPRINT(SETENV):   msg = sysmsg();
MPRINT(SETENV):   put msg;
                                                           The SAS System

MPRINT(SETENV):   cumrc=rc;
MPRINT(SETENV):   end;
MPRINT(SETENV):   else put "Success.";
MPRINT(SETENV):   end;
MPRINT(SETENV):   rc=filename(frefsrc);
MPRINT(SETENV):   rc=filename(fref);
MPRINT(SETENV):   if cumrc = 0 then setenv = "setenv02.sas";
MPRINT(SETENV):   end;
MPRINT(SETENV):   end;
MPRINT(SETENV):   call symput("setenv", cats(setenv));
MPRINT(SETENV):   put setenv=;
MPRINT(SETENV):   run;

d=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_on
going_studies/prod/macros/global_macros
(SETENV):found=1 fname=setenv02.sas ver=2 rc=0 did=1 fref=#LN00017
dirname=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/ga
dam_ongoing_studies/prod/macros/global_macros
dirname=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/ga
dam_ongoing_studies/prod/macros/global_macros direxists=1
MPRINT(SETENV):   option 
insert=(sasautos="/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biost
at/jobs/gadam_ongoing_studies/prod/macros/global_macros");
setenv=setenv02.sas
NOTE: The data set WORK.REPEV_SETENV has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: CALL EXECUTE generated line.
1         + option 
insert=(sasautos="/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biost
at/jobs/gadam_ongoing_studies/prod/macros/global_macros");
setenv=setenv02.sas
(SETENV): Calling %setenv02(ini=0, tabno=, default_debug=1)
MAUTOCOMPLOC:  The autocall macro SETENV02 is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/job
            s/gadam_ongoing_studies/prod/macros/global_macros/setenv02.sas.
MPRINT(SETENV.SETENV02):   options mprint nofmterr spool nodate nonumber MAUTOCOMPLOC NOMAUTOLOCDISPLAY;
MPRINT(SETENV.SETENV02):   *- Clean previously compiled macros from WORK.SASMAC* -*;
MPRINT(SETENV.SETENV02):   data _NULL_;
MPRINT(SETENV.SETENV02):   length save $500;
MPRINT(SETENV.SETENV02):   retain save;
MPRINT(SETENV.SETENV02):   set sashelp.vcatalg(where=(libname="WORK" and memname=:'SASMAC' and objtype="MACRO")) end=last;
MPRINT(SETENV.SETENV02):   by memname notsorted;
MPRINT(SETENV.SETENV02):   if first.memname then do;
MPRINT(SETENV.SETENV02):   if index(" "||save, " "||strip(memname)||".") eq 0 then save = catx(" ", save, 
strip(memname)||"."||objname);
MPRINT(SETENV.SETENV02):   end;
MPRINT(SETENV.SETENV02):   if last;
MPRINT(SETENV.SETENV02):   call symputx('save_macr', save);
MPRINT(SETENV.SETENV02):   run;

NOTE: There were 2 observations read from the data set SASHELP.VCATALG.
      WHERE (libname='WORK') and (memname=:'SASMAC') and (objtype='MACRO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
                                                           The SAS System

      cpu time            0.01 seconds
      

save_macr = SASMAC1.SETENV
MPRINT(SETENV.SETENV02):   proc catalog catalog=work.SASMAC1 force;
MPRINT(SETENV.SETENV02):   *save &sysmacroname /et=macro;
MPRINT(SETENV.SETENV02):   save SETENV SETENV02 /et=macro;
MPRINT(SETENV.SETENV02):   run;

NOTE: Saving entry SETENV.MACRO in catalog WORK.SASMAC1.
NOTE: Saving entry SETENV02.MACRO in catalog WORK.SASMAC1.
MPRINT(SETENV.SETENV02):   quit;

NOTE: PROCEDURE CATALOG used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(SETENV.SETENV02):   *- Clear filenames and delete previous scaprocrecord.txt (J-M Bodart 2021-03-25) -*;
MPRINT(SETENV.SETENV02):   filename _all_ clear;
MPRINT(SETENV.SETENV02):   * in case run in batch;
(SETENV02): _SASFILEPATH_ = /general/biostat/jobs/gadam_ongoing_studies/prod/programs/lsaf_get_last_sdtm.sas
(SETENV02): path1 = /general/biostat/jobs/gadam_ongoing_studies/prod/programs/lsaf_get_last_sdtm.sas
(SETENV02): _sasws_ = /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15
(SETENV02): runenvironment = repository
MPRINT(SETENV.SETENV02):   libname projmeta 
"/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/metadata/proje
cts/" access=readonly;
NOTE: Libref PROJMETA was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: 
      /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/metadata/
      projects
runenvironment=repository
progpath=/general/biostat/jobs/gadam_ongoing_studies/prod/programs/
repevpath=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/
gadam_ongoing_studies/prod/
relrepevpath=/general/biostat/jobs/gadam_ongoing_studies/prod/
progname=lsaf_get_last_sdtm.sas
pgmname=lsaf_get_last_sdtm
general=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/
debug=1
compound=biostat
indication=jobs
study=gadam_ongoing_studies
revent=
NOTE: %INCLUDE (level 1) file 
      /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/macros/_l
      ibrary/setsasautos.sas is file 
      /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/macros/_l
      ibrary/setsasautos.sas.
160       +/**
161       +@file
162       +@author     Martijn Busselen
163       +@date       2020-11-23
164       +@brief      set the macro sasautos so it uses first the maros defined on reporting event level and secondly those from
164      !+the global level
165       +
                                                           The SAS System

166       +@pre        Need to run %setenv
167       +
168       +#### Update History ####
169       +
170       +      Date           Name                       Description
171       +      ------------   ------------------------
171      !+-----------------------------------------------------------------------------
172       +      2021-07-21     S Shipp                    Update for global_macros folder.
173       +      2022-02-27     J-M Bodart                 Include /general/gadam/_library when last level of &repevpath =
173      !+generic_adam.
174       +      2022-03-01     J-M Bodart                 Add \ as delimiter in %scan(&repevpath, -1, /\) as it is not part of
174      !+default delimiters
175       +                                                (needed when run locally on Windows).
176       +      2022-06-30     J-M Bodart                 Add gsdtm/_library.
177       +      2022-12-07     J-M Bodart                 Add user workspace macros to SASAUTOS for development purposes, if
177      !+applicable.
178       +      2022-12-08     J-M Bodart                 Increase l3 size to avoid truncations.
179       +                                                Only add workspace macros to SASAUTOS if environment variable
179      !+USE_SAS_WORKSPACE_MACROS
180       +                                                is defined as Y, or global macro-variable &USE_SAS_WORKSPACE_MACROS=Y.
181       +      2022-12-11     J-M Bodart                 Fix regex !^/general/biostat/jobs/(gadam|gsdtm)_\w+/dev(/|$)!.
182       +      2023-02-09     J-M Bodart                 Issue a Notice: (instead of War-ning:) message when adding WORKSPACE
182      !+paths to SASAUTOS
183       +                                                for development purposes.
184       +
185       +
186       +#### Examples ####
187       +@code
188       +   option mautosource mcompilenote=all;
189       +   %setSasAutos();
190       +@endcode
191       +**/
192       +
193       +%macro setSasAutos();
194       +   %local firstset last3 nb_dirs user_workspace_macros;
195       +   %let firstset = 1;
196       +   %if %symexist(runenvironment)=0 %then %local runenvironment;
197       +
198       +   %*- Determine if WORKSPACE macros should be used (in case available) -*;
199       +   %if %symexist(USE_SAS_WORKSPACE_MACROS)=0 %then %do;
200       +      %global USE_SAS_WORKSPACE_MACROS;
201       +   %end;
202       +   %if %sysfunc(sysexist(USE_SAS_WORKSPACE_MACROS)) %then %do;
203       +      %let USE_SAS_WORKSPACE_MACROS = %sysget(USE_SAS_WORKSPACE_MACROS);
204       +   %end;
205       +   %if %sysfunc(sysexist(USE_SAS_WORKSPACE_MACROS))=0 and %qsysfunc(upcase(%superq(USE_SAS_WORKSPACE_MACROS)), $1.)=Y
205      !+%then %do;
206       +      *- Set environment variable -*;
207       +      option set=USE_SAS_WORKSPACE_MACROS "Y";  /*- to unset environment variable use: option
207      !+set=USE_SAS_WORKSPACE_MACROS ""; -*/
208       +   %end;
209       +   %put &=USE_SAS_WORKSPACE_MACROS;
210       +   %put %str(Not)ice: Environment variable USE_SAS_WORKSPACE_MACROS is
210      !+%sysfunc(ifc(%sysfunc(sysexist(USE_SAS_WORKSPACE_MACROS)), DEFINED, NOT DEFINED)).;
211       +
212       +   /*in LSAF there are 3 default directories in sasautos and these need to be kept*/
213       +   %if &runenvironment=repository or &runenvironment=workspace %then %do;
214       +      data _null_;
                                                           The SAS System

215       +         length a b c dirs l3 $4000;  /*- jbodart - 2022-12-08 - increase l3 size to avoid truncations -*/
216       +         a= strip(getoption("sasautos"));
217       +         put a=;
218       +         len = length(a);
219       +         nobrack = substr(a,2,len-2);
220       +         b = tranwrd(nobrack,'"',"");
221       +         c = compbl(strip(tranwrd(b,"'","")));
222       +         e = countw(c," ");
223       +         call symputx("nb_dirs",strip(put(e,8.)));
224       +         do i = 1 to e;
225       +            last3 = (e-i<3);
226       +            dirs = scan(c,i," ");
227       +            output;
228       +            if last3 then l3 = strip(l3)||' "'||strip(dirs)||'"';
229       +            if e then call symputx ('last3',strip(l3));
230       +         end;
231       +      run;
232       +      %put nb sasautos dirs = &nb_dirs;
233       +      %put last3 = &last3;
234       +   %end;
235       +   %if ( %sysfunc(fileexist(&general.macros&sepchar._library&sepchar)) or %sysfunc(fileexist(&repevpath.macros&sepchar))
235      !+) %then %do;
236       +      %if %sysfunc(fileexist(&repevpath.macros&sepchar)) %then %do;
237       +
238       +         %let gmdfolder=%sysfunc(fileexist(&repevpath.macros&sepchar.global-macros));
239       +         %let gmufolder=%sysfunc(fileexist(&repevpath.macros&sepchar.global_macros));
240       +
241       +         %put &=gmdfolder;
242       +         %put &=gmufolder;
243       +
244       +         options dlcreatedir;
245       +         %if &gmdfolder=1 %then %do;
246       +            libname globmac ("&repevpath.macros&sepchar.global-macros");
247       +         %end;
248       +         %else %do;
249       +            libname globmac ("&repevpath.macros&sepchar.global_macros");
250       +         %end;
251       +      %end;
252       +
253       +      %*- 2022-12-07 - jbodart - Add user workspace macros to SASAUTOS for development purposes, if applicable -*;
254       +      %let user_workspace_macros = ;
255       +
256       +      %if &runenvironment=repository and %symexist(_SDDUSR_) %then %do;
257       +
258       +         %if ("&revent"="generic_adam" or "%scan(&repevpath, -1, /\)"="generic_adam")
259       +            and %sysfunc(prxmatch(!^/clinical/test/gadam-tests/!, %superq(relrepevpath)))
260       +            and %sysfunc(fileexist(/lsafshared/SASWorkspaces/&_SDDUSR_/general/biostat/gadam/_library/%str(*).sas))
261       +            and %qsysfunc(upcase(%superq(USE_SAS_WORKSPACE_MACROS)), $1.)=Y
262       +            %then %let user_workspace_macros = &user_workspace_macros
262      !+"/lsafshared/SASWorkspaces/&_SDDUSR_/general/biostat/gadam/_library";
263       +
264       +         %else %if ("&revent"="generic_sdtm" or "%scan(&repevpath, -1, /\)"="generic_sdtm")
265       +            and %sysfunc(prxmatch(!^/clinical/test/gsdtm-tests/!, %superq(relrepevpath)))
266       +            and %sysfunc(fileexist(/lsafshared/SASWorkspaces/&_SDDUSR_/general/biostat/gsdtm/_library/%str(*).sas))
267       +            and %qsysfunc(upcase(%superq(USE_SAS_WORKSPACE_MACROS)), $1.)=Y
268       +            %then %let user_workspace_macros = &user_workspace_macros
268      !+"/lsafshared/SASWorkspaces/&_SDDUSR_/general/biostat/gsdtm/_library";
269       +
                                                           The SAS System

270       +         %if (    "&revent"="generic_adam" or "%scan(&repevpath, -1, /\)"="generic_adam"
271       +               or "&revent"="generic_sdtm" or "%scan(&repevpath, -1, /\)"="generic_sdtm"
272       +               or %sysfunc(prxmatch(!^/general/biostat/jobs/(gadam|gsdtm)_\w+/dev(/|$)!, %superq(relrepevpath)))
273       +               )
274       +            and %sysfunc(fileexist(/lsafshared/SASWorkspaces/&_SDDUSR_/general/biostat/macros/_library/%str(*).sas))
275       +            and %qsysfunc(upcase(%superq(USE_SAS_WORKSPACE_MACROS)), $1.)=Y
276       +            %then %let user_workspace_macros = &user_workspace_macros
276      !+"/lsafshared/SASWorkspaces/&_SDDUSR_/general/biostat/macros/_library";
277       +
278       +         %if %length(%superq(user_workspace_macros)) %then %do;
279       +            %put %str(Not)ice: === Adding WORKSPACE paths to SASAUTOS for development purposes, please check macros
279      !+versions in your workspace: === ;
280       +            %put %str(   )&user_workspace_macros;
281       +            %put;
282       +         %end;
283       +
284       +         %put &=runenvironment &=_SDDUSR_ &=relrepevpath &=user_workspace_macros;
285       +
286       +      %end;
287       +
288       +      %*- Use autocall to compile any macro in Macros subfolder on demand -*;
289       +      options mautosource sasautos = (
290       +            %if %sysfunc(fileexist(&repevpath.macros&sepchar))                         %then "&repevpath.macros";
291       +                                                                                             &user_workspace_macros
292       +            %if "&revent"="generic_adam" or "%scan(&repevpath, -1, /\)"="generic_adam" %then
292      !+"&general.gadam&sepchar._library";
293       +            %if "&revent"="generic_sdtm" or "%scan(&repevpath, -1, /\)"="generic_sdtm" %then
293      !+"&general.gsdtm&sepchar._library";  /*- jbodart 2022-06-30 -*/
294       +            %if %sysfunc(fileexist(&repevpath.macros&sepchar.global-macros))           %then
294      !+"&repevpath.macros&sepchar.global-macros";
295       +            %if %sysfunc(fileexist(&repevpath.macros&sepchar.global_macros))           %then
295      !+"&repevpath.macros&sepchar.global_macros";
296       +            %if %sysfunc(fileexist(&general.macros&sepchar._library&sepchar))          %then
296      !+"&general.macros&sepchar._library" ;
297       +            %if &runenvironment=local or &runenvironment=batch or %length(%superq(runenvironment))=0
298       +                                                                                       %then sasautos;
299       +                                                                                       %else &last3;
300       +            ) MRECALL=YES;
301       +   %end;
302       +   %let sa = %sysfunc(getoption(sasautos));
303       +   %put sa=&sa;
304       +%mend setSasAutos;
NOTE: %INCLUDE (level 1) ending.
USE_SAS_WORKSPACE_MACROS=
Notice: Environment variable USE_SAS_WORKSPACE_MACROS is NOT DEFINED.
MPRINT(SETENV.SETENV02.SETSASAUTOS):   data _null_;
MPRINT(SETENV.SETENV02.SETSASAUTOS):   length a b c dirs l3 $4000;
MPRINT(SETENV.SETENV02.SETSASAUTOS):   a= strip(getoption("sasautos"));
MPRINT(SETENV.SETENV02.SETSASAUTOS):   put a=;
MPRINT(SETENV.SETENV02.SETSASAUTOS):   len = length(a);
MPRINT(SETENV.SETENV02.SETSASAUTOS):   nobrack = substr(a,2,len-2);
MPRINT(SETENV.SETENV02.SETSASAUTOS):   b = tranwrd(nobrack,'"',"");
MPRINT(SETENV.SETENV02.SETSASAUTOS):   c = compbl(strip(tranwrd(b,"'","")));
MPRINT(SETENV.SETENV02.SETSASAUTOS):   e = countw(c," ");
MPRINT(SETENV.SETENV02.SETSASAUTOS):   call symputx("nb_dirs",strip(put(e,8.)));
MPRINT(SETENV.SETENV02.SETSASAUTOS):   do i = 1 to e;
MPRINT(SETENV.SETENV02.SETSASAUTOS):   last3 = (e-i<3);
MPRINT(SETENV.SETENV02.SETSASAUTOS):   dirs = scan(c,i," ");
                                                           The SAS System

MPRINT(SETENV.SETENV02.SETSASAUTOS):   output;
MPRINT(SETENV.SETENV02.SETSASAUTOS):   if last3 then l3 = strip(l3)||' "'||strip(dirs)||'"';
MPRINT(SETENV.SETENV02.SETSASAUTOS):   if e then call symputx ('last3',strip(l3));
MPRINT(SETENV.SETENV02.SETSASAUTOS):   end;
MPRINT(SETENV.SETENV02.SETSASAUTOS):   run;

a=('/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_
ongoing_studies/prod/macros/global_macros' "SASEnvironment/SASMacro" '!SASROOT/sasautos' "/sso/sfw/sas/940/SASFoundation/9.4/lsafapi
/lsaf-sas-macro-2.6.1/sasmacros" "/lsafshared/SASWorkspaces/global_macros")
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

nb sasautos dirs = 5
last3 = "!SASROOT/sasautos" "/sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.6.1/sasmacros" 
"/lsafshared/SASWorkspaces/global_macros"
GMDFOLDER=0
GMUFOLDER=1
MPRINT(SETENV.SETENV02.SETSASAUTOS):   options dlcreatedir;
MPRINT(SETENV.SETENV02.SETSASAUTOS):   libname globmac 
("/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_on
going_studies/prod/macros/global_macros");
NOTE: Libref GLOBMAC was successfully assigned as follows: 
      Levels:           1
      Engine(1):        V9 
      Physical Name(1): 
      /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gada
      m_ongoing_studies/prod/macros/global_macros
RUNENVIRONMENT=repository _SDDUSR_=jbodart RELREPEVPATH=/general/biostat/jobs/gadam_ongoing_studies/prod/ USER_WORKSPACE_MACROS=
MPRINT(SETENV.SETENV02.SETSASAUTOS):   options mautosource sasautos = ( 
"/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ong
oing_studies/prod/macros" 
"/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ong
oing_studies/prod/macros/global_macros" 
"/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/macros/_librar
y" "!SASROOT/sasautos" "/sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.6.1/sasmacros" 
"/lsafshared/SASWorkspaces/global_macros" ) MRECALL=YES;
sa=("/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam
_ongoing_studies/prod/macros"                                                                                               
"/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ong
oing_studies/prod/macros/global_macros" 
"/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/macros/_librar
y" "!SASROOT/sasautos" "/sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.6.1/sasmacros" 
"/lsafshared/SASWorkspaces/global_macros")
MPRINT(SETENV.SETENV02):  ;
MPRINT(SETENV.SETENV02):  ;
MPRINT(SETENV.SETENV02):  ;
MAUTOCOMPLOC:  The autocall macro GET_JOB_PROG_INFO is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/mac
            ros/_library/get_job_prog_info.sas.
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   data _null_;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   infile 
"/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ong
oing_studies/prod/jobs/job_lsaf_get_last_sdtm.job";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   input;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   *put _infile_;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   length progversion $32;
                                                           The SAS System

MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   if prxmatch("/^.*<inputSpec 
path=[""'][^<>""']*\/programs\/lsaf_get_last_sdtm.sas[""'][^<>]* version=[""'][\*\d\.]+[""'][^<>]*\/>.*$/", _infile_) then do;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   progversion = prxchange("s/^.*<inputSpec 
path=[""'][^<>""']*\/programs\/lsaf_get_last_sdtm.sas[""'][^<>]* version=[""']([\*\d\.]+)[""'][^<>]*\/>.*$/\1/", 1, _infile_);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   put progversion=;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   call symputx('jobprogversion', progversion);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   end;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   run;

NOTE: The infile 
      "/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gad
      am_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job" is:
      
      Filename=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/
      jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job,
      Owner Name=webtrust,Group Name=webtrust,
      Access Permission=-rw-rw-rw-,
      Last Modified=19Dec2022:11:44:29,
      File Size (bytes)=6674

NOTE: 64 records were read from the infile 
      "/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gad
      am_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job".
      The minimum record length was 6.
      The maximum record length was 481.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MAUTOCOMPLOC:  The autocall macro LSAF_GET_VERSION is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/mac
            ros/_library/lsaf_get_version.sas.
MAUTOCOMPLOC:  The autocall macro LOCAL_LSAF is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/mac
            ros/_library/local_lsaf.sas.
MAUTOCOMPLOC:  The autocall macro LSAF_GETPROPERTIES is compiling using the autocall source file 
            /sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.6.1/sasmacros/lsaf_getproperties.sas.
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   *;
MAUTOCOMPLOC:  The autocall macro LSAF_GETPRODUCTNAME is compiling using the autocall source file 
            /sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.6.1/sasmacros/lsaf_getproductname.sas.
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):  ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   data work.lsafGetProperties (label="Created by 
LSAF_GETPROPERTIES" KEEP=path name displayName value type isReadonly isExtended);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   attrib returnCode length=8 message length=$200 
logMsgPrefix length=$70 logMsgPrimary length=$70 logMsg length=$300 rowCount length=8 path length=$2048 label="Item Path" name 
length=$256 label="Property Name" displayName length=$256 label="Property Display Name" value length=$2048 label="Property Value" 
type length=$32 label="Property Type" isReadonly length=8 label="Property value is not modifiable." isExtended length=8 
label="Property is an Extended Attribute" ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   rowCount=0;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   declare javaobj 
srv("com/sas/lsaf/macro/content/repository/RepositoryService") ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   declare javaobj 
results("com/sas/lsaf/macro/content/repository/SasRepositoryItemPropertiesResult");
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   srv.callStaticVoidMethod("getProperties", 
"/general/biostat/jobs/gadam_ongoing_studies/prod/programs/lsaf_get_last_sdtm.sas", "", results);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   results.callStringMethod("getReturnMessage", 
                                                           The SAS System

message);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   logMsgPrefix="NOTE: SAS Life Science Analytics 
Framework Macro: * ";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   if (returnCode ne 0) then do;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   logMsgPrimary="ERROR: SAS Life Science Analytics 
Framework Macro:";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   logMsg=" Cannot retrieve list of properties for 
/general/biostat/jobs/gadam_ongoing_studies/prod/programs/lsaf_get_last_sdtm.sas" ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   end;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   else do;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   logMsgPrimary=logMsgPrefix;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   logMsg=" List of properties were returned for 
/general/biostat/jobs/gadam_ongoing_studies/prod/programs/lsaf_get_last_sdtm.sas" ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   results.callIntMethod("getSize", rowCount);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   do row=0 to rowCount - 1;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   
path="/general/biostat/jobs/gadam_ongoing_studies/prod/programs/lsaf_get_last_sdtm.sas";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   results.callStringMethod("getPropertyName", row, 
name);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   results.callStringMethod("getPropertyValue", row, 
value);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   results.callStringMethod("getPropertyDisplayName", 
row, displayName);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   
results.callStringMethod("getPropertyAttributeType", row, type);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   results.callBooleanMethod("getPropertyIsReadOnly", 
row, isReadonly);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   results.callBooleanMethod("getPropertyIsExtended", 
row, isExtended);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   output;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   end;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   end;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   put;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   put logMsgPrimary " " logMsg;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   put logMsgPrefix " " "lsaf_getproperties";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   if (rowCount=0) then put logMsgPrefix " No 
properties were retrieved.";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   else put logMsgPrefix " " rowCount " records 
written to data set work.lsafGetProperties";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   put;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   call symputx("_lsafRC_", returnCode);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   call symputx("_lsafMsg_", message);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   call symputx("_lsafRowCount_", rowCount);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   run;


NOTE: SAS Life Science Analytics Framework Macro: *  
List of properties were returned for /general/biostat/jobs/gadam_ongoing_studies/prod/programs/lsaf_get_last_sdtm.sas
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_getproperties
NOTE: SAS Life Science Analytics Framework Macro: *  21  records written to data set work.lsafGetProperties
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: The data set WORK.LSAFGETPROPERTIES has 21 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           1.29 seconds
      cpu time            0.01 seconds
                                                           The SAS System

      

MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   options nonotes;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   proc sort data=work.lsafGetProperties 
sortseq=linguistic(strength=primary);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   by name;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   run;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   options NOTES;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION):  ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION):   data _null_;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION):   set lsafGetProperties(where=(name='version'));
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION):   call symputx(symget('into'), coalescec(cats(value), '-'), 'G');
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION):   run;

NOTE: There were 1 observations read from the data set WORK.LSAFGETPROPERTIES.
      WHERE name='version';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):  ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   *-2023-01-24 - jbodart - retrieve dateSubmitted lsafJobSubmissionId sessionId location 
jobPath jobVersion from &_PARENTJOB_WRK_/submitted_jobs.txt (if available) -*;
MAUTOCOMPLOC:  The autocall macro SHELLCOMMAND is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/mac
            ros/_library/shellcommand.sas.
%SHELLCOMMAND(cat  submitted_jobs.txt, 
path=/saswork/sas_tmp/SAS_work89DD00193DB6_xar08auv.vsp.sas.com/SAS_work944F00193DB6_xar08auv.vsp.sas.com, resultvar=result, dsin=, 
dsout=submitted_jobs(drop=result), print=Y, linenum=N, cond=1, for_each_do=line = __line ; output  ;, otherwise_do=, into=);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):   *- The following 3 macros definitions are adpated from SAS Support / 
Samples and Notes: Sample 38518: Dynamically setting the CLASSPATH for use in a DATA step that uses the Java object component 
available at https://support.sas.com/kb/38/518.html 
--------------------------------------------------------------------------------------------------------------*;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.INIT_CLASSPATH_UPDATE):   DATA _null_;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.INIT_CLASSPATH_UPDATE):   LENGTH path_separator $ 2 orig_classpath $ 500;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.INIT_CLASSPATH_UPDATE):   DECLARE JavaObj f("java.io.File", "");
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.INIT_CLASSPATH_UPDATE):   f.getStaticStringField("pathSeparator", 
path_separator);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.INIT_CLASSPATH_UPDATE):   orig_classpath = STRIP(SYSGET("CLASSPATH"));
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.INIT_CLASSPATH_UPDATE):   IF _ERROR_ = 1 OR LENGTH(orig_classpath) = 0 THEN 
DO;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.INIT_CLASSPATH_UPDATE):   PUT "NOTE: Ignore any messages from the next 
statement(s)";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.INIT_CLASSPATH_UPDATE):   orig_classpath = "";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.INIT_CLASSPATH_UPDATE):   END;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.INIT_CLASSPATH_UPDATE):   if orig_classpath = "" then CALL 
SYMPUT('CP_orig_classpath', SYSGET("CLASSPATH"));
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.INIT_CLASSPATH_UPDATE):   else CALL SYMPUT('CP_orig_classpath', 
STRIP(orig_classpath));
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.INIT_CLASSPATH_UPDATE):   CALL SYMPUT('CP_path_separator', 
COMPRESS(path_separator));
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.INIT_CLASSPATH_UPDATE):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      
                                                           The SAS System


MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):  ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.ADD_TO_CLASSPATH):   DATA _null_;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.ADD_TO_CLASSPATH):   LENGTH current_classpath $ 500 new_classpath $ 500;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.ADD_TO_CLASSPATH):   current_classpath = STRIP(SYSGET("CLASSPATH"));
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.ADD_TO_CLASSPATH):   IF _ERROR_ = 1 OR LENGTH(current_classpath) = 0 THEN DO;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.ADD_TO_CLASSPATH):   PUT "NOTE: Ignore any messages from the nearby 
statement(s)";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.ADD_TO_CLASSPATH):   new_classpath = 
"/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/macros/_librar
y/shellcommand.0.0.1.jar";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.ADD_TO_CLASSPATH):   END;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.ADD_TO_CLASSPATH):   ELSE DO;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.ADD_TO_CLASSPATH):   new_classpath = COMPRESS(current_classpath) || ":" || 
"/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/macros/_librar
y/shellcommand.0.0.1.jar";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.ADD_TO_CLASSPATH):   END;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.ADD_TO_CLASSPATH):   CALL SYMPUT('CP_new_classpath', STRIP(new_classpath));
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.ADD_TO_CLASSPATH):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: Setting Java classpath to 
!CLASSPATH:/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/macr
os/_library/shellcommand.0.0.1.jar
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.ADD_TO_CLASSPATH):   OPTIONS SET=CLASSPATH 
"!CLASSPATH:/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/mac
ros/_library/shellcommand.0.0.1.jar";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):  ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):   data submitted_jobs(drop=result);
MAUTOCOMPLOC:  The autocall macro DIREXIST is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/mac
            ros/_library/direxist.sas.
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):   declare javaobj shellcommand("shellCommand/ShellCommand");
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):   result = put(" ", $32000.);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):   if 1 then do;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):   shellcommand.callStaticStringMethod("commandStr", strip('cat  
submitted_jobs.txt'), cats("/saswork/sas_tmp/SAS_work89DD00193DB6_xar08auv.vsp.sas.com/SAS_work944F00193DB6_xar08auv.vsp.sas.com"), 
result);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):   do __i = 1 to countw(result, "0A0D"x);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):   __line = put(scan(result, __i, "0A0D"x), $char500.);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):   __linelen = length(__line);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):   line = __line ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):   output ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):  ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):   putlog __line $varying. __linelen;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):   end;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):   drop __i __line __linelen;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):   end;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):   run;

dateSubmitted             | lsafJobSubmissionId                  | sessionId                            | location   | jobPath [ job
Version ]
2023-02-14T23:49:06+00:00 | cb37e48a-71d9-49b3-aa7c-9459a08c0b82 | 20fe99f9-5ea5-43ef-be12-0b0a0ccaf5a8 | REPOSITORY | /general/bios
tat/jobs/gadam_ongoing_studies/prod/jobs/job_studies_status.job [  ]
                                                           The SAS System

2023-02-14T23:49:16+00:00 | 4b878872-2fe9-4ec3-b9f8-02e2e7b895ce | d9df0b5b-3bee-4fbd-9daf-9e2affb9497d | REPOSITORY | /general/bios
tat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_sdtm_key_core_vars.job [  ]
2023-02-14T23:49:25+00:00 | 55fe1570-2db1-4163-9277-0dad3fc08630 | f685b710-5b41-4fa9-bbe9-944391e71266 | REPOSITORY | /general/bios
tat/jobs/gadam_ongoing_studies/prod/jobs/job_unzip_sdtm_sources.job [  ]
2023-02-14T23:51:41+00:00 | feed1f0f-2d9a-42b9-8060-8fddd1e47337 | 4724796d-7de6-4aed-81d4-34fc18efa8d7 | REPOSITORY | /general/bios
tat/jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job [  ]
path: /saswork/sas_tmp/SAS_work89DD00193DB6_xar08auv.vsp.sas.com/SAS_work944F00193DB6_xar08auv.vsp.sas.com
command: [sh, -c, cat  submitted_jobs.txt]
NOTE: The data set WORK.SUBMITTED_JOBS has 6 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.02 seconds
      

NOTE: Setting Java classpath back to its original state: !CLASSPATH
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.RESET_CLASSPATH):   OPTIONS SET=CLASSPATH "!CLASSPATH";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):  ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):  ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   data submitted_jobs;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   set submitted_jobs;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   if _n_=1 then do;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   call symputx('submJobVars', compbl(translate(line, " ", "|[]")));
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   delete;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   end;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   if line ^= ' ';
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   run;

NOTE: There were 6 observations read from the data set WORK.SUBMITTED_JOBS.
NOTE: The data set WORK.SUBMITTED_JOBS has 4 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Read SUBMJOBVARS=dateSubmitted lsafJobSubmissionId sessionId location jobPath jobVersion
MAUTOCOMPLOC:  The autocall macro VARLIST is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/mac
            ros/_library/varlist.sas.
Keeping only expected vars: EXPECTED_SUBMJOBVARS=dateSubmitted lsafJobSubmissionId sessionId location jobPath jobVersion
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   data submitted_jobs;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   set submitted_jobs end=last;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   length dateSubmitted $32 lsafJobSubmissionId sessionId $64 location $32 jobPath 
$1024 jobVersion $20;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   DATESUBMITTED = strip(scan(line, 1, "|[]"));
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   LSAFJOBSUBMISSIONID = strip(scan(line, 2, "|[]"));
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   SESSIONID = strip(scan(line, 3, "|[]"));
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   LOCATION = strip(scan(line, 4, "|[]"));
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   JOBPATH = strip(scan(line, 5, "|[]"));
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   JOBVERSION = strip(scan(line, 6, "|[]"));
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   if scan(jobpath, -1, "/\") = "job_lsaf_get_last_sdtm.job";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   jobVersion = coalescec(jobVersion, '-');
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   put (dateSubmitted lsafJobSubmissionId sessionId location jobPath jobVersion) (=);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   array _jobinfo $ dateSubmitted lsafJobSubmissionId sessionId location jobPath 
jobVersion;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   drop i;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   if lsafJobSubmissionId ^= ' ' then do;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   do i = 1 to dim(_jobinfo);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   call symputx(vname(_jobinfo[i]), trim(_jobinfo[i]), "G");
                                                           The SAS System

MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   end;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   end;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   run;

dateSubmitted=2023-02-14T23:51:41+00:00 lsafJobSubmissionId=feed1f0f-2d9a-42b9-8060-8fddd1e47337
sessionId=4724796d-7de6-4aed-81d4-34fc18efa8d7 location=REPOSITORY
jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job jobVersion=-
NOTE: There were 4 observations read from the data set WORK.SUBMITTED_JOBS.
NOTE: The data set WORK.SUBMITTED_JOBS has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):  ;
DATESUBMITTED=2023-02-14T23:51:41+00:00  LSAFJOBSUBMISSIONID=feed1f0f-2d9a-42b9-8060-8fddd1e47337   
SESSIONID=4724796d-7de6-4aed-81d4-34fc18efa8d7  LOCATION=REPOSITORY 
JOBPATH=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job JOBVERSION=-
MPRINT(SETENV.SETENV02):  ;
progversion = 1.3
MPRINT(SETENV):  ;
MPRINT(SETENV):   options nomprintnest;
(SETENV): Done.
305        option mprint nomlogic nosymbolgen MAUTOCOMPLOC NOMAUTOLOCDISPLAY mrecall mcompilenote=ALL;
306        
307        
308        %let outputfilename = none;
309        
310        %macro test();
311           %if %superq(runenvironment) = repository or &debug=0 %then %do;
312        
313              %if %sysfunc(fileexist( &repevpath.logs )) %then %do;
314                 filename logf "&repevpath.logs&sepchar.%sysfunc(prxchange(s/.sas$//i, 1, &progname.)).log";
315              %end; %else %do;
316                 filename logf "&repevpath.log&sepchar.%sysfunc(prxchange(s/.sas$//i, 1, &progname.)).log";
317              %end;
318        
319              %put LOG written to LOGF: %qsysfunc(pathname(logf));
320              proc printto log=logf %sysfunc(ifc( not (&runenvironment=repository ), new, %str()));
321              run;
322           %end;
323        %mend test;
NOTE: The macro TEST completed compilation without errors.
      28 instructions 888 bytes.
324        %*test;
325        
326        *- fcmp functions definitions -*;
327        %del_fcmp;  %*- clean up previous fcmp definitions -*;
MAUTOCOMPLOC:  The autocall macro DEL_FCMP is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/mac
            ros/_library/del_fcmp.sas.
NOTE: The macro DEL_FCMP completed compilation without errors.
      37 instructions 1672 bytes.
fcmpoutlib=work.functions
328        %include "&REPEVPATH.programs/fcmp_*.sas";
NOTE: %INCLUDE (level 1) file 
      /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gada
      m_ongoing_studies/prod/programs/fcmp_*.sas is file 
                                                           The SAS System

      /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gada
      m_ongoing_studies/prod/programs/fcmp_run.sas.
329       +/************************************************************************************************************************
329      !+*******************
330       +@file
331       +@brief      Define (a package of) user-written SAS function(s)/ call routine(s) to be compiled by PROC FCMP:
332       +            - Package of Fcmp functions to deal with running SAS Code within a FCMP function computations.
333       +@author     Jean-Michel Bodart
334       +@note       this program is meant to be called from a SAS project environment initialization program
335       +
336       +#### Update History ####
337       +
338       +    Date             Name                        Description
339       +    ------------     --------------------------
339      !+-------------------------------------------------------------------------------------------
340       +@cond
341       +*************************************************************************************************************************
341      !+******************/
342       +
343       +%*- Determine <libname>.<dataset> where to store FCMP functions/routines -*;
344       +%*------------------------------------------------------------------------*;
345       +%*- retrieve first location specified in CMPLIB option (if any) -*;
346       +%let fcmpoutlib=%scan(%qsysfunc(prxchange(s/(_NO)?_DISPLAYLOC_//i, -1, %qsysfunc(getoption(cmplib)))), 1, ( -));
347       +%*- if empty, replace by 'fcmp.functions' -*;
348       +%let fcmpoutlib=%sysfunc(ifc(%length(%superq(fcmpoutlib))=0, fcmp.functions, %superq(fcmpoutlib)));
349       +%*- if <libname> is not assigned to a path, replace by 'work.functions' -*;
350       +%let fcmpoutlib=%sysfunc(ifc(%length(%qsysfunc(pathname(%scan(%superq(fcmpoutlib), 1, .), L)))=0, work.functions,
350      !+%superq(fcmpoutlib)));
351       +%put fcmpoutlib=&fcmpoutlib;
fcmpoutlib=work.functions
352       +
353       +%*- assign a package name -*;
354       +%let package = run;
355       +
356       +%macro del_existing;
357       +   %if %sysfunc(exist(&fcmpoutlib., data)) %then %do;
358       +      %*- get list of existing functions in selected package -*;
359       +      %let func_list = ;
360       +      proc sql noprint;
361       +         select distinct scan(_KEY_, -1, ".") into :func_list separated by ' '
362       +            from &fcmpoutlib. where type="Prototype" and scan(_key_, 1, ".") = "F" and scan(_key_, 2, ".") =
362      !+%sysfunc(quote(%qupcase(%superq(package))))
363       +            ;
364       +      quit;
365       +      %put Existing FCMP functions in &fcmpoutlib.&package: &func_list..;
366       +
367       +      proc fcmp outlib=&fcmpoutlib..&package.; /* outlib = <library>.<dataset>.<package> */
368       +
369       +         %if %index(%str( &func_list ), %str( RUNMACRO )) %then %do;
370       +            deletefunc RUNMACRO; /* delete pre-existing instance of this function to avoid war-ning about re-defining it.
370      !+ */
371       +         %end;
372       +
373       +      quit;
374       +   %end;
375       +%mend del_existing;
NOTE: The macro DEL_EXISTING completed compilation without errors.
      35 instructions 1104 bytes.
                                                           The SAS System

376       +%del_existing;
377       +
378       +proc fcmp outlib=&fcmpoutlib..&package.; /* outlib = <library>.<dataset>.<package> */
379       +
380       +   *- Function that runs SAS Code passed quoted as macro-variable ARGS to macro %run_macro,
381       +      which is expected to have been already compiled or to be found among the autocall macros.
382       +      The %run_macro has no parameters but retrieves the contents of ARGS from macro-variable &ARGS,
383       +      de-quote them and executes them.  The code executed is expected to assign a value to macro-variable &RESULT
384       +      which is passed back to the FCMP function and becomes the value returned by that FCMP function.
385       +   -*;
386       +   function RUNMACRO(args $) $;*$32000;
387       +      length result $32000;
388       +      result="";
389       +      rc = run_macro('run_macro', args, result);
390       +     *if rc = 0 then return(quote(trimn(result)));
391       +      if rc = 0 then return(trimn(result));
392       +      else return('ER'||'ROR attempting to call macro run_macro');
393       +   endsub;
394       +
395       +   /* *- test -*;
396       +
397       +   res = RUNMACRO('%lib_datasets(lib=maps);');
398       +   put res=;
399       +
400       +   res = RUNMACRO('%non_existing_macro(lib=maps);');
401       +   put res=;
402       +
403       +   */
404       +run;

NOTE: Function RUNMACRO saved to work.functions.run.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

405       +quit;
406       +
407       +%*- Set OPTION CMPLIB so as to allow SAS to find and access the fcmp functions -*;
408       +%*------------------------------------------------------------------------------*;
409       +%*- prepencd &fcmpoutlib. to OPTION CMPLIB value, unless it is already part of this option value -*;
410       +options %sysfunc(ifc( %sysfunc(exist(&fcmpoutlib., data)) and %sysfunc(findw(%qsysfunc(getoption(cmplib)), &fcmpoutlib.,
410      !+( -), ei))=0 , insert=(cmplib=&fcmpoutlib.), %str( )));
411       +%put option cmplib=%sysfunc(getoption(cmplib));
option cmplib=work.functions
412       +
413       +/* *- example usage -*;
414       +
415       +
416       +data test;
417       +   length args result $32000;
418       +   args = '%lib_datasets(lib=maps);';
419       +   result = runmacro(args);
420       +run;
421       +
422       +%let list = - ;
423       +%let list = %sysfunc(runmacro(  %qsysfunc(dequote('%lib_datasets(lib=sashelp);'))  ));
424       +%put list = ->&list<-;
                                                           The SAS System

425       +
426       +data test;
427       +   length args result $32000;
428       +   args = '%non_existing_macro(lib=maps);';
429       +   result = runmacro(args);
430       +run;
431       +
432       +%let list = - ;
433       +%let code = %qsysfunc(dequote('%non_existing_macro(lib=sashelp);'));
434       +%put code = &code;
435       +%put ...;
436       +%let list = %sysfunc(runmacro(  &code  ));
437       +%put list = ->&list<-;
438       +
439       +%put >>>%sysfunc(runmacro('proc sql; select distinct quote(strip(sex)) into :result separated by ", " from adam.adsl;
439      !+quit;'))<<<;  %*- this includes lots of (unwanted) trailing spaces -*;
440       +
441       +%put %sysfunc(trim(%qsysfunc(runmacro('proc sql; select distinct quote(strip(sex)) into :result separated by ", " from
441      !+adam.adsl; quit;'))));
442       +%put %sysfunc(trim(%qsysfunc(runmacro('proc sql; select distinct quote(strip(sex)) into :result separated by '', '' from
442      !+adam.adsl; quit;'))));
443       +
444       +
445       +*- this gives expected results - without extra spaces in the log -*;
446       +data test;
447       +   do Sex = %sysfunc(runmacro('proc sql; select distinct quote(strip(sex)) into :result separated by '', '' from
447      !+adam.adsl; quit;'));
448       +      put Sex=;
449       +      output;
450       +   end;
451       +run;
452       +
453       +data test;
454       +   do age = %sysfunc(runmacro('proc sql; select distinct age into :result separated by '', '' from adam.adsl; quit;'));
455       +      put age=;
456       +      output;
457       +   end;
458       +run;
459       +
460       +
461       +*- this gives expected results too -*;
462       +data test;
463       +   do Sex = %sysfunc(trim(%qsysfunc(runmacro('proc sql; select distinct quote(strip(sex)) into :result separated by '',
463      !+'' from adam.adsl; quit;'))));
464       +      put Sex=;
465       +      output;
466       +   end;
467       +run;
468       +
469       +data test;
470       +   do age = %sysfunc(trim(%qsysfunc(runmacro('proc sql; select distinct age into :result separated by '', '' from
470      !+adam.adsl; quit;'))));
471       +      put age=;
472       +      output;
473       +   end;
474       +run;
475       +
476       +*/
                                                           The SAS System

477       +/************************************************************************************************************************
477      !+*******************
478       +@file
479       +@brief      Define (a package of) user-written SAS function(s)/ call routine(s) to be compiled by PROC FCMP:
480       +            - Package of Fcmp functions to deal with running SAS Code within a FCMP function computations.
481       +@author     Jean-Michel Bodart
482       +@note       this program is meant to be called from a SAS project environment initialization program
483       +
484       +#### Update History ####
485       +
486       +    Date             Name                        Description
487       +    ------------     --------------------------
487      !+-------------------------------------------------------------------------------------------
488       +@cond
489       +*************************************************************************************************************************
489      !+******************/
490       +
491       +%*- Determine <libname>.<dataset> where to store FCMP functions/routines -*;
492       +%*------------------------------------------------------------------------*;
493       +%*- retrieve first location specified in CMPLIB option (if any) -*;
494       +%let fcmpoutlib=%scan(%qsysfunc(prxchange(s/(_NO)?_DISPLAYLOC_//i, -1, %qsysfunc(getoption(cmplib)))), 1, ( -));
495       +%*- if empty, replace by 'fcmp.functions' -*;
496       +%let fcmpoutlib=%sysfunc(ifc(%length(%superq(fcmpoutlib))=0, fcmp.functions, %superq(fcmpoutlib)));
497       +%*- if <libname> is not assigned to a path, replace by 'work.functions' -*;
498       +%let fcmpoutlib=%sysfunc(ifc(%length(%qsysfunc(pathname(%scan(%superq(fcmpoutlib), 1, .), L)))=0, work.functions,
498      !+%superq(fcmpoutlib)));
499       +%put fcmpoutlib=&fcmpoutlib;
fcmpoutlib=work.functions
500       +
501       +%*- assign a package name -*;
502       +%let package = run;
503       +
504       +%macro del_existing;
505       +   %if %sysfunc(exist(&fcmpoutlib., data)) %then %do;
506       +      %*- get list of existing functions in selected package -*;
507       +      %let func_list = ;
508       +      proc sql noprint;
509       +         select distinct scan(_KEY_, -1, ".") into :func_list separated by ' '
510       +            from &fcmpoutlib. where type="Prototype" and scan(_key_, 1, ".") = "F" and scan(_key_, 2, ".") =
510      !+%sysfunc(quote(%qupcase(%superq(package))))
511       +            ;
512       +      quit;
513       +      %put Existing FCMP functions in &fcmpoutlib.&package: &func_list..;
514       +
515       +      proc fcmp outlib=&fcmpoutlib..&package.; /* outlib = <library>.<dataset>.<package> */
516       +
517       +         %if %index(%str( &func_list ), %str( VALIDNAME )) %then %do;
518       +            deletefunc VALIDNAME; /* delete pre-existing instance of this function to avoid war-ning about re-defining
518      !+it. */
519       +         %end;
520       +
521       +      quit;
522       +   %end;
523       +%mend del_existing;
NOTE: The macro DEL_EXISTING completed compilation without errors.
      35 instructions 1104 bytes.
524       +%del_existing;
MPRINT(DEL_EXISTING):   proc sql noprint;
                                                           The SAS System

MPRINT(DEL_EXISTING):   select distinct scan(_KEY_, -1, ".") into :func_list separated by ' ' from work.functions where 
type="Prototype" and scan(_key_, 1, ".") = "F" and scan(_key_, 2, ".") = "RUN" ;
MPRINT(DEL_EXISTING):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Existing FCMP functions in work.functionsrun: RUNMACRO.
MPRINT(DEL_EXISTING):   proc fcmp outlib=work.functions.run;
MPRINT(DEL_EXISTING):   quit;

NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

525       +
526       +proc fcmp outlib=&fcmpoutlib..&package.; /* outlib = <library>.<dataset>.<package> */
527       +
528       +   *- Function that runs SAS Code passed quoted as macro-variable ARGS to macro %run_macro,
529       +      which is expected to have been already compiled or to be found among the autocall macros.
530       +      The %run_macro has no parameters but retrieves the contents of ARGS from macro-variable &ARGS,
531       +      de-quote them and executes them.  The code executed is expected to assign a value to macro-variable &RESULT
532       +      which is passed back to the FCMP function and becomes the value returned by that FCMP function.
533       +   -*;
534       +   function VALIDNAME(string $) $;
535       +      length result $32;
536       +      result=ktrim(putc(prxchange(  's/^(\d|$)/_\1/'
537       +                                 ,  1
538       +                                 ,  prxchange( 's/[^a-z_\d]/_/i', -1, kstrip(basechar(putc(kstrip(string), '$ascii32.')))
538      !+ )
539       +                                 ), '$32.'));
540       +      return(trimn(result));
541       +   endsub;
542       +
543       +   /* *- test -*;
544       +
545       +   res = validname(' ');
546       +   put res=;
547       +
548       +   res = validname('a "1:1" relationship');
549       +   put res=;
550       +
551       +   */
552       +run;

NOTE: Function VALIDNAME saved to work.functions.run.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

553       +quit;
554       +
555       +%*- Set OPTION CMPLIB so as to allow SAS to find and access the fcmp functions -*;
556       +%*------------------------------------------------------------------------------*;
557       +%*- prepencd &fcmpoutlib. to OPTION CMPLIB value, unless it is already part of this option value -*;
                                                           The SAS System

558       +options %sysfunc(ifc( %sysfunc(exist(&fcmpoutlib., data)) and %sysfunc(findw(%qsysfunc(getoption(cmplib)), &fcmpoutlib.,
558      !+( -), ei))=0 , insert=(cmplib=&fcmpoutlib.), %str( )));
559       +%put option cmplib=%sysfunc(getoption(cmplib));
option cmplib=work.functions
560       +
561       +/* *- example usage -*;
562       +%put >%sysfunc(validname(%str( )))<;
563       +%put >%sysfunc(validname(.))<;
564       +%put >%sysfunc(validname(0))<;
565       +%put >%sysfunc(validname(1))<;
566       +%put >%sysfunc(validname(123))<;
567       +%put >%sysfunc(validname(1abc))<;
568       +%put >%sysfunc(validname(a1))<;
569       +%put >%sysfunc(validname(A very VERY long string with spaces))<;
570       +%put >%sysfunc(validname(a "1:1" relationship))<;
571       +%put >%sysfunc(validname(a 2$ bill or a 5£ note))<;
572       +%put >%sysfunc(validname("un garçon à  l'école"))<;
573       +%put >%sysfunc(validname(a {2µL} sample))<;
574       +%put >%sysfunc(validname(t_2.3_aes_summary))<;
575       +%put >%sysfunc(validname(où es-tu?))<;
576       +%put %qsysfunc(unicode(\u0020\u0020\u8404\u8404\u8404\u0020\u0020));
577       +%put >%sysfunc(validname(%qsysfunc(unicode(\u0020\u0020\u8404\u8404\u8404\u0020\u0020))))<;
578       +
579       +data test;
580       +   res = validname(' '); put '>' res= '<'; output;
581       +   res = validname('.'); put '>' res= '<'; output;
582       +   res = validname('0'); put '>' res= '<'; output;
583       +   res = validname('1'); put '>' res= '<'; output;
584       +   res = validname('12.3'); put '>' res= '<'; output;
585       +   res = validname('12,300'); put '>' res= '<'; output;
586       +   res = validname('12 300'); put '>' res= '<'; output;
587       +   res = validname('1abc'); put '>' res= '<'; output;
588       +   res = validname('a1'); put '>' res= '<'; output;
589       +   res = validname('A very VERY long string with spaces'); put '>' res= '<'; output;
590       +   res = validname('a "1:1" relationship'); put '>' res= '<'; output;
591       +   res = validname('a 2$ bill or a 5£ note'); put '>' res= '<'; output;
592       +   res = validname("un garçon à  l'école"); put '>' res= '<'; output;
593       +   res = validname('a {2µL} sample'); put '>' res= '<'; output;
594       +   res = validname('t_2.3_aes_summary'); put '>' res= '<'; output;
595       +   res = validname('où es-tu?'); put '>' res= '<'; output;
596       +   test = unicode('\u0020\u0020\u8404\u8404\u8404\u0020\u0020'); put test=;
597       +   res = validname(test); put '>' res= '<'; output;
598       +run;
599       +*/
NOTE: %INCLUDE (level 1) ending.
600        
601        /*
602        %if %superq(runenvironment) = local %then %do;
603           %login_to_lsaf;
604           %let wait = Y;
605        %end;
606        */
607        
608        %*- Specify job (optional) parameters as global macro-variables -*;
609        
610        %*- job parameters -*;
611        %global  create_folder refresh_sdtm create_gadam_folder setup_gadam_folder rebuild_gadam_datasets qc_gadam_vs_study
611      ! check_and_load_gadam run_gadam_tables force mock
                                                           The SAS System

612                 run_next_job next_job wait compounds indications studies domains last_refresh_reldy job_instance ;
613        
614        libname out "&repevpath.output" COMPRESS=YES;
NOTE: Libref OUT was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: 
      /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gada
      m_ongoing_studies/prod/output
615        
616        libname refresh "&_SASWS_.%gen_job_env(/general/biostat/jobs/gadam_refresh_sdtm_last/dev/output, location=LOCAL)"
616      ! access=readonly;
MAUTOCOMPLOC:  The autocall macro GEN_JOB_ENV is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/mac
            ros/_library/gen_job_env.sas.
NOTE: The macro GEN_JOB_ENV completed compilation without errors.
      290 instructions 8664 bytes.
MAUTOCOMPLOC:  The autocall macro F_LSAF_EXISTS is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/mac
            ros/_library/f_lsaf_exists.sas.
NOTE: The macro F_LSAF_EXISTS completed compilation without errors.
      154 instructions 4520 bytes.
MAUTOCOMPLOC:  The autocall macro DOSUBL is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/mac
            ros/_library/dosubl.sas.
NOTE: The macro DOSUBL completed compilation without errors.
      156 instructions 3832 bytes.
ERROR: Create of library REFRESH failed.
ERROR: Error in the LIBNAME statement.
617        
618        
619        %macro lsaf_get_last_sdtm  (create_folder = Y, refresh_sdtm = Y, create_gadam_folder = N, setup_gadam_folder = N,
619      ! rebuild_gadam_datasets = N, qc_gadam_vs_study = N
620                                   ,check_and_load_gadam = N, run_gadam_tables = N
621                                   ,force = N, mock = N, run_next_job = N, next_job=, wait = Y, compounds=, indications=,
621      ! studies=, domains=, last_refresh_reldy=);
622           /* *- example parameters -*;
623              %let create_folder = Y;
624              %let refresh_sdtm = Y;
625              %let create_gadam_folder = Y;
626              %let setup_gadam_folder = Y;
627              %let rebuild_gadam_datasets = Y;
628              %let run_gadam_tables = Y;
629              %let create_gadam_folder = N;
630              %let setup_gadam_folder = N;
631              %let rebuild_gadam_datasets = N;
632              %let run_gadam_tables = N;
633              %let  force = N;
634              %let  mock = N;
635              %let  run_next_job = N;
636              %let  next_job=;
637              %let  wait = Y;
638              %let  compounds=;
639              %*let  compounds=argx-113;
640              %let  indications=;
641              %let  studies=;
642              %let  studies=cdisc-pilot-0001;
643              %*let  studies=argx-113-1803;
644              %*let  studies=argx-113-1704;
                                                           The SAS System

645              %*let  studies=argx-113-1501 argx-113-1603 argx-113-2002;
646              %*let studies = test-001 test-002;
647              %*let  studies=argx-113-1603;
648              %*let  studies=argx-113-2002;
649              %let  domains=;
650              %*let  domains=define;
651           */
652        
653           %put %nrstr(%lsaf_get_last_sdtm) (create_folder = &create_folder, refresh_sdtm = &refresh_sdtm, create_gadam_folder =
653      ! &create_gadam_folder
654                                            ,setup_gadam_folder = &setup_gadam_folder, rebuild_gadam_datasets =
654      ! &rebuild_gadam_datasets, check_and_load_gadam = &check_and_load_gadam
655                                            ,run_gadam_tables = &run_gadam_tables, force = &force, mock = &mock, run_next_job =
655      ! &run_next_job, next_job = &next_job
656                                            ,wait = &wait, compounds=&compounds, indications=&indications, studies=&studies,
656      ! domains=&domains, last_refresh_reldy=&last_refresh_reldy
657                                            )%qsubstr(';',2,1);
658        
659        
660           %let relrepevpath = %sysfunc(translate(%sysfunc(tranwrd(%superq(repevpath), %superq(_SASWS_), %str())), /, \));
661           %put relrepevpath = &relrepevpath;
662        
663           %*- Retrieve current LSAF job (&_LSAFJOBNAME_) & program version (&progversion) -*;
664           %get_job_prog_info;
665        
666           %put _LSAFJOBNAME_ = &_LSAFJOBNAME_;
667           %put progversion = &progversion;
668        
669           %put _all_;
670        
671           %let path = &REPEVPATH.programs&sepchar;
672           %put path = &path;
673           %let pgmname = %sysfunc(prxchange(%bquote(s/.\w{1,8}$//i), 1, &progname)); %*- remove file extension of max 8
673      ! charcaters -*;
674           %put pgmname=&pgmname;
675        
676           %let out = summary;
677        
678           ods escapechar="^";
679        
680           %html_style;
681        
682           option nocenter ps=max ls=max ;
683        
684           ods html5 (id=htmplot)  body    = "&pgmname._&out..html"
685                                   path    = "&REPEVPATH.output&sepchar."                    (url=none) /*- fully specified path
685      ! with URL=none uses html paths relative to current path -*/
686                                   gpath   = "&REPEVPATH.output&sepchar.&pgmname._&out.&sepchar."  (url="&pgmname._&out./") /*-
686      ! fully specified path with URL="<subfolder>/" uses image
687                                                                                                                                p
687      ! aths relative to subfolder <subfolder> of current path -*/
688                                   anchor  = "&out."
689                                   style   = HTML_STYLE /*HTMLBLUE*/ /*NormalPrinter*/ /*SansPrinter*/
690                                   device  = SVG
691                                /* options(svg_mode='embed' ) */ /*- SVG 'embed' mode (creates separate .svg file) is not
691      ! supported by SAS internal browser -*/
692                                   options(svg_mode='inline')    /*- SVG 'inline' mode (does not create separate .svg file) is
692      ! supported by SAS internal browser but only with HTML5 -*/
                                                           The SAS System

693                                   ;
694        
695           *- Test -*;
696           *ods html5(id=htmplot)  body    = "&pgmname._&out..html"
697                                   path    = "%sysfunc(pathname(work, L))&sepchar."                    (url=none)
698                                   gpath   = "%sysfunc(pathname(work, L))&sepchar.&pgmname._&out.&sepchar."
698      ! (url="&pgmname._&out./")
699                                   anchor  = "&out."
700                                   style   = HTML_STYLE
701                                   device  = SVG
702                                   options(svg_mode='inline')
703                                   ;
704        
705           *ods listing close; *- jbodart 2022-12-01 - keep ods listing open -*;
706        
707           ods graphics on / reset=all  width=8in  tipmax=1000 imagemap=on imagename="&out." reset=index(1);
708        
709        
710           title "Outputs of &path.&progname. - version: &progversion";
711           title2 "Job &_LSAFJOBNAME_ started %sysfunc(datetime(), E8601dt.)";
712           footnote;
713           proc sql print;
714              select * from sashelp.vtitle where type=" ";
715           quit;
716           title;
717        
718           /*
719              %let create_folder = Y; %let wait = Y; %let force = N; %let mock = Y; %let next_job = N; %let studies = ; %let
719      ! indications = ; %let compounds = ;
720              *- or -*;
721              %let create_folder = Y; %let wait = Y; %let force = N; %let mock = Y; %let next_job = N; %let studies = ; %let
721      ! indications = indic; %let compounds = ;
722              *- or -*;
723              %let create_folder = Y; %let wait = Y; %let force = N; %let mock = Y; %let next_job = N; %let studies = ; %let
723      ! indications = ; %let compounds = test;
724              *- or -*;
725              %let create_folder = Y; %let wait = Y; %let force = Y; %let mock =  ; %let next_job = N; %let studies = ; %let
725      ! indications = cidp itp; %let compounds = ;
726              *- or -*;
727              %let create_folder = Y; %let wait = Y; %let force = Y; %let mock =  ; %let next_job = N; %let studies = ; %let
727      ! indications = mg; %let compounds = ;
728              *- or -*;
729              %let create_folder = Y; %let wait = Y; %let force = ; %let mock =  ; %let next_job = N; %let studies =
729      ! argx-113-1705; %let indications = ; %let compounds = ;
730              *- or -*;
731              %let create_folder = Y; %let wait = Y; %let force = ; %let mock =  ; %let next_job = N; %let studies = ; %let
731      ! indications = ; %let compounds = ;
732              *- or -*;
733              %let create_folder = Y; %let wait = Y; %let force = N; %let mock = Y; %let next_job = N; %let studies = test-001
733      ! test-002; %let indications = ; %let compounds = test;
734           */
735           /*
736              %global relpath lsaf_type name i msg SearchLimitReached recursive;
737           */
738           %local relpath lsaf_type name i msg SearchLimitReached recursive;
739           %if %superq(runenvironment) = local %then %do;
740              %login_to_lsaf;
741              %let wait = Y;
                                                           The SAS System

742           %end;
743           %*let relpath = /clinical;
744           %*let lsaf_type = /*sas:file sas:job sas:pdf sas:sasdataset sas:program*/ sas:folder;
745           %let SearchLimitReached  = 0;
746        
747           /*
748           *- get all repository folders below /clinical -*;
749           %if %sysfunc(exist(WORK.lsaf_folders, data)) %then %do;
750              proc sql noprint; drop table WORK.lsaf_folders; quit;
751           %end;
752           %lsaf_search(lsaf_location=/clinical
753                       ,lsaf_typeid=sas:folder
754                       ,sas_dsname=work.lsaf_folders
755                       );
756           %let msg = (lsaf_search): &_lsafRC_ : &_lsafMsg_;
757           %if &_lsafRC_ ne 0 %then %do;
758              %put &msg;
759              %*return;
760           %end;
761           %let SearchLimitReached  = %eval(&SearchLimitReached + &_lsafSearchLimitReached_ );
762           */
763        
764           %macro test_if_exists(lsaf_path);
765              %let result = .;
766              %local options;
767              %let options = %sysfunc(getoption(mprint));
768              option nomprint;
769              %lsaf_exists(lsaf_path=%superq(lsaf_path));
770              option &options;
771              %if &_lsafRC_ = 0 %then %do;
772                 %let result=%superq(_lsafExists_)%str( );
773              %end; %else %do;
774                 %let result = &_lsafRC_ : &_lsafMsg_;
775              %end;
776           %mend test_if_exists;
777        
778           %macro get_itemType(lsaf_path);
779              %let result = .;
780              %local options;
781              %let options = %sysfunc(getoption(mprint));
782              option nomprint;
783              %lsaf_gettype(lsaf_path=%superq(lsaf_path));
784              option &options;
785              %if &_lsafRC_ = 0 %then %do;
786                 %let result=%superq(_lsafType_)%str( );
787              %end; %else %do;
788                 %let result = %str(ER)ROR &_lsafRC_ : &_lsafMsg_;
789              %end;
790           %mend get_itemType;
791        
792           *- get all repository folders 'current' below /clinical -*;
793           %if %sysfunc(exist(WORK.lsaf_sdtm_last0, data)) %then %do;
794              proc sql noprint; drop table WORK.lsaf_sdtm_last0; quit;
795           %end;
796           %local options;
797           %let options = %sysfunc(getoption(mprint));
798           option nomprint;
799           %lsaf_search(lsaf_name=*
                                                           The SAS System

800                       ,lsaf_location=/clinical
801                       ,lsaf_typeid=study /* sas:folder */
802                       ,sas_dsname=work.lsaf_studies/* work.lsaf_folders */
803                       );
804           %let msg = (lsaf_search): &_lsafRC_ : &_lsafMsg_;
805           %if &_lsafRC_ ne 0 %then %do;
806              %put &msg;
807              %*return;
808           %end;
809           %dsattr(data=lsaf_studies, pattern=#pct#put #pct#str(NOT)E: The dataset #lib#.#mem# has #nobs# observations and
809      ! #nvars# variables.#scs#);
810           option &options;
811           %let msg = (lsaf_search): &_lsafRC_ : &_lsafMsg_;
812           %if &_lsafRC_ ne 0 %then %do;
813              %put &msg;
814              %*return;
815           %end;
816           %let SearchLimitReached  = %eval(&SearchLimitReached + &_lsafSearchLimitReached_ );
817        
818           data lsaf_dm_current0;
819              set lsaf_studies  (keep=path /*name*/ itemType /*isContainer description version isVersioned isCheckedOut isLocked
820                                signatureStatus size createdBy created dateCreated lastModifiedBy lastModified dateLastModified
821                                propertiesLastModifiedBy propertiesLastModified datePropertiesLastModified state*/
822                                );
823              studypath=path;
824              path=cats(path, "/dm/staging/current");
825              exists_path=put(runmacro('%test_if_exists('||strip(path)||');'), $400.);
826              if exists_path ^= "1" then do;
827                 if exists_path = "0"
828                    then put "War" "ning: LSAF path does not exist (yet): " path;
829                    else put "WAR" "NING: Check if LSAF path exists: " path " returned: " exists_path;
830                 delete;
831              end;
832              drop exists_path;
833              itemType=put(runmacro('%get_itemType('||strip(path)||');'), $200.);
834              if itemType ^= "sas:folder" then do;
835                 put "War" "ning: Unexpected: " itemType= " for " path=;
836              end;
837           run;
838        
839           %dsattr(data=lsaf_dm_current0, pattern=#pct#put #pct#str(NOT)E: The dataset #lib#.#mem# has #nobs# observations and
839      ! #nvars# variables.#scs#);
840           proc print data=lsaf_dm_current0(obs=10) width=min; title "lsaf_dm_current0 (OBS=10)"; run; title;
841        
842           *- keep only the paths matching /clinical/<compound>/<indic>/<study>/dm/staging/current/ -*;
843           /*
844              %let create_folder = Y; %let wait = Y; %let force = N; %let mock = Y; %let studies = ; %let indications = ; %let
844      ! compounds = ;
845              *- or -*;
846              %let create_folder = Y; %let wait = Y; %let force = N; %let mock = Y; %let studies = ; %let indications = indic;
846      ! %let compounds = ;
847              *- or -*;
848              %let create_folder = Y; %let wait = Y; %let force = N; %let mock = Y; %let studies = ; %let indications = ; %let
848      ! compounds = test;
849              *- or -*;
850              %let create_folder = Y; %let wait = Y; %let force = N; %let mock = Y; %let studies = test-001 test-002; %let
850      ! indications = ; %let compounds = test;
851           */
                                                           The SAS System

852        
853        
854        
855           *- Get extra SDTM sources - especially those with non-standard paths - from spreadsheet
855      ! ../input/sdtm_extra_sources.xlsx -*;
856           %if %sysfunc(fileexist(&repevpath.input/sdtm_extra_sources.xlsx)) %then %do;
857              filename sdtmexls "&repevpath.input/sdtm_extra_sources.xlsx";
858        
859              proc import file = sdtmexls out=sdtm_extra_src0 dbms=xlsx replace;
860              run;
861        
862              filename sdtmexls;
863           %end;
864        
865           *- Derive compound, ind, study and filter on these variables according to macro (job) parameters -*;
866           data
867              paths_dropped
868              lsaf_dm_current(index=(studypath))
869              ;
870              attrib studypath length=$200 label="Study Path";
871              length compound ind study $20;
872              set
873                 lsaf_dm_current0(in=a keep=path itemtype)
874                 %if %sysfunc(exist(sdtm_extra_src0)) %then %do;
875                 sdtm_extra_src0(keep=path)
876                 %end;
877                 ;
878              if prxmatch('s!^((/[^/]+){4})/dm/staging/current$!\1!', strip(path))
879                 then studypath = prxchange('s!^((/[^/]+){4})/dm/staging/current$!\1!', 1, strip(path));
880              else if (not a) and prxmatch('s!^((/[^/]+){4})/dm/staging/transfers/.*$!\1!', strip(path))
881                 then studypath = prxchange('s!^((/[^/]+){4})/dm/staging/transfers/.*!\1!', 1, strip(path));
882              else if (not a) and prxmatch('s!^(/clinical(/[^/]+){3})/.*$!\1!', strip(path))
883                 then studypath = prxchange('s!^((/[^/]+){4})/.*!\1!', 1, strip(path));
884        
885              compound = scan(studypath, 2, "/\");
886              ind      = scan(studypath, 3, "/\");
887              study    = scan(studypath, 4, "/\");
888              if (not a) then do;
889                 if prxmatch("/\.zip$/", cats(path))
890                    then itemtype = "sas:zip";
891                    else itemtype = "sas:folder";
892                 exists_path=put(runmacro('%test_if_exists('||strip(path)||');'), $400.);
893                 if exists_path ^= "1" then do;
894                    if exists_path = "0"
895                       then put "War" "ning: LSAF path does not exist (yet): " path;
896                       else put "WAR" "NING: Check if LSAF path exists: " path " returned: " exists_path;
897                    *delete;
898                 end;
899                 drop exists_path;
900                 itemType=put(runmacro('%get_itemType('||strip(path)||');'), $200.);
901                 if itemType not in ("sas:folder" "sas:file") then do;
902                    put "War" "ning: Unexpected: " itemType= " for " path=;
903                 end;
904                 if prxmatch("/\.zip$/", cats(path)) and itemType in ("sas:file")
905                    then itemtype = "sas:zip";
906                 extrasrc = 'Y';
907                 extrapath = path;
908                 extratype = itemtype;
                                                           The SAS System

909              end;
910              if (prxmatch('!^(/[^/]+){4}/dm/staging/current$!', strip(path)) or (not a))
911              %if %length(%superq(compounds))>0 %then %do;
912                 and index(upcase(%sysfunc(quote(%str( )%superq(compounds)%str( )))), " "||strip(upcase(compound))||" ") > 0
913              %end;
914              %if %length(%superq(indications))>0 %then %do;
915                 and index(upcase(%sysfunc(quote(%str( )%superq(indications)%str( )))), " "||strip(upcase(ind))||" ") > 0
916              %end;
917              %if %length(%superq(studies))>0 %then %do;
918                 and index(upcase(%sysfunc(quote(%str( )%superq(studies)%str( )))), " "||strip(upcase(study))||" ") > 0
919              %end;
920                 then output lsaf_dm_current;
921                 else output paths_dropped;
922           run;
923           %put compounds = >&compounds< indications = >&indications< studies = >&studies<;
924        
925           %macro get_lsaf_children(parentpath, path, depth, out=work.lsafGetChildren);
926              %*- macro to retrieve contents of LSAF path, and kepp track of the parent path -*;
927              %let _lsafRC_ = -1;
928              %put %qsubstr('%',2,1)get_lsaf_children(%superq(parentpath), %superq(path), %superq(depth),
928      ! out=%superq(out))%qsubstr(';',2,1);
929              proc sql noprint;
930                 create table &out.0
931                    (
932                       path char(2048) label='Item Path',
933                       name char(256) label='Item Name',
934                       itemType char(32) label='Item Type',
935                       isContainer num label='Is Item A Container?',
936                       description char(512) label='Description',
937                       version char(32) label='Version Number',
938                       isVersioned num label='Is File Versioned',
939                       isCheckedOut num label='Is File Checked out',
940                       isLocked num label='Is File Locked',
941                       signatureStatus char(32) label='Is File Signed',
942                       size num label='Size In Bytes',
943                       formattedsize char(20) label="Size (Formatted)",  /*- jbodart - 2022-07-01 - variable added in LSAF 5.3;
943      ! without it, proc append fails. -*/
944                       createdBy char(64) label='Userid that created the item',
945                       created char(64) label='Item Creation Date',
946                       dateCreated num format=DATETIME. label='Date the item was created (SAS DateTime Format)',
947                       lastModifiedBy char(64) label='Userid that last modified the item content',
948                       lastModified char(64) label='Last Content Modification Date',
949                       dateLastModified num format=DATETIME. label='Date the item''s content was last modified (SAS DateTime
949      ! Format)',
950                       propertiesLastModifiedBy char(64) label='Userid that last modified the item properties',
951                       propertiesLastModified char(64) label='Last Properties Modification Date',
952                       datePropertiesLastModified num format=DATETIME. label='Date the item''s properties were last modified (SAS
952      !  DateTime Format)',
953                       state char(64) label='State of an Analysis or Project'
954                    );
955              quit;
956        
957              %local options;
958              %let options = %sysfunc(getoption(mprint));
959              option nomprint;
960              %lsaf_getchildren(lsaf_path=%superq(path), sas_dsname=&out.0, lsaf_recursive=&depth);
961              option &options;
962              %if %superq(_lsafRC_) = 0 %then %do;
                                                           The SAS System

963                 proc sql;
964                    alter table &out.0
965                       add parentpath character(200)
966                    %if %length(%varlist(data=&out.0, var=formattedsize))=0 %then %do; %*- Jbodart 2022-07-18 - to avoid war-ning
966      !  in proc append -*;
967                          ,formattedsize character(20)
968                    %end;
969                    ;
970                    update &out.0 set parentpath = %sysfunc(quote(%superq(parentpath)));
971                 quit;
972                 proc append base=&out. data=&out.0; run;
973              %end;
974              %let result = %superq(_lsafRC_): %superq(_lsafMsg_);
975           %mend get_lsaf_children;
976        
977           /* %if %sysfunc(exist(WORK.lsafGetChildren, data)) %then %do;
978                 proc sql noprint; drop table WORK.lsafGetChildren; quit;
979              %end; */
980           proc sql noprint;
981              create table WORK.lsafGetChildren
982                 (
983                 parentpath character(200) label = 'Parent Path',
984                 path char(2048) label='Item Path',
985                 name char(256) label='Item Name',
986                 itemType char(32) label='Item Type',
987                 isContainer num label='Is Item A Container?',
988                 description char(512) label='Description',
989                 version char(32) label='Version Number',
990                 isVersioned num label='Is File Versioned',
991                 isCheckedOut num label='Is File Checked out',
992                 isLocked num label='Is File Locked',
993                 signatureStatus char(32) label='Is File Signed',
994                 size num label='Size In Bytes',
995                 formattedsize char(20) label="Size (Formatted)",  /*- jbodart - 2022-07-01 - variable added in LSAF 5.3; without
995      !  it, proc append fails. -*/
996                 createdBy char(64) label='Userid that created the item',
997                 created char(64) label='Item Creation Date',
998                 dateCreated num format=DATETIME. label='Date the item was created (SAS DateTime Format)',
999                 lastModifiedBy char(64) label='Userid that last modified the item content',
1000                lastModified char(64) label='Last Content Modification Date',
1001                dateLastModified num format=DATETIME. label='Date the item''s content was last modified (SAS DateTime Format)',
1002                propertiesLastModifiedBy char(64) label='Userid that last modified the item properties',
1003                propertiesLastModified char(64) label='Last Properties Modification Date',
1004                datePropertiesLastModified num format=DATETIME. label='Date the item''s properties were last modified (SAS
1004     ! DateTime Format)',
1005                state char(64) label='State of an Analysis or Project'
1006                );
1007          quit;
1008       
1009       
1010          *- For each identified study path (=record in dataset WORK.LSAF_DM_CURRENT),
1011             get the 'children' paths below /clinical/<compound>/<indic>/<study>/dm/staging/current/
1012             (up to 2 levels) into dataset WORK.lsafGetChildren -*;
1013          data lsaf_dm_current2;
1014             set lsaf_dm_current;
1015             by studypath;
1016             length cmd $500 result $200;
1017             if itemtype = "sas:folder" then do;
                                                           The SAS System

1018                cmd = '%get_lsaf_children('||strip(studypath)||','||strip(path)||', 2);';
1019                result = runmacro(cmd); *- runmacro: see note in program header -*;
1020             end;
1021             /*
1022             else if itemtype = "sas:zip" then do;
1023                cmd = '%test_if_exists('||strip(studypath)||"/biostat/staging/data_received/sdtm_last/unzip"||');';  *- would
1023     ! return: -1: This operation can only be
1024                                                                                                                      performed
1024     ! on a container. -*;
1025                result = runmacro(cmd); *- runmacro: see note in program header -*;
1026                if result = '1' then do;
1027                   path = catx("/", studypath, "biostat/staging/data_received/sdtm_last/unzip");
1028                   itemtype = "sas:folder";
1029                end;
1030             end;
1031             */
1032          run;
1033          %dsattr(data=lsafGetChildren, pattern=#pct#put #pct#str(NOT)E: The dataset #lib#.#mem# has #nobs# observations and
1033     ! #nvars# variables.#scs#);
1034          proc print data=lsafGetChildren(obs=10) width=min; title "lsafGetChildren"; run; title;
1035       
1036       
1037          *- Merge the children paths (from dataset WORK.lsafGetChildren) back
1038             with their parent folder information (<compound>/<indic>/<study>/dm/staging/current/) (from dataset
1038     ! WORK.lsaf_dm_current2),
1039             keeping only the paths below
1040                   ../dm/staging/current/3_sdtm/<*>
1041             and ../dm/staging/current/4_sas/datasets
1042             as well as paths equal to extrapath (from sdtm_extra_sources.xlsx)
1043          -*;
1044          proc sql noprint;
1045             create table lsaf_dm_current3 as
1046                select distinct a.studypath, a.extrasrc, a.extrapath, a.extratype, a.result as studyresult
1047                               %varlist(data=work.lsafGetChildren, var=#not# parentpath, pattern=#cs#b.#var#)
1048                   from  lsaf_dm_current2 as a
1049                      left join
1050                         work.lsafGetChildren(rename=(parentpath=studypath)) as b
1051                         on a.studypath=b.studypath and a.itemType="sas:folder"
1052                   having (extrasrc=" " and
1052     ! prxmatch('!^(/[^/]+){4}/dm/staging/current/(3_sdtm/[^/]+|4_sas/(metadata|datasets))$!', strip(path)) )
1053                      or  (extrasrc = "Y" and path=extrapath)
1054                      or  (extrasrc = "Y" and extratype = "sas:zip")
1055                   ;
1056          quit;
1057       
1058          /*
1059          data lsaf_dm_current3;
1060             merge
1061                lsaf_dm_current2(keep=studypath result rename=(result=studyresult))
1062                work.lsafGetChildren(rename=(parentpath=studypath))
1063                ;
1064             by studypath;
1065             if prxmatch('!^(/[^/]+){4}/dm/staging/current/(3_sdtm/[^/]+|4_sas/(metadata|datasets))$!', strip(path));  *- JMB
1065     ! 2021-09-30 also include metadata -*;
1066          run;
1067          */
1068          proc print data=lsaf_dm_current3(obs=10) width=min; title "lsaf_dm_current3"; run; title;
1069       
                                                           The SAS System

1070       
1071       
1072       
1073          *- For each of the previously retrieved paths ( ../<study>/dm/staging/current/3_sdtm/<*> and
1073     ! ../<study>/dm/staging/current/4_sas/datasets, as well as the extra paths),
1074             get the sub-folders (children) paths (up to 2 levels)
1075             into dataset work.lsafGetChildren
1076          -*;
1077          /*%if %sysfunc(exist(WORK.lsafGetChildren, data)) %then %do;
1078             proc sql noprint; drop table WORK.lsafGetChildren; quit;
1079          %end;*/
1080          proc sql noprint;
1081             create table WORK.lsafGetChildren
1082                (
1083                parentpath character(200) label = 'Parent Path',
1084                path char(2048) label='Item Path',
1085                name char(256) label='Item Name',
1086                itemType char(32) label='Item Type',
1087                isContainer num label='Is Item A Container?',
1088                description char(512) label='Description',
1089                version char(32) label='Version Number',
1090                isVersioned num label='Is File Versioned',
1091                isCheckedOut num label='Is File Checked out',
1092                isLocked num label='Is File Locked',
1093                signatureStatus char(32) label='Is File Signed',
1094                size num label='Size In Bytes',
1095                formattedsize char(20) label="Size (Formatted)",  /*- jbodart - 2022-07-01 - variable added in LSAF 5.3; without
1095     !  it, proc append fails. -*/
1096                createdBy char(64) label='Userid that created the item',
1097                created char(64) label='Item Creation Date',
1098                dateCreated num format=DATETIME. label='Date the item was created (SAS DateTime Format)',
1099                lastModifiedBy char(64) label='Userid that last modified the item content',
1100                lastModified char(64) label='Last Content Modification Date',
1101                dateLastModified num format=DATETIME. label='Date the item''s content was last modified (SAS DateTime Format)',
1102                propertiesLastModifiedBy char(64) label='Userid that last modified the item properties',
1103                propertiesLastModified char(64) label='Last Properties Modification Date',
1104                datePropertiesLastModified num format=DATETIME. label='Date the item''s properties were last modified (SAS
1104     ! DateTime Format)',
1105                state char(64) label='State of an Analysis or Project'
1106                );
1107          quit;
1108       
1109          /*
1110          %macro extract_zip_file(target, source);
1111             %let result = %str( );
1112             %let zip_file = %qscan(%superq(source), -1, /\);
1113             %let zip_path = %sysfunc(prxchange(s/[\/\\]%prxescape(%superq(zip_file))$//, 1, %superq(source)));
1114             %put &=zip_file;
1115             %put &=zip_path;
1116             %let out=%superq(target);
1117             %let names=*;
1118             %submit_job(/general/biostat/jobs/utils/dev/jobs/job_zip_extract_files.job, parent_job_instance = &job_instance);
1119             %let result=%superq(result)%str( );
1120          %mend extract_zip_file;
1121          */
1122       
1123          data lsaf_dm_current4;
1124             set lsaf_dm_current3;
                                                           The SAS System

1125             file print;
1126             length cmd $500 result $200;
1127             if itemtype = ' ' and extrasrc = "Y" then do;
1128                itemtype = extratype;
1129                path = extrapath;
1130             end;
1131             if itemtype = "sas:zip" then do;
1132                cmd = '%test_if_exists('||strip(studypath)||"/biostat/staging/data_received/sdtm_last/unzip"||');';  *- would
1132     ! return: -1: This operation can only
1133            be performed on a container. -*;
1134                result = runmacro(cmd); *- runmacro: see note in program header -*;
1135                putlog cmd= result=;
1136                put    cmd= result=;
1137                if result = '1' then do;
1138                   path = catx("/", studypath, "biostat/staging/data_received/sdtm_last/unzip");
1139                   name="unzip";
1140                   itemtype = "sas:folder";
1141                   ISCONTAINER = 1;
1142                end;
1143             end;
1144             if itemtype = "sas:folder" then do;
1145                cmd = cats('%get_lsaf_children('||strip(path)||','||strip(path)||', 2);');
1146                result = runmacro(cmd); *- runmacro: see note in program header -*;
1147                putlog cmd= result=;
1148                put    cmd= result=;
1149             end;
1150          run;
1151          %dsattr(data=lsafGetChildren, pattern=#pct#put #pct#str(NOT)E: The dataset #lib#.#mem# has #nobs# observations and
1151     ! #nvars# variables.#scs#);
1152       
1153          proc print data = lsafGetChildren(obs=10) width=min; title "lsafGetChildren [2]"; run; title;
1154       
1155       
1156          proc sort data=lsaf_dm_current4;
1157             by path;
1158          run;
1159       
1160          proc sort data=work.lsafGetChildren;
1161             by parentpath;
1162          run;
1163       
1164          *- Merge the children paths back with their parent path
1165             Split filename into bare filename and file exension
1166             Order by study path, bare filename, date modified (and file extension)
1167          -*;
1168          data lsaf_dm_current5(index=(_idx0_=(studypath nameb extb prefix datelastmodified)));
1169             merge
1170                lsaf_dm_current4(keep=studypath studyresult path result extrasrc extrapath rename=(path=parentpath))
1171                work.lsafGetChildren
1172                ;
1173             by parentpath;
1174             where parentpath ^= " ";
1175             nameb = prxchange('s/([^\.\/\\]+)\.[^\.\/\\]+$/\1/', 1, strip(name));   *- bare filename without extension (allows
1175     ! matching .sas7bdat with corresponding .xpt) -*;
1176             ext = left(tranwrd("|"||strip(name), "|"||strip(nameb), ""));
1177             prefix = prxchange('s/^(meta_)?.+$/\1/', 1, cats(nameb));               *- identify if the prefix 'meta_' is
1177     ! present in nameb -*;
1178             nameb = prxchange('s/^meta_//', 1, nameb);                              *- bare filename without the prefix (allows
                                                           The SAS System

1178     !  matching ../metadata/<name>
1179                                                                                        with ../sdtm_last/meta_<name>) -*;
1180             if scan(cats(parentpath), -1, "/") = "metadata" and ext in (".sas7bdat")
1181                then prefix = "meta_";                                               *- prefix to be added to target filename
1181     ! (allows matching ../metadata/<name>
1182                                                                                        with ../sdtm_last/meta_<name>) -*;
1183             *- extb will allow to distinguish e.g. between define.xml and define.xslt but not between dm.sas7bdat and dm.xpt -*
1183     ! ;
1184             if ext not in ('.sas7bdat' '.xpt')
1185                then extb = ext;
1186                else extb = ' ';
1187          run;
1188       
1189          *- Save current information about most recent SDTM data found in LSAF Repository under all studies
1189     ! 'dm/staging/current' folders
1190             as dataset 'dm_current' in folder biostat/staging/data_received/sdtm_last/unzip
1191          -*;
1192          *- For each bare filename below a study path, keep only the path with the latest date modified -*;
1193          data lsaf_dm_current6
1194             out.dm_current(label = "Paths with most recent SDTM data (as of %sysfunc(datetime(), E8601DT.)) below Data
1194     ! Management folders: "
1195                                  ||"/clinical/<compound>/<indication>/<study>/dm/staging/current")
1196             ;
1197             set lsaf_dm_current5;
1198             by studypath nameb extb prefix datelastmodified;
1199             if last.extb;
1200          run;
1201       
1202          data _; set lsaf_dm_current6(where=(iscontainer=0)); run;
1203          proc print data = _(obs=10) width=min; title "lsaf_dm_current6(where=(iscontainer=0))"; run; title;
1204       
1205       
1206       *------------------------------------------------------------------------------------------------------------------------
1206     ! ---------------------------------------------*;
1207       
1208          *- Search for all Repository folders named 'sdtm_last' across all products, indications and studies below /clinical -*
1208     ! ;
1209          %if %sysfunc(exist(WORK.lsaf_sdtm_last0, data)) %then %do;
1210             proc sql noprint; drop table WORK.lsaf_sdtm_last0; quit;
1211          %end;
1212          /*
1213          %local options;
1214          %let options = %sysfunc(getoption(mprint));
1215          option nomprint;
1216          %lsaf_search(lsaf_location=/clinical
1217                      ,lsaf_typeid=sas:folder
1218                      ,lsaf_name=sdtm_last
1219                      ,sas_dsname=work.lsaf_sdtm_last0
1220                      );
1221          option &options;
1222          %let msg = (lsaf_search): &_lsafRC_ : &_lsafMsg_;
1223          %if &_lsafRC_ ne 0 %then %do;
1224             %put &msg;
1225             %*return;
1226          %end;
1227          %let SearchLimitReached  = %eval(&SearchLimitReached + &_lsafSearchLimitReached_ );
1228          %dsattr(data=lsaf_sdtm_last0, pattern=#pct#put #pct#str(NOT)E: The dataset #lib#.#mem# has #nobs# observations and
1228     ! #nvars# variables.#scs#);
                                                           The SAS System

1229          */
1230       
1231          data lsaf_sdtm_last0;
1232             set lsaf_studies  (keep=path /*name*/ itemType /*isContainer description version isVersioned isCheckedOut isLocked
1233                               signatureStatus size createdBy created dateCreated lastModifiedBy lastModified dateLastModified
1234                               propertiesLastModifiedBy propertiesLastModified datePropertiesLastModified state*/
1235                               );
1236             studypath=path;
1237             length add_path $200;
1238             do add_path = "/biostat/staging/data_received/sdtm_last", "/biostat/staging/data_received/sdtm/sdtm_last";
1239                path=cats(studypath, add_path);
1240                exists_path=put(runmacro('%test_if_exists('||strip(path)||');'), $400.);
1241                if exists_path ^= "1" then do;
1242                   if exists_path ^= "0"
1243                      then put "WAR" "NING: Check if LSAF path exists: " path " returned: " exists_path;
1244                      *else put "War" "ning: LSAF path does not exist (yet): " path;
1245                end;
1246                drop exists_path;
1247                if exists_path = "1" then do;
1248                   itemType=put(runmacro('%get_itemType('||strip(path)||');'), $200.);
1249                   if itemType ^= "sas:folder" then do;
1250                      put "War" "ning: Unexpected: " itemType= " for " path=;
1251                   end;
1252                   output;
1253                end;
1254             end;
1255          run;
1256       
1257          *- Filter the results i.e. keep only 'sdtm_last' folders directly below
1258             -  /clinical/<compound>/<indic>/<study>/biostat/staging/data_received/, or
1259             -  /clinical/<compound>/<indic>/<study>/biostat/staging/data_received/sdtm/
1260             Derive study path and identify compound, indication and study
1261          -*;
1262          data lsaf_sdtm_last(index=(studypath));
1263             attrib %varlist(data=lsaf_sdtm_last0, var=studypath, pattern=#vattrib#);
1264             length compound ind study $20;
1265             set lsaf_sdtm_last0;
1266             studypath = prxchange('s!^((/[^/]+){4})/biostat/staging/data_received(/sdtm)?/sdtm_last$!\1!', 1, strip(path));
1267             compound = scan(studypath, 2, "/\");
1268             ind      = scan(studypath, 3, "/\");
1269             study    = scan(studypath, 4, "/\");
1270             if prxmatch('!^(/[^/]+){4}/biostat/staging/data_received(/sdtm)?/sdtm_last$!', strip(path)) /*- !!! JMB 2021-09-01:
1270     !  no semicolon here as the statement
1271                                                                                                             is being continued
1271     ! -*/
1272             %if %length(%superq(compounds))>0 %then %do;
1273                and index(upcase(%sysfunc(quote(%str( )%superq(compounds)%str( )))), " "||strip(upcase(compound))||" ") > 0
1274             %end;
1275             %if %length(%superq(indications))>0 %then %do;
1276                and index(upcase(%sysfunc(quote(%str( )%superq(indications)%str( )))), " "||strip(upcase(ind))||" ") > 0
1277             %end;
1278             %if %length(%superq(studies))>0 %then %do;
1279                and index(upcase(%sysfunc(quote(%str( )%superq(studies)%str( )))), " "||strip(upcase(study))||" ") > 0
1280             %end;
1281             ;
1282          run;
1283          proc print data=lsaf_sdtm_last(obs=10) width=min; title "lsaf_sdtm_last"; run; title;
1284       
                                                           The SAS System

1285       
1286          *- For each identified 'sdtm_last' folder in Repository
1287          ( ../<study>/biostat/staging/data_received/sdtm_last and ../<study>/biostat/staging/data_received/sdtm/sdtm_last)
1288             get the contents (children) up to 2 levels
1289             into dataset work.lsafGetChildren
1290          -*;
1291          /*%if %sysfunc(exist(WORK.lsafGetChildren, data)) %then %do;
1292             proc sql noprint; drop table WORK.lsafGetChildren; quit;
1293          %end;*/
1294          proc sql noprint;
1295             create table WORK.lsafGetChildren
1296                (
1297                parentpath character(200) label = 'Parent Path',
1298                path char(2048) label='Item Path',
1299                name char(256) label='Item Name',
1300                itemType char(32) label='Item Type',
1301                isContainer num label='Is Item A Container?',
1302                description char(512) label='Description',
1303                version char(32) label='Version Number',
1304                isVersioned num label='Is File Versioned',
1305                isCheckedOut num label='Is File Checked out',
1306                isLocked num label='Is File Locked',
1307                signatureStatus char(32) label='Is File Signed',
1308                size num label='Size In Bytes',
1309                formattedsize char(20) label="Size (Formatted)",  /*- jbodart - 2022-07-01 - variable added in LSAF 5.3; without
1309     !  it, proc append fails. -*/
1310                createdBy char(64) label='Userid that created the item',
1311                created char(64) label='Item Creation Date',
1312                dateCreated num format=DATETIME. label='Date the item was created (SAS DateTime Format)',
1313                lastModifiedBy char(64) label='Userid that last modified the item content',
1314                lastModified char(64) label='Last Content Modification Date',
1315                dateLastModified num format=DATETIME. label='Date the item''s content was last modified (SAS DateTime Format)',
1316                propertiesLastModifiedBy char(64) label='Userid that last modified the item properties',
1317                propertiesLastModified char(64) label='Last Properties Modification Date',
1318                datePropertiesLastModified num format=DATETIME. label='Date the item''s properties were last modified (SAS
1318     ! DateTime Format)',
1319                state char(64) label='State of an Analysis or Project'
1320                );
1321          quit;
1322       
1323          data lsaf_sdtm_last2; *- JMB 2022-07-05 add index on Path -*;
1324             set lsaf_sdtm_last;
1325             length cmd $500 result $200;
1326             if itemtype = "sas:folder" then do;
1327                cmd = cats('%get_lsaf_children('||strip(path)||','||strip(path)||', 2);');
1328                result = runmacro(cmd); *- runmacro: see note in program header -*;
1329             end;
1330          run;
1331          %dsattr(data=lsafGetChildren, pattern=#pct#put #pct#str(NOT)E: The dataset #lib#.#mem# has #nobs# observations and
1331     ! #nvars# variables.#scs#);
1332          proc sort data = lsaf_sdtm_last2;
1333             by path;
1334          run;
1335       
1336          proc print data=lsafGetChildren(obs=10) width=min; title "lsafGetChildren[3]"; run;  title;
1337       
1338       
1339          *- Merge the children paths back with their parent path (../sdtm_last)
                                                           The SAS System

1340             Split filename into bare filename and file exension
1341             Index by study path, bare filename, date modified (and file extension)
1342             Keep and rename variables of interest to prepare merge with the retrieved source sdtm folders paths
1343          -*;
1344          proc sort data=lsafGetChildren;
1345             by parentpath name;
1346          run;
1347       
1348          data lsaf_sdtm_last3(
1349                               /*index=(_idx0_=(studypath nameb extb prefix l_datelastmodified ext))*/
1350                               /* ER-ROR: Index _idx0_ cannot be created on file WORK.LSAF_SDTM_LAST3 because the length of the
1350     ! index value (2856 bytes) is too large.
1351                                  The index page size (currently 8192) must be large enough to store three index values plus a
1351     ! small overhead structure.
1352                                  Reduce the length of the index value or use the IBUFSIZE= option to increase the index page
1352     ! size (up to a maximum of 32,767 bytes).*/
1353                               keep=studypath parentpath result path name itemType isContainer description version isVersioned
1353     ! isCheckedOut
1354                                  isLocked signatureStatus size createdBy dateCreated lastModifiedBy dateLastModified state
1354     ! nameb extb ext prefix
1355                               rename=(parentpath = sdtm_last_path
1356                                     %varlist(var = result path name itemType isContainer description version isVersioned
1356     ! isCheckedOut
1357                                              isLocked signatureStatus size createdBy dateCreated lastModifiedBy
1357     ! dateLastModified state
1358                                              ,pattern = #var# = l_#var#)
1359                                     )
1360                               );
1361             file print;
1362             merge
1363                lsaf_sdtm_last2(keep=studypath path result rename=(path=parentpath))
1364                work.lsafGetChildren
1365                ;
1366             by parentpath;
1367       
1368             if prxmatch('/^meta_meta_\w+$/i', strip(name)) then do;
1369                delete_result=put( runmacro('%global result; %lsaf_delete(lsaf_path='||strip(path)||'); %let result =
1369     ! (lsaf_delete): %superq(_lsafRC_): %superq(_lsafMsg_);')
1370                                 , $200.);
1371                putlog "Delete LSAF path: " path= delete_result;
1372                put    "Delete LSAF path: " path= delete_result;
1373                delete;
1374             end;
1375             nameb = prxchange('s/([^\.\/\\]+)\.[^\.\/\\]+$/\1/', 1, strip(name));   *- bare filename without extension (allows
1375     ! matching .sas7bdat with corresponding .xpt) -*;
1376             ext = left(tranwrd("|"||strip(name), "|"||strip(nameb), ""));
1377             *- extb will allow to distinguish e.g. between define.xml and define.xslt but not between dm.sas7bdat and dm.xpt -*
1377     ! ;
1378             if ext not in ('.sas7bdat' '.xpt')
1379                then extb = ext;
1380                else extb = ' ';
1381             *prefixmatch = prxmatch('s/^(meta_)?.+$/\1/', cats(nameb));
1382             prefix = prxchange('s/^(meta_)?.+$/\1/', 1, cats(nameb));               *- identify if the prefix 'meta_' is
1382     ! present in nameb -*;
1383             nameb = prxchange('s/^meta_//', 1, nameb);                              *- bare filename without the prefix (allows
1383     !  matching ../metadata/<name>
1384                                                                                        with ../sdtm_last/meta_<name>) -*;
1385             if index(path, catx("/", parentpath, "unzip")) eq 0;
                                                           The SAS System

1386          run;
1387          proc sort data=lsaf_sdtm_last3 tagsort;
1388             by studypath nameb extb prefix l_datelastmodified ext;
1389          run;
1390          proc print data=lsaf_sdtm_last3(obs=30) width=min; title "lsaf_sdtm_last3"; run; title;
1391       
1392       
1393       
1394          *- If &create_folder = Y create missing sdtm_last folders -*;
1395          %macro create_sdtm_last_path(path, force=N);
1396             %put %qsubstr('%',2,1)create_sdtm_last_path(%superq(path), force=%superq(force));
1397             %global _lsafMsg_
1398                      _lsafExists_
1399                      _lsafRC_
1400             ;
1401             %local options;
1402             %let options = %sysfunc(getoption(mprint)) %sysfunc(getoption(source)) %sysfunc(getoption(notes));
1403             option nomprint;
1404             %if &debug > 0 %then %do;
1405                option mprint source notes;
1406             %end; %else %do;
1407                option nomprint nosource nonotes;
1408             %end;
1409             %*- define macro-variables corresponding to job parameters -*;
1410             %let location_parameters = %sysfunc(prxchange(s!^.*(\/clinical\/[^\/]+\/[^\/]+\/[^\/]+)(\/.*)?$!\1!, 1,
1410     ! %superq(path)));  /*- must specify study path -*/
1411             %put &=location_parameters;
1412             %let reporting_event_name = data_received;
1413             %let reporting_event_subfolders = sdtm_last;
1414             %let action = check-study-Biostat-folder-exists;
1415             %lsaf_exists(lsaf_path=%superq(location_parameters)/biostat);
1416             %if &_LsafRC_ ^=0 %then %do; %*- lsaf api macro did not complete successfully -*;
1417                %let result = &action: %superq(_lsafRC_): %superq(_lsafMsg_);
1418                %return;
1419             %end;
1420             %if %superq(_lsafExists_) = 0 %then %do;
1421                %put %str(Not)ice: LSAF Study Biostat Path does not exist or is not visible, cannot create it - skipping:
1421     ! %superq(location_parameters)/biostat;
1422             %end; %else %do;
1423                %let action = check-sdtm_last-folder-exists;
1424                %lsaf_exists(lsaf_path=%superq(location_parameters)/biostat/staging/data_received/sdtm_last);
1425                %if %superq(_lsafExists_) = 0 or %qsysfunc(upcase(%superq(force)), $1.)=Y %then %do;
1426                   %put %str(Not)ice: LSAF Path does not exist, create it:
1426     ! %superq(location_parameters)/biostat/staging/data_received/sdtm_last;
1427                   %let action = setup_reporting_event_folder;
1428                   %submit_job(/general/biostat/jobs/setup_reporting_event_folder/prod/jobs/setup_reporting_event_folder.job,
1428     ! parent_job_instance = &job_instance);
1429                   %if &_LsafRC_ ^=0 %then %do;  %*- lsaf api macro did not complete successfully -*;
1430                      %let result = &action: %superq(_lsafRC_): %superq(_lsafMsg_);
1431                      %return;
1432                   %end;
1433                %end;
1434                %let _lsafRC_ = -1;
1435                %let action = check-sdtm_last-folder-was-created;
1436                %lsaf_exists(lsaf_path=%superq(path));
1437                %if %superq(_lsafRC_) = 0 %then %do;
1438                   %if %superq(_lsafExists_) = 0 %then %do;
1439                      %let _lsafRC_ = -2;
                                                           The SAS System

1440                      %let action = create-sdtm_last-folder;
1441                      %lsaf_createfolder(lsaf_path=%superq(path));
1442                   %end;
1443                %end;
1444             %end;
1445             %let result = &action: %superq(_lsafRC_): %superq(_lsafMsg_);
1446             option &options;
1447          %mend create_sdtm_last_path;
1448       
1449          *- Match 'source' (dm folders)
1450             and   'target' (biostat sdtm_last) folders
1451             to prepare sdtm refresh -*;
1452          %uni_vlength(data=lsaf_sdtm_last3 lsaf_dm_current6);
1453          data sdtm_last_new(drop=prv_sdtm_last_path);
1454             length create_result prv_sdtm_last_path  $200;
1455             retain nameb extb prefix;
1456             file print;
1457             merge
1458                lsaf_sdtm_last3
1459                lsaf_dm_current6
1460                ;
1461             by studypath nameb extb prefix;
1462             retain prv_sdtm_last_path;
1463             create_result = " ";
1464             if sdtm_last_path = " " and studypath ^= " " then do;
1465                sdtm_last_path = strip(studypath)||"/biostat/staging/data_received/sdtm_last";
1466             end;
1467             %if (%sysfunc(upcase(%superq(create_folder)), $1.) = Y) %then %do;
1468                if prv_sdtm_last_path ^= sdtm_last_path and sdtm_last_path ^= " " /*and ext in ('.sas7bdat' '.xpt')*/ then do;
1469                   *- check if LSAF sdtm_last_path exists and if not create it -*;
1470                   create_result = runmacro('%create_sdtm_last_path('||strip(sdtm_last_path)||');'); *- runmacro: see note in
1470     ! program header -*;
1471                   putlog "Create " sdtm_last_path= ": " create_result=;
1472                   put    "Create " sdtm_last_path= ": " create_result=;
1473                end;
1474             %end;
1475             prv_sdtm_last_path = sdtm_last_path;
1476             if _n_ = -1 then parentpath = put(parentpath, $200.); /*- make sure parentpath is created with at least length $200
1476     !  if it was not present in input datasets -*/
1477          run;
1478       
1479          proc sort data=sdtm_last_new;
1480             by studypath sdtm_last_path parentpath ext prefix name;
1481          run;
1482          proc print data=sdtm_last_new(obs=50) width=min; title "sdtm_last_new"; run; title;
1483       
1484       
1485          *- Keep only file paths (=observations) with file types of interest,
1486             concatenate bare file names by file extension into the 'domains' variable,
1487             resulting in one record per DM 'source' path and type of file (i.e. file extension)
1488          -*;
1489          option ls=200;
1490          data sdtm_last_new2(keep=studypath sdtm_last_path parentpath ext prefix  min_modte max_modte min_lmodte max_lmodte
1490     ! need_update domains n_items dateLastModified l_dateLastModified);
1491             length domains $1000;
1492             retain domains min_modte max_modte min_lmodte max_lmodte need_update n_items;
1493             format min_modte max_modte min_lmodte max_lmodte E8601DT.;
1494             file print;
                                                           The SAS System

1495             set sdtm_last_new;
1496             by studypath sdtm_last_path parentpath ext prefix name;
1497             where     ext in ('.xpt' '.sas7bdat' '.pdf' '.xml' '.xsl')
1498                   and parentpath ^= " "
1499                   and studypath ^= " "
1500                %if %length(%superq(domains)) >0 %then %do;
1501                   %*- JMBodart 2021-10-18 - add filter on domains (if specified) -*;
1502                   and index(" %upcase(%superq(domains)) ", " "||upcase(cats(nameb))||" ")
1503                %end;
1504                   %*- JMBodart 2022-11-15 - exclude jobtrack files from sdtm refresh -*;
1505                   and prxmatch('/^jobtrack\w+/', cats(nameb)) = 0
1506                %if %length(%superq(last_refresh_reldy)) > 0 %then %do;
1507                   %*- JMBodart 2021-10-18 - add filter on relative day target last "refreshed" (i.e. modified) -*;
1508                   %let _stdt = %scan(%superq(last_refresh_reldy), 1, -);
1509                   %if %qsysfunc(compress(%superq(_stdt))) ^= .
1510                      %then %let _stdt = "%sysfunc(putn(%sysfunc(date()) - &_stdt, date9.)):00:00"dt;
1511                   %let _endt = %scan(%superq(last_refresh_reldy), -1, -);
1512                   %let _endt = "%sysfunc(putn(%sysfunc(date()) - &_endt, date9.)):23:59"dt;
1513                   and  &_stdt <= dateLastModified <= &_endt
1514                %end;
1515                   ;
1516             if first.prefix then call missing(of domains min_modte max_modte min_lmodte max_lmodte n_items);
1517             if first.parentpath then do;
1518             putlog "NO" "TE-" / "Not" "ice: === " sdtm_last_path= parentpath= " ===";
1519             put   " " / " === " sdtm_last_path= parentpath= " ===";
1520             end;
1521             dm_newer = dateLastModified > l_dateLastModified;
1522             putlog "   Refresh sdtm_last: Including: " nameb= " - dm: " dateLastModified= " - biostat: " l_dateLastModified= "
1522     ! -> " dm_newer=;
1523             put    "   Refresh sdtm_last: Including: " nameb= " - dm: " dateLastModified= " - biostat: " l_dateLastModified= "
1523     ! -> " dm_newer=;
1524             n_items+1;
1525             domains = catx(' ', domains, nameb);
1526             *- Derive min / max Date Last Modified across SDTM sources (dm) -*;
1527             min_modte  = min(min_modte, coalesce(dateLastModified, 0));
1528             max_modte  = max_modte  <> dateLastModified;
1529             *- Derive min / max Date Last Modified across sdtm_last data (biostat targets) -*;
1530             min_lmodte = min(min_lmodte, coalesce(l_dateLastModified, 0));
1531             max_lmodte = max_lmodte <> l_dateLastModified;
1532             if last.prefix then do;
1533                if min_lmodte > max_modte
1534                   then need_update=0;
1535                   else need_update=1;
1536                   putlog " -->  For " ext= prefix= " - dm:" min_modte= " - " max_modte= " - biostat:" min_lmodte= " - "
1536     ! max_lmodte= " --> " need_update= ;
1537                   put    " -->  For " ext= prefix= " - dm:" min_modte= " - " max_modte= " - biostat:" min_lmodte= " - "
1537     ! max_lmodte= " --> " need_update= ;
1538                output;
1539             end;
1540          run;
1541       
1542          proc print data=sdtm_last_new2(obs=10) width=min; title "sdtm_last_new2"; run; title;
1543       
1544       
1545          *- Get parameters (and default values) for the SDTM Refresh Job
1546             into dataset WORK.job_Parameters -*;
1547          %let refresh_sdtm_job =
1547     ! %gen_job_env(/general/biostat/jobs/gadam_refresh_sdtm_last/dev/jobs/job_gadam_refresh_sdtm_last.job);
                                                           The SAS System

1548       
1549          %if %sysfunc(exist(work.job_Parameters, data)) %then %do;
1550             proc sql noprint; drop table work.job_Parameters; quit;
1551          %end;
1552          %local options;
1553          %let options = %sysfunc(getoption(mprint));
1554          option nomprint;
1555          %lsaf_getjobparameters(lsaf_path=%superq(refresh_sdtm_job), lsaf_version=, sas_dsname=work.job_Parameters);
1556          option &options;
1557          %dsattr(data=job_Parameters, pattern=#pct#put #pct#str(NOT)E: The dataset #lib#.#mem# has #nobs# observations and
1557     ! #nvars# variables.#scs#);
1558       
1559          proc print data=job_Parameters(obs=10) width=min; title "job_Parameters"; run; title;
1560       
1561       
1562          *- Macro that submits the SDTM Refresh Job
1563             with specific source and target paths indicated as parameters -*;
1564          %macro submit_sdtm_refresh_job(source_path, target_path, domains, force=, mock=, run_next_job=, next_job=, prefix=,
1564     ! last_refresh_reldy=, job_instance=1);
1565             %put Macro &Sysmacroname called with parameters: ;
1566             %*put _local_;
1567             %if &debug > 0 %then %do;
1568                option mprint source notes;
1569             %end;
1570             %put %qsubstr('%',2,1)submit_sdtm_refresh_job(%superq(source_path), %superq(target_path), %superq(domains),
1570     ! force=%superq(force), mock=%superq(mock),
1571                   run_next_job=%superq(run_next_job), next_job=%superq(next_job), prefix=%superq(prefix))%qsubstr(';',2,1);
1572             %put;
1573       
1574             %let refresh_sdtm_job =
1574     ! %gen_job_env(/general/biostat/jobs/gadam_refresh_sdtm_last/dev/jobs/job_gadam_refresh_sdtm_last.job);
1575       
1576             %global _lsafMsg_
1577                      _lsafExists_
1578                      _lsafRC_
1579             ;
1580       
1581             %*- jbodart - 2022-09-26 - Skip SDTM refresh if target folder does not exists or is not visible -*;
1582             %lsaf_exists(lsaf_path=%superq(target_path));
1583             %if &_lsafRC_ = 0 and &_lsafExists_ = 0 %then %do;
1584                %let result = Skipping refresh: LSAF Path does not exist or is not visible: %superq(target_path):
1585                              _lsafRC_=&_lsafRC_ _lsafExists_=&_lsafExists_;
1586                %return;
1587             %end;
1588       
1589             %if %sysfunc(exist(work.job_Parameters, data)) %then %do;
1590                proc sql noprint; drop table work.job_Parameters; quit;
1591             %end;
1592             %local options;
1593             %let options = %sysfunc(getoption(mprint));
1594             option nomprint;
1595             %lsaf_getjobparameters(lsaf_path=%superq(refresh_sdtm_job), lsaf_version=, sas_dsname=work.job_Parameters);
1596             option &options;
1597             %dsattr(data=job_Parameters, pattern=#pct#put #pct#str(NOT)E: The dataset #lib#.#mem# has #nobs# observations and
1597     ! #nvars# variables.#scs#);
1598       
1599             %*- dataset to specify job parameters (from macro parameters values) -*;
1600             data refresh_job_params;
                                                           The SAS System

1601                %if %sysfunc(exist(work.job_Parameters, data)) %then %do;
1602                   set work.job_Parameters(rename=(defaultValue = value));
1603                %end; %else %do;
1604                   name = "job_instance"; type = "CHARACTER"; value = put(" ", $200.); fileversion = put(" ", $20.);
1604     ! includeSubFolders = .;
1605                %end;
1606                if symexist(name)
1607                   then value = symget(name);
1608                value = translate(value, ' ', ',;()"''&%');
1609                if name in ('domains')
1610                   then value = compbl(symget(name));
1611                if name in ('source_path') then includeSubFolders = 1;
1612                if name in ('source_path' 'target_path') and value=' '
1613                   then put "ER" "ROR:(&sysmacroname): Mandatory job parameter " name " has null value: ->" value "<-";;
1614                if _n_=1 then put "Not" "ice:(&sysmacroname): Job Parameters:";
1615                /*- jbodart 2022-09-02 fix reporting job parameters name, value and applicable attributes -*/
1616                if      type = "FOLDER" then put " - " name @+(-1) "=" value "[" type= @+(-1) ", " includeSubFolders= @+(-1) "]"
1616     !  /;
1617                else if TYPE = "FILE"   then put " - " name @+(-1) "=" value "[" type= @+(-1) ", " fileversion= @+(-1) "]"  /;
1618                else                         put " - " name @+(-1) "=" value "[" type= @+(-1) "]" /;
1619             run;
1620             %global _lsafJobSubmissionId_;
1621             %local action start_time rc this_lsafJobSubmissionId_;
1622             %let _lsafJobSubmissionId_ = ;
1623             %let action = submit_refresh;
1624             %let start_time=%sysfunc(time());
1625             %local options;
1626             %let options = %sysfunc(getoption(mprint));
1627             option nomprint;
1628             %*lsaf_submitjob(lsaf_path=%superq(refresh_sdtm_job), lsaf_version=, sas_dsname=refresh_job_params);
1629             %submit_job(%superq(refresh_sdtm_job), lsaf_version=, params=refresh_job_params, wait=&wait
1630                         ,job_instance = &job_instance  /*- use specific job_instance passed as parameter -*/
1631                         );
1632             %let this_lsafJobSubmissionId_ = &_lsafJobSubmissionId_;
1633             %if &_lsafRC_ = 0 %then %do;
1634                %if &debug > 0 %then %do;
1635                   option mprint source notes;
1636                %end;
1637                %put (&sysmacroname): Submitted Job with Submission ID: &_lsafJobSubmissionId_;
1638                %do %until(%sysfunc(prxmatch(/COMPLETED/, %superq(_lsafJobSubmissionStatus_ ))) or
1638     ! %sysfunc(upcase(%superq(wait)), $1.)^=Y);
1639                   %let action = get_refresh_status;
1640                   %lsaf_getsubmissionstatus(lsaf_jobsubmission_id=&this_lsafJobSubmissionId_);
1641                   %put (&sysmacroname): %sysfunc(time(), tod11.2) Elapsed:
1641     ! %sysfunc(putn(%sysevalf(%sysfunc(time())-&start_time), tod11.2))
1642                   Job Submission Status: %superq(_lsafJobSubmissionStatus_ );
1643                   %let rc=%sysfunc(sleep(2.5, 1));
1644                   %if &_lsafRC_ ^= 0 %then %put (lsaf_getsubmissionstatus): &_lsafRC_: &_lsafMsg_;
1645                %end;
1646             %end;
1647             option &options;
1648             %let result = refresh: %superq(action) lsaf_jobsubmission_id=&this_lsafJobSubmissionId_: %superq(_lsafRC_):
1648     ! %superq(_lsafMsg_):
1649                   Elapsed: %sysfunc(putn(%sysevalf(%sysfunc(time())-&start_time), tod11.2)) Job Status:
1649     ! %superq(_lsafJobSubmissionStatus_ );
1650          %mend submit_sdtm_refresh_job;
1651          /* e.g.
1652       
                                                           The SAS System

1653             %submit_sdtm_refresh_job(/clinical/argx-113/mg/argx-113-2002/dm/staging/current/3_sdtm/2021-09-10_argx-113-2002_sdt
1653     ! m
1654                                     , /clinical/argx-113/mg/argx-113-2002/biostat/staging/data_received/sdtm_last
1655                                     , acrf, force=N, mock=N, run_next_job=N, next_job=, prefix=);
1656       
1657             *- sas datasets -*;
1658             %submit_sdtm_refresh_job(/clinical/argx-113/cidp/argx-113-1802/dm/staging/current/4_sas/datasets
1659                                     ,/clinical/argx-113/cidp/argx-113-1802/biostat/staging/data_received/sdtm_last
1660                                     ,ae cm co da dm ds dv ec eg ex fa ft ie is lb mb mh pc pe pr qs relrec rp rs se
1661                                     suppae suppcm suppdm suppds suppdv suppec suppeg suppfa supplb supppe supppr
1662                                     suppqs suppve suppvs sv ta te ti ts tv ve vs
1663                                     );
1664             %submit_sdtm_refresh_job(/clinical/test/indic/test-001/dm/staging/current/4_sas/datasets
1665                                     ,/clinical/test/indic/test-001/biostat/staging/data_received/sdtm_last
1666                                     );
1667       
1668             *- .xpt files -*;
1669             %submit_sdtm_refresh_job(/clinical/test/indic/test-002/dm/staging/current/3_sdtm/transfer_folder
1670                                     ,/clinical/test/indic/test-002/biostat/staging/data_received/sdtm_last
1671                                     );
1672             *- metadata datasets -*;
1673             %submit_sdtm_refresh_job(/clinical/argx-113/mg/argx-113-1705/dm/staging/current/4_sas/metadata
1674                                     ,/clinical/argx-113/mg/argx-113-1705/biostat/staging/data_received/sdtm_last
1675                                     ,codelists comments datasets dictionaries documents methods study valuelevel variables
1675     ! whereclauses
1676                                     ,prefix=meta_
1677                                     );
1678          */
1679       
1680          *- for each SDTM source path,
1681             submit a job instance to copy source files to target path and collect the result -*;
1682          %let testobs=;
1683          %global num_jobs_spawned;
1684          %if %length(%superq(num_jobs_spawned)) = 0 %then %do;
1685             %let num_jobs_spawned = 0;
1686          %end;
1687       
1688          %let job_instance = &job_instance._x&num_jobs_spawned;
1689          data sdtm_last_new3(compress=YES);
1690             file print;
1691             set sdtm_last_new2(&testobs keep=studypath sdtm_last_path parentpath ext domains prefix need_update n_items);
1692             format stdtm endtm E8601DT.;
1693             length job_instance $24 result $800 lsaf_jobsubmission_id $500 lsaf_job_status $100;
1694             %if (%sysfunc(upcase(%superq(refresh_sdtm)), $1.) = Y) %then %do;
1695                if need_update then do;
1696                   stdtm = datetime();
1697                   *- jbodart - 2022-09- 2022-09-09 - Integrate &num_jobs_spawned in %submit_sdtm_refresh_job(). -*;
1698                   call execute('%let num_jobs_spawned = %eval(&num_jobs_spawned + 1);');
1699                   job_instance = catx("_", put(symget("sysjobid"), $20.), 'x'||put(symget("sysjobid"), $20.), _n_);
1700                   *- submit 'job_gadam_refresh_sdtm_last.job' with study-specific source path and target path -*;
1701                   result = runmacro('%submit_sdtm_refresh_job('||strip(parentpath)
1702                                                                ||','||strip(sdtm_last_path)
1703                                                                ||','||strip(domains)
1704                                                                ||", force = &force"
1705                                                                ||", mock = &mock"
1706                                                                ||", run_next_job = &run_next_job"
1707                                                                ||", next_job = &next_job"
1708       /*                                                       ||", compounds = &compounds"
                                                           The SAS System

1709                                                                ||", indications = &indications"
1710                                                                ||", studies = &studies"
1711       */                                                       ||', prefix = '||strip(prefix)
1712                                                                ||", last_refresh_reldy = &last_refresh_reldy"
1713                                                                ||", job_instance = " || job_instance
1714                                                                ||");"); *- runmacro: see note in program header -*;
1715                   endtm = datetime();
1716                   lsaf_jobsubmission_id = prxchange("s/^.* lsaf_jobsubmission_id=([0-9a-f-]+): .*$/\1/i", 1, result);
1717                   lsaf_job_status = prxchange("s/^.* Job Status: (.*)$/\1/i", 1, result);
1718                end; else do;
1719                   result = "Skipped, already up-to-date.";
1720                end;
1721                putlog "NO" "TE-" / "Submit sdtm_refresh_job: " sdtm_last_path= / @3 parentpath= / @3 domains= /@3 result=;
1722                put         "   " / "Submit sdtm_refresh_job: " sdtm_last_path= / @3 parentpath= / @3 domains= /@3 result=;
1723             %end; %else %do;
1724                call missing(of stdtm endtm job_instance result lsaf_jobsubmission_id lsaf_job_status);
1725             %end;
1726          run;
1727       
1728          %let n_jobs_ongoing = 0;
1729          proc sql noprint; select sum(prxmatch("/COMPLETED/", lsaf_job_status)=0) into :n_jobs_ongoing trimmed from
1729     ! sdtm_last_new3 where lsaf_jobsubmission_id ^= ''; quit;
1730          %put &=n_jobs_ongoing;
1731       
1732          %let iter = 0;
1733          %do %while(&n_jobs_ongoing > 0 and &iter < 500);
1734             %let iter = %eval(&iter + 1);
1735       
1736             %let rc = %sysfunc(sleep(2.5, 1));
1737             data sdtm_last_new3(compress=YES);
1738                file print;
1739                length status msgtype $100 elapsed 8;
1740                format elapsed time12.2;
1741                set sdtm_last_new3;
1742                drop status msgtype;
1743                if lsaf_jobsubmission_id ^= '' and prxmatch("/COMPLETED/", lsaf_job_status)=0 then do;
1744                   status = runmacro( '%global result _lsafJobSubmissionStatus_;'
1745                                     ||'%lsaf_getsubmissionstatus(lsaf_jobsubmission_id='||trim(lsaf_jobsubmission_id)||');'
1746                                     ||'%let result = %superq(_lsafJobSubmissionStatus_);'
1747                                     );
1748                   if status ^= '' then lsaf_job_status = status;
1749                   endtm = datetime();
1750                   elapsed = endtm - stdtm;
1751                   msgtype = "NO"||"TE:";
1752                   if prxmatch("/^COMPLETED.*_((SAS|CHECKIN_)?ER"||"RORS?|FAI"||"LED)/i", lsaf_job_status) then msgtype =
1752     ! "ER"||"ROR:";
1753                   else if prxmatch("/^COMPLETED.*_(SAS)?WAR"||"NINGS/i", lsaf_job_status) then msgtype = "WAR"||"NING:";
1754                   putlog msgtype "Job " _n_ lsaf_jobsubmission_id= " completed with status " status ", " elapsed= ":
1754     ! %superq(refresh_sdtm_job)" / @10 "for " sdtm_last_path=;
1755                   put    msgtype "Job " _n_ lsaf_jobsubmission_id= " completed with status " status ", " elapsed= ":
1755     ! %superq(refresh_sdtm_job)" / @10 "for " sdtm_last_path=;
1756                end;
1757             run;
1758       
1759             %let n_jobs_ongoing = 0;
1760             proc sql noprint; select sum(prxmatch("/COMPLETED/", lsaf_job_status)=0) into :n_jobs_ongoing trimmed from
1760     ! sdtm_last_new3 where lsaf_jobsubmission_id ^= ''; quit;
1761             %put %sysfunc(datetime(), E8601DT.) &=iter &=n_jobs_ongoing;
                                                           The SAS System

1762       
1763          %end;
1764       
1765          *- jbodart - 2022-08-29 - retrieve and combine refresh information from all individual job instances -*;
1766          %macro submit_update_refresh_job(transact_data = );
1767             %global result _lsafRC_ _lsafMsg_;
1768             %local action;
1769             %let result=; %let _lsafRC_=-1; %let _lsafMsg_=Something unexpected happened;
1770             *- apply the transaction data -*;
1771             %let action = apply_transaction_data;
1772             %submit_job(%gen_job_env(/general/biostat/jobs/gadam_refresh_sdtm_last/dev/jobs/job_gadam_update_refresh_info.job),
1772     !  wait = Y, parent_job_instance = &job_instance);
1773             *- delete the processed transaction data -*;
1774             %if &_lsafRC_ = 0 %then %do;
1775                %let action = delete_processed_transaction_data;
1776                %lsaf_delete(lsaf_path=%gen_job_env(/general/biostat/jobs/gadam_refresh_sdtm_last/dev/output/)%scan(%superq(tran
1776     ! sact_data), -1, .).sas7bdat);
1777             %end;
1778             %let result = &_lsafRC_ : &action - &_lsafMsg_;
1779          %mend submit_update_refresh_job;
1780       
1781          data sdtm_last_new3(compress=YES);
1782             set sdtm_last_new3;
1783             file print;
1784             length update_refresh_result $200;
1785             format update_refresh_stdtm update_refresh_endtm E8601DT. update_refresh_elapsed time12.2;
1786             if job_instance ^= '' then do;
1787                update_refresh_stdtm = datetime();
1788                *- submit 'job_gadam_update_refresh_info.job' with study-specific target path and job instance -*;
1789                update_refresh_result = runmacro('%submit_update_refresh_job(transact_data = out.refresh_' || job_instance
1790                                                 ||");"); *- runmacro: see note in program header -*;
1791                update_refresh_endtm = datetime();
1792                update_refresh_elapsed = update_refresh_endtm - update_refresh_stdtm;
1793                putlog "Submit update_refresh_job: " _n_= job_instance= sdtm_last_path= /
1794                       lsaf_jobsubmission_id= lsaf_job_status= /
1795                       update_refresh_stdtm= update_refresh_elapsed= update_refresh_elapsed= /
1796                       update_refresh_result=;
1797                put    "Submit update_refresh_job: " _n_= job_instance= sdtm_last_path= /
1798                       lsaf_jobsubmission_id= lsaf_job_status= /
1799                       update_refresh_stdtm= update_refresh_elapsed= update_refresh_elapsed= /
1800                       update_refresh_result=;
1801             end;
1802          run;
1803       
1804       
1805          proc sort data=sdtm_last_new3;
1806             by studypath sdtm_last_path prefix parentpath ext domains;
1807          run;
1808       
1809       
1810          proc print data=sdtm_last_new3(obs=10) width=min; title "sdtm_last_new3"; run; title;
1811          /*
1812       
1813          Obs    domains
1814       
1815             1    acrf hads mrcs rods
1816             2    define
1817             3    define2-0-0
                                                           The SAS System

1818             4    ae cm co da dm ds dv ec eg ex fa ft ie is lb mb mh pc pe pr qs relrec rp rs se suppae suppcm suppdm suppds
1818     ! suppdv suppec suppeg suppfa supplb supppe supppr suppqs suppve suppvs sv ta te ti ts tv ve vs
1819             5    acrf hads mrcs rods
1820             6    define
1821             7    define2-0-0
1822             8    ae cm co da dm ds dv ec eg ex fa ft ie is lb mh pc pe pr qs relrec rp rs se suppae suppcm suppda suppdm suppds
1822     !  suppec suppeg suppfa supplb supppe supppr suppqs suppve suppvs sv ta td te ti ts tv ve vs
1823             9    acrf
1824             10   ae cm co dm ds dv ec eg ex ie is lb mh pc pe pp relrec se suppdm suppds suppec suppeg suppex supplb suppmh
1824     ! supppe suppvs sv ta te ti ts tv vs
1825       
1826          Obs                  studypath                                                 sdtm_last_path
1826     !            ext                                                   parentpath
1827       
1828             1    /clinical/argx-113/cidp/argx-113-1802
1828     ! /clinical/argx-113/cidp/argx-113-1802/biostat/staging/data_received/sdtm_last    .pdf
1828     ! /clinical/argx-113/cidp/argx-113-1802/dm/staging/current/3_sdtm/2021-08-13_argx-113-1802_sdtm
1829             2    /clinical/argx-113/cidp/argx-113-1802
1829     ! /clinical/argx-113/cidp/argx-113-1802/biostat/staging/data_received/sdtm_last    .xml
1829     ! /clinical/argx-113/cidp/argx-113-1802/dm/staging/current/3_sdtm/2021-08-13_argx-113-1802_sdtm
1830             3    /clinical/argx-113/cidp/argx-113-1802
1830     ! /clinical/argx-113/cidp/argx-113-1802/biostat/staging/data_received/sdtm_last    .xsl
1830     ! /clinical/argx-113/cidp/argx-113-1802/dm/staging/current/3_sdtm/2021-08-13_argx-113-1802_sdtm
1831             4    /clinical/argx-113/cidp/argx-113-1802
1831     ! /clinical/argx-113/cidp/argx-113-1802/biostat/staging/data_received/sdtm_last    .sas7bdat
1831     ! /clinical/argx-113/cidp/argx-113-1802/dm/staging/current/4_sas/datasets
1832             5    /clinical/argx-113/cidp/argx-113-1902
1832     ! /clinical/argx-113/cidp/argx-113-1902/biostat/staging/data_received/sdtm_last    .pdf
1832     ! /clinical/argx-113/cidp/argx-113-1902/dm/staging/current/3_sdtm/2021-08-03_argx-113-1902_sdtm
1833             6    /clinical/argx-113/cidp/argx-113-1902
1833     ! /clinical/argx-113/cidp/argx-113-1902/biostat/staging/data_received/sdtm_last    .xml
1833     ! /clinical/argx-113/cidp/argx-113-1902/dm/staging/current/3_sdtm/2021-08-03_argx-113-1902_sdtm
1834             7    /clinical/argx-113/cidp/argx-113-1902
1834     ! /clinical/argx-113/cidp/argx-113-1902/biostat/staging/data_received/sdtm_last    .xsl
1834     ! /clinical/argx-113/cidp/argx-113-1902/dm/staging/current/3_sdtm/2021-08-03_argx-113-1902_sdtm
1835             8    /clinical/argx-113/cidp/argx-113-1902
1835     ! /clinical/argx-113/cidp/argx-113-1902/biostat/staging/data_received/sdtm_last    .sas7bdat
1835     ! /clinical/argx-113/cidp/argx-113-1902/dm/staging/current/4_sas/datasets
1836             9    /clinical/argx-113/hv/argx-113-1901
1836     ! /clinical/argx-113/hv/argx-113-1901/biostat/staging/data_received/sdtm_last      .pdf
1836     ! /clinical/argx-113/hv/argx-113-1901/dm/staging/current/3_sdtm/2021-06-16_final_corrected
1837             10   /clinical/argx-113/hv/argx-113-1901
1837     ! /clinical/argx-113/hv/argx-113-1901/biostat/staging/data_received/sdtm_last      .sas7bdat
1837     ! /clinical/argx-113/hv/argx-113-1901/dm/staging/current/4_sas/datasets
1838       
1839          Obs           stdtm                  endtm                                                        result
1840       
1841             1    2021-09-03T08:43:33    2021-09-03T08:43:51    refresh: get_refresh_status: 0: Success.:  Elapsed: 00:00:17.61
1841     ! Job Status: COMPLETED_SUCCESSFUL
1842             2    2021-09-03T08:43:51    2021-09-03T08:44:06    refresh: get_refresh_status: 0: Success.:  Elapsed: 00:00:15.76
1842     ! Job Status: COMPLETED_SUCCESSFUL
1843             3    2021-09-03T08:44:06    2021-09-03T08:44:23    refresh: get_refresh_status: 0: Success.:  Elapsed: 00:00:16.31
1843     ! Job Status: COMPLETED_SUCCESSFUL
1844             4    2021-09-03T08:44:23    2021-09-03T08:44:47    refresh: get_refresh_status: 0: Success.:  Elapsed: 00:00:24.05
1844     ! Job Status: COMPLETED_SUCCESSFUL
1845             5    2021-09-03T08:44:47    2021-09-03T08:45:01    refresh: get_refresh_status: 0: Success.:  Elapsed: 00:00:14.01
1845     ! Job Status: COMPLETED_SUCCESSFUL
1846             6    2021-09-03T08:45:01    2021-09-03T08:45:16    refresh: get_refresh_status: 0: Success.:  Elapsed: 00:00:15.27
                                                           The SAS System

1846     ! Job Status: COMPLETED_SUCCESSFUL
1847             7    2021-09-03T08:45:16    2021-09-03T08:45:33    refresh: get_refresh_status: 0: Success.:  Elapsed: 00:00:16.81
1847     ! Job Status: COMPLETED_SUCCESSFUL
1848             8    2021-09-03T08:45:33    2021-09-03T08:45:56    refresh: get_refresh_status: 0: Success.:  Elapsed: 00:00:23.42
1848     ! Job Status: COMPLETED_SUCCESSFUL
1849             9    2021-09-03T08:45:56    2021-09-03T08:46:09    refresh: get_refresh_status: 0: Success.:  Elapsed: 00:00:12.49
1849     ! Job Status: COMPLETED_SUCCESSFUL
1850             10   2021-09-03T08:46:09    2021-09-03T08:46:32    refresh: get_refresh_status: 0: Success.:  Elapsed: 00:00:23.52
1850     ! Job Status: COMPLETED_SUCCESSFUL
1851       
1852          */
1853       
1854          *- Store retrieved information about the last sdtm datasests in biostat folder
1854     ! /clinical/<compound>/<indication>/<study>/biostat/staging/data_received/sdtm_last
1855                                     and about the last refresh jobs submitted
1856             in a permanent dataset 'last_sdtm' in LSAF folder /general/biostat/jobs/gadam_ongoing_studies/dev/output -*;
1857          %if %sysfunc(exist(out.last_sdtm, data)) = 0 %then %do;
1858             *- initialize an empty dataset -*;
1859             data out.last_sdtm;
1860                set sdtm_last_new3(obs=0);
1861                by studypath sdtm_last_path parentpath ext domains;
1862             run;
1863          %end;
1864       
1865          *- retrieve pre-existing data -*;
1866          data out_last_sdtm;
1867             set out.last_sdtm;
1868          run;
1869       
1870          %uni_vtype(data=out_last_sdtm sdtm_last_new3);
1871          %mini_vlength(data=out_last_sdtm sdtm_last_new3);
1872          %uni_vlength(data=out_last_sdtm sdtm_last_new3);
1873       
1874          *- combine current with pre-existing data -*;
1875          data  last_sdtm0
1876                out.last_sdtm
1877                ;
1878             length product ind study $20 lastcheckfl $1;
1879             format stdtm endtm E8601DT.;
1880             length domains $1000 ext $10;
1881             set
1882                out_last_sdtm(in=a)
1883                sdtm_last_new3
1884                ;
1885             product = scan(studypath, 2, "/\");
1886             ind     = scan(studypath, 3, "/\");
1887             study   = scan(studypath, 4, "/\");
1888             if a
1889                then lastcheckfl=" ";
1890                else lastcheckfl="Y";
1891             label
1892                lastcheckfl = "Last Check Job Flag"
1893                stdtm = "Refresh Job Start Datetime"
1894                endtm = "Refresh Job End Datetime"
1895                sdtm_last_path = "Biostat (Target) Folder (sdtm_last)"
1896                parentpath = "DM (Source) Folder"
1897                ;
1898          run;
                                                           The SAS System

1899       
1900       
1901          *- Get parameters (and default values) for the Define Extract Job
1902             into dataset WORK.job_Parameters -*;
1903          %*let define_extract_job = /general/dm/jobs/convert_definetosas/prod/jobs/convert_definetosas.job;
1904          %let define_extract_job = /general/biostat/jobs/convert_define2sas/dev/jobs/convert_definetosas.job;
1905          /*- this job is now called via macro
1905     ! /general/biostat/jobs/gadam_ongoing_studies/dev/macros/submit_define_extract_job.sas -*/
1906       
1907          /*
1908          %if %sysfunc(exist(work.job_Parameters, data)) %then %do;
1909             proc sql noprint; drop table work.job_Parameters; quit;
1910          %end;
1911          %local options;
1912          %let options = %sysfunc(getoption(mprint));
1913          option nomprint;
1914          %lsaf_getjobparameters(lsaf_path=%superq(define_extract_job), lsaf_version=, sas_dsname=work.job_Parameters);
1915          option &options;
1916          %dsattr(data=job_Parameters, pattern=#pct#put #pct#str(NOT)E: The dataset #lib#.#mem# has #nobs# observations and
1916     ! #nvars# variables.#scs#);
1917          */
1918       
1919       
1920          %macro check_lsaf_path(path, type=);
1921             %*- macro to check whether specified path exists (and optionally is of (one of) the specified type(s)) in LSAF
1921     ! Repository -*;
1922             %put %qsubstr('%',2,1)check_lsaf_path(%superq(path), type=%superq(type))%qsubstr(';',2,1);
1923             %let result = - Failed -;
1924             %*- Check that source exists -*;
1925             %let action = check path exists;
1926             %lsaf_exists(lsaf_path=%superq(path));
1927             %if %superq(_lsafRC_)=0 %then %do;
1928                %let path_exists = &_lsafExists_;
1929                %let result = %superq(action): &path_exists - RC: %superq(_lsafRC_): %superq(_lsafMsg_);
1930                %if &path_exists and %length(%superq(type))>0 %then %do;
1931       
1932                   %*- if target exists perform type check -*;
1933                   %let action = check path type;
1934                   %let matching_type = -1;
1935                   %lsaf_gettype(lsaf_path=%superq(path));
1936                   %if %superq(_lsafRC_)=0 %then %do;
1937                      %let lsaf_type = &_lsafType_;
1938                      %if %index(%str( )%qsysfunc(upcase(%superq(type)))%str( ), %str(
1938     ! )%qsysfunc(upcase(%superq(lsaf_type)))%str( ))
1939                         %then %let matching_type = 1;
1940                         %else %let matching_type = 0;
1941                   %end;
1942       
1943                   %let result = %superq(action): &matching_type - RC: %superq(_lsafRC_): %superq(_lsafMsg_);
1944       
1945                %end; %else %do;
1946                   %let result = %superq(action): &path_exists - RC: %superq(_lsafRC_): %superq(_lsafMsg_);
1947                %end;
1948             %end; %else %do;
1949                %let result = %superq(action):  %superq(_lsafRC_): %superq(_lsafMsg_);
1950             %end;
1951          %mend check_lsaf_path;
1952          /* *- check -*;
                                                           The SAS System

1953          %login_to_lsaf;
1954          data x;
1955             length gadam_finalchecksjob $200;
1956             gadam_finalchecksjob =
1956     ! runmacro('%check_lsaf_path('||%sysfunc(quote(%superq(gadam_rel_path)/jobs/job_finalchecks.job))||');');
1957             output;
1958             gadam_finalchecksjob =
1958     ! runmacro('%check_lsaf_path(/clinical/argx-113/mg/argx-113-1602/biostat/staging/generic_adam/jobs);');
1959             output;
1960          run;
1961          */
1962       
1963          *- Extract (refresh) Metadata from SDTM Define.xml -*;
1964          data extract_sdtm_define;
1965             file print;
1966             set sdtm_last_new3(keep=studypath sdtm_last_path prefix need_update n_items);
1967             by studypath sdtm_last_path prefix;
1968             length result $200  gadam_finalchecksjob $200;
1969             retain gadam_finalchecksjob;
1970             if last.sdtm_last_path;
1971             result = result;
1972             if gadam_finalchecksjob = " " then do;
1973                /*- Note: SDTM datasets are NOT REFRESHED ANYMORE after the study is considered FINAL, based on the presence of
1974                         file /clinical/<compound>/<indication>/<study>/biostat/staging/generic_adam/jobs/job_finalchecks.job
1974     ! -*/
1975                gadam_finalchecksjob =
1975     ! runmacro('%check_lsaf_path('||cats(studypath)||'/biostat/staging/generic_adam/jobs/job_finalchecks.job);');
1976                putlog _n_= "Check LSAF path exists: " gadam_finalchecksjob=;
1977                put    _n_= "Check LSAF path exists: " gadam_finalchecksjob=;
1978             end;
1979             %if (%sysfunc(upcase(%superq(refresh_sdtm)), $1.) = Y) %then %do;
1980                if prefix not in ('meta_') or n_items < 10 or need_update then do;
1981                   stdtm = datetime();
1982                   if gadam_finalchecksjob ^= "check path exists: 0 - RC: 0: Success."
1983                      then result="OK, study seems final: ../generic_adam/jobs/job_finalchecks.job exists.";
1984                   else if need_update = 0 and %eval(%sysfunc(upcase(%superq(force)), $1.) ^= Y)
1985                      then result="OK, metadata already up-to-date";
1986                      else result = runmacro('%submit_define_extract_job('||strip(sdtm_last_path)||");"); *- runmacro: see note
1986     ! in program header -*;
1987                   endtm = datetime();
1988                   elapsed = endtm - stdtm;
1989                   putlog "Refresh SDTM metadata " result= elapsed=;
1990                   put    "Refresh SDTM metadata " result= elapsed=;
1991                end; else do;
1992                   result = "Skipped define extract job, metadata already up to date";
1993                   putlog "Refresh SDTM metadata " result= ;
1994                   put    "Refresh SDTM metadata " result= ;
1995                end;
1996                format stdtm endtm E8601DT. elapsed time.;
1997             %end;
1998          run;
1999       
2000       
2001       
2002          *- Search for all Repository folders named 'generic_adam' across all products, indications and studies below /clinical
2002     !  -*;
2003          %if %sysfunc(exist(WORK.lsaf_generic_adam0, data)) %then %do;
2004             proc sql noprint; drop table WORK.lsaf_generic_adam0; quit;
                                                           The SAS System

2005          %end;
2006          /*
2007          %local options;
2008          %let options = %sysfunc(getoption(mprint));
2009          option nomprint;
2010          %lsaf_search(lsaf_location=/clinical
2011                      ,lsaf_typeid=sas:folder
2012                      ,lsaf_name=generic_adam
2013                      ,sas_dsname=work.lsaf_generic_adam0
2014                      );
2015          %let msg = (lsaf_search): &_lsafRC_ : &_lsafMsg_;
2016          %if &_lsafRC_ ne 0 %then %do;
2017             %put &msg;
2018             %*return;
2019          %end;
2020          %let SearchLimitReached  = %eval(&SearchLimitReached + &_lsafSearchLimitReached_ );
2021          option &options;
2022          %dsattr(data=lsaf_generic_adam0, pattern=#pct#put #pct#str(NOT)E: The dataset #lib#.#mem# has #nobs# observations and
2022     ! #nvars# variables.#scs#);
2023          */
2024       
2025          %if (&SearchLimitReached > 0) %then %do;
2026             %put %str(ER)ROR: LSAF Search Limit was reached - Please check for a cause.;
2027          %end;
2028       
2029          data lsaf_generic_adam0;
2030             set lsaf_studies  (keep=path /*name*/ itemType /*isContainer description version isVersioned isCheckedOut isLocked
2031                               signatureStatus size createdBy created dateCreated lastModifiedBy lastModified dateLastModified
2032                               propertiesLastModifiedBy propertiesLastModified datePropertiesLastModified state*/
2033                               );
2034             studypath=path;
2035             path=cats(studypath, "/biostat/staging/generic_adam");
2036             exists_path=put(runmacro('%test_if_exists('||strip(path)||');'), $400.);
2037             if exists_path ^= "1" then do;
2038                if exists_path ^= "0"
2039                   then put "WAR" "NING: Check if LSAF path exists: " path " returned: " exists_path;
2040                   *else put "War" "ning: LSAF path does not exist (yet): " path;
2041             end;
2042             drop exists_path;
2043             if exists_path = "1" then do;
2044                itemType=put(runmacro('%get_itemType('||strip(path)||');'), $200.);
2045                if itemType ^= "sas:folder" then do;
2046                   put "War" "ning: Unexpected: " itemType= " for " path=;
2047                end;
2048                output;
2049             end;
2050          run;
2051       
2052          *- Filter the results i.e. keep only 'sdtm_last' folders directly below
2053             -  /clinical/<compound>/<indic>/<study>/biostat/staging/
2054             Derive study path and identify compound, indication and study
2055          -*;
2056          data lsaf_generic_adam(index=(studypath));
2057             attrib %varlist(data=lsaf_generic_adam0, var=studypath, pattern=#vattrib#);
2058             length compound ind study $20;
2059             set lsaf_generic_adam0;
2060             studypath = prxchange('s!^((/[^/]+){4})/biostat/staging/generic_adam$!\1!', 1, strip(path));
2061             compound = scan(studypath, 2, "/\");
                                                           The SAS System

2062             ind      = scan(studypath, 3, "/\");
2063             study    = scan(studypath, 4, "/\");
2064             if prxmatch('!^(/[^/]+){4}/biostat/staging/generic_adam$!', strip(path)) /*- !!! JMB 2021-09-01: no semicolon here
2064     ! as the statement is being continued -*/
2065             %if %length(%superq(compounds))>0 %then %do;
2066                and index(upcase(%sysfunc(quote(%str( )%superq(compounds)%str( )))), " "||strip(upcase(compound))||" ") > 0
2067             %end;
2068             %if %length(%superq(indications))>0 %then %do;
2069                and index(upcase(%sysfunc(quote(%str( )%superq(indications)%str( )))), " "||strip(upcase(ind))||" ") > 0
2070             %end;
2071             %if %length(%superq(studies))>0 %then %do;
2072                and index(upcase(%sysfunc(quote(%str( )%superq(studies)%str( )))), " "||strip(upcase(study))||" ") > 0
2073             %end;
2074             ;
2075          run;
2076       
2077       
2078          *- If &create_gadam_folder = Y, create missing generic_adam folders -*;
2079          %macro create_generic_adam_path(path, force=N);
2080             %put %qsubstr('%',2,1)create_generic_adam_path(%superq(path), force=%superq(force));
2081             %global _lsafMsg_
2082                      _lsafExists_
2083                      _lsafRC_
2084             ;
2085             %local options;
2086             %let options = %sysfunc(getoption(mprint));
2087             %if &debug > 0 %then %do;
2088                option mprint source notes;
2089             %end; %else %do;
2090                option nomprint nosource nonotes;
2091             %end;
2092             %*- define macro-variables corresponding to job parameters -*;
2093             %let location_parameters = %sysfunc(prxchange(s!^.*(\/clinical\/[^\/]+\/[^\/]+\/[^\/]+)(\/.*)?$!\1!, 1,
2093     ! %superq(path)));  /*- must specify study path -*/
2094             %put &=location_parameters;
2095             %let reporting_event_name = generic_adam;
2096             %let reporting_event_subfolders =
2096     ! %bquote(adam,documents,jobs,log,lst,macros,manifest,output,programs,qc,narratives);
2097             %let action = check if generic_adam folder exists;
2098             %lsaf_exists(lsaf_path=%superq(location_parameters)/biostat/staging/generic_adam);
2099             %if %superq(_lsafExists_) = 0 or %qsysfunc(upcase(%superq(force)), $1.)=Y %then %do;
2100                %put %str(Not)ice: LSAF Path does not exist, create it:
2100     ! %superq(location_parameters)/biostat/staging/generic_adam;
2101                %let action = setup_reporting_event_folder;
2102                %submit_job(/general/biostat/jobs/setup_reporting_event_folder/prod/jobs/setup_reporting_event_folder.job,
2102     ! parent_job_instance = &job_instance);
2103                %if &_LsafRC_ ^=0 %then %do;
2104                   %let result = &action: %superq(_lsafRC_): %superq(_lsafMsg_);
2105                   %return;
2106                %end;
2107             %end; %else %if %superq(_lsafRC_) = 0 %then %do;
2108                %let action = skip_create_generic_adam_folder - already exists;
2109             %end;
2110             %let result = &action: %superq(_lsafRC_): %superq(_lsafMsg_);
2111             option &options;
2112          %mend create_generic_adam_path;
2113       
2114          *- If &setup_gadam_folder = Y, setup / refresh generic_adam reporting event with latest programs, macros and jobs -*;
                                                           The SAS System

2115          %macro setup_generic_adam(gadam_path=, sdtm_last_path=, study_adam_path=);
2116             %put %qsubstr('%',2,1)setup_generic_adam(gadam_path=%superq(gadam_path), sdtm_last_path=%superq(sdtm_last_path),
2116     ! study_adam_path=%superq(study_adam_path));
2117             %global _lsafMsg_
2118                      _lsafExists_
2119                      _lsafRC_
2120             ;
2121             %local action options;
2122             %let options = %sysfunc(getoption(mprint));
2123             %if &debug > 0 %then %do;
2124                option mprint source notes;
2125             %end; %else %do;
2126                option nomprint nosource nonotes;
2127             %end;
2128             %let action = check-gadam_path-exists;
2129             %lsaf_exists(lsaf_path=%superq(gadam_path));
2130             %if %superq(_lsafExists_) = 1 %then %do;
2131       
2132       
2133                *- 2023-01-13 - jbodart - Perform gadam study setup only if target is not up-to-date -*;
2134       
2135                *- Use parameter gadam_files_source as &source_path for the template files to be used for study setup -*;
2136                %if %symexist(gadam_files_source)=0 %then %do;
2137                   %local gadam_files_source;
2138                %end;
2139                %local source_path source_rel_path study studyno;
2140                %if %length(%superq(gadam_files_source))>0 and %direxist(%superq(gadam_files_source)) %then %do;
2141                   %let source_path = &gadam_files_source;
2142                   %let source_rel_path = %sysfunc(prxchange(s!^%prxescape(%superq(_SASWS_))!!, 1, %superq(gadam_files_source)))
2142     ! ;
2143                %end; %else %do;
2144                   %let source_rel_path = /general/biostat/gadam;
2145                   %let source_path = &_SASWS_.&source_rel_path;
2146                %end;
2147                %let study = %scan(%superq(gadam_path), 4, /);
2148                %let studyno = %scan(%superq(study), -1, -_);
2149                %put &=source_rel_path &=source_path;
2150                %put &=study studyno=->&studyno<-;
2151       
2152                %put %str(Not)ice: Checking whether generic_adam reporting event is already setup in %superq(gadam_path) ...;
2153                data source_files(where=( scan(name, -1, ".") in ("xlsx" "sas" "job") and name ^= 'job_finalchecks.job' )
2153     ! index=(_idx0_=(dir name)));
2154                   %step_lsaf_getchildren(lsaf_path=          "&source_rel_path/documents"
2155                                                    %bquote(,)"&source_rel_path/metadata/studyprograms"
2156                                                    %bquote(,)"&source_rel_path/metadata/studyjobs"
2157                                                    %bquote(,)"&source_rel_path/metadata/studymacros"
2158                               ,for_each_do=dir=put(left(tranwrd(scan(path, -2, "/"), "study", "")), $20.)%bquote(;
2158     ! )output%bquote(;)
2159                               ,keep=path dir name lastmodified
2160                               ,lsaf_recursive=1
2161                               );
2162                run;
2163                /*- e.g.
2164                    %let gadam_path=/clinical/argx-113/cidp/argx-113-0000/biostat/staging/generic_adam;
2165                -*/
2166                data target_files(where=( scan(name, -1, ".") in ("xlsx" "sas" "job") ) index=(_idx0_=(dir name)));
2167                   %step_lsaf_getchildren(lsaf_path=          "%superq(gadam_path)/documents"
2168                                                    %bquote(,)"%superq(gadam_path)/programs"
                                                           The SAS System

2169                                                    %bquote(,)"%superq(gadam_path)/jobs"
2170                                                    %bquote(,)"%superq(gadam_path)/macros"
2171                               ,for_each_do=dir=put(scan(path, -2, "/"), $20.)%bquote(;)
2172                                            name=prxchange("s/^&studyno/_studyno_/", 1, trim(name))%bquote(;)
2173                                            output%bquote(;)
2174                               ,keep=path dir name lastmodified
2175                               ,lsaf_recursive=1
2176                               ,not_found=%str(NO)TE:
2177                               );
2178                run;
2179       
2180                %let tot_need_update = 999;
2181                data source_target_files;
2182                   merge
2183                      source_files(in=a drop=path rename=(lastmodified=sourcelastmodified))
2184                      target_files(in=b drop=path rename=(lastmodified=targetlastmodified))
2185                      end=last
2186                      ;
2187                   by dir name;
2188                   %*- RegExp to recode special date format into DATETIME. (ddMMMyyyy:hh:mm:ss) -*;
2189                   __prx = prxparse('s/((Mon|Tue|Wed|Thu|Fri|Sat|Sun)(\w*day)?
2189     ! )?(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]* (\d\d?) (\d?\d:\d\d:\d\d) GMT (\d{4})/\5\4\7:\6/i');
2190                   if a then do;
2191                      sourcemodte = input(prxchange(__prx, 1, sourcelastmodified), anydtdtm.);
2192                      targetmodte = input(prxchange(__prx, 1, targetlastmodified), anydtdtm.);
2193                      format sourcemodte targetmodte E8601DT.;
2194                      need_update = (sourcemodte > targetmodte);
2195                      tot_need_update=+need_update;
2196                      tot_files=+a;
2197                      output;
2198                   end;
2199                   if last then do;
2200                      put "Target files needing update: " tot_need_update " out of " tot_files;
2201                      call symputx("tot_need_update", tot_need_update);
2202                   end;
2203                run;
2204                %put &=tot_need_update;
2205       
2206                %if &tot_need_update > 0 %then %do;
2207       
2208                   %put %str(Not)ice: Setting up generic_adam reporting event in %superq(gadam_path) ...;
2209                   %if %length(%superq(study_adam_path)) = 0 %then %do;
2210                      %*- JMB 2022-03-08 - Assign default location to study adam folder -*;
2211                      %let study_adam_path = %sysfunc(prxchange(s?/staging/generic_adam$?/staging/data_received/adam?, 1,
2211     ! %superq(gadam_path)));
2212                      %*let study_adam_path = %sysfunc(prxchange(s/[^\\\/]+$/adam/, 1, %superq(gadam_path)));
2213                      %let action = check-study_adam_path-exists;
2214                      %lsaf_exists(lsaf_path=%superq(study_adam_path));
2215                      %if %superq(_lsafExists_) ^= 1 %then %do;
2216                         %*- jbodart - 2022-07-19 - replace war-ning with No-tice message -*;
2217                         %put %str(Not)ice:(&sysmacroname): study_adam_path not found, set to null: %superq(study_adam_path);
2218                         %let study_adam_path = ;
2219                      %end;
2220                   %end;
2221                   %let action = setup_generic_adam;
2222                   %submit_job(/general/biostat/jobs/gadam_ongoing_studies/dev/jobs/job_gadam_studysetup.job,
2222     ! parent_job_instance = &job_instance);
2223                   %if &_LsafRC_ ^=0 %then %do;
                                                           The SAS System

2224                      %let result = &action: %superq(_lsafRC_): %superq(_lsafMsg_);
2225                      %return;
2226                   %end;
2227       
2228                %end; %else %do;
2229       
2230                   %put %str(Not)ice: Skipping generic_adam reporting event setup (already up-to-date) in %superq(gadam_path);
2231       
2232                %end;
2233       
2234             %end;
2235             %let result = &action: %superq(_lsafRC_): %superq(_lsafMsg_);
2236             option &options;
2237          %mend setup_generic_adam;
2238       
2239          *- If &rebuild_gadam_datasets = Y, rebuild generic_adam datasets in adam/tmp folder -*;
2240          %macro rebuild_generic_adam(gadam_study_path=, sdtm_last_path=);
2241             %put %qsubstr('%',2,1)rebuild_generic_adam(gadam_study_path=%superq(gadam_study_path),
2241     ! sdtm_last_path=%superq(sdtm_last_path));
2242             %global _lsafMsg_
2243                      _lsafExists_
2244                      _lsafRC_
2245             ;
2246             %local options;
2247             %let options = %sysfunc(getoption(mprint));
2248             %if &debug > 0 %then %do;
2249                option mprint source notes;
2250             %end; %else %do;
2251                option nomprint nosource nonotes;
2252             %end;
2253             %lsaf_exists(lsaf_path=%superq(gadam_study_path));
2254             %if %superq(_lsafExists_) = 1 %then %do;
2255                %put %str(Not)ice: Rebuilding adam datasets in generic_adam reporting event in %superq(gadam_study_path) ...;
2256                %let action = rebuild_generic_adam;
2257                %submit_job(/general/biostat/jobs/gadam_rebuild_adam/dev/jobs/job_gadam_rebuild_adam.job, parent_job_instance =
2257     ! &job_instance);
2258                %if &_LsafRC_ ^=0 %then %do;
2259                   %let result = &action: %superq(_lsafRC_): %superq(_lsafMsg_);
2260                   %return;
2261                %end;
2262             %end;
2263             %let result = &action: %superq(_lsafRC_): %superq(_lsafMsg_);
2264             option &options;
2265          %mend rebuild_generic_adam;
2266       
2267          *- Match biostat existing sdtm_last and generic_adam folders -*;
2268          data generic_adam_new(drop=prv_generic_adam_path)
2269             out.generic_adam
2270             ;
2271             format create_gadam_dtm setup_gadam_dtm rebuild_gadam_dtm E8601DT.;
2272             length create_result $200 generic_adam_path $400 setup_result adam_rebuild_result $200;
2273             file print;
2274             merge
2275                lsaf_sdtm_last(keep=studypath path rename=(path=sdtm_last_path))
2276                lsaf_generic_adam
2277                ;
2278             by studypath;
2279             retain prv_generic_adam_path;
                                                           The SAS System

2280             study    = scan(studypath, 4, "/\");
2281             *- exclude study numbers corresponding to ADaM poolings, ending with: -9xxx -*;
2282             match_pool = prxmatch("/.+-9\d\d\d$/", cats(study));
2283             *- identify study numbers corresponding to within/across indication SDTM poolings, ending with: -0000 -*;
2284             match_stdm_ind_pool = prxmatch("/.+-0000$/", cats(study));
2285             put    " "        / "Not" "ice: === " study= match_pool= match_stdm_ind_pool= ;
2286             putlog "NO" "TE-" / "Not" "ice: === " study= match_pool= match_stdm_ind_pool=;
2287             *- initialize variables -*;
2288             create_gadam_dtm = .;
2289             setup_gadam_dtm = .;
2290             rebuild_gadam_dtm = .;
2291             create_result = " ";
2292             setup_result = " ";
2293             adam_rebuild_result = " ";
2294             if match_pool = 0;   *- jbodart 2021-12-23 exclude 'studies' that are actually poolings -*;
2295             if generic_adam_path = " " and studypath ^= " " then do;
2296                generic_adam_path = strip(studypath)||"/biostat/staging/generic_adam";
2297             end;
2298             %if (%sysfunc(upcase(%superq(create_gadam_folder)), $1.) = Y) %then %do;
2299                if generic_adam_path ^= " "  then do;
2300                   *- check if LSAF generic_adam_path exists and if not create it -*;
2301                   create_result = runmacro('%create_generic_adam_path('||strip(generic_adam_path)||",force=&force"||');'); *-
2301     ! runmacro: see note in program header -*;
2302                   create_gadam_dtm = datetime();
2303                   put    "  Create " generic_adam_path= " (force=&force): " create_result=;
2304                   putlog "  Create " generic_adam_path= " (force=&force): " create_result=;
2305                   *- 2022-12-14 - jbodart - always setup newly created generic_adam folders -*;
2306                   if prxmatch('/0: Success./', strip(create_result)) then do;
2307                      setup_result = runmacro('%setup_generic_adam(gadam_path='||strip(generic_adam_path)
2308                                           || ', sdtm_last_path='||cats(sdtm_last_path)||');'); *- runmacro: see note in program
2308     !  header -*;
2309                      setup_gadam_dtm = datetime();
2310                      putlog "  Setup " generic_adam_path= ": " setup_result=;
2311                      put    "  Setup " generic_adam_path= ": " setup_result=;
2312                   end;
2313                end;
2314             %end; %else %do;
2315                create_result = 'skipped since &create_gadam_folder = ' || symget('create_gadam_folder');
2316                put    "  " generic_adam_path ": " create_result=;
2317                putlog "  " generic_adam_path ": " create_result=;
2318             %end;
2319             %if (%sysfunc(upcase(%superq(setup_gadam_folder)), $1.) = Y) %then %do;
2320                if generic_adam_path ^= " "  and prv_generic_adam_path ^= generic_adam_path and sdtm_last_path ^= " " then do;
2321                   *- setup / refresh generic_adam reporting event with latest programs, macros and jobs -*;
2322                   setup_result = runmacro('%setup_generic_adam(gadam_path='||strip(generic_adam_path)
2323                                        || ', sdtm_last_path='||cats(sdtm_last_path)||');'); *- runmacro: see note in program
2323     ! header -*;
2324                   setup_gadam_dtm = datetime();
2325                   putlog "  Setup " generic_adam_path= ": " setup_result=;
2326                   put    "  Setup " generic_adam_path= ": " setup_result=;
2327                end;
2328             %end; %else %do;
2329                setup_result = 'skipped since &setup_gadam_folder = ' || symget('setup_gadam_folder');
2330                put    "  " generic_adam_path ": " setup_result=;
2331                putlog "  " generic_adam_path ": " setup_result=;
2332             %end;
2333             %if (%sysfunc(upcase(%superq(rebuild_gadam_datasets)), $1.) = Y) %then %do;
2334                if     match_stdm_ind_pool = 0 /*- JMBodart 2022-11-15 - Stop refreshing generic ADaMs in SDTM Pools
                                                           The SAS System

2334     ! within/across indications
2335                                                                         prior to updating the SDTM pools themselves -*/
2336                   and generic_adam_path ^= " "  and prv_generic_adam_path ^= generic_adam_path and sdtm_last_path ^= " " then
2336     ! do;
2337                   *- rebuild generic_adam datasets in adam/tmp folder by submitting job_gadam_rebuild_adam.job -*;
2338                   adam_rebuild_result = runmacro('%rebuild_generic_adam(gadam_study_path='||strip(generic_adam_path)
2339                                              ||', sdtm_last_path='||strip(sdtm_last_path)             /*- jbodart 2022-07-06 -
2339     ! add sdtm_last_path -*/
2340                                              ||');'); *- runmacro: see note in program header -*;
2341                   rebuild_gadam_dtm = datetime();
2342                   putlog "  Rebuild " generic_adam_path= ": " adam_rebuild_result=;
2343                   put    "  Rebuild " generic_adam_path= ": " adam_rebuild_result=;
2344                end;
2345                if match_stdm_ind_pool > 0 then do;
2346                   adam_rebuild_result = 'skipped since sdtm pools within/across indication are not yet refreshed at this point'
2346     ! ;
2347                end;
2348             %end; %else %do;
2349                adam_rebuild_result = 'skipped since &rebuild_gadam_datasets = ' || symget('rebuild_gadam_datasets');
2350             %end;
2351             put    "  " generic_adam_path ": " adam_rebuild_result= " === ";
2352             putlog "  " generic_adam_path ": " adam_rebuild_result= " === ";
2353             if generic_adam_path ^= " " then prv_generic_adam_path = generic_adam_path;
2354          run;
2355       
2356       
2357       
2358             *- JMB 2022-03-15 - create / update job to pool generic_adam QC overviews -*;
2359       
2360          data lsaf_gadam_studies;
2361             length generic_adam_path $1000;
2362             set lsaf_studies  (keep=path /*name*/ itemType /*isContainer description version isVersioned isCheckedOut isLocked
2363                               signatureStatus size createdBy created dateCreated lastModifiedBy lastModified dateLastModified
2364                               propertiesLastModifiedBy propertiesLastModified datePropertiesLastModified state*/
2365                               );
2366             where prxmatch('/[-_]9\d\d\d$/', strip(path))=0;  *- exclude ADaM poolings -*;
2367             studypath=path;
2368             generic_adam_path=cats(path, "/biostat/staging/generic_adam");
2369             exists_path=put(runmacro('%test_if_exists('||strip(generic_adam_path)||');'), $400.);
2370             if exists_path ^= "1" then do;
2371                if exists_path = "0"
2372                   then put "War" "ning: LSAF path does not exist (yet): " generic_adam_path;
2373                   else put "WAR" "NING: Check if LSAF path exists: " generic_adam_path " returned: " exists_path;
2374                delete;
2375             end;
2376             drop exists_path;
2377             itemType=put(runmacro('%get_itemType('||strip(generic_adam_path)||');'), $200.);
2378             if itemType ^= "sas:folder" then do;
2379                put "War" "ning: Unexpected: " itemType= " for " generic_adam_path=;
2380             end;
2381          run;
2382       
2383          data out.gadam_qc_overviews;
2384             set lsaf_gadam_studies /*generic_adam_new*/(keep=generic_adam_path where=(generic_adam_path ^= " "));
2385             length generic_adam_qc_path param_path param_outpath $400;
2386             jobpath = '&_SASWS_/general/biostat/jobs/gadam_rebuild_adam/dev/jobs/job_gadam_qc_overviews.job'; *- Needs &_SASWS_
2386     !  as we are actually writing to this path now -*;
2387             outpath = "/general/biostat/jobs/gadam_rebuild_adam/dev/output/qc"; *- Does not need &_SASWS_ as this path will be
                                                           The SAS System

2387     ! specified in the job file itself -*;
2388             generic_adam_qc_path = catx('/', generic_adam_path, "qc");
2389             pathnum+1;
2390             param_path = cats('path', pathnum)||' = '|| quote(strip(generic_adam_qc_path));
2391             param_outpath = 'outpath = '|| quote(strip(outpath));
2392          run;
2393       
2394          %build_job  (data=out.gadam_qc_overviews
2395                      ,jobfile = resolve(jobpath)
2396                      ,job_description = "Pool generic_adam QC overviews across studies"
2397                      ,program = "/general/biostat/jobs/utils/dev/programs/multi_path_pooldata.sas"
2398                      %bquote(,) "/general/biostat/jobs/gadam_rebuild_adam/dev/programs/gadam_consolidate_qc_overviews.sas"
2399                      ,input_folders =  "/general/biostat/metadata/projects"
2400                                        generic_adam_qc_path
2401                      ,input_recursive = "/general/biostat/macros/_library"
2402                                         outpath
2403                      ,output_recursive = "../logs"
2404                                           "../macros"
2405                                           "../programs"
2406                                           "../output"
2407                                           outpath
2408                      /*- JMB 2022-11-15 - Include collecting and combining datasets ../generic_var_all.sas7bdat across studies
2408     ! in job_gadam_qc_overviews.job -*/
2409                      ,param_character = param_path %bquote(,) param_outpath %bquote(,) ds_cond = upcase(memname) in ('OVERVIEW'
2409     !  'DATAPATHS' 'GENERIC_VAR_ALL')
2410                      ,log="../logs"
2411                      );
2412       
2413          %put runenvironment=%superq(runenvironment);
2414       
2415          %if %superq(runenvironment) = local %then %do;
2416             %login_to_lsaf;
2417             %let wait = Y;
2418          %end;
2419       
2420       
2421          proc sql noprint;
2422             create table jobs as
2423                select distinct jobpath
2424                   from out.gadam_qc_overviews
2425                   ;
2426          quit;
2427       
2428          %global result _lsafRC_ _lsafMsg_;
2429          data jobs2;
2430             set jobs;
2431             length copy_result submit_result $200;
2432             file print;
2433             if symget('runenvironment') = 'local' then do;
2434                *- copy job file to LSAF repository -*;
2435                copy_result = runmacro('%copy_to_lsaf('||resolve(strip(jobpath))||', interactive=N); %let result = &_lsafRC_ :
2435     ! &_lsafMsg_;');
2436                put / "Copy job file to lSAF repository: " / @3 jobpath= / @3 copy_result=;
2437                *- submit job to LSAF repository without letting the user edit the parameters (params=N) -*;
2438                submit_result = runmacro('%submit_lsaf_job('||resolve(strip(jobpath))||', wait=Y, params=N); %let result =
2438     ! &_lsafRC_ : &_lsafMsg_;');
2439                put "Submit job file: " / @3 jobpath= / @3 submit_result=;
2440             end; else do;
                                                           The SAS System

2441                copy_result = "Copy (i.e. upload) not performed in runenvironment: "||symget("runenvironment");
2442                submit_result = "In runenvironment: "||symget("runenvironment")||', a job cannot be executed in the session
2442     ! where it was created.';
2443             end;
2444          run;
2445       
2446       
2447       
2448          %scan_cur_log;
2449       
2450          ods graphics off;
2451          ods html5(htmplot) close;
2452          ods listing;
2453       
2454       
2455       
2456       %mend lsaf_get_last_sdtm;
NOTE: The macro LSAF_GET_LAST_SDTM completed compilation without errors.
      1091 instructions 93816 bytes.
2457       /*
2458       %lsaf_get_last_sdtm(mock=Y);
2459       %lsaf_get_last_sdtm;
2460       %lsaf_get_last_sdtm(force=Y);
2461       
2462       %lsaf_get_last_sdtm  (create_folder = Y, create_gadam_folder = Y, setup_gadam_folder = Y, force = N, mock = N,
2462     ! run_next_job = N
2463                            ,wait = Y, compounds=argx-113, indications=mg, studies=, domains=);
2464       
2465       %lsaf_get_last_sdtm  (create_folder = Y, create_gadam_folder = Y, setup_gadam_folder = Y, force = N, mock = N,
2465     ! run_next_job = N
2466                            ,wait = Y, compounds=argx-113, indications=cidp hv iim itp pemphigus x-ind, studies=, domains=);
2467       
2468       %lsaf_get_last_sdtm  (create_folder = Y, create_gadam_folder = Y, setup_gadam_folder = Y, rebuild_gadam_datasets = Y,
2468     ! force = N, mock = N, run_next_job = N
2469                            ,wait = Y, compounds=argx-113, indications=cidp, studies=argx-113-1902, domains=);
2470       
2471       %lsaf_get_last_sdtm  (create_folder = N, create_gadam_folder = N, setup_gadam_folder = N, rebuild_gadam_datasets = Y,
2471     ! force = N, mock = N, run_next_job = N
2472                            ,wait = Y, compounds=argx-113, indications=cidp, studies=argx-113-1902, domains=);
2473       
2474       %lsaf_get_last_sdtm  (create_folder = N, create_gadam_folder = N, setup_gadam_folder = N, rebuild_gadam_datasets = Y,
2474     ! force = N, mock = N, run_next_job = N
2475                            ,wait = Y, compounds=, indications=mg, studies=argx-113-2003, domains=);
2476       
2477       */
2478       
2479       %lsaf_get_last_sdtm  (create_folder = &create_folder, refresh_sdtm = &refresh_sdtm, create_gadam_folder =
2479     ! &create_gadam_folder, setup_gadam_folder = &setup_gadam_folder
2480                            ,rebuild_gadam_datasets = &rebuild_gadam_datasets, qc_gadam_vs_study = &qc_gadam_vs_study,
2480     ! check_and_load_gadam = &check_and_load_gadam
2481                            ,run_gadam_tables = &run_gadam_tables, force = &force, mock = &mock, run_next_job = &run_next_job,
2481     ! next_job = &next_job
2482                            ,wait = &wait, compounds=&compounds, indications=&indications, studies=&studies, domains=&domains,
2482     ! last_refresh_reldy=&last_refresh_reldy);
%lsaf_get_last_sdtm (create_folder = Y, refresh_sdtm = Y, create_gadam_folder = Y                                     
,setup_gadam_folder = N, rebuild_gadam_datasets = Y, check_and_load_gadam = Y                                     ,run_gadam_tables 
= Y, force = N, mock = N, run_next_job = N, next_job = /general/biostat/jobs/gadam_rebuild_adam/dev/jobs/job_gadam_rebuild_adam.job 
                                    ,wait = Y, compounds=argx-117, indications=, studies=, domains=, last_refresh_reldy=. - 0       
                                                           The SAS System

                              );
relrepevpath = /general/biostat/jobs/gadam_ongoing_studies/prod/
MPRINT(GET_JOB_PROG_INFO):   data _null_;
MPRINT(GET_JOB_PROG_INFO):   infile 
"/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ong
oing_studies/prod/jobs/job_lsaf_get_last_sdtm.job";
MPRINT(GET_JOB_PROG_INFO):   input;
MPRINT(GET_JOB_PROG_INFO):   *put _infile_;
MPRINT(GET_JOB_PROG_INFO):   length progversion $32;
MPRINT(GET_JOB_PROG_INFO):   if prxmatch("/^.*<inputSpec path=[""'][^<>""']*\/programs\/lsaf_get_last_sdtm.sas[""'][^<>]* 
version=[""'][\*\d\.]+[""'][^<>]*\/>.*$/", _infile_) then do;
MPRINT(GET_JOB_PROG_INFO):   progversion = prxchange("s/^.*<inputSpec 
path=[""'][^<>""']*\/programs\/lsaf_get_last_sdtm.sas[""'][^<>]* version=[""']([\*\d\.]+)[""'][^<>]*\/>.*$/\1/", 1, _infile_);
MPRINT(GET_JOB_PROG_INFO):   put progversion=;
MPRINT(GET_JOB_PROG_INFO):   call symputx('jobprogversion', progversion);
MPRINT(GET_JOB_PROG_INFO):   end;
MPRINT(GET_JOB_PROG_INFO):   run;

NOTE: The infile 
      "/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gad
      am_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job" is:
      
      Filename=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/
      jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job,
      Owner Name=webtrust,Group Name=webtrust,
      Access Permission=-rw-rw-rw-,
      Last Modified=19Dec2022:11:44:29,
      File Size (bytes)=6674

NOTE: 64 records were read from the infile 
      "/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gad
      am_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job".
      The minimum record length was 6.
      The maximum record length was 481.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LSAF_GETPROPERTIES):  ;
MPRINT(LSAF_GETPROPERTIES):   data work.lsafGetProperties (label="Created by LSAF_GETPROPERTIES" KEEP=path name displayName value 
type isReadonly isExtended);
MPRINT(LSAF_GETPROPERTIES):   attrib returnCode length=8 message length=$200 logMsgPrefix length=$70 logMsgPrimary length=$70 
logMsg length=$300 rowCount length=8 path length=$2048 label="Item Path" name length=$256 label="Property Name" displayName 
length=$256 label="Property Display Name" value length=$2048 label="Property Value" type length=$32 label="Property Type" 
isReadonly length=8 label="Property value is not modifiable." isExtended length=8 label="Property is an Extended Attribute" ;
MPRINT(LSAF_GETPROPERTIES):   rowCount=0;
MPRINT(LSAF_GETPROPERTIES):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService") ;
MPRINT(LSAF_GETPROPERTIES):   declare javaobj results("com/sas/lsaf/macro/content/repository/SasRepositoryItemPropertiesResult");
MPRINT(LSAF_GETPROPERTIES):   srv.callStaticVoidMethod("getProperties", 
"/general/biostat/jobs/gadam_ongoing_studies/prod/programs/lsaf_get_last_sdtm.sas", "", results);
MPRINT(LSAF_GETPROPERTIES):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_GETPROPERTIES):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_GETPROPERTIES):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_GETPROPERTIES):   if (returnCode ne 0) then do;
MPRINT(LSAF_GETPROPERTIES):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_GETPROPERTIES):   logMsg=" Cannot retrieve list of properties for 
/general/biostat/jobs/gadam_ongoing_studies/prod/programs/lsaf_get_last_sdtm.sas" ;
                                                           The SAS System

MPRINT(LSAF_GETPROPERTIES):   end;
MPRINT(LSAF_GETPROPERTIES):   else do;
MPRINT(LSAF_GETPROPERTIES):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_GETPROPERTIES):   logMsg=" List of properties were returned for 
/general/biostat/jobs/gadam_ongoing_studies/prod/programs/lsaf_get_last_sdtm.sas" ;
MPRINT(LSAF_GETPROPERTIES):   results.callIntMethod("getSize", rowCount);
MPRINT(LSAF_GETPROPERTIES):   do row=0 to rowCount - 1;
MPRINT(LSAF_GETPROPERTIES):   path="/general/biostat/jobs/gadam_ongoing_studies/prod/programs/lsaf_get_last_sdtm.sas";
MPRINT(LSAF_GETPROPERTIES):   results.callStringMethod("getPropertyName", row, name);
MPRINT(LSAF_GETPROPERTIES):   results.callStringMethod("getPropertyValue", row, value);
MPRINT(LSAF_GETPROPERTIES):   results.callStringMethod("getPropertyDisplayName", row, displayName);
MPRINT(LSAF_GETPROPERTIES):   results.callStringMethod("getPropertyAttributeType", row, type);
MPRINT(LSAF_GETPROPERTIES):   results.callBooleanMethod("getPropertyIsReadOnly", row, isReadonly);
MPRINT(LSAF_GETPROPERTIES):   results.callBooleanMethod("getPropertyIsExtended", row, isExtended);
MPRINT(LSAF_GETPROPERTIES):   output;
MPRINT(LSAF_GETPROPERTIES):   end;
MPRINT(LSAF_GETPROPERTIES):   end;
MPRINT(LSAF_GETPROPERTIES):   put;
MPRINT(LSAF_GETPROPERTIES):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_GETPROPERTIES):   put logMsgPrefix " " "lsaf_getproperties";
MPRINT(LSAF_GETPROPERTIES):   if (rowCount=0) then put logMsgPrefix " No properties were retrieved.";
MPRINT(LSAF_GETPROPERTIES):   else put logMsgPrefix " " rowCount " records written to data set work.lsafGetProperties";
MPRINT(LSAF_GETPROPERTIES):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(LSAF_GETPROPERTIES):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(LSAF_GETPROPERTIES):   put;
MPRINT(LSAF_GETPROPERTIES):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_GETPROPERTIES):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_GETPROPERTIES):   call symputx("_lsafRowCount_", rowCount);
MPRINT(LSAF_GETPROPERTIES):   run;


NOTE: SAS Life Science Analytics Framework Macro: *  
List of properties were returned for /general/biostat/jobs/gadam_ongoing_studies/prod/programs/lsaf_get_last_sdtm.sas
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_getproperties
NOTE: SAS Life Science Analytics Framework Macro: *  21  records written to data set work.lsafGetProperties
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: The data set WORK.LSAFGETPROPERTIES has 21 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.02 seconds
      

MPRINT(LSAF_GETPROPERTIES):   options nonotes;
MPRINT(LSAF_GETPROPERTIES):   proc sort data=work.lsafGetProperties sortseq=linguistic(strength=primary);
MPRINT(LSAF_GETPROPERTIES):   by name;
MPRINT(LSAF_GETPROPERTIES):   run;
MPRINT(LSAF_GETPROPERTIES):   options NOTES;
MPRINT(LSAF_GET_VERSION):  ;
MPRINT(LSAF_GET_VERSION):   data _null_;
MPRINT(LSAF_GET_VERSION):   set lsafGetProperties(where=(name='version'));
MPRINT(LSAF_GET_VERSION):   call symputx(symget('into'), coalescec(cats(value), '-'), 'G');
MPRINT(LSAF_GET_VERSION):   run;

NOTE: There were 1 observations read from the data set WORK.LSAFGETPROPERTIES.
      WHERE name='version';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
                                                           The SAS System

      cpu time            0.00 seconds
      

MPRINT(GET_JOB_PROG_INFO):  ;
MPRINT(GET_JOB_PROG_INFO):   *-2023-01-24 - jbodart - retrieve dateSubmitted lsafJobSubmissionId sessionId location jobPath 
jobVersion from &_PARENTJOB_WRK_/submitted_jobs.txt (if available) -*;
%SHELLCOMMAND(cat  submitted_jobs.txt, 
path=/saswork/sas_tmp/SAS_work89DD00193DB6_xar08auv.vsp.sas.com/SAS_work944F00193DB6_xar08auv.vsp.sas.com, resultvar=result, dsin=, 
dsout=submitted_jobs(drop=result), print=Y, linenum=N, cond=1, for_each_do=line = __line ; output  ;, otherwise_do=, into=);
MPRINT(SHELLCOMMAND):   *- The following 3 macros definitions are adpated from SAS Support / Samples and Notes: Sample 38518: 
Dynamically setting the CLASSPATH for use in a DATA step that uses the Java object component available at 
https://support.sas.com/kb/38/518.html 
--------------------------------------------------------------------------------------------------------------*;
NOTE: The macro INIT_CLASSPATH_UPDATE completed compilation without errors.
      11 instructions 904 bytes.
NOTE: The macro ADD_TO_CLASSPATH completed compilation without errors.
      15 instructions 904 bytes.
NOTE: The macro RESET_CLASSPATH completed compilation without errors.
      7 instructions 216 bytes.
MPRINT(INIT_CLASSPATH_UPDATE):   DATA _null_;
MPRINT(INIT_CLASSPATH_UPDATE):   LENGTH path_separator $ 2 orig_classpath $ 500;
MPRINT(INIT_CLASSPATH_UPDATE):   DECLARE JavaObj f("java.io.File", "");
MPRINT(INIT_CLASSPATH_UPDATE):   f.getStaticStringField("pathSeparator", path_separator);
MPRINT(INIT_CLASSPATH_UPDATE):   orig_classpath = STRIP(SYSGET("CLASSPATH"));
MPRINT(INIT_CLASSPATH_UPDATE):   IF _ERROR_ = 1 OR LENGTH(orig_classpath) = 0 THEN DO;
MPRINT(INIT_CLASSPATH_UPDATE):   PUT "NOTE: Ignore any messages from the next statement(s)";
MPRINT(INIT_CLASSPATH_UPDATE):   orig_classpath = "";
MPRINT(INIT_CLASSPATH_UPDATE):   END;
MPRINT(INIT_CLASSPATH_UPDATE):   if orig_classpath = "" then CALL SYMPUT('CP_orig_classpath', SYSGET("CLASSPATH"));
MPRINT(INIT_CLASSPATH_UPDATE):   else CALL SYMPUT('CP_orig_classpath', STRIP(orig_classpath));
MPRINT(INIT_CLASSPATH_UPDATE):   CALL SYMPUT('CP_path_separator', COMPRESS(path_separator));
MPRINT(INIT_CLASSPATH_UPDATE):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SHELLCOMMAND):  ;
MPRINT(ADD_TO_CLASSPATH):   DATA _null_;
MPRINT(ADD_TO_CLASSPATH):   LENGTH current_classpath $ 500 new_classpath $ 500;
MPRINT(ADD_TO_CLASSPATH):   current_classpath = STRIP(SYSGET("CLASSPATH"));
MPRINT(ADD_TO_CLASSPATH):   IF _ERROR_ = 1 OR LENGTH(current_classpath) = 0 THEN DO;
MPRINT(ADD_TO_CLASSPATH):   PUT "NOTE: Ignore any messages from the nearby statement(s)";
MPRINT(ADD_TO_CLASSPATH):   new_classpath = 
"/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/macros/_librar
y/shellcommand.0.0.1.jar";
MPRINT(ADD_TO_CLASSPATH):   END;
MPRINT(ADD_TO_CLASSPATH):   ELSE DO;
MPRINT(ADD_TO_CLASSPATH):   new_classpath = COMPRESS(current_classpath) || ":" || 
"/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/macros/_librar
y/shellcommand.0.0.1.jar";
MPRINT(ADD_TO_CLASSPATH):   END;
MPRINT(ADD_TO_CLASSPATH):   CALL SYMPUT('CP_new_classpath', STRIP(new_classpath));
MPRINT(ADD_TO_CLASSPATH):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
                                                           The SAS System

      cpu time            0.00 seconds
      

NOTE: Setting Java classpath to 
!CLASSPATH:/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/macr
os/_library/shellcommand.0.0.1.jar
MPRINT(ADD_TO_CLASSPATH):   OPTIONS SET=CLASSPATH 
"!CLASSPATH:/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/mac
ros/_library/shellcommand.0.0.1.jar";
MPRINT(SHELLCOMMAND):  ;
MPRINT(SHELLCOMMAND):   data submitted_jobs(drop=result);
MPRINT(SHELLCOMMAND):   declare javaobj shellcommand("shellCommand/ShellCommand");
MPRINT(SHELLCOMMAND):   result = put(" ", $32000.);
MPRINT(SHELLCOMMAND):   if 1 then do;
MPRINT(SHELLCOMMAND):   shellcommand.callStaticStringMethod("commandStr", strip('cat  submitted_jobs.txt'), 
cats("/saswork/sas_tmp/SAS_work89DD00193DB6_xar08auv.vsp.sas.com/SAS_work944F00193DB6_xar08auv.vsp.sas.com"), result);
MPRINT(SHELLCOMMAND):   do __i = 1 to countw(result, "0A0D"x);
MPRINT(SHELLCOMMAND):   __line = put(scan(result, __i, "0A0D"x), $char500.);
MPRINT(SHELLCOMMAND):   __linelen = length(__line);
MPRINT(SHELLCOMMAND):   line = __line ;
MPRINT(SHELLCOMMAND):   output ;
MPRINT(SHELLCOMMAND):  ;
MPRINT(SHELLCOMMAND):   putlog __line $varying. __linelen;
MPRINT(SHELLCOMMAND):   end;
MPRINT(SHELLCOMMAND):   drop __i __line __linelen;
MPRINT(SHELLCOMMAND):   end;
MPRINT(SHELLCOMMAND):   run;

dateSubmitted             | lsafJobSubmissionId                  | sessionId                            | location   | jobPath [ job
Version ]
2023-02-14T23:49:06+00:00 | cb37e48a-71d9-49b3-aa7c-9459a08c0b82 | 20fe99f9-5ea5-43ef-be12-0b0a0ccaf5a8 | REPOSITORY | /general/bios
tat/jobs/gadam_ongoing_studies/prod/jobs/job_studies_status.job [  ]
2023-02-14T23:49:16+00:00 | 4b878872-2fe9-4ec3-b9f8-02e2e7b895ce | d9df0b5b-3bee-4fbd-9daf-9e2affb9497d | REPOSITORY | /general/bios
tat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_sdtm_key_core_vars.job [  ]
2023-02-14T23:49:25+00:00 | 55fe1570-2db1-4163-9277-0dad3fc08630 | f685b710-5b41-4fa9-bbe9-944391e71266 | REPOSITORY | /general/bios
tat/jobs/gadam_ongoing_studies/prod/jobs/job_unzip_sdtm_sources.job [  ]
2023-02-14T23:51:41+00:00 | feed1f0f-2d9a-42b9-8060-8fddd1e47337 | 4724796d-7de6-4aed-81d4-34fc18efa8d7 | REPOSITORY | /general/bios
tat/jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job [  ]
path: /saswork/sas_tmp/SAS_work89DD00193DB6_xar08auv.vsp.sas.com/SAS_work944F00193DB6_xar08auv.vsp.sas.com
command: [sh, -c, cat  submitted_jobs.txt]
NOTE: The data set WORK.SUBMITTED_JOBS has 6 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

NOTE: Setting Java classpath back to its original state: !CLASSPATH
MPRINT(RESET_CLASSPATH):   OPTIONS SET=CLASSPATH "!CLASSPATH";
MPRINT(SHELLCOMMAND):  ;
MPRINT(GET_JOB_PROG_INFO):  ;
MPRINT(GET_JOB_PROG_INFO):   data submitted_jobs;
MPRINT(GET_JOB_PROG_INFO):   set submitted_jobs;
MPRINT(GET_JOB_PROG_INFO):   if _n_=1 then do;
MPRINT(GET_JOB_PROG_INFO):   call symputx('submJobVars', compbl(translate(line, " ", "|[]")));
MPRINT(GET_JOB_PROG_INFO):   delete;
MPRINT(GET_JOB_PROG_INFO):   end;
MPRINT(GET_JOB_PROG_INFO):   if line ^= ' ';
MPRINT(GET_JOB_PROG_INFO):   run;
                                                           The SAS System


NOTE: There were 6 observations read from the data set WORK.SUBMITTED_JOBS.
NOTE: The data set WORK.SUBMITTED_JOBS has 4 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Read SUBMJOBVARS=dateSubmitted lsafJobSubmissionId sessionId location jobPath jobVersion
Keeping only expected vars: EXPECTED_SUBMJOBVARS=dateSubmitted lsafJobSubmissionId sessionId location jobPath jobVersion
NOTE: The macro L completed compilation without errors.
      51 instructions 1936 bytes.
MPRINT(L):   data submitted_jobs;
MPRINT(L):   set submitted_jobs end=last;
MPRINT(L):   length dateSubmitted $32 lsafJobSubmissionId sessionId $64 location $32 jobPath $1024 jobVersion $20;
MPRINT(L):   DATESUBMITTED = strip(scan(line, 1, "|[]"));
MPRINT(L):   LSAFJOBSUBMISSIONID = strip(scan(line, 2, "|[]"));
MPRINT(L):   SESSIONID = strip(scan(line, 3, "|[]"));
MPRINT(L):   LOCATION = strip(scan(line, 4, "|[]"));
MPRINT(L):   JOBPATH = strip(scan(line, 5, "|[]"));
MPRINT(L):   JOBVERSION = strip(scan(line, 6, "|[]"));
MPRINT(L):   if scan(jobpath, -1, "/\") = "job_lsaf_get_last_sdtm.job";
MPRINT(L):   jobVersion = coalescec(jobVersion, '-');
MPRINT(L):   put (dateSubmitted lsafJobSubmissionId sessionId location jobPath jobVersion) (=);
MPRINT(L):   array _jobinfo $ dateSubmitted lsafJobSubmissionId sessionId location jobPath jobVersion;
MPRINT(L):   drop i;
MPRINT(L):   if lsafJobSubmissionId ^= ' ' then do;
MPRINT(L):   do i = 1 to dim(_jobinfo);
MPRINT(L):   call symputx(vname(_jobinfo[i]), trim(_jobinfo[i]), "G");
MPRINT(L):   end;
MPRINT(L):   end;
MPRINT(L):   run;

dateSubmitted=2023-02-14T23:51:41+00:00 lsafJobSubmissionId=feed1f0f-2d9a-42b9-8060-8fddd1e47337
sessionId=4724796d-7de6-4aed-81d4-34fc18efa8d7 location=REPOSITORY
jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job jobVersion=-
NOTE: There were 4 observations read from the data set WORK.SUBMITTED_JOBS.
NOTE: The data set WORK.SUBMITTED_JOBS has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(GET_JOB_PROG_INFO):  ;
DATESUBMITTED=2023-02-14T23:51:41+00:00  LSAFJOBSUBMISSIONID=feed1f0f-2d9a-42b9-8060-8fddd1e47337   
SESSIONID=4724796d-7de6-4aed-81d4-34fc18efa8d7  LOCATION=REPOSITORY 
JOBPATH=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job JOBVERSION=-
MPRINT(LSAF_GET_LAST_SDTM):  ;
_LSAFJOBNAME_ = job_lsaf_get_last_sdtm.job
progversion = 1.3
LSAF_GET_LAST_SDTM CHECK_AND_LOAD_GADAM Y
LSAF_GET_LAST_SDTM COMPOUNDS argx-117
LSAF_GET_LAST_SDTM CREATE_FOLDER Y
LSAF_GET_LAST_SDTM CREATE_GADAM_FOLDER Y
LSAF_GET_LAST_SDTM DOMAINS 
LSAF_GET_LAST_SDTM FORCE N
LSAF_GET_LAST_SDTM INDICATIONS 
LSAF_GET_LAST_SDTM LAST_REFRESH_RELDY . - 0
                                                           The SAS System

LSAF_GET_LAST_SDTM MOCK N
LSAF_GET_LAST_SDTM NEXT_JOB /general/biostat/jobs/gadam_rebuild_adam/dev/jobs/job_gadam_rebuild_adam.job
LSAF_GET_LAST_SDTM QC_GADAM_VS_STUDY Y
LSAF_GET_LAST_SDTM REBUILD_GADAM_DATASETS Y
LSAF_GET_LAST_SDTM REFRESH_SDTM Y
LSAF_GET_LAST_SDTM RUN_GADAM_TABLES Y
LSAF_GET_LAST_SDTM RUN_NEXT_JOB N
LSAF_GET_LAST_SDTM SETUP_GADAM_FOLDER N
LSAF_GET_LAST_SDTM STUDIES 
LSAF_GET_LAST_SDTM WAIT Y
GLOBAL CHECK_AND_LOAD_GADAM Y
GLOBAL COMPOUND biostat
GLOBAL COMPOUNDS argx-117
GLOBAL CP_ORIG_CLASSPATH !CLASSPATH
GLOBAL CP_PATH_SEPARATOR :
GLOBAL CREATE_FOLDER Y
GLOBAL CREATE_GADAM_FOLDER Y
GLOBAL DATESUBMITTED 2023-02-14T23:51:41+00:00
GLOBAL DEBUG 1
GLOBAL DOMAINS 
GLOBAL FCMPOUTLIB work.functions
GLOBAL FORCE N
GLOBAL GADAM_FILES_SOURCE /general/biostat/gadam
GLOBAL GENERAL 
lsafsharedSASWorkspaces.transientjob_lsaf_get_last_sdtm.job100da6ddea9e45d39dc81560978c2d15/general/biostat/
GLOBAL INDICATION jobs
GLOBAL INDICATIONS 
GLOBAL JOBPATH /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job
GLOBAL JOBPROGVERSION 
GLOBAL JOBVERSION -
GLOBAL JOB_INSTANCE Ngos117Prod_4
GLOBAL LAST_REFRESH_RELDY . - 0
GLOBAL LOCALROOTFOLDER 
GLOBAL LOCATION REPOSITORY
GLOBAL LSAFJOBSUBMISSIONID feed1f0f-2d9a-42b9-8060-8fddd1e47337
GLOBAL MOCK N
GLOBAL NEXT_JOB /general/biostat/jobs/gadam_rebuild_adam/dev/jobs/job_gadam_rebuild_adam.job
GLOBAL OUTPUTFILENAME none
GLOBAL PACKAGE run
GLOBAL PGMNAME lsaf_get_last_sdtm
GLOBAL PROGNAME lsaf_get_last_sdtm.sas
GLOBAL PROGPATH /general/biostat/jobs/gadam_ongoing_studies/prod/programs/
GLOBAL PROGVERSION 1.3
GLOBAL PROJECTSMETAPATH 
lsafsharedSASWorkspaces.transientjob_lsaf_get_last_sdtm.job100da6ddea9e45d39dc81560978c2d15/general/biostat/metadata/proj
ects/
GLOBAL QC_GADAM_VS_STUDY Y
GLOBAL REBUILD_GADAM_DATASETS Y
GLOBAL REFRESH_SDTM Y
GLOBAL RELREPEVPATH /general/biostat/jobs/gadam_ongoing_studies/prod/
GLOBAL REPEVPATH 
lsafsharedSASWorkspaces.transientjob_lsaf_get_last_sdtm.job100da6ddea9e45d39dc81560978c2d15/general/biostat/jobs/gadam_on
going_studies/prod/
GLOBAL RESULT 1
GLOBAL REVENT 
GLOBAL RUNENVIRONMENT repository
GLOBAL RUN_GADAM_TABLES Y
GLOBAL RUN_NEXT_JOB N
                                                           The SAS System

GLOBAL SEPCHAR /
GLOBAL SESSIONID 4724796d-7de6-4aed-81d4-34fc18efa8d7
GLOBAL SETUP_GADAM_FOLDER N
GLOBAL STUDIES 
GLOBAL STUDY gadam_ongoing_studies
GLOBAL SYS_SQL_IP_ALL -1
GLOBAL SYS_SQL_IP_STMT 
GLOBAL USE_SAS_WORKSPACE_MACROS 
GLOBAL WAIT Y
GLOBAL _LSAFEXISTS_ 1
GLOBAL _LSAFJOBNAME_ job_lsaf_get_last_sdtm.job
GLOBAL _LSAFMSG_ Success.
GLOBAL _LSAFRC_ 0
GLOBAL _LSAFXXXID_ 100da6dd-ea9e-45d3-9dc8-1560978c2d15
GLOBAL _LSAF_PRODUCT_NAME_ SAS Life Science Analytics Framework
GLOBAL _PARENTJOB_WRK_ /saswork/sas_tmp/SAS_work89DD00193DB6_xar08auv.vsp.sas.com/SAS_work944F00193DB6_xar08auv.vsp.sas.com
GLOBAL _PARENTJOB_WS_ /lsafshared/SASWorkspaces/.transient/job_gadam_ongoing_studies.job-46e1f72b-2c77-4ab6-8028-33761e4697ba
GLOBAL _SASDRGDEVENV_ true
GLOBAL _SASFILELOCATION_ generalbiostatjobsgadam_ongoing_studiesprodprograms
GLOBAL _SASFILEPATH_ generalbiostatjobsgadam_ongoing_studiesprodprogramslsaf_get_last_sdtm.sas
GLOBAL _SASINSTANCE_ xarprod.ondemand.sas.com
GLOBAL _SASUSRWS_ 
lsafsharedSASWorkspaces.transientjob_lsaf_get_last_sdtm.job100da6ddea9e45d39dc81560978c2d15Usersjbodart
GLOBAL _SASWS_ lsafsharedSASWorkspaces.transientjob_lsaf_get_last_sdtm.job100da6ddea9e45d39dc81560978c2d15
GLOBAL _SDDUSR_ jbodart
GLOBAL _METAUSER jbodart
AUTOMATIC AFDSID 0
AUTOMATIC AFDSNAME 
AUTOMATIC AFLIB 
AUTOMATIC AFSTR1 
AUTOMATIC AFSTR2 
AUTOMATIC FSPBDV 
AUTOMATIC SYSADDRBITS 64
AUTOMATIC SYSBUFFR 
AUTOMATIC SYSCC 1012
AUTOMATIC SYSCHARWIDTH 1
AUTOMATIC SYSCMD 
AUTOMATIC SYSDATASTEPPHASE 
AUTOMATIC SYSDATE 14FEB23
AUTOMATIC SYSDATE9 14FEB2023
AUTOMATIC SYSDAY Tuesday
AUTOMATIC SYSDEVIC 
AUTOMATIC SYSDMG 0
AUTOMATIC SYSDSN WORK    SUBMITTED_JOBS                                                     
AUTOMATIC SYSENCODING utf-8
AUTOMATIC SYSENDIAN LITTLE
AUTOMATIC SYSENV BACK
AUTOMATIC SYSERR 0
AUTOMATIC SYSERRORTEXT Error in the LIBNAME statement.
AUTOMATIC SYSFILRC 0
AUTOMATIC SYSHOSTINFOLONG Linux LIN X64 4.18.0-305.19.1.el8_4.x86_64 #1 SMP Tue Sep 7 07:07:31 EDT 2021 x86_64 Red Hat Enterprise 
Linux release 8.4 (Ootpa) 
AUTOMATIC SYSHOSTNAME xar08auv
AUTOMATIC SYSINCLUDEFILEDEVICE 
AUTOMATIC SYSINCLUDEFILEDIR 
AUTOMATIC SYSINCLUDEFILEFILEREF 
AUTOMATIC SYSINCLUDEFILENAME 
AUTOMATIC SYSINDEX 38
                                                           The SAS System

AUTOMATIC SYSINFO 0
AUTOMATIC SYSJOBID 1660478
AUTOMATIC SYSLAST WORK.SUBMITTED_JOBS
AUTOMATIC SYSLCKRC 0
AUTOMATIC SYSLIBRC 70071
AUTOMATIC SYSLOGAPPLNAME 
AUTOMATIC SYSMACRONAME LSAF_GET_LAST_SDTM
AUTOMATIC SYSMAXLONG 9007199254740992
AUTOMATIC SYSMENV 
AUTOMATIC SYSMSG 
AUTOMATIC SYSNCPU 4                   
AUTOMATIC SYSNOBS 1
AUTOMATIC SYSODSESCAPECHAR 03
AUTOMATIC SYSODSGRAPHICS 0
AUTOMATIC SYSODSPATH  WORK.TEMPLAT(UPDATE) SASUSER.TEMPLAT(READ) SASHELP.TMPLMST(READ)
AUTOMATIC SYSPARM 
AUTOMATIC SYSPRINTTOLOG 
AUTOMATIC SYSPRINTTOLIST 
AUTOMATIC SYSPROCESSID 41DDAF0582C5876A4018000000000000
AUTOMATIC SYSPROCESSMODE SAS Workspace Server
AUTOMATIC SYSPROCESSNAME Object Server
AUTOMATIC SYSPROCNAME 
AUTOMATIC SYSRC 0
AUTOMATIC SYSSCP LIN X64
AUTOMATIC SYSSCPL Linux
AUTOMATIC SYSSITE 70265777
AUTOMATIC SYSSIZEOFLONG 8
AUTOMATIC SYSSIZEOFPTR 8
AUTOMATIC SYSSIZEOFUNICODE 4
AUTOMATIC SYSSTARTID 
AUTOMATIC SYSSTARTNAME 
AUTOMATIC SYSTCPIPHOSTNAME xar08auv.vsp.sas.com
AUTOMATIC SYSTIME 23:51
AUTOMATIC SYSTIMEZONE 
AUTOMATIC SYSTIMEZONEIDENT 
AUTOMATIC SYSTIMEZONEOFFSET 0
AUTOMATIC SYSUSERID jbodart
AUTOMATIC SYSVER 9.4     
AUTOMATIC SYSVLONG 9.04.01M7P080520
AUTOMATIC SYSVLONG4 9.04.01M7P08052020
AUTOMATIC SYSWARNINGTEXT 
path = 
/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongo
ing_studies/prod/programs/
pgmname=lsaf_get_last_sdtm
MPRINT(LSAF_GET_LAST_SDTM):   ods escapechar="^";
MPRINT(LSAF_GET_LAST_SDTM):  ;
MAUTOCOMPLOC:  The autocall macro HTML_STYLE is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/mac
            ros/_library/html_style.sas.
NOTE: The macro HTML_STYLE completed compilation without errors.
      98 instructions 8512 bytes.
MPRINT(HTML_STYLE):   ods path(prepend) work.templat(update);
MPRINT(HTML_STYLE):   proc template ;
MPRINT(HTML_STYLE):   define style HTML_STYLE ;
MPRINT(HTML_STYLE):   parent = styles.HTMLBLUE ;
NOTE: The quoted string currently being processed has become more than 2000 bytes long.  You might have unbalanced quotation marks.
MPRINT(HTML_STYLE):   STYLE BODY FROM BODY / PREHTML="                     <h3>Table of Contents</h3>                    <div 
                                                           The SAS System

id=""toc"">                        Not yet loaded ...                    </div>                    <hr/>                    <div 
id=""contents"">" POSTHTML="                 </div>                <SCRIPT LANGUAGE=JAVASCRIPT>                   window.onload = 
function () {                       var toc = """";                       var level = 0;                           
document.getElementById(""contents"").innerHTML =                              
document.getElementById(""contents"").innerHTML.replace(                                  /<h([\d])>([^<]+)<\/h([\d])>/gi,          
                        function (str, openLevel, titleText, closeLevel) {                                      if (openLevel != 
closeLevel) {                                          return str;                                      }                           
            if (openLevel > level) {                                          toc += (new Array(openLevel - level + 
1)).join(""<ul>"");                                      } else if (openLevel < level) {                                          
toc += (new Array(level - openLevel + 1)).join(""</ul>"");                                      }                                   
    level = parseInt(openLevel);                                       var anchor = titleText.replace(/ /g, ""_"");                 
                     toc += ""<li><a href=\""#"" + anchor + ""\"">"" + titleText                                          + 
""</a></li>"";                                       return ""<h"" + openLevel + ""><a name=\"""" + anchor + ""\"">""               
                           + titleText + ""</a></h"" + closeLevel + "">"";                                  }                       
       );                           if (level) {                              toc += (new Array(level + 1)).join(""</ul>"");        
                  }                           document.getElementById(""toc"").innerHTML = toc;                                     
                var myElements = document.getElementsByTagName('figure');                          for (var i = 0; i < 
myElements.length; i++) {                             var myElem = myElements[i];                             if 
(myElem.hasChildNodes()){                               var children = myElem.childNodes;                               for (var j 
= 0; j < children.length; j++) {                                 if (children[j].nodeName == 'FIGCAPTION') {                        
           children[j].innerHTML = '[' +myElem.id + '] '+ children[j].innerHTML;                                   
children[j].style.color = ""red"";                                 }                                 if (children[j].nodeName == 
'TITLE') {                                   children[j].innerHTML = '[' +myElem.id + '] '+ children[j].innerHTML;                  
                 children[j].style.color = ""red"";                                 }                               }               
              }                          }                                                    var myElements = 
document.getElementsByTagName('img');                          for (var i = 0; i < myElements.length; i++) {                        
     var myElem = myElements[i];                             var descr = """";                              if 
(myElem.getAttribute(""title"") != null & myElem.getAttribute(""title"") != '') {                                 descr = 
myElem.getAttribute(""title"");                             }                             if (myElem.getAttribute(""id"") != null & 
myElem.getAttribute(""id"") != '') {                                descr = '[' + myElem.getAttribute(""id"") + '] ' + descr;       
                      } else if (myElem.getAttribute(""src"") != null & myElem.getAttribute(""src"") != '') {                       
         descr = '[' + myElem.getAttribute(""src"") + '] ' + descr;                             } else if 
(myElem.getAttribute(""alt"") != null & myElem.getAttribute(""alt"") != '') {                                descr = '[' + 
myElem.getAttribute(""alt"") + '] ' + descr;                             }                             
myElem.setAttribute(""title"", descr );                             myElem.setAttribute(""alt"", descr );                          
}                                                    var myElements = document.getElementsByTagName('svg');                         
 for (var i = 0; i < myElements.length; i++) {                             var myElem = myElements[i];                             
if (myElem.hasChildNodes()){                               var children = myElem.childNodes;                               for (var 
j = 0; j < children.length; j++) {                                 if (children[j].nodeName.toUpperCase() == 'DESC') {              
                     children[j].innerHTML = '[' + myElem.id + '] '+ children[j].innerHTML;                                 }       
                          if (children[j].nodeName.toUpperCase() == 'TITLE') {                                   
children[j].innerHTML = '[' + myElem.id + '] '+ children[j].innerHTML;                                 }                            
   }                             }                             var element = document.createElementNS('http://www.w3.org/2000/svg', 
'text');                             element.setAttributeNS(null, 'x', 5);                             element.setAttributeNS(null, 
'y', 15);                             var txt = document.createTextNode(""[""+myElem.id+""]"");                             
element.appendChild(txt);                             myElem.appendChild(element);                             
myElem.parentNode.innerHTML += "" "";                           }                    };                </SCRIPT>" ;
MPRINT(HTML_STYLE):   end;
NOTE: STYLE 'Html_style' has been saved to: WORK.TEMPLAT
NOTE: PROCEDURE TEMPLATE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(HTML_STYLE):   run ;
MPRINT(LSAF_GET_LAST_SDTM):  ;
MPRINT(LSAF_GET_LAST_SDTM):   option nocenter ps=max ls=max ;
MPRINT(LSAF_GET_LAST_SDTM):   ods html5 (id=htmplot) body = "lsaf_get_last_sdtm_summary.html" path = 
"/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/output/" (url=none) gpath = 
"/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/output/lsaf_get_last_sdtm_summary/" (url="lsaf_get_last_sdtm_summary/") anchor = "summary" style = 
HTML_STYLE device = SVG options(svg_mode='inline') ;
NOTE: Writing HTML5(HTMPLOT) Body file: lsaf_get_last_sdtm_summary.html
MPRINT(LSAF_GET_LAST_SDTM):   *- Test -*;
MPRINT(LSAF_GET_LAST_SDTM):   *ods html5(id=htmplot) body = "&pgmname._&out..html" path = "%sysfunc(pathname(work, L))&sepchar." (url=none) gpath = "%sysfunc(pathname(work, L))&sepchar.&pgmname._&out.&sepchar." (url="&pgmname._&out./") anchor = "&out." 
style = HTML_STYLE device = SVG options(svg_mode='inline') ;
MPRINT(LSAF_GET_LAST_SDTM):   *ods listing close;
MPRINT(LSAF_GET_LAST_SDTM):   *- jbodart 2022-12-01 - keep ods listing open -*;
MPRINT(LSAF_GET_LAST_SDTM):   ods graphics on / reset=all width=8in tipmax=1000 imagemap=on imagename="summary" reset=index(1);
MPRINT(LSAF_GET_LAST_SDTM):   title "Outputs of /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/programs/lsaf_get_last_sdtm.sas - version: 1.3";
MPRINT(LSAF_GET_LAST_SDTM):   title2 "Job job_lsaf_get_last_sdtm.job started 2023-02-14T23:51:44";
MPRINT(LSAF_GET_LAST_SDTM):   footnote;
MPRINT(LSAF_GET_LAST_SDTM):   proc sql print;
MPRINT(LSAF_GET_LAST_SDTM):   select * from sashelp.vtitle where type=" ";
NOTE: No rows were selected.
MPRINT(LSAF_GET_LAST_SDTM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   title;
NOTE: The macro TEST_IF_EXISTS completed compilation without errors.
      35 instructions 832 bytes.
NOTE: The macro GET_ITEMTYPE completed compilation without errors.
      35 instructions 840 bytes.
MPRINT(LSAF_GET_LAST_SDTM):   *- get all repository folders 'current' below /clinical -*;
MPRINT(LSAF_GET_LAST_SDTM):   option nomprint;
MAUTOCOMPLOC:  The autocall macro LSAF_SEARCH is compiling using the autocall source file /sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.6.1/sasmacros/lsaf_search.sas.
NOTE: The macro LSAF_SEARCH completed compilation without errors.
      153 instructions 10352 bytes.
MAUTOCOMPLOC:  The autocall macro LSAF_PRINTWARNINGMESSAGE is compiling using the autocall source file /sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.6.1/sasmacros/lsaf_printwarningmessage.sas.
NOTE: The macro LSAF_PRINTWARNINGMESSAGE completed compilation without errors.
      30 instructions 800 bytes.


NOTE: SAS Life Science Analytics Framework Macro: *  Items were found matching the search criteria.
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_search
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafSearchLimitReached_= 0
NOTE: The data set WORK.LSAF_STUDIES has 102 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           5.41 seconds
      cpu time            0.18 seconds
      

MAUTOCOMPLOC:  The autocall macro DSATTR is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/macros/global_macros/dsattr.sas.
NOTE: The macro DSATTR completed compilation without errors.
      507 instructions 15072 bytes.
MAUTOCOMPLOC:  The autocall macro LOWCASE is compiling using the autocall source file /sso/sfw/sas/940/SASFoundation/9.4/sasautos/lowcase.sas.
NOTE: The macro LOWCASE completed compilation without errors.
      29 instructions 512 bytes.
NOTE: The dataset WORK.LSAF_STUDIES has 102 observations and 22 variables.
MPRINT(LSAF_GET_LAST_SDTM):   data lsaf_dm_current0;
MPRINT(LSAF_GET_LAST_SDTM):   set lsaf_studies (keep=path itemType );
MPRINT(LSAF_GET_LAST_SDTM):   studypath=path;
MPRINT(LSAF_GET_LAST_SDTM):   path=cats(path, "/dm/staging/current");
MPRINT(LSAF_GET_LAST_SDTM):   exists_path=put(runmacro('%test_if_exists('||strip(path)||');'), $400.);
MPRINT(LSAF_GET_LAST_SDTM):   if exists_path ^= "1" then do;
MPRINT(LSAF_GET_LAST_SDTM):   if exists_path = "0" then put "War" "ning: LSAF path does not exist (yet): " path;
MPRINT(LSAF_GET_LAST_SDTM):   else put "WAR" "NING: Check if LSAF path exists: " path " returned: " exists_path;
MPRINT(LSAF_GET_LAST_SDTM):   delete;
MPRINT(LSAF_GET_LAST_SDTM):   end;
MPRINT(LSAF_GET_LAST_SDTM):   drop exists_path;
MPRINT(LSAF_GET_LAST_SDTM):   itemType=put(runmacro('%get_itemType('||strip(path)||');'), $200.);
MPRINT(LSAF_GET_LAST_SDTM):   if itemType ^= "sas:folder" then do;
MPRINT(LSAF_GET_LAST_SDTM):   put "War" "ning: Unexpected: " itemType= " for " path=;
MPRINT(LSAF_GET_LAST_SDTM):   end;
MPRINT(LSAF_GET_LAST_SDTM):   run;

The SAS System

MPRINT(RUN_MACRO):   option nomprint;
Warning: LSAF path does not exist (yet): /clinical/argx-113/bp/argx-113-0000/dm/staging/current
Warning: LSAF path does not exist (yet): /clinical/argx-113/paa/argx-113-0000/dm/staging/current
Warning: LSAF path does not exist (yet): /clinical/argx-117/dgf/argx-117-0000/dm/staging/current
Warning: LSAF path does not exist (yet): /clinical/argx-117/x-ind/argx-117-0000/dm/staging/current
Warning: LSAF path does not exist (yet): /clinical/test/gadam-tests/test-0000/dm/staging/current
Warning: LSAF path does not exist (yet): /clinical/test/gsdtm-tests/test-0000/dm/staging/current
Warning: LSAF path does not exist (yet): /clinical/test/restore_indic/test-0000/dm/staging/current
Warning: LSAF path does not exist (yet): /clinical/test/smoke_indic/test-0000/dm/staging/current
Warning: LSAF path does not exist (yet): /clinical/test/x-ind/test-0000/dm/staging/current
NOTE: There were 102 observations read from the data set WORK.LSAF_STUDIES.
NOTE: The data set WORK.LSAF_DM_CURRENT0 has 93 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           7.46 seconds
      cpu time            1.27 seconds
      

NOTE: The dataset WORK.LSAF_DM_CURRENT0 has 93 observations and 3 variables.
MPRINT(LSAF_GET_LAST_SDTM):   ;
MPRINT(LSAF_GET_LAST_SDTM):   proc print data=lsaf_dm_current0(obs=10) width=min;
MPRINT(LSAF_GET_LAST_SDTM):   title "lsaf_dm_current0 (OBS=10)";
MPRINT(LSAF_GET_LAST_SDTM):   run;
NOTE: There were 10 observations read from the data set WORK.LSAF_DM_CURRENT0.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.02 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   title;
MPRINT(LSAF_GET_LAST_SDTM):   *- keep only the paths matching /clinical/<compound>/<indic>/<study>/dm/staging/current/ -*;
MPRINT(LSAF_GET_LAST_SDTM):   *- Get extra SDTM sources - especially those with non-standard paths - from spreadsheet ../input/sdtm_extra_sources.xlsx -*;
MPRINT(LSAF_GET_LAST_SDTM):   filename sdtmexls "/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/input/sdtm_extra_sources.xlsx";
MPRINT(LSAF_GET_LAST_SDTM):   proc import file = sdtmexls out=sdtm_extra_src0 dbms=xlsx replace;
MPRINT(LSAF_GET_LAST_SDTM):   RXLX;
MPRINT(LSAF_GET_LAST_SDTM):   run;

NOTE:    Variable Name Change.  link to R: -> link_to_R_                      
NOTE: One or more variables were converted because the data type is not supported by the V9 engine. For more details, run with options MSGLEVEL=I.
NOTE: The import data set has 11 observations and 2 variables.
NOTE: WORK.SDTM_EXTRA_SRC0 data set was successfully created.
NOTE: PROCEDURE IMPORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   filename sdtmexls;
NOTE: Fileref SDTMEXLS has been deassigned.
MPRINT(LSAF_GET_LAST_SDTM):   *- Derive compound, ind, study and filter on these variables according to macro (job) parameters -*;
MPRINT(LSAF_GET_LAST_SDTM):   data paths_dropped lsaf_dm_current(index=(studypath)) ;
MPRINT(LSAF_GET_LAST_SDTM):   attrib studypath length=$200 label="Study Path";
MPRINT(LSAF_GET_LAST_SDTM):   length compound ind study $20;
MPRINT(LSAF_GET_LAST_SDTM):   set lsaf_dm_current0(in=a keep=path itemtype) sdtm_extra_src0(keep=path) ;
MPRINT(LSAF_GET_LAST_SDTM):   if prxmatch('s!^((/[^/]+){4})/dm/staging/current$!\1!', strip(path)) then studypath = prxchange('s!^((/[^/]+){4})/dm/staging/current$!\1!', 1, strip(path));
MPRINT(LSAF_GET_LAST_SDTM):   else if (not a) and prxmatch('s!^((/[^/]+){4})/dm/staging/transfers/.*$!\1!', strip(path)) then studypath = prxchange('s!^((/[^/]+){4})/dm/staging/transfers/.*!\1!', 1, strip(path));
MPRINT(LSAF_GET_LAST_SDTM):   else if (not a) and prxmatch('s!^(/clinical(/[^/]+){3})/.*$!\1!', strip(path)) then studypath = prxchange('s!^((/[^/]+){4})/.*!\1!', 1, strip(path));
MPRINT(LSAF_GET_LAST_SDTM):   compound = scan(studypath, 2, "/\");
MPRINT(LSAF_GET_LAST_SDTM):   ind = scan(studypath, 3, "/\");
MPRINT(LSAF_GET_LAST_SDTM):   study = scan(studypath, 4, "/\");
MPRINT(LSAF_GET_LAST_SDTM):   if (not a) then do;
MPRINT(LSAF_GET_LAST_SDTM):   if prxmatch("/\.zip$/", cats(path)) then itemtype = "sas:zip";
MPRINT(LSAF_GET_LAST_SDTM):   else itemtype = "sas:folder";
MPRINT(LSAF_GET_LAST_SDTM):   exists_path=put(runmacro('%test_if_exists('||strip(path)||');'), $400.);
MPRINT(LSAF_GET_LAST_SDTM):   if exists_path ^= "1" then do;
MPRINT(LSAF_GET_LAST_SDTM):   if exists_path = "0" then put "War" "ning: LSAF path does not exist (yet): " path;
MPRINT(LSAF_GET_LAST_SDTM):   else put "WAR" "NING: Check if LSAF path exists: " path " returned: " exists_path;
MPRINT(LSAF_GET_LAST_SDTM):   *delete;
MPRINT(LSAF_GET_LAST_SDTM):   end;
MPRINT(LSAF_GET_LAST_SDTM):   drop exists_path;
MPRINT(LSAF_GET_LAST_SDTM):   itemType=put(runmacro('%get_itemType('||strip(path)||');'), $200.);
MPRINT(LSAF_GET_LAST_SDTM):   if itemType not in ("sas:folder" "sas:file") then do;
MPRINT(LSAF_GET_LAST_SDTM):   put "War" "ning: Unexpected: " itemType= " for " path=;
MPRINT(LSAF_GET_LAST_SDTM):   end;
MPRINT(LSAF_GET_LAST_SDTM):   if prxmatch("/\.zip$/", cats(path)) and itemType in ("sas:file") then itemtype = "sas:zip";
MPRINT(LSAF_GET_LAST_SDTM):   extrasrc = 'Y';
MPRINT(LSAF_GET_LAST_SDTM):   extrapath = path;
MPRINT(LSAF_GET_LAST_SDTM):   extratype = itemtype;
MPRINT(LSAF_GET_LAST_SDTM):   end;
MPRINT(LSAF_GET_LAST_SDTM):   if (prxmatch('!^(/[^/]+){4}/dm/staging/current$!', strip(path)) or (not a)) and index(upcase(" argx-117 "), " "||strip(upcase(compound))||" ") > 0 then output lsaf_dm_current;
MPRINT(LSAF_GET_LAST_SDTM):   else output paths_dropped;
MPRINT(LSAF_GET_LAST_SDTM):   run;

The SAS System

MPRINT(RUN_MACRO):   option nomprint;
NOTE: There were 93 observations read from the data set WORK.LSAF_DM_CURRENT0.
NOTE: There were 11 observations read from the data set WORK.SDTM_EXTRA_SRC0.
NOTE: The data set WORK.PATHS_DROPPED has 96 observations and 9 variables.
NOTE: The data set WORK.LSAF_DM_CURRENT has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.92 seconds
      cpu time            0.16 seconds
      

compounds = >argx-117< indications = >< studies = ><
NOTE: The macro GET_LSAF_CHILDREN completed compilation without errors.
      66 instructions 3688 bytes.
MPRINT(LSAF_GET_LAST_SDTM):   proc sql noprint;
MPRINT(LSAF_GET_LAST_SDTM):   create table WORK.lsafGetChildren ( parentpath character(200) label = 'Parent Path', path char(2048) label='Item Path', name char(256) label='Item Name', itemType char(32) label='Item Type', isContainer num label='Is Item A 
Container?', description char(512) label='Description', version char(32) label='Version Number', isVersioned num label='Is File Versioned', isCheckedOut num label='Is File Checked out', isLocked num label='Is File Locked', signatureStatus char(32) 
label='Is File Signed', size num label='Size In Bytes', formattedsize char(20) label="Size (Formatted)", createdBy char(64) label='Userid that created the item', created char(64) label='Item Creation Date', dateCreated num format=DATETIME. label='Date the 
item was created (SAS DateTime Format)', lastModifiedBy char(64) label='Userid that last modified the item content', lastModified char(64) label='Last Content Modification Date', dateLastModified num format=DATETIME. label='Date the item''s content was 
last modified (SAS DateTime Format)', propertiesLastModifiedBy char(64) label='Userid that last modified the item properties', propertiesLastModified char(64) label='Last Properties Modification Date', datePropertiesLastModified num format=DATETIME. 
label='Date the item''s properties were last modified (SAS DateTime Format)', state char(64) label='State of an Analysis or Project' );
NOTE: Table WORK.LSAFGETCHILDREN created, with 0 rows and 23 columns.
MPRINT(LSAF_GET_LAST_SDTM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   *- For each identified study path (=record in dataset WORK.LSAF_DM_CURRENT), get the 'children' paths below /clinical/<compound>/<indic>/<study>/dm/staging/current/ (up to 2 levels) into dataset WORK.lsafGetChildren -*;
MPRINT(LSAF_GET_LAST_SDTM):   data lsaf_dm_current2;
MPRINT(LSAF_GET_LAST_SDTM):   set lsaf_dm_current;
MPRINT(LSAF_GET_LAST_SDTM):   by studypath;
MPRINT(LSAF_GET_LAST_SDTM):   length cmd $500 result $200;
MPRINT(LSAF_GET_LAST_SDTM):   if itemtype = "sas:folder" then do;
MPRINT(LSAF_GET_LAST_SDTM):   cmd = '%get_lsaf_children('||strip(studypath)||','||strip(path)||', 2);';
MPRINT(LSAF_GET_LAST_SDTM):   result = runmacro(cmd);
MPRINT(LSAF_GET_LAST_SDTM):   *- runmacro: see note in program header -*;
MPRINT(LSAF_GET_LAST_SDTM):   end;
MPRINT(LSAF_GET_LAST_SDTM):   run;

The SAS System

MPRINT(RUN_MACRO):   option nomprint;
%get_lsaf_children(/clinical/argx-117/covid-19/argx-117-0000, /clinical/argx-117/covid-19/argx-117-0000/dm/staging/current, 2, out=work.lsafGetChildren);
%get_lsaf_children(/clinical/argx-117/covid-19/argx-117-2001, /clinical/argx-117/covid-19/argx-117-2001/dm/staging/current, 2, out=work.lsafGetChildren);
%get_lsaf_children(/clinical/argx-117/dgf/argx-117-2201, /clinical/argx-117/dgf/argx-117-2201/dm/staging/current, 2, out=work.lsafGetChildren);
%get_lsaf_children(/clinical/argx-117/hv/argx-117-0000, /clinical/argx-117/hv/argx-117-0000/dm/staging/current, 2, out=work.lsafGetChildren);
%get_lsaf_children(/clinical/argx-117/hv/argx-117-1901, /clinical/argx-117/hv/argx-117-1901/dm/staging/current, 2, out=work.lsafGetChildren);
%get_lsaf_children(/clinical/argx-117/mmn/argx-117-0000, /clinical/argx-117/mmn/argx-117-0000/dm/staging/current, 2, out=work.lsafGetChildren);
%get_lsaf_children(/clinical/argx-117/mmn/argx-117-2002, /clinical/argx-117/mmn/argx-117-2002/dm/staging/current, 2, out=work.lsafGetChildren);
%get_lsaf_children(/clinical/argx-117/mmn/argx-117-2003, /clinical/argx-117/mmn/argx-117-2003/dm/staging/current, 2, out=work.lsafGetChildren);
NOTE: There were 8 observations read from the data set WORK.LSAF_DM_CURRENT.
NOTE: The data set WORK.LSAF_DM_CURRENT2 has 8 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           1.78 seconds
      cpu time            0.48 seconds
      

NOTE: The dataset WORK.LSAFGETCHILDREN has 81 observations and 23 variables.
MPRINT(LSAF_GET_LAST_SDTM):   ;
MPRINT(LSAF_GET_LAST_SDTM):   proc print data=lsafGetChildren(obs=10) width=min;
MPRINT(LSAF_GET_LAST_SDTM):   title "lsafGetChildren";
MPRINT(LSAF_GET_LAST_SDTM):   run;
NOTE: There were 10 observations read from the data set WORK.LSAFGETCHILDREN.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   title;
MPRINT(LSAF_GET_LAST_SDTM):   *- Merge the children paths (from dataset WORK.lsafGetChildren) back with their parent folder information (<compound>/<indic>/<study>/dm/staging/current/) (from dataset WORK.lsaf_dm_current2), keeping only the paths below 
../dm/staging/current/3_sdtm/<*> and ../dm/staging/current/4_sas/datasets as well as paths equal to extrapath (from sdtm_extra_sources.xlsx) -*;
MPRINT(LSAF_GET_LAST_SDTM):   proc sql noprint;
MPRINT(LSAF_GET_LAST_SDTM):   create table lsaf_dm_current3 as select distinct a.studypath, a.extrasrc, a.extrapath, a.extratype, a.result as studyresult
MPRINT(VARLIST):   , b.path , b.name , b.itemType , b.isContainer , b.description , b.version , b.isVersioned , b.isCheckedOut , b.isLocked , b.signatureStatus , b.size , b.formattedsize , b.createdBy , b.created , b.dateCreated , b.lastModifiedBy , 
b.lastModified , b.dateLastModified , b.propertiesLastModifiedBy , b.propertiesLastModified , b.datePropertiesLastModified , b.state
MPRINT(LSAF_GET_LAST_SDTM):   from lsaf_dm_current2 as a left join work.lsafGetChildren(rename=(parentpath=studypath)) as b on a.studypath=b.studypath and a.itemType="sas:folder" having (extrasrc=" " and 
prxmatch('!^(/[^/]+){4}/dm/staging/current/(3_sdtm/[^/]+|4_sas/(metadata|datasets))$!', strip(path)) ) or (extrasrc = "Y" and path=extrapath) or (extrasrc = "Y" and extratype = "sas:zip") ;
NOTE: Table WORK.LSAF_DM_CURRENT3 created, with 18 rows and 27 columns.

MPRINT(LSAF_GET_LAST_SDTM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.16 seconds
      cpu time            0.16 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   proc print data=lsaf_dm_current3(obs=10) width=min;
MPRINT(LSAF_GET_LAST_SDTM):   title "lsaf_dm_current3";
MPRINT(LSAF_GET_LAST_SDTM):   run;
NOTE: There were 10 observations read from the data set WORK.LSAF_DM_CURRENT3.
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   title;
MPRINT(LSAF_GET_LAST_SDTM):   *- For each of the previously retrieved paths ( ../<study>/dm/staging/current/3_sdtm/<*> and ../<study>/dm/staging/current/4_sas/datasets, as well as the extra paths), get the sub-folders (children) paths (up to 2 levels) 
into dataset work.lsafGetChildren -*;
MPRINT(LSAF_GET_LAST_SDTM):   proc sql noprint;
MPRINT(LSAF_GET_LAST_SDTM):   create table WORK.lsafGetChildren ( parentpath character(200) label = 'Parent Path', path char(2048) label='Item Path', name char(256) label='Item Name', itemType char(32) label='Item Type', isContainer num label='Is Item A 
Container?', description char(512) label='Description', version char(32) label='Version Number', isVersioned num label='Is File Versioned', isCheckedOut num label='Is File Checked out', isLocked num label='Is File Locked', signatureStatus char(32) 
label='Is File Signed', size num label='Size In Bytes', formattedsize char(20) label="Size (Formatted)", createdBy char(64) label='Userid that created the item', created char(64) label='Item Creation Date', dateCreated num format=DATETIME. label='Date the 
item was created (SAS DateTime Format)', lastModifiedBy char(64) label='Userid that last modified the item content', lastModified char(64) label='Last Content Modification Date', dateLastModified num format=DATETIME. label='Date the item''s content was 
last modified (SAS DateTime Format)', propertiesLastModifiedBy char(64) label='Userid that last modified the item properties', propertiesLastModified char(64) label='Last Properties Modification Date', datePropertiesLastModified num format=DATETIME. 
label='Date the item''s properties were last modified (SAS DateTime Format)', state char(64) label='State of an Analysis or Project' );
NOTE: Table WORK.LSAFGETCHILDREN created, with 0 rows and 23 columns.
MPRINT(LSAF_GET_LAST_SDTM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   data lsaf_dm_current4;
MPRINT(LSAF_GET_LAST_SDTM):   set lsaf_dm_current3;
MPRINT(LSAF_GET_LAST_SDTM):   file print;
MPRINT(LSAF_GET_LAST_SDTM):   length cmd $500 result $200;
MPRINT(LSAF_GET_LAST_SDTM):   if itemtype = ' ' and extrasrc = "Y" then do;
MPRINT(LSAF_GET_LAST_SDTM):   itemtype = extratype;
MPRINT(LSAF_GET_LAST_SDTM):   path = extrapath;
MPRINT(LSAF_GET_LAST_SDTM):   end;
MPRINT(LSAF_GET_LAST_SDTM):   if itemtype = "sas:zip" then do;
MPRINT(LSAF_GET_LAST_SDTM):   cmd = '%test_if_exists('||strip(studypath)||"/biostat/staging/data_received/sdtm_last/unzip"||');';
MPRINT(LSAF_GET_LAST_SDTM):   *- would return: -1: This operation can only be performed on a container. -*;
MPRINT(LSAF_GET_LAST_SDTM):   result = runmacro(cmd);
MPRINT(LSAF_GET_LAST_SDTM):   *- runmacro: see note in program header -*;
MPRINT(LSAF_GET_LAST_SDTM):   putlog cmd= result=;
MPRINT(LSAF_GET_LAST_SDTM):   put cmd= result=;
MPRINT(LSAF_GET_LAST_SDTM):   if result = '1' then do;
MPRINT(LSAF_GET_LAST_SDTM):   path = catx("/", studypath, "biostat/staging/data_received/sdtm_last/unzip");
MPRINT(LSAF_GET_LAST_SDTM):   name="unzip";
MPRINT(LSAF_GET_LAST_SDTM):   itemtype = "sas:folder";
MPRINT(LSAF_GET_LAST_SDTM):   ISCONTAINER = 1;
MPRINT(LSAF_GET_LAST_SDTM):   end;
MPRINT(LSAF_GET_LAST_SDTM):   end;
MPRINT(LSAF_GET_LAST_SDTM):   if itemtype = "sas:folder" then do;
MPRINT(LSAF_GET_LAST_SDTM):   cmd = cats('%get_lsaf_children('||strip(path)||','||strip(path)||', 2);');
MPRINT(LSAF_GET_LAST_SDTM):   result = runmacro(cmd);
MPRINT(LSAF_GET_LAST_SDTM):   *- runmacro: see note in program header -*;
MPRINT(LSAF_GET_LAST_SDTM):   putlog cmd= result=;
MPRINT(LSAF_GET_LAST_SDTM):   put cmd= result=;
MPRINT(LSAF_GET_LAST_SDTM):   end;
MPRINT(LSAF_GET_LAST_SDTM):   run;

The SAS System

MPRINT(RUN_MACRO):   option nomprint;
%get_lsaf_children(/clinical/argx-117/covid-19/argx-117-0000/dm/staging/current/4_sas/datasets, /clinical/argx-117/covid-19/argx-117-0000/dm/staging/current/4_sas/datasets, 2, out=work.lsafGetChildren);
cmd=%get_lsaf_children(/clinical/argx-117/covid-19/argx-117-0000/dm/staging/current/4_sas/datasets,/clinical/argx-117/covid-19/argx-117-0000/dm/staging/current/4_sas/datasets, 2); result=0: Success.
%get_lsaf_children(/clinical/argx-117/covid-19/argx-117-0000/dm/staging/current/4_sas/metadata, /clinical/argx-117/covid-19/argx-117-0000/dm/staging/current/4_sas/metadata, 2, out=work.lsafGetChildren);
cmd=%get_lsaf_children(/clinical/argx-117/covid-19/argx-117-0000/dm/staging/current/4_sas/metadata,/clinical/argx-117/covid-19/argx-117-0000/dm/staging/current/4_sas/metadata, 2); result=0: Success.
%get_lsaf_children(/clinical/argx-117/covid-19/argx-117-2001/dm/staging/current/4_sas/datasets, /clinical/argx-117/covid-19/argx-117-2001/dm/staging/current/4_sas/datasets, 2, out=work.lsafGetChildren);
cmd=%get_lsaf_children(/clinical/argx-117/covid-19/argx-117-2001/dm/staging/current/4_sas/datasets,/clinical/argx-117/covid-19/argx-117-2001/dm/staging/current/4_sas/datasets, 2); result=0: Success.
%get_lsaf_children(/clinical/argx-117/covid-19/argx-117-2001/dm/staging/current/4_sas/metadata, /clinical/argx-117/covid-19/argx-117-2001/dm/staging/current/4_sas/metadata, 2, out=work.lsafGetChildren);
cmd=%get_lsaf_children(/clinical/argx-117/covid-19/argx-117-2001/dm/staging/current/4_sas/metadata,/clinical/argx-117/covid-19/argx-117-2001/dm/staging/current/4_sas/metadata, 2); result=0: Success.
%get_lsaf_children(/clinical/argx-117/dgf/argx-117-2201/dm/staging/current/4_sas/datasets, /clinical/argx-117/dgf/argx-117-2201/dm/staging/current/4_sas/datasets, 2, out=work.lsafGetChildren);
cmd=%get_lsaf_children(/clinical/argx-117/dgf/argx-117-2201/dm/staging/current/4_sas/datasets,/clinical/argx-117/dgf/argx-117-2201/dm/staging/current/4_sas/datasets, 2); result=0: Success.
%get_lsaf_children(/clinical/argx-117/dgf/argx-117-2201/dm/staging/current/4_sas/metadata, /clinical/argx-117/dgf/argx-117-2201/dm/staging/current/4_sas/metadata, 2, out=work.lsafGetChildren);
cmd=%get_lsaf_children(/clinical/argx-117/dgf/argx-117-2201/dm/staging/current/4_sas/metadata,/clinical/argx-117/dgf/argx-117-2201/dm/staging/current/4_sas/metadata, 2); result=0: Success.
%get_lsaf_children(/clinical/argx-117/hv/argx-117-0000/dm/staging/current/4_sas/datasets, /clinical/argx-117/hv/argx-117-0000/dm/staging/current/4_sas/datasets, 2, out=work.lsafGetChildren);
cmd=%get_lsaf_children(/clinical/argx-117/hv/argx-117-0000/dm/staging/current/4_sas/datasets,/clinical/argx-117/hv/argx-117-0000/dm/staging/current/4_sas/datasets, 2); result=0: Success.
%get_lsaf_children(/clinical/argx-117/hv/argx-117-0000/dm/staging/current/4_sas/metadata, /clinical/argx-117/hv/argx-117-0000/dm/staging/current/4_sas/metadata, 2, out=work.lsafGetChildren);
cmd=%get_lsaf_children(/clinical/argx-117/hv/argx-117-0000/dm/staging/current/4_sas/metadata,/clinical/argx-117/hv/argx-117-0000/dm/staging/current/4_sas/metadata, 2); result=0: Success.
%get_lsaf_children(/clinical/argx-117/hv/argx-117-1901/dm/staging/current/3_sdtm/20221206_final_sdtm___pp_20221206, /clinical/argx-117/hv/argx-117-1901/dm/staging/current/3_sdtm/20221206_final_sdtm___pp_20221206, 2, out=work.lsafGetChildren);
cmd=%get_lsaf_children(/clinical/argx-117/hv/argx-117-1901/dm/staging/current/3_sdtm/20221206_final_sdtm___pp_20221206,/clinical/argx-117/hv/argx-117-1901/dm/staging/current/3_sdtm/20221206_final_sdtm___pp_20221206, 2); result=0: Success.
%get_lsaf_children(/clinical/argx-117/hv/argx-117-1901/dm/staging/current/4_sas/datasets, /clinical/argx-117/hv/argx-117-1901/dm/staging/current/4_sas/datasets, 2, out=work.lsafGetChildren);
cmd=%get_lsaf_children(/clinical/argx-117/hv/argx-117-1901/dm/staging/current/4_sas/datasets,/clinical/argx-117/hv/argx-117-1901/dm/staging/current/4_sas/datasets, 2); result=0: Success.
%get_lsaf_children(/clinical/argx-117/hv/argx-117-1901/dm/staging/current/4_sas/metadata, /clinical/argx-117/hv/argx-117-1901/dm/staging/current/4_sas/metadata, 2, out=work.lsafGetChildren);
cmd=%get_lsaf_children(/clinical/argx-117/hv/argx-117-1901/dm/staging/current/4_sas/metadata,/clinical/argx-117/hv/argx-117-1901/dm/staging/current/4_sas/metadata, 2); result=0: Success.
%get_lsaf_children(/clinical/argx-117/mmn/argx-117-0000/dm/staging/current/4_sas/datasets, /clinical/argx-117/mmn/argx-117-0000/dm/staging/current/4_sas/datasets, 2, out=work.lsafGetChildren);
cmd=%get_lsaf_children(/clinical/argx-117/mmn/argx-117-0000/dm/staging/current/4_sas/datasets,/clinical/argx-117/mmn/argx-117-0000/dm/staging/current/4_sas/datasets, 2); result=0: Success.
%get_lsaf_children(/clinical/argx-117/mmn/argx-117-0000/dm/staging/current/4_sas/metadata, /clinical/argx-117/mmn/argx-117-0000/dm/staging/current/4_sas/metadata, 2, out=work.lsafGetChildren);
cmd=%get_lsaf_children(/clinical/argx-117/mmn/argx-117-0000/dm/staging/current/4_sas/metadata,/clinical/argx-117/mmn/argx-117-0000/dm/staging/current/4_sas/metadata, 2); result=0: Success.
%get_lsaf_children(/clinical/argx-117/mmn/argx-117-2002/dm/staging/current/3_sdtm/2023-02-13-argx-17-2002_sdtm, /clinical/argx-117/mmn/argx-117-2002/dm/staging/current/3_sdtm/2023-02-13-argx-17-2002_sdtm, 2, out=work.lsafGetChildren);
%get_lsaf_children(/clinical/argx-117/mmn/argx-117-2002/dm/staging/current/4_sas/datasets, /clinical/argx-117/mmn/argx-117-2002/dm/staging/current/4_sas/datasets, 2, out=work.lsafGetChildren);
cmd=%get_lsaf_children(/clinical/argx-117/mmn/argx-117-2002/dm/staging/current/3_sdtm/2023-02-13-argx-17-2002_sdtm,/clinical/argx-117/mmn/argx-117-2002/dm/staging/current/3_sdtm/2023-02-13-argx-17-2002_sdtm, 2); result=0: Success.
%get_lsaf_children(/clinical/argx-117/mmn/argx-117-2002/dm/staging/current/4_sas/metadata, /clinical/argx-117/mmn/argx-117-2002/dm/staging/current/4_sas/metadata, 2, out=work.lsafGetChildren);
%get_lsaf_children(/clinical/argx-117/mmn/argx-117-2003/dm/staging/current/4_sas/datasets, /clinical/argx-117/mmn/argx-117-2003/dm/staging/current/4_sas/datasets, 2, out=work.lsafGetChildren);
%get_lsaf_children(/clinical/argx-117/mmn/argx-117-2003/dm/staging/current/4_sas/metadata, /clinical/argx-117/mmn/argx-117-2003/dm/staging/current/4_sas/metadata, 2, out=work.lsafGetChildren);
NOTE: DATA statement used (Total process time):
      real time           2.73 seconds
      cpu time            1.05 seconds
      
cmd=%get_lsaf_children(/clinical/argx-117/mmn/argx-117-2002/dm/staging/current/4_sas/datasets,/clinical/argx-117/mmn/argx-117-2002/dm/staging/current/4_sas/datasets, 2); result=0: Success.
cmd=%get_lsaf_children(/clinical/argx-117/mmn/argx-117-2002/dm/staging/current/4_sas/metadata,/clinical/argx-117/mmn/argx-117-2002/dm/staging/current/4_sas/metadata, 2); result=0: Success.
cmd=%get_lsaf_children(/clinical/argx-117/mmn/argx-117-2003/dm/staging/current/4_sas/datasets,/clinical/argx-117/mmn/argx-117-2003/dm/staging/current/4_sas/datasets, 2); result=0: Success.
cmd=%get_lsaf_children(/clinical/argx-117/mmn/argx-117-2003/dm/staging/current/4_sas/metadata,/clinical/argx-117/mmn/argx-117-2003/dm/staging/current/4_sas/metadata, 2); result=0: Success.
NOTE: 18 lines were written to file PRINT.
NOTE: There were 18 observations read from the data set WORK.LSAF_DM_CURRENT3.
NOTE: The data set WORK.LSAF_DM_CURRENT4 has 18 observations and 29 variables.
NOTE: The DATA step printed page 4.

NOTE: The dataset WORK.LSAFGETCHILDREN has 198 observations and 23 variables.
MPRINT(LSAF_GET_LAST_SDTM):   ;
MPRINT(LSAF_GET_LAST_SDTM):   proc print data = lsafGetChildren(obs=10) width=min;
MPRINT(LSAF_GET_LAST_SDTM):   title "lsafGetChildren [2]";
MPRINT(LSAF_GET_LAST_SDTM):   run;
NOTE: There were 10 observations read from the data set WORK.LSAFGETCHILDREN.
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   title;
MPRINT(LSAF_GET_LAST_SDTM):   proc sort data=lsaf_dm_current4;
MPRINT(LSAF_GET_LAST_SDTM):   by path;
MPRINT(LSAF_GET_LAST_SDTM):   run;

NOTE: There were 18 observations read from the data set WORK.LSAF_DM_CURRENT4.
NOTE: The data set WORK.LSAF_DM_CURRENT4 has 18 observations and 29 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   proc sort data=work.lsafGetChildren;
MPRINT(LSAF_GET_LAST_SDTM):   by parentpath;
MPRINT(LSAF_GET_LAST_SDTM):   run;

NOTE: There were 198 observations read from the data set WORK.LSAFGETCHILDREN.
NOTE: The data set WORK.LSAFGETCHILDREN has 198 observations and 23 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   *- Merge the children paths back with their parent path Split filename into bare filename and file exension Order by study path, bare filename, date modified (and file extension) -*;
MPRINT(LSAF_GET_LAST_SDTM):   data lsaf_dm_current5(index=(_idx0_=(studypath nameb extb prefix datelastmodified)));
MPRINT(LSAF_GET_LAST_SDTM):   merge lsaf_dm_current4(keep=studypath studyresult path result extrasrc extrapath rename=(path=parentpath)) work.lsafGetChildren ;
MPRINT(LSAF_GET_LAST_SDTM):   by parentpath;
MPRINT(LSAF_GET_LAST_SDTM):   where parentpath ^= " ";
MPRINT(LSAF_GET_LAST_SDTM):   nameb = prxchange('s/([^\.\/\\]+)\.[^\.\/\\]+$/\1/', 1, strip(name));
MPRINT(LSAF_GET_LAST_SDTM):   *- bare filename without extension (allows matching .sas7bdat with corresponding .xpt) -*;
MPRINT(LSAF_GET_LAST_SDTM):   ext = left(tranwrd("|"||strip(name), "|"||strip(nameb), ""));
MPRINT(LSAF_GET_LAST_SDTM):   prefix = prxchange('s/^(meta_)?.+$/\1/', 1, cats(nameb));
MPRINT(LSAF_GET_LAST_SDTM):   *- identify if the prefix 'meta_' is present in nameb -*;
MPRINT(LSAF_GET_LAST_SDTM):   nameb = prxchange('s/^meta_//', 1, nameb);
MPRINT(LSAF_GET_LAST_SDTM):   *- bare filename without the prefix (allows matching ../metadata/<name> with ../sdtm_last/meta_<name>) -*;
MPRINT(LSAF_GET_LAST_SDTM):   if scan(cats(parentpath), -1, "/") = "metadata" and ext in (".sas7bdat") then prefix = "meta_";
MPRINT(LSAF_GET_LAST_SDTM):   *- prefix to be added to target filename (allows matching ../metadata/<name> with ../sdtm_last/meta_<name>) -*;
MPRINT(LSAF_GET_LAST_SDTM):   *- extb will allow to distinguish e.g. between define.xml and define.xslt but not between dm.sas7bdat and dm.xpt -*;
MPRINT(LSAF_GET_LAST_SDTM):   if ext not in ('.sas7bdat' '.xpt') then extb = ext;
MPRINT(LSAF_GET_LAST_SDTM):   else extb = ' ';
MPRINT(LSAF_GET_LAST_SDTM):   run;

NOTE: There were 18 observations read from the data set WORK.LSAF_DM_CURRENT4.
      WHERE parentpath not = ' ';
NOTE: There were 198 observations read from the data set WORK.LSAFGETCHILDREN.
      WHERE parentpath not = ' ';
NOTE: The data set WORK.LSAF_DM_CURRENT5 has 198 observations and 32 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   *- Save current information about most recent SDTM data found in LSAF Repository under all studies 'dm/staging/current' folders as dataset 'dm_current' in folder biostat/staging/data_received/sdtm_last/unzip -*;
MPRINT(LSAF_GET_LAST_SDTM):   *- For each bare filename below a study path, keep only the path with the latest date modified -*;
MPRINT(LSAF_GET_LAST_SDTM):   data lsaf_dm_current6 out.dm_current(label = "Paths with most recent SDTM data (as of 2023-02-14T23:52:02) below Data Management folders: "                            
||"/clinical/<compound>/<indication>/<study>/dm/staging/current") ;
MPRINT(LSAF_GET_LAST_SDTM):   set lsaf_dm_current5;
MPRINT(LSAF_GET_LAST_SDTM):   by studypath nameb extb prefix datelastmodified;
MPRINT(LSAF_GET_LAST_SDTM):   if last.extb;
MPRINT(LSAF_GET_LAST_SDTM):   run;

NOTE: There were 198 observations read from the data set WORK.LSAF_DM_CURRENT5.
NOTE: The data set WORK.LSAF_DM_CURRENT6 has 114 observations and 32 variables.
NOTE: The data set OUT.DM_CURRENT has 114 observations and 32 variables.
NOTE: Compressing data set OUT.DM_CURRENT decreased size by 77.78 percent. 
      Compressed is 2 pages; un-compressed would require 9 pages.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   data _;
MPRINT(LSAF_GET_LAST_SDTM):   set lsaf_dm_current6(where=(iscontainer=0));
MPRINT(LSAF_GET_LAST_SDTM):   run;

NOTE: There were 96 observations read from the data set WORK.LSAF_DM_CURRENT6.
      WHERE iscontainer=0;
NOTE: The data set WORK._ has 96 observations and 32 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   proc print data = _(obs=10) width=min;
MPRINT(LSAF_GET_LAST_SDTM):   title "lsaf_dm_current6(where=(iscontainer=0))";
MPRINT(LSAF_GET_LAST_SDTM):   run;
NOTE: There were 10 observations read from the data set WORK._.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   title;
MPRINT(LSAF_GET_LAST_SDTM):   *---------------------------------------------------------------------------------------------------------------------------------------------------------------------*;
MPRINT(LSAF_GET_LAST_SDTM):   *- Search for all Repository folders named 'sdtm_last' across all products, indications and studies below /clinical -*;
MPRINT(LSAF_GET_LAST_SDTM):   data lsaf_sdtm_last0;
MPRINT(LSAF_GET_LAST_SDTM):   set lsaf_studies (keep=path itemType );
MPRINT(LSAF_GET_LAST_SDTM):   studypath=path;
MPRINT(LSAF_GET_LAST_SDTM):   length add_path $200;
MPRINT(LSAF_GET_LAST_SDTM):   do add_path = "/biostat/staging/data_received/sdtm_last", "/biostat/staging/data_received/sdtm/sdtm_last";
MPRINT(LSAF_GET_LAST_SDTM):   path=cats(studypath, add_path);
MPRINT(LSAF_GET_LAST_SDTM):   exists_path=put(runmacro('%test_if_exists('||strip(path)||');'), $400.);
MPRINT(LSAF_GET_LAST_SDTM):   if exists_path ^= "1" then do;
MPRINT(LSAF_GET_LAST_SDTM):   if exists_path ^= "0" then put "WAR" "NING: Check if LSAF path exists: " path " returned: " exists_path;
MPRINT(LSAF_GET_LAST_SDTM):   *else put "War" "ning: LSAF path does not exist (yet): " path;
MPRINT(LSAF_GET_LAST_SDTM):   end;
MPRINT(LSAF_GET_LAST_SDTM):   drop exists_path;
MPRINT(LSAF_GET_LAST_SDTM):   if exists_path = "1" then do;
MPRINT(LSAF_GET_LAST_SDTM):   itemType=put(runmacro('%get_itemType('||strip(path)||');'), $200.);
MPRINT(LSAF_GET_LAST_SDTM):   if itemType ^= "sas:folder" then do;
MPRINT(LSAF_GET_LAST_SDTM):   put "War" "ning: Unexpected: " itemType= " for " path=;
MPRINT(LSAF_GET_LAST_SDTM):   end;
MPRINT(LSAF_GET_LAST_SDTM):   output;
MPRINT(LSAF_GET_LAST_SDTM):   end;
MPRINT(LSAF_GET_LAST_SDTM):   end;
MPRINT(LSAF_GET_LAST_SDTM):   run;

The SAS System

MPRINT(RUN_MACRO):   option nomprint;
NOTE: There were 102 observations read from the data set WORK.LSAF_STUDIES.
NOTE: The data set WORK.LSAF_SDTM_LAST0 has 98 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           10.52 seconds
      cpu time            1.94 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   *- Filter the results i.e. keep only 'sdtm_last' folders directly below - /clinical/<compound>/<indic>/<study>/biostat/staging/data_received/, or - /clinical/<compound>/<indic>/<study>/biostat/staging/data_received/sdtm/ 
Derive study path and identify compound, indication and study -*;
MPRINT(LSAF_GET_LAST_SDTM):   data lsaf_sdtm_last(index=(studypath));
MPRINT(LSAF_GET_LAST_SDTM):   attrib
MPRINT(VARLIST):   studypath length=$2048 label=" "
MPRINT(LSAF_GET_LAST_SDTM):  ;
MPRINT(LSAF_GET_LAST_SDTM):   length compound ind study $20;
MPRINT(LSAF_GET_LAST_SDTM):   set lsaf_sdtm_last0;
MPRINT(LSAF_GET_LAST_SDTM):   studypath = prxchange('s!^((/[^/]+){4})/biostat/staging/data_received(/sdtm)?/sdtm_last$!\1!', 1, strip(path));
MPRINT(LSAF_GET_LAST_SDTM):   compound = scan(studypath, 2, "/\");
MPRINT(LSAF_GET_LAST_SDTM):   ind = scan(studypath, 3, "/\");
MPRINT(LSAF_GET_LAST_SDTM):   study = scan(studypath, 4, "/\");
MPRINT(LSAF_GET_LAST_SDTM):   if prxmatch('!^(/[^/]+){4}/biostat/staging/data_received(/sdtm)?/sdtm_last$!', strip(path)) and index(upcase(" argx-117 "), " "||strip(upcase(compound))||" ") > 0 ;
MPRINT(LSAF_GET_LAST_SDTM):   run;

NOTE: There were 98 observations read from the data set WORK.LSAF_SDTM_LAST0.
NOTE: The data set WORK.LSAF_SDTM_LAST has 10 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.02 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   proc print data=lsaf_sdtm_last(obs=10) width=min;
MPRINT(LSAF_GET_LAST_SDTM):   title "lsaf_sdtm_last";
MPRINT(LSAF_GET_LAST_SDTM):   run;
NOTE: There were 10 observations read from the data set WORK.LSAF_SDTM_LAST.
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.02 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   title;
MPRINT(LSAF_GET_LAST_SDTM):   *- For each identified 'sdtm_last' folder in Repository ( ../<study>/biostat/staging/data_received/sdtm_last and ../<study>/biostat/staging/data_received/sdtm/sdtm_last) get the contents (children) up to 2 levels into dataset 
work.lsafGetChildren -*;
MPRINT(LSAF_GET_LAST_SDTM):   proc sql noprint;
MPRINT(LSAF_GET_LAST_SDTM):   create table WORK.lsafGetChildren ( parentpath character(200) label = 'Parent Path', path char(2048) label='Item Path', name char(256) label='Item Name', itemType char(32) label='Item Type', isContainer num label='Is Item A 
Container?', description char(512) label='Description', version char(32) label='Version Number', isVersioned num label='Is File Versioned', isCheckedOut num label='Is File Checked out', isLocked num label='Is File Locked', signatureStatus char(32) 
label='Is File Signed', size num label='Size In Bytes', formattedsize char(20) label="Size (Formatted)", createdBy char(64) label='Userid that created the item', created char(64) label='Item Creation Date', dateCreated num format=DATETIME. label='Date the 
item was created (SAS DateTime Format)', lastModifiedBy char(64) label='Userid that last modified the item content', lastModified char(64) label='Last Content Modification Date', dateLastModified num format=DATETIME. label='Date the item''s content was 
last modified (SAS DateTime Format)', propertiesLastModifiedBy char(64) label='Userid that last modified the item properties', propertiesLastModified char(64) label='Last Properties Modification Date', datePropertiesLastModified num format=DATETIME. 
label='Date the item''s properties were last modified (SAS DateTime Format)', state char(64) label='State of an Analysis or Project' );
NOTE: Table WORK.LSAFGETCHILDREN created, with 0 rows and 23 columns.
MPRINT(LSAF_GET_LAST_SDTM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   data lsaf_sdtm_last2;
MPRINT(LSAF_GET_LAST_SDTM):   *- JMB 2022-07-05 add index on Path -*;
MPRINT(LSAF_GET_LAST_SDTM):   set lsaf_sdtm_last;
MPRINT(LSAF_GET_LAST_SDTM):   length cmd $500 result $200;
MPRINT(LSAF_GET_LAST_SDTM):   if itemtype = "sas:folder" then do;
MPRINT(LSAF_GET_LAST_SDTM):   cmd = cats('%get_lsaf_children('||strip(path)||','||strip(path)||', 2);');
MPRINT(LSAF_GET_LAST_SDTM):   result = runmacro(cmd);
MPRINT(LSAF_GET_LAST_SDTM):   *- runmacro: see note in program header -*;
MPRINT(LSAF_GET_LAST_SDTM):   end;
MPRINT(LSAF_GET_LAST_SDTM):   run;
The SAS System

MPRINT(RUN_MACRO):   option nomprint;
%get_lsaf_children(/clinical/argx-117/covid-19/argx-117-0000/biostat/staging/data_received/sdtm_last, /clinical/argx-117/covid-19/argx-117-0000/biostat/staging/data_received/sdtm_last, 2, out=work.lsafGetChildren);
%get_lsaf_children(/clinical/argx-117/covid-19/argx-117-2001/biostat/staging/data_received/sdtm_last, /clinical/argx-117/covid-19/argx-117-2001/biostat/staging/data_received/sdtm_last, 2, out=work.lsafGetChildren);
%get_lsaf_children(/clinical/argx-117/dgf/argx-117-0000/biostat/staging/data_received/sdtm_last, /clinical/argx-117/dgf/argx-117-0000/biostat/staging/data_received/sdtm_last, 2, out=work.lsafGetChildren);
%get_lsaf_children(/clinical/argx-117/dgf/argx-117-2201/biostat/staging/data_received/sdtm_last, /clinical/argx-117/dgf/argx-117-2201/biostat/staging/data_received/sdtm_last, 2, out=work.lsafGetChildren);
%get_lsaf_children(/clinical/argx-117/hv/argx-117-0000/biostat/staging/data_received/sdtm_last, /clinical/argx-117/hv/argx-117-0000/biostat/staging/data_received/sdtm_last, 2, out=work.lsafGetChildren);
%get_lsaf_children(/clinical/argx-117/hv/argx-117-1901/biostat/staging/data_received/sdtm_last, /clinical/argx-117/hv/argx-117-1901/biostat/staging/data_received/sdtm_last, 2, out=work.lsafGetChildren);
%get_lsaf_children(/clinical/argx-117/mmn/argx-117-0000/biostat/staging/data_received/sdtm_last, /clinical/argx-117/mmn/argx-117-0000/biostat/staging/data_received/sdtm_last, 2, out=work.lsafGetChildren);
%get_lsaf_children(/clinical/argx-117/mmn/argx-117-2002/biostat/staging/data_received/sdtm_last, /clinical/argx-117/mmn/argx-117-2002/biostat/staging/data_received/sdtm_last, 2, out=work.lsafGetChildren);
%get_lsaf_children(/clinical/argx-117/mmn/argx-117-2003/biostat/staging/data_received/sdtm_last, /clinical/argx-117/mmn/argx-117-2003/biostat/staging/data_received/sdtm_last, 2, out=work.lsafGetChildren);
%get_lsaf_children(/clinical/argx-117/x-ind/argx-117-0000/biostat/staging/data_received/sdtm_last, /clinical/argx-117/x-ind/argx-117-0000/biostat/staging/data_received/sdtm_last, 2, out=work.lsafGetChildren);
NOTE: There were 10 observations read from the data set WORK.LSAF_SDTM_LAST.
NOTE: The data set WORK.LSAF_SDTM_LAST2 has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           2.60 seconds
      cpu time            0.93 seconds
      

NOTE: The dataset WORK.LSAFGETCHILDREN has 304 observations and 23 variables.
MPRINT(LSAF_GET_LAST_SDTM):   ;
MPRINT(LSAF_GET_LAST_SDTM):   proc sort data = lsaf_sdtm_last2;
MPRINT(LSAF_GET_LAST_SDTM):   by path;
MPRINT(LSAF_GET_LAST_SDTM):   run;

NOTE: There were 10 observations read from the data set WORK.LSAF_SDTM_LAST2.
NOTE: The data set WORK.LSAF_SDTM_LAST2 has 10 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   proc print data=lsafGetChildren(obs=10) width=min;
MPRINT(LSAF_GET_LAST_SDTM):   title "lsafGetChildren[3]";
MPRINT(LSAF_GET_LAST_SDTM):   run;
NOTE: There were 10 observations read from the data set WORK.LSAFGETCHILDREN.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   title;
MPRINT(LSAF_GET_LAST_SDTM):   *- Merge the children paths back with their parent path (../sdtm_last) Split filename into bare filename and file exension Index by study path, bare filename, date modified (and file extension) Keep and rename variables of 
interest to prepare merge with the retrieved source sdtm folders paths -*;
MPRINT(LSAF_GET_LAST_SDTM):   proc sort data=lsafGetChildren;
MPRINT(LSAF_GET_LAST_SDTM):   by parentpath name;
MPRINT(LSAF_GET_LAST_SDTM):   run;

NOTE: There were 304 observations read from the data set WORK.LSAFGETCHILDREN.
NOTE: The data set WORK.LSAFGETCHILDREN has 304 observations and 23 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   data lsaf_sdtm_last3( keep=studypath parentpath result path name itemType isContainer description version isVersioned isCheckedOut isLocked signatureStatus size createdBy dateCreated lastModifiedBy dateLastModified state 
nameb extb ext prefix rename
MPRINT(LSAF_GET_LAST_SDTM):  =(parentpath = sdtm_last_path result = l_result path = l_path name = l_name itemType = l_itemType isContainer = l_isContainer description = l_description version = l_version isVersioned = l_isVersioned isCheckedOut = 
l_isCheckedOut isLocked = l_isLocked signatureStatus = l_signatureStatus size = l_size createdBy = l_createdBy dateCreated = l_dateCreated lastModifiedBy = l_lastModifiedBy dateLastModified = l_dateLastModified state = l_state ) );
MPRINT(LSAF_GET_LAST_SDTM):   file print;
MPRINT(LSAF_GET_LAST_SDTM):   merge lsaf_sdtm_last2(keep=studypath path result rename=(path=parentpath)) work.lsafGetChildren ;
MPRINT(LSAF_GET_LAST_SDTM):   by parentpath;
MPRINT(LSAF_GET_LAST_SDTM):   if prxmatch('/^meta_meta_\w+$/i', strip(name)) then do;
MPRINT(LSAF_GET_LAST_SDTM):   delete_result=put( runmacro('%global result; %lsaf_delete(lsaf_path='||strip(path)||'); %let result = (lsaf_delete): %superq(_lsafRC_): %superq(_lsafMsg_);') , $200.);
MPRINT(LSAF_GET_LAST_SDTM):   putlog "Delete LSAF path: " path= delete_result;
MPRINT(LSAF_GET_LAST_SDTM):   put "Delete LSAF path: " path= delete_result;
MPRINT(LSAF_GET_LAST_SDTM):   delete;
MPRINT(LSAF_GET_LAST_SDTM):   end;
MPRINT(LSAF_GET_LAST_SDTM):   nameb = prxchange('s/([^\.\/\\]+)\.[^\.\/\\]+$/\1/', 1, strip(name));
MPRINT(LSAF_GET_LAST_SDTM):   *- bare filename without extension (allows matching .sas7bdat with corresponding .xpt) -*;
MPRINT(LSAF_GET_LAST_SDTM):   ext = left(tranwrd("|"||strip(name), "|"||strip(nameb), ""));
MPRINT(LSAF_GET_LAST_SDTM):   *- extb will allow to distinguish e.g. between define.xml and define.xslt but not between dm.sas7bdat and dm.xpt -*;
MPRINT(LSAF_GET_LAST_SDTM):   if ext not in ('.sas7bdat' '.xpt') then extb = ext;
MPRINT(LSAF_GET_LAST_SDTM):   else extb = ' ';
MPRINT(LSAF_GET_LAST_SDTM):   *prefixmatch = prxmatch('s/^(meta_)?.+$/\1/', cats(nameb));
MPRINT(LSAF_GET_LAST_SDTM):   prefix = prxchange('s/^(meta_)?.+$/\1/', 1, cats(nameb));
MPRINT(LSAF_GET_LAST_SDTM):   *- identify if the prefix 'meta_' is present in nameb -*;
MPRINT(LSAF_GET_LAST_SDTM):   nameb = prxchange('s/^meta_//', 1, nameb);
MPRINT(LSAF_GET_LAST_SDTM):   *- bare filename without the prefix (allows matching ../metadata/<name> with ../sdtm_last/meta_<name>) -*;
MPRINT(LSAF_GET_LAST_SDTM):   if index(path, catx("/", parentpath, "unzip")) eq 0;
MPRINT(LSAF_GET_LAST_SDTM):   run;

NOTE: 0 lines were written to file PRINT.
NOTE: There were 10 observations read from the data set WORK.LSAF_SDTM_LAST2.
NOTE: There were 304 observations read from the data set WORK.LSAFGETCHILDREN.
NOTE: The data set WORK.LSAF_SDTM_LAST3 has 304 observations and 23 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   proc sort data=lsaf_sdtm_last3 tagsort;
MPRINT(LSAF_GET_LAST_SDTM):   by studypath nameb extb prefix l_datelastmodified ext;
MPRINT(LSAF_GET_LAST_SDTM):   run;

NOTE: Tagsort reads each observation of the input data set twice.
NOTE: The data set WORK.LSAF_SDTM_LAST3 has 304 observations and 23 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   proc print data=lsaf_sdtm_last3(obs=30) width=min;
MPRINT(LSAF_GET_LAST_SDTM):   title "lsaf_sdtm_last3";
MPRINT(LSAF_GET_LAST_SDTM):   run;
NOTE: There were 30 observations read from the data set WORK.LSAF_SDTM_LAST3.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   title;
MPRINT(LSAF_GET_LAST_SDTM):   *- If &create_folder = Y create missing sdtm_last folders -*;
NOTE: The macro CREATE_SDTM_LAST_PATH completed compilation without errors.
      152 instructions 4504 bytes.
MPRINT(LSAF_GET_LAST_SDTM):   *- Match 'source' (dm folders) and 'target' (biostat sdtm_last) folders to prepare sdtm refresh -*;
MPRINT(LSAF_GET_LAST_SDTM):   option mcompilenote=all;
MAUTOCOMPLOC:  The autocall macro UNI_VLENGTH is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/macros/global_macros/uni_vlength.sas.
NOTE: The macro UNI_VLENGTH completed compilation without errors.
      216 instructions 6824 bytes.
MPRINT(LSAF_GET_LAST_SDTM):   option MCOMPILENOTE=ALL;
MPRINT(UNI_VLENGTH):   *- Harmonize length of character variables in Data= datasets According to the length found in Ref= datasests (if specified) -*;
MPRINT(UNI_VLENGTH):   proc sql noprint;
MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated by " " from (select distinct upcase(LIBNAME) as LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as 
NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.LSAF_SDTM_LAST3" "WORK.LSAF_DM_CURRENT6" )) then LENGTH else . end ) as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in 
("WORK.LSAF_SDTM_LAST3" "WORK.LSAF_SDTM_LAST3" "WORK.LSAF_DM_CURRENT6" ) group by upcase(name)) group by upcase(name), upcase(type) having sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK.LSAF_SDTM_LAST3" and TYPE="CHAR") and 
upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.LSAF_SDTM_LAST3" "WORK.LSAF_DM_CURRENT6" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(UNI_VLENGTH):   alter table WORK.LSAF_SDTM_LAST3 modify EXT character(200), EXTB character(200), L_CREATEDBY character(64), L_DESCRIPTION character(512), L_ITEMTYPE character(32), L_LASTMODIFIEDBY character(64), L_NAME character(256), L_PATH 
character(2048), L_RESULT character(200), L_SIGNATURESTATUS character(32), L_STATE character(64), L_VERSION character(32), NAMEB character(200), PREFIX character(200), SDTM_LAST_PATH character(2048), STUDYPATH character(2048) ;
NOTE: Table WORK.LSAF_SDTM_LAST3 has been modified, with 23 columns.
MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated by " " from (select distinct upcase(LIBNAME) as LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as 
NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.LSAF_SDTM_LAST3" "WORK.LSAF_DM_CURRENT6" )) then LENGTH else . end ) as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in 
("WORK.LSAF_DM_CURRENT6" "WORK.LSAF_SDTM_LAST3" "WORK.LSAF_DM_CURRENT6" ) group by upcase(name)) group by upcase(name), upcase(type) having sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK.LSAF_DM_CURRENT6" and TYPE="CHAR") and 
upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.LSAF_SDTM_LAST3" "WORK.LSAF_DM_CURRENT6" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(UNI_VLENGTH):   alter table WORK.LSAF_DM_CURRENT6 modify CREATED character(64), CREATEDBY character(64), DESCRIPTION character(512), EXT character(200), EXTB character(200), EXTRAPATH character(2048), EXTRASRC character(1), FORMATTEDSIZE 
character(20), ITEMTYPE character(32), LASTMODIFIED character(64), LASTMODIFIEDBY character(64), NAME character(256), NAMEB character(200), PARENTPATH character(2048), PATH character(2048), PREFIX character(200), PROPERTIESLASTMODIFIED character(64), 
PROPERTIESLASTMODIFIEDBY character(64), RESULT character(200), SIGNATURESTATUS character(32), STATE character(64), STUDYPATH character(2048), STUDYRESULT character(200), VERSION character(32) ;
NOTE: Table WORK.LSAF_DM_CURRENT6 has been modified, with 32 columns.
MPRINT(UNI_VLENGTH):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.11 seconds
      cpu time            0.12 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):  ;
MPRINT(LSAF_GET_LAST_SDTM):   data sdtm_last_new(drop=prv_sdtm_last_path);
MPRINT(LSAF_GET_LAST_SDTM):   length create_result prv_sdtm_last_path $200;
MPRINT(LSAF_GET_LAST_SDTM):   retain nameb extb prefix;
MPRINT(LSAF_GET_LAST_SDTM):   file print;
MPRINT(LSAF_GET_LAST_SDTM):   merge lsaf_sdtm_last3 lsaf_dm_current6 ;
MPRINT(LSAF_GET_LAST_SDTM):   by studypath nameb extb prefix;
MPRINT(LSAF_GET_LAST_SDTM):   retain prv_sdtm_last_path;
MPRINT(LSAF_GET_LAST_SDTM):   create_result = " ";
MPRINT(LSAF_GET_LAST_SDTM):   if sdtm_last_path = " " and studypath ^= " " then do;
MPRINT(LSAF_GET_LAST_SDTM):   sdtm_last_path = strip(studypath)||"/biostat/staging/data_received/sdtm_last";
MPRINT(LSAF_GET_LAST_SDTM):   end;
MPRINT(LSAF_GET_LAST_SDTM):   if prv_sdtm_last_path ^= sdtm_last_path and sdtm_last_path ^= " " then do;
MPRINT(LSAF_GET_LAST_SDTM):   *- check if LSAF sdtm_last_path exists and if not create it -*;
MPRINT(LSAF_GET_LAST_SDTM):   create_result = runmacro('%create_sdtm_last_path('||strip(sdtm_last_path)||');');
MPRINT(LSAF_GET_LAST_SDTM):   *- runmacro: see note in program header -*;
MPRINT(LSAF_GET_LAST_SDTM):   putlog "Create " sdtm_last_path= ": " create_result=;
MPRINT(LSAF_GET_LAST_SDTM):   put "Create " sdtm_last_path= ": " create_result=;
MPRINT(LSAF_GET_LAST_SDTM):   end;
MPRINT(LSAF_GET_LAST_SDTM):   prv_sdtm_last_path = sdtm_last_path;
MPRINT(LSAF_GET_LAST_SDTM):   if _n_ = -1 then parentpath = put(parentpath, $200.);
MPRINT(LSAF_GET_LAST_SDTM):   run;

The SAS System

MPRINT(RUN_MACRO):   option nomprint;
%create_sdtm_last_path(/clinical/argx-117/covid-19/argx-117-0000/biostat/staging/data_received/sdtm_last, force=N)
MPRINT(CREATE_SDTM_LAST_PATH):   notes;
LOCATION_PARAMETERS=/clinical/argx-117/covid-19/argx-117-0000
NOTE: The macro LSAF_EXISTS completed compilation without errors.
      60 instructions 2624 bytes.
MPRINT(LSAF_EXISTS):   *;
NOTE: The macro LSAF_GETPRODUCTNAME completed compilation without errors.
      15 instructions 304 bytes.
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/covid-19/argx-117-0000/biostat", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/covid-19/argx-117-0000/biostat" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/covid-19/argx-117-0000/biostat" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/covid-19/argx-117-0000/biostat" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/covid-19/argx-117-0000/biostat
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(CREATE_SDTM_LAST_PATH):  ;
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/covid-19/argx-117-0000/biostat/staging/data_received/sdtm_last", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/covid-19/argx-117-0000/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/covid-19/argx-117-0000/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/covid-19/argx-117-0000/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/covid-19/argx-117-0000/biostat/staging/data_received/sdtm_last
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(CREATE_SDTM_LAST_PATH):  ;
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/covid-19/argx-117-0000/biostat/staging/data_received/sdtm_last", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/covid-19/argx-117-0000/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/covid-19/argx-117-0000/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/covid-19/argx-117-0000/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/covid-19/argx-117-0000/biostat/staging/data_received/sdtm_last
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(CREATE_SDTM_LAST_PATH):  ;
MPRINT(CREATE_SDTM_LAST_PATH):   option NOMPRINT NOSOURCE
Create sdtm_last_path=/clinical/argx-117/covid-19/argx-117-0000/biostat/staging/data_received/sdtm_last : create_result=check-sdtm_last-folder-was-created: 0: Success.
%create_sdtm_last_path(/clinical/argx-117/covid-19/argx-117-2001/biostat/staging/data_received/sdtm_last, force=N)
MPRINT(CREATE_SDTM_LAST_PATH):   notes;
LOCATION_PARAMETERS=/clinical/argx-117/covid-19/argx-117-2001
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/covid-19/argx-117-2001/biostat", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/covid-19/argx-117-2001/biostat" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/covid-19/argx-117-2001/biostat" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/covid-19/argx-117-2001/biostat" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/covid-19/argx-117-2001/biostat
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(CREATE_SDTM_LAST_PATH):  ;
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/covid-19/argx-117-2001/biostat/staging/data_received/sdtm_last", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/covid-19/argx-117-2001/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/covid-19/argx-117-2001/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/covid-19/argx-117-2001/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/covid-19/argx-117-2001/biostat/staging/data_received/sdtm_last
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(CREATE_SDTM_LAST_PATH):  ;
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/covid-19/argx-117-2001/biostat/staging/data_received/sdtm_last", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/covid-19/argx-117-2001/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/covid-19/argx-117-2001/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/covid-19/argx-117-2001/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/covid-19/argx-117-2001/biostat/staging/data_received/sdtm_last
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(CREATE_SDTM_LAST_PATH):  ;
MPRINT(CREATE_SDTM_LAST_PATH):   option NOMPRINT NOSOURCE
Create sdtm_last_path=/clinical/argx-117/covid-19/argx-117-2001/biostat/staging/data_received/sdtm_last : create_result=check-sdtm_last-folder-was-created: 0: Success.
%create_sdtm_last_path(/clinical/argx-117/dgf/argx-117-0000/biostat/staging/data_received/sdtm_last, force=N)
MPRINT(CREATE_SDTM_LAST_PATH):   notes;
LOCATION_PARAMETERS=/clinical/argx-117/dgf/argx-117-0000
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/dgf/argx-117-0000/biostat", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/dgf/argx-117-0000/biostat" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/dgf/argx-117-0000/biostat" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/dgf/argx-117-0000/biostat" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/dgf/argx-117-0000/biostat
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(CREATE_SDTM_LAST_PATH):  ;
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/dgf/argx-117-0000/biostat/staging/data_received/sdtm_last", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/dgf/argx-117-0000/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/dgf/argx-117-0000/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/dgf/argx-117-0000/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/dgf/argx-117-0000/biostat/staging/data_received/sdtm_last
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(CREATE_SDTM_LAST_PATH):  ;
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/dgf/argx-117-0000/biostat/staging/data_received/sdtm_last", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/dgf/argx-117-0000/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/dgf/argx-117-0000/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/dgf/argx-117-0000/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/dgf/argx-117-0000/biostat/staging/data_received/sdtm_last
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

MPRINT(CREATE_SDTM_LAST_PATH):  ;
MPRINT(CREATE_SDTM_LAST_PATH):   option NOMPRINT NOSOURCE
Create sdtm_last_path=/clinical/argx-117/dgf/argx-117-0000/biostat/staging/data_received/sdtm_last : create_result=check-sdtm_last-folder-was-created: 0: Success.
%create_sdtm_last_path(/clinical/argx-117/dgf/argx-117-2201/biostat/staging/data_received/sdtm_last, force=N)
MPRINT(CREATE_SDTM_LAST_PATH):   notes;
LOCATION_PARAMETERS=/clinical/argx-117/dgf/argx-117-2201
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/dgf/argx-117-2201/biostat", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/dgf/argx-117-2201/biostat" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/dgf/argx-117-2201/biostat" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/dgf/argx-117-2201/biostat" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/dgf/argx-117-2201/biostat
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(CREATE_SDTM_LAST_PATH):  ;
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/dgf/argx-117-2201/biostat/staging/data_received/sdtm_last", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/dgf/argx-117-2201/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/dgf/argx-117-2201/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/dgf/argx-117-2201/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/dgf/argx-117-2201/biostat/staging/data_received/sdtm_last
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(CREATE_SDTM_LAST_PATH):  ;
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/dgf/argx-117-2201/biostat/staging/data_received/sdtm_last", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/dgf/argx-117-2201/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/dgf/argx-117-2201/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/dgf/argx-117-2201/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/dgf/argx-117-2201/biostat/staging/data_received/sdtm_last
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(CREATE_SDTM_LAST_PATH):  ;
MPRINT(CREATE_SDTM_LAST_PATH):   option NOMPRINT NOSOURCE
Create sdtm_last_path=/clinical/argx-117/dgf/argx-117-2201/biostat/staging/data_received/sdtm_last : create_result=check-sdtm_last-folder-was-created: 0: Success.
%create_sdtm_last_path(/clinical/argx-117/hv/argx-117-0000/biostat/staging/data_received/sdtm_last, force=N)
MPRINT(CREATE_SDTM_LAST_PATH):   notes;
LOCATION_PARAMETERS=/clinical/argx-117/hv/argx-117-0000
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/hv/argx-117-0000/biostat", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/hv/argx-117-0000/biostat" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/hv/argx-117-0000/biostat" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/hv/argx-117-0000/biostat" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/hv/argx-117-0000/biostat
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(CREATE_SDTM_LAST_PATH):  ;
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/hv/argx-117-0000/biostat/staging/data_received/sdtm_last", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/hv/argx-117-0000/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/hv/argx-117-0000/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/hv/argx-117-0000/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/hv/argx-117-0000/biostat/staging/data_received/sdtm_last
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(CREATE_SDTM_LAST_PATH):  ;
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/hv/argx-117-0000/biostat/staging/data_received/sdtm_last", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/hv/argx-117-0000/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/hv/argx-117-0000/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/hv/argx-117-0000/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/hv/argx-117-0000/biostat/staging/data_received/sdtm_last
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(CREATE_SDTM_LAST_PATH):  ;
MPRINT(CREATE_SDTM_LAST_PATH):   option NOMPRINT NOSOURCE
Create sdtm_last_path=/clinical/argx-117/hv/argx-117-0000/biostat/staging/data_received/sdtm_last : create_result=check-sdtm_last-folder-was-created: 0: Success.
%create_sdtm_last_path(/clinical/argx-117/hv/argx-117-1901/biostat/staging/data_received/sdtm_last, force=N)
MPRINT(CREATE_SDTM_LAST_PATH):   notes;
LOCATION_PARAMETERS=/clinical/argx-117/hv/argx-117-1901
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/hv/argx-117-1901/biostat", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/hv/argx-117-1901/biostat" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/hv/argx-117-1901/biostat" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/hv/argx-117-1901/biostat" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/hv/argx-117-1901/biostat
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(CREATE_SDTM_LAST_PATH):  ;
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/hv/argx-117-1901/biostat/staging/data_received/sdtm_last", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/hv/argx-117-1901/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/hv/argx-117-1901/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/hv/argx-117-1901/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/hv/argx-117-1901/biostat/staging/data_received/sdtm_last
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
      

MPRINT(CREATE_SDTM_LAST_PATH):  ;
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/hv/argx-117-1901/biostat/staging/data_received/sdtm_last", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/hv/argx-117-1901/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/hv/argx-117-1901/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/hv/argx-117-1901/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/hv/argx-117-1901/biostat/staging/data_received/sdtm_last
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(CREATE_SDTM_LAST_PATH):  ;
MPRINT(CREATE_SDTM_LAST_PATH):   option NOMPRINT NOSOURCE
Create sdtm_last_path=/clinical/argx-117/hv/argx-117-1901/biostat/staging/data_received/sdtm_last : create_result=check-sdtm_last-folder-was-created: 0: Success.
%create_sdtm_last_path(/clinical/argx-117/mmn/argx-117-0000/biostat/staging/data_received/sdtm_last, force=N)
MPRINT(CREATE_SDTM_LAST_PATH):   notes;
LOCATION_PARAMETERS=/clinical/argx-117/mmn/argx-117-0000
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/mmn/argx-117-0000/biostat", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/mmn/argx-117-0000/biostat" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/mmn/argx-117-0000/biostat" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/mmn/argx-117-0000/biostat" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/mmn/argx-117-0000/biostat
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(CREATE_SDTM_LAST_PATH):  ;
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/mmn/argx-117-0000/biostat/staging/data_received/sdtm_last", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/mmn/argx-117-0000/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/mmn/argx-117-0000/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/mmn/argx-117-0000/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/mmn/argx-117-0000/biostat/staging/data_received/sdtm_last
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(CREATE_SDTM_LAST_PATH):  ;
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/mmn/argx-117-0000/biostat/staging/data_received/sdtm_last", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/mmn/argx-117-0000/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/mmn/argx-117-0000/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/mmn/argx-117-0000/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/mmn/argx-117-0000/biostat/staging/data_received/sdtm_last
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(CREATE_SDTM_LAST_PATH):  ;
MPRINT(CREATE_SDTM_LAST_PATH):   option NOMPRINT NOSOURCE
Create sdtm_last_path=/clinical/argx-117/mmn/argx-117-0000/biostat/staging/data_received/sdtm_last : create_result=check-sdtm_last-folder-was-created: 0: Success.
%create_sdtm_last_path(/clinical/argx-117/mmn/argx-117-2002/biostat/staging/data_received/sdtm_last, force=N)
MPRINT(CREATE_SDTM_LAST_PATH):   notes;
LOCATION_PARAMETERS=/clinical/argx-117/mmn/argx-117-2002
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/mmn/argx-117-2002/biostat", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/mmn/argx-117-2002/biostat" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/mmn/argx-117-2002/biostat" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/mmn/argx-117-2002/biostat" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/mmn/argx-117-2002/biostat
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(CREATE_SDTM_LAST_PATH):  ;
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/mmn/argx-117-2002/biostat/staging/data_received/sdtm_last", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/mmn/argx-117-2002/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/mmn/argx-117-2002/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/mmn/argx-117-2002/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/mmn/argx-117-2002/biostat/staging/data_received/sdtm_last
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(CREATE_SDTM_LAST_PATH):  ;
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/mmn/argx-117-2002/biostat/staging/data_received/sdtm_last", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/mmn/argx-117-2002/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/mmn/argx-117-2002/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/mmn/argx-117-2002/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/mmn/argx-117-2002/biostat/staging/data_received/sdtm_last
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(CREATE_SDTM_LAST_PATH):  ;
MPRINT(CREATE_SDTM_LAST_PATH):   option NOMPRINT NOSOURCE
Create sdtm_last_path=/clinical/argx-117/mmn/argx-117-2002/biostat/staging/data_received/sdtm_last : create_result=check-sdtm_last-folder-was-created: 0: Success.
%create_sdtm_last_path(/clinical/argx-117/mmn/argx-117-2003/biostat/staging/data_received/sdtm_last, force=N)
MPRINT(CREATE_SDTM_LAST_PATH):   notes;
LOCATION_PARAMETERS=/clinical/argx-117/mmn/argx-117-2003
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/mmn/argx-117-2003/biostat", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/mmn/argx-117-2003/biostat" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/mmn/argx-117-2003/biostat" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/mmn/argx-117-2003/biostat" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/mmn/argx-117-2003/biostat
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(CREATE_SDTM_LAST_PATH):  ;
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/mmn/argx-117-2003/biostat/staging/data_received/sdtm_last", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/mmn/argx-117-2003/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/mmn/argx-117-2003/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/mmn/argx-117-2003/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/mmn/argx-117-2003/biostat/staging/data_received/sdtm_last
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(CREATE_SDTM_LAST_PATH):  ;
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/mmn/argx-117-2003/biostat/staging/data_received/sdtm_last", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/mmn/argx-117-2003/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/mmn/argx-117-2003/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/mmn/argx-117-2003/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/mmn/argx-117-2003/biostat/staging/data_received/sdtm_last
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(CREATE_SDTM_LAST_PATH):  ;
MPRINT(CREATE_SDTM_LAST_PATH):   option NOMPRINT NOSOURCE
Create sdtm_last_path=/clinical/argx-117/mmn/argx-117-2003/biostat/staging/data_received/sdtm_last : create_result=check-sdtm_last-folder-was-created: 0: Success.
%create_sdtm_last_path(/clinical/argx-117/x-ind/argx-117-0000/biostat/staging/data_received/sdtm_last, force=N)
MPRINT(CREATE_SDTM_LAST_PATH):   notes;
LOCATION_PARAMETERS=/clinical/argx-117/x-ind/argx-117-0000
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/x-ind/argx-117-0000/biostat", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/x-ind/argx-117-0000/biostat" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/x-ind/argx-117-0000/biostat" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/x-ind/argx-117-0000/biostat" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/x-ind/argx-117-0000/biostat
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(CREATE_SDTM_LAST_PATH):  ;
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/x-ind/argx-117-0000/biostat/staging/data_received/sdtm_last", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/x-ind/argx-117-0000/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/x-ind/argx-117-0000/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/x-ind/argx-117-0000/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/x-ind/argx-117-0000/biostat/staging/data_received/sdtm_last
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.02 seconds
      

MPRINT(CREATE_SDTM_LAST_PATH):  ;
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/x-ind/argx-117-0000/biostat/staging/data_received/sdtm_last", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/x-ind/argx-117-0000/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/x-ind/argx-117-0000/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/x-ind/argx-117-0000/biostat/staging/data_received/sdtm_last" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/x-ind/argx-117-0000/biostat/staging/data_received/sdtm_last
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(CREATE_SDTM_LAST_PATH):  ;
MPRINT(CREATE_SDTM_LAST_PATH):   option NOMPRINT NOSOURCE
Create sdtm_last_path=/clinical/argx-117/x-ind/argx-117-0000/biostat/staging/data_received/sdtm_last : create_result=check-sdtm_last-folder-was-created: 0: Success.
NOTE: 10 lines were written to file PRINT.
NOTE: There were 304 observations read from the data set WORK.LSAF_SDTM_LAST3.
NOTE: There were 114 observations read from the data set WORK.LSAF_DM_CURRENT6.
NOTE: The data set WORK.SDTM_LAST_NEW has 322 observations and 51 variables.
NOTE: The DATA step printed page 10.
NOTE: DATA statement used (Total process time):
      real time           0.94 seconds
      cpu time            0.21 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   proc sort data=sdtm_last_new;
MPRINT(LSAF_GET_LAST_SDTM):   by studypath sdtm_last_path parentpath ext prefix name;
MPRINT(LSAF_GET_LAST_SDTM):   run;

NOTE: There were 322 observations read from the data set WORK.SDTM_LAST_NEW.
NOTE: The data set WORK.SDTM_LAST_NEW has 322 observations and 51 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.02 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   proc print data=sdtm_last_new(obs=50) width=min;
MPRINT(LSAF_GET_LAST_SDTM):   title "sdtm_last_new";
MPRINT(LSAF_GET_LAST_SDTM):   run;
NOTE: There were 50 observations read from the data set WORK.SDTM_LAST_NEW.
NOTE: The PROCEDURE PRINT printed page 11.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.24 seconds
      cpu time            0.24 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   title;
MPRINT(LSAF_GET_LAST_SDTM):   *- Keep only file paths (=observations) with file types of interest, concatenate bare file names by file extension into the 'domains' variable, resulting in one record per DM 'source' path and type of file (i.e. file 
extension) -*;
MPRINT(LSAF_GET_LAST_SDTM):   option ls=200;
MPRINT(LSAF_GET_LAST_SDTM):   data sdtm_last_new2(keep=studypath sdtm_last_path parentpath ext prefix min_modte max_modte min_lmodte max_lmodte need_update domains n_items dateLastModified 
l_dateLastModified);
MPRINT(LSAF_GET_LAST_SDTM):   length domains $1000;
MPRINT(LSAF_GET_LAST_SDTM):   retain domains min_modte max_modte min_lmodte max_lmodte need_update n_items;
MPRINT(LSAF_GET_LAST_SDTM):   format min_modte max_modte min_lmodte max_lmodte E8601DT.;
MPRINT(LSAF_GET_LAST_SDTM):   file print;
MPRINT(LSAF_GET_LAST_SDTM):   set sdtm_last_new;
MPRINT(LSAF_GET_LAST_SDTM):   by studypath sdtm_last_path parentpath ext prefix name;
MPRINT(LSAF_GET_LAST_SDTM):   where ext in ('.xpt' '.sas7bdat' '.pdf' '.xml' '.xsl') and parentpath ^= " " and studypath ^= " " and prxmatch('/^jobtrack\w+/', cats(nameb)) = 0 and . <= 
dateLastModified <= "14FEB2023:23:59"dt ;
MPRINT(LSAF_GET_LAST_SDTM):   if first.prefix then call missing(of domains min_modte max_modte min_lmodte max_lmodte n_items);
MPRINT(LSAF_GET_LAST_SDTM):   if first.parentpath then do;
MPRINT(LSAF_GET_LAST_SDTM):   putlog "NO" "TE-" / "Not" "ice: === " sdtm_last_path= parentpath= " ===";
MPRINT(LSAF_GET_LAST_SDTM):   put " " / " === " sdtm_last_path= parentpath= " ===";
MPRINT(LSAF_GET_LAST_SDTM):   end;
MPRINT(LSAF_GET_LAST_SDTM):   dm_newer = dateLastModified > l_dateLastModified;
MPRINT(LSAF_GET_LAST_SDTM):   putlog "   Refresh sdtm_last: Including: " nameb= " - dm: " dateLastModified= " - biostat: " l_dateLastModified= " -> " dm_newer=;
MPRINT(LSAF_GET_LAST_SDTM):   put "   Refresh sdtm_last: Including: " nameb= " - dm: " dateLastModified= " - biostat: " l_dateLastModified= " -> " dm_newer=;
MPRINT(LSAF_GET_LAST_SDTM):   n_items+1;
MPRINT(LSAF_GET_LAST_SDTM):   domains = catx(' ', domains, nameb);
MPRINT(LSAF_GET_LAST_SDTM):   *- Derive min / max Date Last Modified across SDTM sources (dm) -*;
MPRINT(LSAF_GET_LAST_SDTM):   min_modte = min(min_modte, coalesce(dateLastModified, 0));
NOTE: The "<>" operator is interpreted as "MAX".
MPRINT(LSAF_GET_LAST_SDTM):   max_modte = max_modte <> dateLastModified;
MPRINT(LSAF_GET_LAST_SDTM):   *- Derive min / max Date Last Modified across sdtm_last data (biostat targets) -*;
MPRINT(LSAF_GET_LAST_SDTM):   min_lmodte = min(min_lmodte, coalesce(l_dateLastModified, 0));
NOTE: The "<>" operator is interpreted as "MAX".
MPRINT(LSAF_GET_LAST_SDTM):   max_lmodte = max_lmodte <> l_dateLastModified;
MPRINT(LSAF_GET_LAST_SDTM):   if last.prefix then do;
MPRINT(LSAF_GET_LAST_SDTM):   if min_lmodte > max_modte then need_update=0;
MPRINT(LSAF_GET_LAST_SDTM):   else need_update=1;
MPRINT(LSAF_GET_LAST_SDTM):   putlog " -->  For " ext= prefix= " - dm:" min_modte= " - " max_modte= " - biostat:" min_lmodte= " - " max_lmodte= " --> " need_update= ;
MPRINT(LSAF_GET_LAST_SDTM):   put " -->  For " ext= prefix= " - dm:" min_modte= " - " max_modte= " - biostat:" min_lmodte= " - " max_lmodte= " --> " need_update= ;
MPRINT(LSAF_GET_LAST_SDTM):   output;
MPRINT(LSAF_GET_LAST_SDTM):   end;
MPRINT(LSAF_GET_LAST_SDTM):   run;

     
Notice: === sdtm_last_path=/clinical/argx-117/hv/argx-117-1901/biostat/staging/data_received/sdtm_last
parentpath=/clinical/argx-117/hv/argx-117-1901/dm/staging/current/3_sdtm/20221206_final_sdtm___pp_20221206  ===
   Refresh sdtm_last: Including: nameb=define  - dm: dateLastModified=14DEC22:12:57:24  - biostat: l_dateLastModified=15DEC22:22:24:44  -> dm_newer=0
 -->  For ext=.xml prefix=   - dm:min_modte=2022-12-14T12:57:24  - max_modte=2022-12-14T12:57:24  - biostat:min_lmodte=2022-12-15T22:24:44  - max_lmodte=2022-12-15T22:24:44  --> need_update=0
   Refresh sdtm_last: Including: nameb=define2-0-0  - dm: dateLastModified=14DEC22:12:57:24  - biostat: l_dateLastModified=15DEC22:22:25:38  -> dm_newer=0
 -->  For ext=.xsl prefix=   - dm:min_modte=2022-12-14T12:57:24  - max_modte=2022-12-14T12:57:24  - biostat:min_lmodte=2022-12-15T22:25:38  - max_lmodte=2022-12-15T22:25:38  --> need_update=0
     
Notice: === sdtm_last_path=/clinical/argx-117/hv/argx-117-1901/biostat/staging/data_received/sdtm_last parentpath=/clinical/argx-117/hv/argx-117-1901/dm/staging/current/4_sas/datasets  ===
   Refresh sdtm_last: Including: nameb=ae  - dm: dateLastModified=14DEC22:12:57:41  - biostat: l_dateLastModified=15DEC22:22:27:30  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=cm  - dm: dateLastModified=14DEC22:12:57:41  - biostat: l_dateLastModified=15DEC22:22:27:30  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=co  - dm: dateLastModified=14DEC22:12:57:41  - biostat: l_dateLastModified=15DEC22:22:27:30  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=dm  - dm: dateLastModified=14DEC22:12:57:41  - biostat: l_dateLastModified=15DEC22:22:27:30  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=ds  - dm: dateLastModified=14DEC22:12:57:42  - biostat: l_dateLastModified=15DEC22:22:27:30  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=dv  - dm: dateLastModified=14DEC22:12:57:42  - biostat: l_dateLastModified=15DEC22:22:27:31  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=ec  - dm: dateLastModified=14DEC22:12:57:42  - biostat: l_dateLastModified=15DEC22:22:27:31  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=eg  - dm: dateLastModified=14DEC22:12:57:42  - biostat: l_dateLastModified=15DEC22:22:27:31  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=ex  - dm: dateLastModified=14DEC22:12:57:42  - biostat: l_dateLastModified=15DEC22:22:27:31  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=ie  - dm: dateLastModified=14DEC22:12:57:43  - biostat: l_dateLastModified=15DEC22:22:27:31  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=is  - dm: dateLastModified=14DEC22:12:57:43  - biostat: l_dateLastModified=15DEC22:22:27:31  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=lb  - dm: dateLastModified=14DEC22:12:57:43  - biostat: l_dateLastModified=15DEC22:22:27:31  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=mb  - dm: dateLastModified=14DEC22:12:57:43  - biostat: l_dateLastModified=15DEC22:22:27:31  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=mh  - dm: dateLastModified=14DEC22:12:57:44  - biostat: l_dateLastModified=15DEC22:22:27:31  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=ml  - dm: dateLastModified=14DEC22:12:57:44  - biostat: l_dateLastModified=15DEC22:22:27:31  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=pc  - dm: dateLastModified=14DEC22:12:57:44  - biostat: l_dateLastModified=15DEC22:22:27:32  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=pe  - dm: dateLastModified=14DEC22:12:57:44  - biostat: l_dateLastModified=15DEC22:22:27:32  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=pp  - dm: dateLastModified=14DEC22:12:57:44  - biostat: l_dateLastModified=15DEC22:22:27:32  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=pr  - dm: dateLastModified=14DEC22:12:57:44  - biostat: l_dateLastModified=15DEC22:22:27:32  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=relrec  - dm: dateLastModified=14DEC22:12:57:45  - biostat: l_dateLastModified=15DEC22:22:27:32  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=se  - dm: dateLastModified=14DEC22:12:57:45  - biostat: l_dateLastModified=15DEC22:22:27:32  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=suppae  - dm: dateLastModified=14DEC22:12:57:45  - biostat: l_dateLastModified=15DEC22:22:27:32  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=suppdm  - dm: dateLastModified=14DEC22:12:57:45  - biostat: l_dateLastModified=15DEC22:22:27:32  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=suppds  - dm: dateLastModified=14DEC22:12:57:45  - biostat: l_dateLastModified=15DEC22:22:27:32  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=suppdv  - dm: dateLastModified=14DEC22:12:57:45  - biostat: l_dateLastModified=15DEC22:22:27:33  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=suppec  - dm: dateLastModified=14DEC22:12:57:46  - biostat: l_dateLastModified=15DEC22:22:27:33  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=suppeg  - dm: dateLastModified=14DEC22:12:57:46  - biostat: l_dateLastModified=15DEC22:22:27:33  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=supplb  - dm: dateLastModified=14DEC22:12:57:46  - biostat: l_dateLastModified=15DEC22:22:27:33  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=suppmb  - dm: dateLastModified=14DEC22:12:57:46  - biostat: l_dateLastModified=15DEC22:22:27:33  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=supppe  - dm: dateLastModified=14DEC22:12:57:46  - biostat: l_dateLastModified=15DEC22:22:27:33  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=suppve  - dm: dateLastModified=14DEC22:12:57:47  - biostat: l_dateLastModified=15DEC22:22:27:34  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=suppvs  - dm: dateLastModified=14DEC22:12:57:47  - biostat: l_dateLastModified=15DEC22:22:27:34  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=sv  - dm: dateLastModified=14DEC22:12:57:47  - biostat: l_dateLastModified=15DEC22:22:27:34  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=ta  - dm: dateLastModified=14DEC22:12:57:47  - biostat: l_dateLastModified=15DEC22:22:27:34  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=te  - dm: dateLastModified=14DEC22:12:57:47  - biostat: l_dateLastModified=15DEC22:22:27:34  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=ti  - dm: dateLastModified=14DEC22:12:57:47  - biostat: l_dateLastModified=15DEC22:22:27:34  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=ts  - dm: dateLastModified=14DEC22:12:57:48  - biostat: l_dateLastModified=15DEC22:22:27:34  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=tv  - dm: dateLastModified=14DEC22:12:57:48  - biostat: l_dateLastModified=15DEC22:22:27:34  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=ve  - dm: dateLastModified=14DEC22:12:57:48  - biostat: l_dateLastModified=15DEC22:22:27:34  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=vs  - dm: dateLastModified=14DEC22:12:57:48  - biostat: l_dateLastModified=15DEC22:22:27:34  -> dm_newer=0
 -->  For ext=.sas7bdat prefix=   - dm:min_modte=2022-12-14T12:57:41  - max_modte=2022-12-14T12:57:48  - biostat:min_lmodte=2022-12-15T22:27:30  - max_lmodte=2022-12-15T22:27:34  --> need_update=0
     
Notice: === sdtm_last_path=/clinical/argx-117/hv/argx-117-1901/biostat/staging/data_received/sdtm_last parentpath=/clinical/argx-117/hv/argx-117-1901/dm/staging/current/4_sas/metadata  ===
   Refresh sdtm_last: Including: nameb=codelists  - dm: dateLastModified=14DEC22:12:58:09  - biostat: l_dateLastModified=15DEC22:22:29:07  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=comments  - dm: dateLastModified=14DEC22:12:58:09  - biostat: l_dateLastModified=15DEC22:22:29:07  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=datasets  - dm: dateLastModified=14DEC22:12:58:10  - biostat: l_dateLastModified=15DEC22:22:29:07  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=dictionaries  - dm: dateLastModified=14DEC22:12:58:10  - biostat: l_dateLastModified=15DEC22:22:29:08  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=documents  - dm: dateLastModified=14DEC22:12:58:10  - biostat: l_dateLastModified=15DEC22:22:29:08  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=methods  - dm: dateLastModified=14DEC22:12:58:10  - biostat: l_dateLastModified=15DEC22:22:29:08  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=study  - dm: dateLastModified=14DEC22:12:58:11  - biostat: l_dateLastModified=15DEC22:22:29:08  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=valuelevel  - dm: dateLastModified=14DEC22:12:58:11  - biostat: l_dateLastModified=15DEC22:22:29:08  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=variables  - dm: dateLastModified=14DEC22:12:58:11  - biostat: l_dateLastModified=15DEC22:22:29:08  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=whereclauses  - dm: dateLastModified=14DEC22:12:58:11  - biostat: l_dateLastModified=15DEC22:22:29:08  -> dm_newer=0
 -->  For ext=.sas7bdat prefix=meta_  - dm:min_modte=2022-12-14T12:58:09  - max_modte=2022-12-14T12:58:11  - biostat:min_lmodte=2022-12-15T22:29:07  - max_lmodte=2022-12-15T22:29:08  --> need_update=0
     
Notice: === sdtm_last_path=/clinical/argx-117/mmn/argx-117-2002/biostat/staging/data_received/sdtm_last parentpath=/clinical/argx-117/mmn/argx-117-2002/dm/staging/current/4_sas/datasets  ===
   Refresh sdtm_last: Including: nameb=ae  - dm: dateLastModified=13FEB23:12:16:47  - biostat: l_dateLastModified=13FEB23:23:53:03  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=bs  - dm: dateLastModified=13FEB23:12:16:47  - biostat: l_dateLastModified=13FEB23:23:53:03  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=cm  - dm: dateLastModified=13FEB23:12:16:47  - biostat: l_dateLastModified=13FEB23:23:53:03  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=co  - dm: dateLastModified=13FEB23:12:16:47  - biostat: l_dateLastModified=13FEB23:23:53:03  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=dm  - dm: dateLastModified=13FEB23:12:16:47  - biostat: l_dateLastModified=13FEB23:23:53:03  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=dmpre  - dm: dateLastModified=13FEB23:12:16:47  - biostat: l_dateLastModified=13FEB23:23:53:04  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=ds  - dm: dateLastModified=13FEB23:12:16:47  - biostat: l_dateLastModified=13FEB23:23:53:04  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=dv  - dm: dateLastModified=13FEB23:12:16:47  - biostat: l_dateLastModified=13FEB23:23:53:04  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=ec  - dm: dateLastModified=13FEB23:12:16:47  - biostat: l_dateLastModified=13FEB23:23:53:04  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=eg  - dm: dateLastModified=13FEB23:12:16:48  - biostat: l_dateLastModified=13FEB23:23:53:04  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=ex  - dm: dateLastModified=13FEB23:12:16:48  - biostat: l_dateLastModified=13FEB23:23:53:04  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=fa  - dm: dateLastModified=13FEB23:12:16:48  - biostat: l_dateLastModified=13FEB23:23:53:04  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=ft  - dm: dateLastModified=13FEB23:12:16:48  - biostat: l_dateLastModified=13FEB23:23:53:04  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=ie  - dm: dateLastModified=13FEB23:12:16:48  - biostat: l_dateLastModified=13FEB23:23:53:04  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=lb  - dm: dateLastModified=13FEB23:12:16:48  - biostat: l_dateLastModified=13FEB23:23:53:04  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=mh  - dm: dateLastModified=13FEB23:12:16:48  - biostat: l_dateLastModified=13FEB23:23:53:04  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=pr  - dm: dateLastModified=13FEB23:12:16:48  - biostat: l_dateLastModified=13FEB23:23:53:04  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=qs  - dm: dateLastModified=13FEB23:12:16:48  - biostat: l_dateLastModified=13FEB23:23:53:04  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=relrec  - dm: dateLastModified=13FEB23:12:16:48  - biostat: l_dateLastModified=13FEB23:23:53:04  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=rp  - dm: dateLastModified=13FEB23:12:16:48  - biostat: l_dateLastModified=13FEB23:23:53:04  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=sc  - dm: dateLastModified=13FEB23:12:16:48  - biostat: l_dateLastModified=13FEB23:23:53:04  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=se  - dm: dateLastModified=13FEB23:12:16:48  - biostat: l_dateLastModified=13FEB23:23:53:04  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=suppae  - dm: dateLastModified=13FEB23:12:16:48  - biostat: l_dateLastModified=13FEB23:23:53:05  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=suppcm  - dm: dateLastModified=13FEB23:12:16:49  - biostat: l_dateLastModified=13FEB23:23:53:05  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=suppdm  - dm: dateLastModified=13FEB23:12:16:49  - biostat: l_dateLastModified=13FEB23:23:53:05  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=suppds  - dm: dateLastModified=13FEB23:12:16:49  - biostat: l_dateLastModified=13FEB23:23:53:05  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=suppdv  - dm: dateLastModified=13FEB23:12:16:49  - biostat: l_dateLastModified=13FEB23:23:53:05  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=suppec  - dm: dateLastModified=13FEB23:12:16:49  - biostat: l_dateLastModified=13FEB23:23:53:05  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=suppeg  - dm: dateLastModified=13FEB23:12:16:49  - biostat: l_dateLastModified=13FEB23:23:53:05  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=suppex  - dm: dateLastModified=13FEB23:12:16:49  - biostat: l_dateLastModified=13FEB23:23:53:05  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=supplb  - dm: dateLastModified=13FEB23:12:16:49  - biostat: l_dateLastModified=13FEB23:23:53:05  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=suppmh  - dm: dateLastModified=13FEB23:12:16:49  - biostat: l_dateLastModified=13FEB23:23:53:05  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=supppr  - dm: dateLastModified=13FEB23:12:16:49  - biostat: l_dateLastModified=13FEB23:23:53:05  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=suppsv  - dm: dateLastModified=13FEB23:12:16:49  - biostat: l_dateLastModified=13FEB23:23:53:05  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=suppvs  - dm: dateLastModified=13FEB23:12:16:49  - biostat: l_dateLastModified=13FEB23:23:53:05  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=sv  - dm: dateLastModified=13FEB23:12:16:49  - biostat: l_dateLastModified=13FEB23:23:53:05  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=ta  - dm: dateLastModified=13FEB23:12:16:49  - biostat: l_dateLastModified=13FEB23:23:53:05  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=te  - dm: dateLastModified=13FEB23:12:16:50  - biostat: l_dateLastModified=13FEB23:23:53:05  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=ti  - dm: dateLastModified=13FEB23:12:16:50  - biostat: l_dateLastModified=13FEB23:23:53:05  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=ts  - dm: dateLastModified=13FEB23:12:16:50  - biostat: l_dateLastModified=13FEB23:23:53:05  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=tv  - dm: dateLastModified=13FEB23:12:16:50  - biostat: l_dateLastModified=13FEB23:23:53:05  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=vs  - dm: dateLastModified=13FEB23:12:16:50  - biostat: l_dateLastModified=13FEB23:23:53:05  -> dm_newer=0
   Refresh sdtm_last: Including: nameb=xd  - dm: dateLastModified=13FEB23:12:16:50  - biostat: l_dateLastModified=13FEB23:23:53:05  -> dm_newer=0
 -->  For ext=.sas7bdat prefix=   - dm:min_modte=2023-02-13T12:16:47  - max_modte=2023-02-13T12:16:50  - biostat:min_lmodte=2023-02-13T23:53:03  - max_lmodte=2023-02-13T23:53:05  --> need_update=0
NOTE: 105 lines were written to file PRINT.
NOTE: There were 95 observations read from the data set WORK.SDTM_LAST_NEW.
      WHERE ext in ('.pdf', '.sas7bdat', '.xml', '.xpt', '.xsl') and (parentpath not = ' ') and (studypath not = ' ') and (PRXMATCH('/^jobtrack\w+/', CATS(nameb))=0) and (dateLastModified>=.) and 
      (dateLastModified<='  14FEB2023:23:59:00'DT);
NOTE: The data set WORK.SDTM_LAST_NEW2 has 5 observations and 14 variables.
NOTE: The DATA step printed page 12.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   proc print data=sdtm_last_new2(obs=10) width=min;
MPRINT(LSAF_GET_LAST_SDTM):   title "sdtm_last_new2";
MPRINT(LSAF_GET_LAST_SDTM):   run;
NOTE: There were 5 observations read from the data set WORK.SDTM_LAST_NEW2.
NOTE: The PROCEDURE PRINT printed page 13.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.02 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   title;
MPRINT(LSAF_GET_LAST_SDTM):   *- Get parameters (and default values) for the SDTM Refresh Job into dataset WORK.job_Parameters -*;
MPRINT(LSAF_GET_LAST_SDTM):   option nomprint;
MAUTOCOMPLOC:  The autocall macro LSAF_GETJOBPARAMETERS is compiling using the autocall source file /sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.6.1/sasmacros/lsaf_getjobparameters.sas.
NOTE: The macro LSAF_GETJOBPARAMETERS completed compilation without errors.
      81 instructions 4744 bytes.


NOTE: SAS Life Science Analytics Framework Macro: *  Parameters were returned for job /general/biostat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_refresh_sdtm_last.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_getjobparameters
NOTE: SAS Life Science Analytics Framework Macro: *  14  records written to data set work.job_Parameters
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: The data set WORK.JOB_PARAMETERS has 14 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
      

NOTE: The dataset WORK.JOB_PARAMETERS has 14 observations and 8 variables.
MPRINT(LSAF_GET_LAST_SDTM):   ;
MPRINT(LSAF_GET_LAST_SDTM):   proc print data=job_Parameters(obs=10) width=min;
MPRINT(LSAF_GET_LAST_SDTM):   title "job_Parameters";
MPRINT(LSAF_GET_LAST_SDTM):   run;
NOTE: There were 10 observations read from the data set WORK.JOB_PARAMETERS.
NOTE: The PROCEDURE PRINT printed page 14.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   title;
MPRINT(LSAF_GET_LAST_SDTM):   *- Macro that submits the SDTM Refresh Job with specific source and target paths indicated as parameters -*;
NOTE: The macro SUBMIT_SDTM_REFRESH_JOB completed compilation without errors.
      177 instructions 7096 bytes.
MPRINT(LSAF_GET_LAST_SDTM):   *- for each SDTM source path, submit a job instance to copy source files to target path and collect the result -*;
MPRINT(LSAF_GET_LAST_SDTM):   data sdtm_last_new3(compress=YES);
MPRINT(LSAF_GET_LAST_SDTM):   file print;
MPRINT(LSAF_GET_LAST_SDTM):   set sdtm_last_new2( keep=studypath sdtm_last_path parentpath ext domains prefix need_update n_items);
MPRINT(LSAF_GET_LAST_SDTM):   format stdtm endtm E8601DT.;
MPRINT(LSAF_GET_LAST_SDTM):   length job_instance $24 result $800 lsaf_jobsubmission_id $500 lsaf_job_status $100;
MPRINT(LSAF_GET_LAST_SDTM):   if need_update then do;
MPRINT(LSAF_GET_LAST_SDTM):   stdtm = datetime();
MPRINT(LSAF_GET_LAST_SDTM):   *- jbodart - 2022-09- 2022-09-09 - Integrate &num_jobs_spawned in %submit_sdtm_refresh_job(). -*;
MPRINT(LSAF_GET_LAST_SDTM):   call execute('%let num_jobs_spawned = %eval(&num_jobs_spawned + 1);');
MPRINT(LSAF_GET_LAST_SDTM):   job_instance = catx("_", put(symget("sysjobid"), $20.), 'x'||put(symget("sysjobid"), $20.), _n_);
MPRINT(LSAF_GET_LAST_SDTM):   *- submit 'job_gadam_refresh_sdtm_last.job' with study-specific source path and target path -*;
MPRINT(LSAF_GET_LAST_SDTM):   result = runmacro('%submit_sdtm_refresh_job('||strip(parentpath) ||','||strip(sdtm_last_path) ||','||strip(domains) ||", force = N" ||", mock = N" ||", run_next_job = N" 
||", next_job = /general/biostat/jobs/gadam_rebuild_adam/dev/jobs/job_gadam_rebuild_adam.job" ||', prefix = '||strip(prefix) ||", last_refresh_reldy = . - 0" ||", job_instance = " || job_instance 
||");");
MPRINT(LSAF_GET_LAST_SDTM):   *- runmacro: see note in program header -*;
MPRINT(LSAF_GET_LAST_SDTM):   endtm = datetime();
MPRINT(LSAF_GET_LAST_SDTM):   lsaf_jobsubmission_id = prxchange("s/^.* lsaf_jobsubmission_id=([0-9a-f-]+): .*$/\1/i", 1, result);
MPRINT(LSAF_GET_LAST_SDTM):   lsaf_job_status = prxchange("s/^.* Job Status: (.*)$/\1/i", 1, result);
MPRINT(LSAF_GET_LAST_SDTM):   end;
MPRINT(LSAF_GET_LAST_SDTM):   else do;
MPRINT(LSAF_GET_LAST_SDTM):   result = "Skipped, already up-to-date.";
MPRINT(LSAF_GET_LAST_SDTM):   end;
MPRINT(LSAF_GET_LAST_SDTM):   putlog "NO" "TE-" / "Submit sdtm_refresh_job: " sdtm_last_path= / @3 parentpath= / @3 domains= /@3 result=;
MPRINT(LSAF_GET_LAST_SDTM):   put "   " / "Submit sdtm_refresh_job: " sdtm_last_path= / @3 parentpath= / @3 domains= /@3 result=;
MPRINT(LSAF_GET_LAST_SDTM):   run;

     
Submit sdtm_refresh_job: sdtm_last_path=/clinical/argx-117/hv/argx-117-1901/biostat/staging/data_received/sdtm_last
  parentpath=/clinical/argx-117/hv/argx-117-1901/dm/staging/current/3_sdtm/20221206_final_sdtm___pp_20221206
  domains=define
  result=Skipped, already up-to-date.
     
Submit sdtm_refresh_job: sdtm_last_path=/clinical/argx-117/hv/argx-117-1901/biostat/staging/data_received/sdtm_last
  parentpath=/clinical/argx-117/hv/argx-117-1901/dm/staging/current/3_sdtm/20221206_final_sdtm___pp_20221206
  domains=define2-0-0
  result=Skipped, already up-to-date.
     
Submit sdtm_refresh_job: sdtm_last_path=/clinical/argx-117/hv/argx-117-1901/biostat/staging/data_received/sdtm_last
  parentpath=/clinical/argx-117/hv/argx-117-1901/dm/staging/current/4_sas/datasets
  domains=ae cm co dm ds dv ec eg ex ie is lb mb mh ml pc pe pp pr relrec se suppae suppdm suppds suppdv suppec suppeg supplb suppmb supppe suppve suppvs sv ta te ti ts tv ve vs
  result=Skipped, already up-to-date.
     
Submit sdtm_refresh_job: sdtm_last_path=/clinical/argx-117/hv/argx-117-1901/biostat/staging/data_received/sdtm_last
  parentpath=/clinical/argx-117/hv/argx-117-1901/dm/staging/current/4_sas/metadata
  domains=codelists comments datasets dictionaries documents methods study valuelevel variables whereclauses
  result=Skipped, already up-to-date.
     
Submit sdtm_refresh_job: sdtm_last_path=/clinical/argx-117/mmn/argx-117-2002/biostat/staging/data_received/sdtm_last
  parentpath=/clinical/argx-117/mmn/argx-117-2002/dm/staging/current/4_sas/datasets
  domains=ae bs cm co dm dmpre ds dv ec eg ex fa ft ie lb mh pr qs relrec rp sc se suppae suppcm suppdm suppds suppdv suppec suppeg suppex supplb suppmh supppr suppsv suppvs sv ta te ti ts tv vs xd
  result=Skipped, already up-to-date.
NOTE: 20 lines were written to file PRINT.
NOTE: There were 5 observations read from the data set WORK.SDTM_LAST_NEW2.
NOTE: The data set WORK.SDTM_LAST_NEW3 has 5 observations and 14 variables.
NOTE: Compressing data set WORK.SDTM_LAST_NEW3 increased size by 100.00 percent. 
      Compressed is 2 pages; un-compressed would require 1 pages.
NOTE: The DATA step printed page 15.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   proc sql noprint;
MPRINT(LSAF_GET_LAST_SDTM):   select sum(prxmatch("/COMPLETED/", lsaf_job_status)=0) into :n_jobs_ongoing trimmed from sdtm_last_new3 where lsaf_jobsubmission_id ^= '';
MPRINT(LSAF_GET_LAST_SDTM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

N_JOBS_ONGOING=.
MPRINT(LSAF_GET_LAST_SDTM):   *- jbodart -2022-08-29 - retrieve and combine refresh information from all individual job instances -*;
NOTE: The macro SUBMIT_UPDATE_REFRESH_JOB completed compilation without errors.
      47 instructions 1440 bytes.
MPRINT(LSAF_GET_LAST_SDTM):   data sdtm_last_new3(compress=YES);
MPRINT(LSAF_GET_LAST_SDTM):   set sdtm_last_new3;
MPRINT(LSAF_GET_LAST_SDTM):   file print;
MPRINT(LSAF_GET_LAST_SDTM):   length update_refresh_result $200;
MPRINT(LSAF_GET_LAST_SDTM):   format update_refresh_stdtm update_refresh_endtm E8601DT. update_refresh_elapsed time12.2;
MPRINT(LSAF_GET_LAST_SDTM):   if job_instance ^= '' then do;
MPRINT(LSAF_GET_LAST_SDTM):   update_refresh_stdtm = datetime();
MPRINT(LSAF_GET_LAST_SDTM):   *- submit 'job_gadam_update_refresh_info.job' with study-specific target path and job instance -*;
MPRINT(LSAF_GET_LAST_SDTM):   update_refresh_result = runmacro('%submit_update_refresh_job(transact_data = out.refresh_' || job_instance ||");");
MPRINT(LSAF_GET_LAST_SDTM):   *- runmacro: see note in program header -*;
MPRINT(LSAF_GET_LAST_SDTM):   update_refresh_endtm = datetime();
MPRINT(LSAF_GET_LAST_SDTM):   update_refresh_elapsed = update_refresh_endtm - update_refresh_stdtm;
MPRINT(LSAF_GET_LAST_SDTM):   putlog "Submit update_refresh_job: " _n_= job_instance= sdtm_last_path= / lsaf_jobsubmission_id= lsaf_job_status= / update_refresh_stdtm= update_refresh_elapsed= 
update_refresh_elapsed= / update_refresh_result=;
MPRINT(LSAF_GET_LAST_SDTM):   put "Submit update_refresh_job: " _n_= job_instance= sdtm_last_path= / lsaf_jobsubmission_id= lsaf_job_status= / update_refresh_stdtm= update_refresh_elapsed= 
update_refresh_elapsed= / update_refresh_result=;
MPRINT(LSAF_GET_LAST_SDTM):   end;
MPRINT(LSAF_GET_LAST_SDTM):   run;

NOTE: 0 lines were written to file PRINT.
NOTE: There were 5 observations read from the data set WORK.SDTM_LAST_NEW3.
NOTE: The data set WORK.SDTM_LAST_NEW3 has 5 observations and 18 variables.
NOTE: Compressing data set WORK.SDTM_LAST_NEW3 increased size by 100.00 percent. 
      Compressed is 2 pages; un-compressed would require 1 pages.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.02 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   proc sort data=sdtm_last_new3;
MPRINT(LSAF_GET_LAST_SDTM):   by studypath sdtm_last_path prefix parentpath ext domains;
MPRINT(LSAF_GET_LAST_SDTM):   run;

NOTE: There were 5 observations read from the data set WORK.SDTM_LAST_NEW3.
NOTE: The data set WORK.SDTM_LAST_NEW3 has 5 observations and 18 variables.
NOTE: Compressing data set WORK.SDTM_LAST_NEW3 increased size by 100.00 percent. 
      Compressed is 2 pages; un-compressed would require 1 pages.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   proc print data=sdtm_last_new3(obs=10) width=min;
MPRINT(LSAF_GET_LAST_SDTM):   title "sdtm_last_new3";
MPRINT(LSAF_GET_LAST_SDTM):   run;
NOTE: There were 5 observations read from the data set WORK.SDTM_LAST_NEW3.
NOTE: The PROCEDURE PRINT printed page 16.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   title;
MPRINT(LSAF_GET_LAST_SDTM):   *- Store retrieved information about the last sdtm datasests in biostat folder /clinical/<compound>/<indication>/<study>/biostat/staging/data_received/sdtm_last and 
about the last refresh jobs submitted in a permanent dataset 'last_sdtm' in LSAF folder /general/biostat/jobs/gadam_ongoing_studies/dev/output -*;
MPRINT(LSAF_GET_LAST_SDTM):   *- retrieve pre-existing data -*;
MPRINT(LSAF_GET_LAST_SDTM):   data out_last_sdtm;
MPRINT(LSAF_GET_LAST_SDTM):   set out.last_sdtm;
MPRINT(LSAF_GET_LAST_SDTM):   run;

NOTE: There were 868 observations read from the data set OUT.LAST_SDTM.
NOTE: The data set WORK.OUT_LAST_SDTM has 868 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   option mcompilenote=all;
MAUTOCOMPLOC:  The autocall macro UNI_VTYPE is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/macros/_library/uni_vtype.sas.
NOTE: The macro UNI_VTYPE completed compilation without errors.
      185 instructions 7208 bytes.
MPRINT(LSAF_GET_LAST_SDTM):   option MCOMPILENOTE=ALL;
MPRINT(UNI_VTYPE):   *- Harmonize type of variables with conflicting types in Data= datasets According to the length found in Ref= datasests (if specified) -*;
MPRINT(UNI_VTYPE):   proc sql noprint undo_policy=none;
MPRINT(UNI_VTYPE):   *- identify variables with conflicting type -*;
MPRINT(UNI_VTYPE):   select column , conflict_type_vars into :conflict_type_vars separated by ", " , :n_conflict_type_vars separated by " " from (select distinct varnum , case when TYPE="NUM" and 
(sum(TYPE="NUM")>0 and sum(TYPE="CHAR")>0) then "left(put("||cats(name)||", "||cats(format)||")) as "||cats(name) else cats(name) end as column , case when sum(TYPE="NUM" )>0 and sum(TYPE="CHAR" )>0 
then 'x' else ' ' end as conflict_type_vars from (select distinct upcase(LIBNAME) as LIBNAME, upcase(MEMNAME) as MEMNAME, varnum as VARNUM, upcase(NAME) as NAME, upcase(TYPE) as TYPE , case when 
format=" " and upcase(TYPE)="NUM" then "Best12." when format=" " and upcase(TYPE)="CHAR" then "$CHAR." else upcase(format) end as format from sashelp.vcolumn where 
upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.OUT_LAST_SDTM" "WORK.OUT_LAST_SDTM" "WORK.SDTM_LAST_NEW3" ) ) group by name having upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK.OUT_LAST_SDTM" ) 
;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(UNI_VTYPE):   *- identify variables with conflicting type -*;
MPRINT(UNI_VTYPE):   select column , conflict_type_vars into :conflict_type_vars separated by ", " , :n_conflict_type_vars separated by " " from (select distinct varnum , case when TYPE="NUM" and 
(sum(TYPE="NUM")>0 and sum(TYPE="CHAR")>0) then "left(put("||cats(name)||", "||cats(format)||")) as "||cats(name) else cats(name) end as column , case when sum(TYPE="NUM" )>0 and sum(TYPE="CHAR" )>0 
then 'x' else ' ' end as conflict_type_vars from (select distinct upcase(LIBNAME) as LIBNAME, upcase(MEMNAME) as MEMNAME, varnum as VARNUM, upcase(NAME) as NAME, upcase(TYPE) as TYPE , case when 
format=" " and upcase(TYPE)="NUM" then "Best12." when format=" " and upcase(TYPE)="CHAR" then "$CHAR." else upcase(format) end as format from sashelp.vcolumn where 
upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.SDTM_LAST_NEW3" "WORK.OUT_LAST_SDTM" "WORK.SDTM_LAST_NEW3" ) ) group by name having upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK.SDTM_LAST_NEW3" 
) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(UNI_VTYPE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):  ;
MPRINT(LSAF_GET_LAST_SDTM):   option mcompilenote=all;
MAUTOCOMPLOC:  The autocall macro MINI_VLENGTH is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/macros/global_macros/mini_vlength.sas.
NOTE: The macro MINI_VLENGTH completed compilation without errors.
      184 instructions 5200 bytes.
MPRINT(LSAF_GET_LAST_SDTM):   option MCOMPILENOTE=ALL;
MPRINT(MINI_VLENGTH):   *- Minimize length of character variables in Data= datasets -*;
MPRINT(MINI_VLENGTH):   proc sql noprint;
MPRINT(MINI_VLENGTH):   *- identify character variables in current dataset &libds -*;
MPRINT(MINI_VLENGTH):   select distinct name, count(distinct name) into :c_vars separated by " ", :n_c_vars trimmed from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in 
("WORK.OUT_LAST_SDTM" ) and upcase(TYPE)="CHAR" ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(MINI_VLENGTH):   *- retrieve length of longest value for each character variable in current dataset &libds -*;
MPRINT(MINI_VLENGTH):   select "domains character("||cats(max(1, max(length("domains"N)) ))||")" ||", "|| "ext character("||cats(max(1, max(length("ext"N)) ))||")" ||", "|| "ind 
character("||cats(max(1, max(length("ind"N)) ))||")" ||", "|| "job_instance character("||cats(max(1, max(length("job_instance"N)) ))||")" ||", "|| "lastcheckfl character("||cats(max(1, 
max(length("lastcheckfl"N)) ))||")" ||", "|| "lsaf_job_status character("||cats(max(1, max(length("lsaf_job_status"N)) ))||")" ||", "|| "lsaf_jobsubmission_id character("||cats(max(1, 
max(length("lsaf_jobsubmission_id"N)) ))||")" ||", "|| "parentpath character("||cats(max(1, max(length("parentpath"N)) ))||")" ||", "|| "prefix character("||cats(max(1, max(length("prefix"N)) ))||")" 
||", "|| "product character("||cats(max(1, max(length("product"N)) ))||")" ||", "|| "result character("||cats(max(1, max(length("result"N)) ))||")" ||", "|| "sdtm_last_path character("||cats(max(1, 
max(length("sdtm_last_path"N)) ))||")" ||", "|| "study character("||cats(max(1, max(length("study"N)) ))||")" ||", "|| "studypath character("||cats(max(1, max(length("studypath"N)) ))||")" ||", "|| 
"update_refresh_result character("||cats(max(1, max(length("update_refresh_result"N)) ))||")" into :char_vars trimmed from WORK.OUT_LAST_SDTM ;
MPRINT(MINI_VLENGTH):   *- adjust character variable lengths -*;
MPRINT(MINI_VLENGTH):   alter table WORK.OUT_LAST_SDTM modify domains character(254), ext character(9), ind character(9), job_instance character(20), lastcheckfl character(1), lsaf_job_status 
character(20), lsaf_jobsubmission_id character(36), parentpath character(140), prefix character(5), product character(8), result character(166), sdtm_last_path character(82), study character(13), 
studypath character(42), update_refresh_result character(165);
NOTE: Table WORK.OUT_LAST_SDTM has been modified, with 22 columns.
MPRINT(MINI_VLENGTH):   *- identify character variables in current dataset &libds -*;
MPRINT(MINI_VLENGTH):   select distinct name, count(distinct name) into :c_vars separated by " ", :n_c_vars trimmed from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in 
("WORK.SDTM_LAST_NEW3" ) and upcase(TYPE)="CHAR" ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(MINI_VLENGTH):   *- retrieve length of longest value for each character variable in current dataset &libds -*;
MPRINT(MINI_VLENGTH):   select "domains character("||cats(max(1, max(length("domains"N)) ))||")" ||", "|| "ext character("||cats(max(1, max(length("ext"N)) ))||")" ||", "|| "job_instance 
character("||cats(max(1, max(length("job_instance"N)) ))||")" ||", "|| "lsaf_job_status character("||cats(max(1, max(length("lsaf_job_status"N)) ))||")" ||", "|| "lsaf_jobsubmission_id 
character("||cats(max(1, max(length("lsaf_jobsubmission_id"N)) ))||")" ||", "|| "parentpath character("||cats(max(1, max(length("parentpath"N)) ))||")" ||", "|| "prefix character("||cats(max(1, 
max(length("prefix"N)) ))||")" ||", "|| "result character("||cats(max(1, max(length("result"N)) ))||")" ||", "|| "sdtm_last_path character("||cats(max(1, max(length("sdtm_last_path"N)) ))||")" ||", 
"|| "studypath character("||cats(max(1, max(length("studypath"N)) ))||")" ||", "|| "update_refresh_result character("||cats(max(1, max(length("update_refresh_result"N)) ))||")" into :char_vars 
trimmed from WORK.SDTM_LAST_NEW3 ;
MPRINT(MINI_VLENGTH):   *- adjust character variable lengths -*;
MPRINT(MINI_VLENGTH):   alter table WORK.SDTM_LAST_NEW3 modify domains character(187), ext character(9), job_instance character(1), lsaf_job_status character(1), lsaf_jobsubmission_id character(1), 
parentpath character(95), prefix character(5), result character(28), sdtm_last_path character(76), studypath character(36), update_refresh_result character(1);
NOTE: Compressing data set WORK.SDTM_LAST_NEW3 increased size by 100.00 percent. 
      Compressed is 2 pages; un-compressed would require 1 pages.
NOTE: Table WORK.SDTM_LAST_NEW3 has been modified, with 18 columns.
MPRINT(MINI_VLENGTH):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):  ;
MPRINT(UNI_VLENGTH):   *- Harmonize length of character variables in Data= datasets According to the length found in Ref= datasests (if specified) -*;
MPRINT(UNI_VLENGTH):   proc sql noprint;
MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated by " " from (select distinct upcase(LIBNAME) as 
LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.OUT_LAST_SDTM" "WORK.SDTM_LAST_NEW3" )) then 
LENGTH else . end ) as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.OUT_LAST_SDTM" "WORK.OUT_LAST_SDTM" "WORK.SDTM_LAST_NEW3" ) group by upcase(name)) group 
by upcase(name), upcase(type) having sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK.OUT_LAST_SDTM" and TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.OUT_LAST_SDTM" 
"WORK.SDTM_LAST_NEW3" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(UNI_VLENGTH):   alter table WORK.OUT_LAST_SDTM modify DOMAINS character(254), EXT character(9), IND character(9), JOB_INSTANCE character(20), LASTCHECKFL character(1), LSAF_JOBSUBMISSION_ID 
character(36), LSAF_JOB_STATUS character(20), PARENTPATH character(140), PREFIX character(5), PRODUCT character(8), RESULT character(166), SDTM_LAST_PATH character(82), STUDY character(13), STUDYPATH 
character(42), UPDATE_REFRESH_RESULT character(165) ;
NOTE: Table WORK.OUT_LAST_SDTM has been modified, with 22 columns.
MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated by " " from (select distinct upcase(LIBNAME) as 
LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.OUT_LAST_SDTM" "WORK.SDTM_LAST_NEW3" )) then 
LENGTH else . end ) as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.SDTM_LAST_NEW3" "WORK.OUT_LAST_SDTM" "WORK.SDTM_LAST_NEW3" ) group by upcase(name)) group 
by upcase(name), upcase(type) having sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK.SDTM_LAST_NEW3" and TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.OUT_LAST_SDTM" 
"WORK.SDTM_LAST_NEW3" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(UNI_VLENGTH):   alter table WORK.SDTM_LAST_NEW3 modify DOMAINS character(254), EXT character(9), JOB_INSTANCE character(20), LSAF_JOBSUBMISSION_ID character(36), LSAF_JOB_STATUS character(20), 
PARENTPATH character(140), PREFIX character(5), RESULT character(166), SDTM_LAST_PATH character(82), STUDYPATH character(42), UPDATE_REFRESH_RESULT character(165) ;
NOTE: Compressing data set WORK.SDTM_LAST_NEW3 increased size by 100.00 percent. 
      Compressed is 2 pages; un-compressed would require 1 pages.
NOTE: Table WORK.SDTM_LAST_NEW3 has been modified, with 18 columns.
MPRINT(UNI_VLENGTH):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.11 seconds
      cpu time            0.12 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):  ;
MPRINT(LSAF_GET_LAST_SDTM):   *- combine current with pre-existing data -*;
MPRINT(LSAF_GET_LAST_SDTM):   data last_sdtm0 out.last_sdtm ;
MPRINT(LSAF_GET_LAST_SDTM):   length product ind study $20 lastcheckfl $1;
MPRINT(LSAF_GET_LAST_SDTM):   format stdtm endtm E8601DT.;
MPRINT(LSAF_GET_LAST_SDTM):   length domains $1000 ext $10;
MPRINT(LSAF_GET_LAST_SDTM):   set out_last_sdtm(in=a) sdtm_last_new3 ;
MPRINT(LSAF_GET_LAST_SDTM):   product = scan(studypath, 2, "/\");
MPRINT(LSAF_GET_LAST_SDTM):   ind = scan(studypath, 3, "/\");
MPRINT(LSAF_GET_LAST_SDTM):   study = scan(studypath, 4, "/\");
MPRINT(LSAF_GET_LAST_SDTM):   if a then lastcheckfl=" ";
MPRINT(LSAF_GET_LAST_SDTM):   else lastcheckfl="Y";
MPRINT(LSAF_GET_LAST_SDTM):   label lastcheckfl = "Last Check Job Flag" stdtm = "Refresh Job Start Datetime" endtm = "Refresh Job End Datetime" sdtm_last_path = "Biostat (Target) Folder (sdtm_last)" 
parentpath = "DM (Source) Folder" ;
MPRINT(LSAF_GET_LAST_SDTM):   run;

NOTE: There were 868 observations read from the data set WORK.OUT_LAST_SDTM.
NOTE: There were 5 observations read from the data set WORK.SDTM_LAST_NEW3.
NOTE: The data set WORK.LAST_SDTM0 has 873 observations and 22 variables.
NOTE: The data set OUT.LAST_SDTM has 873 observations and 22 variables.
NOTE: Compressing data set OUT.LAST_SDTM decreased size by 70.00 percent. 
      Compressed is 6 pages; un-compressed would require 20 pages.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   *- Get parameters (and default values) for the Define Extract Job into dataset WORK.job_Parameters -*;
NOTE: The macro CHECK_LSAF_PATH completed compilation without errors.
      92 instructions 2496 bytes.
MPRINT(LSAF_GET_LAST_SDTM):   *- Extract (refresh) Metadata from SDTM Define.xml -*;
MPRINT(LSAF_GET_LAST_SDTM):   data extract_sdtm_define;
MPRINT(LSAF_GET_LAST_SDTM):   file print;
MPRINT(LSAF_GET_LAST_SDTM):   set sdtm_last_new3(keep=studypath sdtm_last_path prefix need_update n_items);
MPRINT(LSAF_GET_LAST_SDTM):   by studypath sdtm_last_path prefix;
MPRINT(LSAF_GET_LAST_SDTM):   length result $200 gadam_finalchecksjob $200;
MPRINT(LSAF_GET_LAST_SDTM):   retain gadam_finalchecksjob;
MPRINT(LSAF_GET_LAST_SDTM):   if last.sdtm_last_path;
MPRINT(LSAF_GET_LAST_SDTM):   result = result;
MPRINT(LSAF_GET_LAST_SDTM):   if gadam_finalchecksjob = " " then do;
MPRINT(LSAF_GET_LAST_SDTM):   gadam_finalchecksjob = runmacro('%check_lsaf_path('||cats(studypath)||'/biostat/staging/generic_adam/jobs/job_finalchecks.job);');
MPRINT(LSAF_GET_LAST_SDTM):   putlog _n_= "Check LSAF path exists: " gadam_finalchecksjob=;
MPRINT(LSAF_GET_LAST_SDTM):   put _n_= "Check LSAF path exists: " gadam_finalchecksjob=;
MPRINT(LSAF_GET_LAST_SDTM):   end;
MPRINT(LSAF_GET_LAST_SDTM):   if prefix not in ('meta_') or n_items < 10 or need_update then do;
MPRINT(LSAF_GET_LAST_SDTM):   stdtm = datetime();
MPRINT(LSAF_GET_LAST_SDTM):   if gadam_finalchecksjob ^= "check path exists: 0 - RC: 0: Success." then result="OK, study seems final: ../generic_adam/jobs/job_finalchecks.job exists.";
MPRINT(LSAF_GET_LAST_SDTM):   else if need_update = 0 and 1 then result="OK, metadata already up-to-date";
MPRINT(LSAF_GET_LAST_SDTM):   else result = runmacro('%submit_define_extract_job('||strip(sdtm_last_path)||");");
MPRINT(LSAF_GET_LAST_SDTM):   *- runmacro: see note in program header -*;
MPRINT(LSAF_GET_LAST_SDTM):   endtm = datetime();
MPRINT(LSAF_GET_LAST_SDTM):   elapsed = endtm - stdtm;
MPRINT(LSAF_GET_LAST_SDTM):   putlog "Refresh SDTM metadata " result= elapsed=;
MPRINT(LSAF_GET_LAST_SDTM):   put "Refresh SDTM metadata " result= elapsed=;
MPRINT(LSAF_GET_LAST_SDTM):   end;
MPRINT(LSAF_GET_LAST_SDTM):   else do;
MPRINT(LSAF_GET_LAST_SDTM):   result = "Skipped define extract job, metadata already up to date";
MPRINT(LSAF_GET_LAST_SDTM):   putlog "Refresh SDTM metadata " result= ;
MPRINT(LSAF_GET_LAST_SDTM):   put "Refresh SDTM metadata " result= ;
MPRINT(LSAF_GET_LAST_SDTM):   end;
MPRINT(LSAF_GET_LAST_SDTM):   format stdtm endtm E8601DT. elapsed time.;
MPRINT(LSAF_GET_LAST_SDTM):   run;

The SAS System

MPRINT(RUN_MACRO):   option nomprint;
%check_lsaf_path(/clinical/argx-117/hv/argx-117-1901/biostat/staging/generic_adam/jobs/job_finalchecks.job, type=);
_N_=4 Check LSAF path exists: gadam_finalchecksjob=check path exists: 0 - RC: 0: Success.
Refresh SDTM metadata result=Skipped define extract job, metadata already up to date
Refresh SDTM metadata result=OK, metadata already up-to-date elapsed=0:00:00
NOTE: 3 lines were written to file PRINT.
NOTE: There were 5 observations read from the data set WORK.SDTM_LAST_NEW3.
NOTE: The data set WORK.EXTRACT_SDTM_DEFINE has 2 observations and 10 variables.
NOTE: The DATA step printed page 17.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   *- Search for all Repository folders named 'generic_adam' across all products, indications and studies below /clinical -*;
MPRINT(LSAF_GET_LAST_SDTM):   data lsaf_generic_adam0;
MPRINT(LSAF_GET_LAST_SDTM):   set lsaf_studies (keep=path itemType );
MPRINT(LSAF_GET_LAST_SDTM):   studypath=path;
MPRINT(LSAF_GET_LAST_SDTM):   path=cats(studypath, "/biostat/staging/generic_adam");
MPRINT(LSAF_GET_LAST_SDTM):   exists_path=put(runmacro('%test_if_exists('||strip(path)||');'), $400.);
MPRINT(LSAF_GET_LAST_SDTM):   if exists_path ^= "1" then do;
MPRINT(LSAF_GET_LAST_SDTM):   if exists_path ^= "0" then put "WAR" "NING: Check if LSAF path exists: " path " returned: " exists_path;
MPRINT(LSAF_GET_LAST_SDTM):   *else put "War" "ning: LSAF path does not exist (yet): " path;
MPRINT(LSAF_GET_LAST_SDTM):   end;
MPRINT(LSAF_GET_LAST_SDTM):   drop exists_path;
MPRINT(LSAF_GET_LAST_SDTM):   if exists_path = "1" then do;
MPRINT(LSAF_GET_LAST_SDTM):   itemType=put(runmacro('%get_itemType('||strip(path)||');'), $200.);
MPRINT(LSAF_GET_LAST_SDTM):   if itemType ^= "sas:folder" then do;
MPRINT(LSAF_GET_LAST_SDTM):   put "War" "ning: Unexpected: " itemType= " for " path=;
MPRINT(LSAF_GET_LAST_SDTM):   end;
MPRINT(LSAF_GET_LAST_SDTM):   output;
MPRINT(LSAF_GET_LAST_SDTM):   end;
MPRINT(LSAF_GET_LAST_SDTM):   run;

The SAS System

MPRINT(RUN_MACRO):   option nomprint;
NOTE: DATA statement used (Total process time):
      real time           7.30 seconds
      cpu time            1.24 seconds
      
NOTE: There were 102 observations read from the data set WORK.LSAF_STUDIES.
NOTE: The data set WORK.LSAF_GENERIC_ADAM0 has 85 observations and 3 variables.

MPRINT(LSAF_GET_LAST_SDTM):   *- Filter the results i.e. keep only 'sdtm_last' folders directly below - /clinical/<compound>/<indic>/<study>/biostat/staging/ Derive study path and identify compound, 
indication and study -*;
MPRINT(LSAF_GET_LAST_SDTM):   data lsaf_generic_adam(index=(studypath));
MPRINT(LSAF_GET_LAST_SDTM):   attrib
MPRINT(VARLIST):   studypath length=$2048 label=" "
MPRINT(LSAF_GET_LAST_SDTM):  ;
MPRINT(LSAF_GET_LAST_SDTM):   length compound ind study $20;
MPRINT(LSAF_GET_LAST_SDTM):   set lsaf_generic_adam0;
MPRINT(LSAF_GET_LAST_SDTM):   studypath = prxchange('s!^((/[^/]+){4})/biostat/staging/generic_adam$!\1!', 1, strip(path));
MPRINT(LSAF_GET_LAST_SDTM):   compound = scan(studypath, 2, "/\");
MPRINT(LSAF_GET_LAST_SDTM):   ind = scan(studypath, 3, "/\");
MPRINT(LSAF_GET_LAST_SDTM):   study = scan(studypath, 4, "/\");
MPRINT(LSAF_GET_LAST_SDTM):   if prxmatch('!^(/[^/]+){4}/biostat/staging/generic_adam$!', strip(path)) and index(upcase(" argx-117 "), " "||strip(upcase(compound))||" ") > 0 ;
MPRINT(LSAF_GET_LAST_SDTM):   run;

NOTE: There were 85 observations read from the data set WORK.LSAF_GENERIC_ADAM0.
NOTE: The data set WORK.LSAF_GENERIC_ADAM has 10 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.02 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   *- If &create_gadam_folder = Y, create missing generic_adam folders -*;
NOTE: The macro CREATE_GENERIC_ADAM_PATH completed compilation without errors.
      97 instructions 3000 bytes.
MPRINT(LSAF_GET_LAST_SDTM):   *- If &setup_gadam_folder = Y, setup / refresh generic_adam reporting event with latest programs, macros and jobs -*;
NOTE: The macro SETUP_GENERIC_ADAM completed compilation without errors.
      197 instructions 8480 bytes.
MPRINT(LSAF_GET_LAST_SDTM):   *- If &rebuild_gadam_datasets = Y, rebuild generic_adam datasets in adam/tmp folder -*;
NOTE: The macro REBUILD_GENERIC_ADAM completed compilation without errors.
      68 instructions 2032 bytes.
MPRINT(LSAF_GET_LAST_SDTM):   *- Match biostat existing sdtm_last and generic_adam folders -*;
MPRINT(LSAF_GET_LAST_SDTM):   data generic_adam_new(drop=prv_generic_adam_path) out.generic_adam ;
MPRINT(LSAF_GET_LAST_SDTM):   format create_gadam_dtm setup_gadam_dtm rebuild_gadam_dtm E8601DT.;
MPRINT(LSAF_GET_LAST_SDTM):   length create_result $200 generic_adam_path $400 setup_result adam_rebuild_result $200;
MPRINT(LSAF_GET_LAST_SDTM):   file print;
MPRINT(LSAF_GET_LAST_SDTM):   merge lsaf_sdtm_last(keep=studypath path rename=(path=sdtm_last_path)) lsaf_generic_adam ;
MPRINT(LSAF_GET_LAST_SDTM):   by studypath;
MPRINT(LSAF_GET_LAST_SDTM):   retain prv_generic_adam_path;
MPRINT(LSAF_GET_LAST_SDTM):   study = scan(studypath, 4, "/\");
MPRINT(LSAF_GET_LAST_SDTM):   *- exclude study numbers corresponding to ADaM poolings, ending with: -9xxx -*;
MPRINT(LSAF_GET_LAST_SDTM):   match_pool = prxmatch("/.+-9\d\d\d$/", cats(study));
MPRINT(LSAF_GET_LAST_SDTM):   *- identify study numbers corresponding to within/across indication SDTM poolings, ending with: -0000 -*;
MPRINT(LSAF_GET_LAST_SDTM):   match_stdm_ind_pool = prxmatch("/.+-0000$/", cats(study));
MPRINT(LSAF_GET_LAST_SDTM):   put " " / "Not" "ice: === " study= match_pool= match_stdm_ind_pool= ;
MPRINT(LSAF_GET_LAST_SDTM):   putlog "NO" "TE-" / "Not" "ice: === " study= match_pool= match_stdm_ind_pool=;
MPRINT(LSAF_GET_LAST_SDTM):   *- initialize variables -*;
MPRINT(LSAF_GET_LAST_SDTM):   create_gadam_dtm = .;
MPRINT(LSAF_GET_LAST_SDTM):   setup_gadam_dtm = .;
MPRINT(LSAF_GET_LAST_SDTM):   rebuild_gadam_dtm = .;
MPRINT(LSAF_GET_LAST_SDTM):   create_result = " ";
MPRINT(LSAF_GET_LAST_SDTM):   setup_result = " ";
MPRINT(LSAF_GET_LAST_SDTM):   adam_rebuild_result = " ";
MPRINT(LSAF_GET_LAST_SDTM):   if match_pool = 0;
MPRINT(LSAF_GET_LAST_SDTM):   *- jbodart 2021-12-23 exclude 'studies' that are actually poolings -*;
MPRINT(LSAF_GET_LAST_SDTM):   if generic_adam_path = " " and studypath ^= " " then do;
MPRINT(LSAF_GET_LAST_SDTM):   generic_adam_path = strip(studypath)||"/biostat/staging/generic_adam";
MPRINT(LSAF_GET_LAST_SDTM):   end;
MPRINT(LSAF_GET_LAST_SDTM):   if generic_adam_path ^= " " then do;
MPRINT(LSAF_GET_LAST_SDTM):   *- check if LSAF generic_adam_path exists and if not create it -*;
MPRINT(LSAF_GET_LAST_SDTM):   create_result = runmacro('%create_generic_adam_path('||strip(generic_adam_path)||",force=N"||');');
MPRINT(LSAF_GET_LAST_SDTM):   *- runmacro: see note in program header -*;
MPRINT(LSAF_GET_LAST_SDTM):   create_gadam_dtm = datetime();
MPRINT(LSAF_GET_LAST_SDTM):   put "  Create " generic_adam_path= " (force=N): " create_result=;
MPRINT(LSAF_GET_LAST_SDTM):   putlog "  Create " generic_adam_path= " (force=N): " create_result=;
MPRINT(LSAF_GET_LAST_SDTM):   *- 2022-12-14 - jbodart - always setup newly created generic_adam folders -*;
MPRINT(LSAF_GET_LAST_SDTM):   if prxmatch('/0: Success./', strip(create_result)) then do;
MPRINT(LSAF_GET_LAST_SDTM):   setup_result = runmacro('%setup_generic_adam(gadam_path='||strip(generic_adam_path) || ', sdtm_last_path='||cats(sdtm_last_path)||');');
MPRINT(LSAF_GET_LAST_SDTM):   *- runmacro: see note in program header -*;
MPRINT(LSAF_GET_LAST_SDTM):   setup_gadam_dtm = datetime();
MPRINT(LSAF_GET_LAST_SDTM):   putlog "  Setup " generic_adam_path= ": " setup_result=;
MPRINT(LSAF_GET_LAST_SDTM):   put "  Setup " generic_adam_path= ": " setup_result=;
MPRINT(LSAF_GET_LAST_SDTM):   end;
MPRINT(LSAF_GET_LAST_SDTM):   end;
MPRINT(LSAF_GET_LAST_SDTM):   setup_result = 'skipped since &setup_gadam_folder = ' || symget('setup_gadam_folder');
MPRINT(LSAF_GET_LAST_SDTM):   put "  " generic_adam_path ": " setup_result=;
MPRINT(LSAF_GET_LAST_SDTM):   putlog "  " generic_adam_path ": " setup_result=;
MPRINT(LSAF_GET_LAST_SDTM):   if match_stdm_ind_pool = 0 and generic_adam_path ^= " " and prv_generic_adam_path ^= generic_adam_path and sdtm_last_path ^= " " then do;
MPRINT(LSAF_GET_LAST_SDTM):   *- rebuild generic_adam datasets in adam/tmp folder by submitting job_gadam_rebuild_adam.job -*;
MPRINT(LSAF_GET_LAST_SDTM):   adam_rebuild_result = runmacro('%rebuild_generic_adam(gadam_study_path='||strip(generic_adam_path) ||', sdtm_last_path='||strip(sdtm_last_path) ||');');
MPRINT(LSAF_GET_LAST_SDTM):   *- runmacro: see note in program header -*;
MPRINT(LSAF_GET_LAST_SDTM):   rebuild_gadam_dtm = datetime();
MPRINT(LSAF_GET_LAST_SDTM):   putlog "  Rebuild " generic_adam_path= ": " adam_rebuild_result=;
MPRINT(LSAF_GET_LAST_SDTM):   put "  Rebuild " generic_adam_path= ": " adam_rebuild_result=;
MPRINT(LSAF_GET_LAST_SDTM):   end;
MPRINT(LSAF_GET_LAST_SDTM):   if match_stdm_ind_pool > 0 then do;
MPRINT(LSAF_GET_LAST_SDTM):   adam_rebuild_result = 'skipped since sdtm pools within/across indication are not yet refreshed at this point';
MPRINT(LSAF_GET_LAST_SDTM):   end;
MPRINT(LSAF_GET_LAST_SDTM):   put "  " generic_adam_path ": " adam_rebuild_result= " === ";
MPRINT(LSAF_GET_LAST_SDTM):   putlog "  " generic_adam_path ": " adam_rebuild_result= " === ";
MPRINT(LSAF_GET_LAST_SDTM):   if generic_adam_path ^= " " then prv_generic_adam_path = generic_adam_path;
MPRINT(LSAF_GET_LAST_SDTM):   run;

     
Notice: === study=argx-117-0000 match_pool=0 match_stdm_ind_pool=1
The SAS System

MPRINT(RUN_MACRO):   option nomprint;
%create_generic_adam_path(/clinical/argx-117/covid-19/argx-117-0000/biostat/staging/generic_adam, force=N)
MPRINT(CREATE_GENERIC_ADAM_PATH):   notes;
LOCATION_PARAMETERS=/clinical/argx-117/covid-19/argx-117-0000
NOTE: The macro LSAF_EXISTS completed compilation without errors.
      60 instructions 2624 bytes.
MPRINT(LSAF_EXISTS):   *;
NOTE: The macro LSAF_GETPRODUCTNAME completed compilation without errors.
      15 instructions 304 bytes.
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/covid-19/argx-117-0000/biostat/staging/generic_adam", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/covid-19/argx-117-0000/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/covid-19/argx-117-0000/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/covid-19/argx-117-0000/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/covid-19/argx-117-0000/biostat/staging/generic_adam
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(CREATE_GENERIC_ADAM_PATH):  ;
MPRINT(CREATE_GENERIC_ADAM_PATH):   option NOMPRINT;
  Create generic_adam_path=/clinical/argx-117/covid-19/argx-117-0000/biostat/staging/generic_adam  (force=N): create_result=skip_create_generic_adam_folder - already exists: 0: Success.
%setup_generic_adam(gadam_path=/clinical/argx-117/covid-19/argx-117-0000/biostat/staging/generic_adam, 
sdtm_last_path=/clinical/argx-117/covid-19/argx-117-0000/biostat/staging/data_received/sdtm_last, study_adam_path=)
MPRINT(SETUP_GENERIC_ADAM):   notes;
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/covid-19/argx-117-0000/biostat/staging/generic_adam", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/covid-19/argx-117-0000/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/covid-19/argx-117-0000/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/covid-19/argx-117-0000/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/covid-19/argx-117-0000/biostat/staging/generic_adam
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   *-2023-01-13 - jbodart - Perform gadam study setup only if target is not up-to-date -*;
MPRINT(SETUP_GENERIC_ADAM):   *- Use parameter gadam_files_source as &source_path for the template files to be used for study setup -*;
NOTE: The macro DIREXIST completed compilation without errors.
      252 instructions 6776 bytes.
SOURCE_REL_PATH=/general/biostat/gadam SOURCE_PATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/gadam
STUDY=argx-117-0000 studyno=->0000<-
Notice: Checking whether generic_adam reporting event is already setup in /clinical/argx-117/covid-19/argx-117-0000/biostat/staging/generic_adam ...
MPRINT(SETUP_GENERIC_ADAM):   data source_files(where=( scan(name, -1, ".") in ("xlsx" "sas" "job") and name ^= 'job_finalchecks.job' ) index=(_idx0_=(dir name)));
NOTE: The macro STEP_LSAF_GETCHILDREN completed compilation without errors.
      388 instructions 20432 bytes.
NOTE: The macro VARLIST completed compilation without errors.
      8345 instructions 226928 bytes.
MPRINT(STEP_LSAF_GETCHILDREN):   *- Determine LSAF Macro API version -*;
MPRINT(STEP_LSAF_GETCHILDREN):   *- Declare the java items -*;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __srv10 ("com/sas/lsaf/macro/content/repository/RepositoryService") ;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __results10 ("com/sas/lsaf/macro/content/repository/SasRepositoryItemsResult");
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj _i_results10("com/sas/lsaf/macro/common/result/Result");
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   do __lsaf_path = "/general/biostat/gadam/documents" ,"/general/biostat/gadam/metadata/studyprograms" ,"/general/biostat/gadam/metadata/studyjobs" 
,"/general/biostat/gadam/metadata/studymacros";
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize numeric variables with default length (8) -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   rowCount=0;
MPRINT(STEP_LSAF_GETCHILDREN):   *- format numeric datetime variables -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize character variables with appropriate lengths -*;
MPRINT(STEP_LSAF_GETCHILDREN):   message = put(' ', $200.);
MPRINT(STEP_LSAF_GETCHILDREN):   path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   name = put(' ', $256.);
MPRINT(STEP_LSAF_GETCHILDREN):   description = put(' ', $512.);
MPRINT(STEP_LSAF_GETCHILDREN):   version = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   signatureStatus = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   createdBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   created = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   state = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   __createdTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   itemType = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   formattedsize = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   __lastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   *- check if container -*;
MPRINT(STEP_LSAF_GETCHILDREN):   isContainer = 1;
MPRINT(STEP_LSAF_GETCHILDREN):   *- if __lsaf_path is not a container, replace with parent folder path -*;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path ^= ' ' then __srv10.callStaticBooleanMethod("isContainer", trim(__lsaf_path), _i_results10, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   if isContainer = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_file_path = __lsaf_path;
MPRINT(STEP_LSAF_GETCHILDREN):   *- keep the original file path specified -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = resolve('%dirname('||__lsaf_path||')');
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path^='' then do;
MPRINT(STEP_LSAF_GETCHILDREN):   *- call the method -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __srv10.callStaticVoidMethod("getChildren", trim(__lsaf_path), cats(1), __results10);
MPRINT(STEP_LSAF_GETCHILDREN):   *- Retrieve the results -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __results10.callIntMethod("getReturnCode", returnCode);
MPRINT(STEP_LSAF_GETCHILDREN):   __results10.callStringMethod("getReturnMessage", message);
MPRINT(STEP_LSAF_GETCHILDREN):   if (returnCode = -1) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "WARNING:" "(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "NO" "TE-";
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else if (returnCode ^= 0) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "ER" "ROR:(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   __results10.callIntMethod("getSize", rowCount);
MPRINT(STEP_LSAF_GETCHILDREN):   if rowcount = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   message = catx(' ', message, "No observations returned.");
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   do row=0 to rowCount - 1;
MPRINT(STEP_LSAF_GETCHILDREN):   __results10.callStringMethod("getPath", row, path);
MPRINT(STEP_LSAF_GETCHILDREN):   __results10.callStringMethod("getName", row, name);
MPRINT(STEP_LSAF_GETCHILDREN):   __results10.callStringMethod("getDescription", row, description);
MPRINT(STEP_LSAF_GETCHILDREN):   __results10.callStringMethod("getVersion", row, version);
MPRINT(STEP_LSAF_GETCHILDREN):   __results10.callIntMethod("isContainer", row, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   __results10.callIntMethod("isVersioned", row, isVersioned);
MPRINT(STEP_LSAF_GETCHILDREN):   __results10.callIntMethod("isCheckedOut", row, isCheckedOut);
MPRINT(STEP_LSAF_GETCHILDREN):   __results10.callIntMethod("isLocked", row, isLocked);
MPRINT(STEP_LSAF_GETCHILDREN):   __results10.callStringMethod("getSignatureStatus", row, signatureStatus);
MPRINT(STEP_LSAF_GETCHILDREN):   __results10.callLongMethod("getFileSize", row, size);
MPRINT(STEP_LSAF_GETCHILDREN):   __results10.callStringMethod("getFormattedFileSize", row, formattedsize);
MPRINT(STEP_LSAF_GETCHILDREN):   if formattedsize = ' ' then formattedsize = ifc(size<0, " ", cats(size)||" Bytes");
MPRINT(STEP_LSAF_GETCHILDREN):   if size < 0 then size=.;
MPRINT(STEP_LSAF_GETCHILDREN):   __results10.callStringMethod("getItemType", row, itemType);
MPRINT(STEP_LSAF_GETCHILDREN):   __results10.callStringMethod("getLastModified", row, lastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results10.callStringMethod("getLastModifiedSasFormat", row, __lastModifiedTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   __results10.callStringMethod("getCreated", row, created);
MPRINT(STEP_LSAF_GETCHILDREN):   __results10.callStringMethod("getCreatedBy", row, createdBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results10.callStringMethod("getLastModifiedBy", row, lastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results10.callStringMethod("getPropertiesLastModified", row, propertiesLastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results10.callStringMethod("getPropertiesLastModifiedBy", row, propertiesLastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results10.callStringMethod("getPropertiesLastModifiedSasFormat", row, propertiesLastModifiedTempSAS);
MPRINT(STEP_LSAF_GETCHILDREN):   __results10.callStringMethod("getState", row, state);
MPRINT(STEP_LSAF_GETCHILDREN):   __results10.callStringMethod("getCreatedSasFormat", row, __createdTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   dateCreated=input(__createdTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   dateLastModified=input(__lastModifiedTempSas, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   datePropertiesLastModified=input(propertiesLastModifiedTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   pathLevel = countw(path, '/');
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_file_path = ' ' or __lsaf_file_path = path then do;
MPRINT(STEP_LSAF_GETCHILDREN):   dir=put(left(tranwrd(scan(path, -2, "/"), "study", "")), $20.);
MPRINT(STEP_LSAF_GETCHILDREN):  output;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   drop row __lastModifiedTempSAS __lsaf_file_path __createdTempSAS propertiesLastModifiedTempSAS
MPRINT(VARLIST):   itemType isContainer description version isVersioned isCheckedOut isLocked signatureStatus size formattedsize createdBy created dateCreated lastModifiedBy dateLastModified 
propertiesLastModifiedBy propertiesLastModified datePropertiesLastModified state pathLevel __lsaf_path returnCode message rowCount
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   run;
NOTE: The data set WORK.SOURCE_FILES has 60 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.94 seconds
      cpu time            0.46 seconds
      

MPRINT(SETUP_GENERIC_ADAM):   data target_files(where=( scan(name, -1, ".") in ("xlsx" "sas" "job") ) index=(_idx0_=(dir name)));
MPRINT(STEP_LSAF_GETCHILDREN):   *- Determine LSAF Macro API version -*;
MPRINT(STEP_LSAF_GETCHILDREN):   *- Declare the java items -*;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __srv16 ("com/sas/lsaf/macro/content/repository/RepositoryService") ;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __results16 ("com/sas/lsaf/macro/content/repository/SasRepositoryItemsResult");
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj _i_results16("com/sas/lsaf/macro/common/result/Result");
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   do __lsaf_path = "/clinical/argx-117/covid-19/argx-117-0000/biostat/staging/generic_adam/documents" 
,"/clinical/argx-117/covid-19/argx-117-0000/biostat/staging/generic_adam/programs" ,"/clinical/argx-117/covid-19/argx-117-0000/biostat/staging/generic_adam/jobs" 
,"/clinical/argx-117/covid-19/argx-117-0000/biostat/staging/generic_adam/macros";
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize numeric variables with default length (8) -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   rowCount=0;
MPRINT(STEP_LSAF_GETCHILDREN):   *- format numeric datetime variables -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize character variables with appropriate lengths -*;
MPRINT(STEP_LSAF_GETCHILDREN):   message = put(' ', $200.);
MPRINT(STEP_LSAF_GETCHILDREN):   path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   name = put(' ', $256.);
MPRINT(STEP_LSAF_GETCHILDREN):   description = put(' ', $512.);
MPRINT(STEP_LSAF_GETCHILDREN):   version = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   signatureStatus = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   createdBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   created = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   state = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   __createdTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   itemType = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   formattedsize = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   __lastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   *- check if container -*;
MPRINT(STEP_LSAF_GETCHILDREN):   isContainer = 1;
MPRINT(STEP_LSAF_GETCHILDREN):   *- if __lsaf_path is not a container, replace with parent folder path -*;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path ^= ' ' then __srv16.callStaticBooleanMethod("isContainer", trim(__lsaf_path), _i_results16, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   if isContainer = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_file_path = __lsaf_path;
MPRINT(STEP_LSAF_GETCHILDREN):   *- keep the original file path specified -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = resolve('%dirname('||__lsaf_path||')');
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path^='' then do;
MPRINT(STEP_LSAF_GETCHILDREN):   *- call the method -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __srv16.callStaticVoidMethod("getChildren", trim(__lsaf_path), cats(1), __results16);
MPRINT(STEP_LSAF_GETCHILDREN):   *- Retrieve the results -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __results16.callIntMethod("getReturnCode", returnCode);
MPRINT(STEP_LSAF_GETCHILDREN):   __results16.callStringMethod("getReturnMessage", message);
MPRINT(STEP_LSAF_GETCHILDREN):   if (returnCode = -1) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "NOTE:" "(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "NO" "TE-";
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else if (returnCode ^= 0) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "ER" "ROR:(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   __results16.callIntMethod("getSize", rowCount);
MPRINT(STEP_LSAF_GETCHILDREN):   if rowcount = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   message = catx(' ', message, "No observations returned.");
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   do row=0 to rowCount - 1;
MPRINT(STEP_LSAF_GETCHILDREN):   __results16.callStringMethod("getPath", row, path);
MPRINT(STEP_LSAF_GETCHILDREN):   __results16.callStringMethod("getName", row, name);
MPRINT(STEP_LSAF_GETCHILDREN):   __results16.callStringMethod("getDescription", row, description);
MPRINT(STEP_LSAF_GETCHILDREN):   __results16.callStringMethod("getVersion", row, version);
MPRINT(STEP_LSAF_GETCHILDREN):   __results16.callIntMethod("isContainer", row, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   __results16.callIntMethod("isVersioned", row, isVersioned);
MPRINT(STEP_LSAF_GETCHILDREN):   __results16.callIntMethod("isCheckedOut", row, isCheckedOut);
MPRINT(STEP_LSAF_GETCHILDREN):   __results16.callIntMethod("isLocked", row, isLocked);
MPRINT(STEP_LSAF_GETCHILDREN):   __results16.callStringMethod("getSignatureStatus", row, signatureStatus);
MPRINT(STEP_LSAF_GETCHILDREN):   __results16.callLongMethod("getFileSize", row, size);
MPRINT(STEP_LSAF_GETCHILDREN):   __results16.callStringMethod("getFormattedFileSize", row, formattedsize);
MPRINT(STEP_LSAF_GETCHILDREN):   if formattedsize = ' ' then formattedsize = ifc(size<0, " ", cats(size)||" Bytes");
MPRINT(STEP_LSAF_GETCHILDREN):   if size < 0 then size=.;
MPRINT(STEP_LSAF_GETCHILDREN):   __results16.callStringMethod("getItemType", row, itemType);
MPRINT(STEP_LSAF_GETCHILDREN):   __results16.callStringMethod("getLastModified", row, lastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results16.callStringMethod("getLastModifiedSasFormat", row, __lastModifiedTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   __results16.callStringMethod("getCreated", row, created);
MPRINT(STEP_LSAF_GETCHILDREN):   __results16.callStringMethod("getCreatedBy", row, createdBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results16.callStringMethod("getLastModifiedBy", row, lastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results16.callStringMethod("getPropertiesLastModified", row, propertiesLastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results16.callStringMethod("getPropertiesLastModifiedBy", row, propertiesLastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results16.callStringMethod("getPropertiesLastModifiedSasFormat", row, propertiesLastModifiedTempSAS);
MPRINT(STEP_LSAF_GETCHILDREN):   __results16.callStringMethod("getState", row, state);
MPRINT(STEP_LSAF_GETCHILDREN):   __results16.callStringMethod("getCreatedSasFormat", row, __createdTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   dateCreated=input(__createdTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   dateLastModified=input(__lastModifiedTempSas, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   datePropertiesLastModified=input(propertiesLastModifiedTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   pathLevel = countw(path, '/');
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_file_path = ' ' or __lsaf_file_path = path then do;
MPRINT(STEP_LSAF_GETCHILDREN):   dir=put(scan(path, -2, "/"), $20.);
MPRINT(STEP_LSAF_GETCHILDREN):   name=prxchange("s/^0000/_studyno_/", 1, trim(name));
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   drop row __lastModifiedTempSAS __lsaf_file_path __createdTempSAS propertiesLastModifiedTempSAS
MPRINT(VARLIST):   itemType isContainer description version isVersioned isCheckedOut isLocked signatureStatus size formattedsize createdBy created dateCreated lastModifiedBy dateLastModified 
propertiesLastModifiedBy propertiesLastModified datePropertiesLastModified state pathLevel __lsaf_path returnCode message rowCount
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   run;
NOTE: The data set WORK.TARGET_FILES has 59 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.97 seconds
      cpu time            0.41 seconds
      

MPRINT(SETUP_GENERIC_ADAM):   data source_target_files;
MPRINT(SETUP_GENERIC_ADAM):   merge source_files(in=a drop=path rename=(lastmodified=sourcelastmodified)) target_files(in=b drop=path rename=(lastmodified=targetlastmodified)) end=last ;
MPRINT(SETUP_GENERIC_ADAM):   by dir name;
MPRINT(SETUP_GENERIC_ADAM):   __prx = prxparse('s/((Mon|Tue|Wed|Thu|Fri|Sat|Sun)(\w*day)? )?(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]* (\d\d?) (\d?\d:\d\d:\d\d) GMT (\d{4})/\5\4\7:\6/i');
MPRINT(SETUP_GENERIC_ADAM):   if a then do;
MPRINT(SETUP_GENERIC_ADAM):   sourcemodte = input(prxchange(__prx, 1, sourcelastmodified), anydtdtm.);
MPRINT(SETUP_GENERIC_ADAM):   targetmodte = input(prxchange(__prx, 1, targetlastmodified), anydtdtm.);
MPRINT(SETUP_GENERIC_ADAM):   format sourcemodte targetmodte E8601DT.;
MPRINT(SETUP_GENERIC_ADAM):   need_update = (sourcemodte > targetmodte);
MPRINT(SETUP_GENERIC_ADAM):   tot_need_update=+need_update;
MPRINT(SETUP_GENERIC_ADAM):   tot_files=+a;
MPRINT(SETUP_GENERIC_ADAM):   output;
MPRINT(SETUP_GENERIC_ADAM):   end;
MPRINT(SETUP_GENERIC_ADAM):   if last then do;
MPRINT(SETUP_GENERIC_ADAM):   put "Target files needing update: " tot_need_update " out of " tot_files;
MPRINT(SETUP_GENERIC_ADAM):   call symputx("tot_need_update", tot_need_update);
MPRINT(SETUP_GENERIC_ADAM):   end;
MPRINT(SETUP_GENERIC_ADAM):   run;
NOTE: Invalid argument to function INPUT at line 0 column 119.
a=1 b=0 last=0 name=job_gnarrv2-orig.job sourcelastmodified=Tue Feb 14 08:25:35 GMT 2023 dir=jobs targetlastmodified=  FIRST.dir=0 LAST.dir=0 FIRST.name=1 LAST.name=1 __prx=1
sourcemodte=2023-02-14T08:25:35 targetmodte=. need_update=1 tot_need_update=1 tot_files=1 _ERROR_=1 _N_=18
Target files needing update: 1  out of 1
NOTE: Mathematical operations could not be performed at the following places. The results of the operations have been set to missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      1 at 0:119   
NOTE: There were 60 observations read from the data set WORK.SOURCE_FILES.
NOTE: There were 59 observations read from the data set WORK.TARGET_FILES.
NOTE: The data set WORK.SOURCE_TARGET_FILES has 60 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

TOT_NEED_UPDATE=1
Notice: Setting up generic_adam reporting event in /clinical/argx-117/covid-19/argx-117-0000/biostat/staging/generic_adam ...
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/covid-19/argx-117-0000/biostat/staging/data_received/adam", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/covid-19/argx-117-0000/biostat/staging/data_received/adam" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/covid-19/argx-117-0000/biostat/staging/data_received/adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/covid-19/argx-117-0000/biostat/staging/data_received/adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item does not exist: /clinical/argx-117/covid-19/argx-117-0000/biostat/staging/data_received/adam
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 0
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(SETUP_GENERIC_ADAM):  ;
Notice:(SETUP_GENERIC_ADAM): study_adam_path not found, set to null: /clinical/argx-117/covid-19/argx-117-0000/biostat/staging/data_received/adam
NOTE: The macro SUBMIT_JOB completed compilation without errors.
      759 instructions 29280 bytes.
NUM_JOBS_SPAWNED=1
MACROAPIVER=2.6
MPRINT(SUBMIT_JOB):   proc sql noprint;
MPRINT(SUBMIT_JOB):   drop table work.job_Parameters;
NOTE: Table WORK.JOB_PARAMETERS has been dropped.
MPRINT(SUBMIT_JOB):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: The macro GEN_JOB_ENV completed compilation without errors.
      290 instructions 8664 bytes.
DEBUG:(GEN_JOB_ENV): PRX=11
DEBUG:(GEN_JOB_ENV): prxmatch(11, /general/biostat/jobs/gadam_ongoing_studies/dev/jobs/job_gadam_studysetup.job) = 1
DEBUG:(GEN_JOB_ENV): (0) REFPATH=
DEBUG:(GEN_JOB_ENV): (0) REPEVPATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (0) RELREPEVPATH=/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (0) _SASFILEPATH_=/general/biostat/jobs/gadam_ongoing_studies/prod/programs/lsaf_get_last_sdtm.sas
DEBUG:(GEN_JOB_ENV): (0) PROGPATH=/general/biostat/jobs/gadam_ongoing_studies/prod/programs/
DEBUG:(GEN_JOB_ENV): (0) PATH=/general/biostat/jobs/gadam_ongoing_studies/dev/jobs/job_gadam_studysetup.job
Setting refpath = &repevpath
DEBUG:(GEN_JOB_ENV): (1) REFPATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (2) REFENV=prod
DEBUG:(GEN_JOB_ENV): (3) REFENV=prod
NOTE: The macro F_LSAF_EXISTS completed compilation without errors.
      154 instructions 4520 bytes.
NOTE: The macro DOSUBL completed compilation without errors.
      156 instructions 3832 bytes.
DEBUG:(F_LSAF_EXISTS) - 2023-02-14T23:52:27 - Iteration: 1: slept = 0, exists = 1
DEBUG:(F_LSAF_EXISTS) - 2023-02-14T23:52:27 - Iteration: 1: slept = 0, exists = 1
DEBUG:(F_LSAF_EXISTS) - 2023-02-14T23:52:27 - Iteration: 1: slept = 0, exists = 1
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(SUBMIT_JOB):  ;
Notice:(SUBMIT_JOB): LSAF Job Path exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job.
MPRINT(SUBMIT_JOB):   proc format;
MPRINT(SUBMIT_JOB):   value $jobabbr "job_gadam_ongoing_studies.job"= "gos" "job_studies_status.job"= "ss" "job_gadam_sdtm_key_core_vars.job"= "gskcv" "job_unzip_sdtm_sources.job"= "uss" 
"job_zip_extract_files.job"= "zef" "job_lsaf_get_last_sdtm.job"= "lgls" "setup_reporting_event_folder.job"= "sref" "job_gadam_refresh_sdtm_last.job"= "grsl" "job_gadam_update_refresh_info.job"= 
"guri" "convert_definetosas.job"= "cdts" "job_gadam_studysetup.job"= "gss" "job_gadam_rebuild_adam.job"= "gra" "job_adAAA" - "job_adzzz"= "adx" "job_qcstudyadams.job"= "qcsa" 
"job_qc_gadam_vs_study.job"= "qcgvs" "job_qc_gadam_vs_study-overview.job"= "qcgvso" "job_check_and_load.job"= "cal" "job_tAAA" - "job_tzzz"= "txx" "job_gadam_qc_overviews.job"= "gqco" 
"job_make_sdtm_pool_jobs.job"= "mspj" "job_lsaf_pool_last_sdtm.job"= "lpls" "sdtm_pool-AAA" - "sdtm_pool-zzz"= "pci" "job_gadam_refresh_sdtm_overview.job"= "grso" "getdata.job"= "gd" OTHER = "***" ;
NOTE: Format $JOBABBR has been output.
MPRINT(SUBMIT_JOB):   run;
NOTE: PROCEDURE FORMAT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SUBMIT_JOB):   quit;
job_instance=>Ngos117Prod_4_x0_1<
NOTE: The macro LSAF_GETJOBPARAMETERS completed compilation without errors.
      81 instructions 4744 bytes.
MPRINT(LSAF_GETJOBPARAMETERS):  ;
MPRINT(LSAF_GETJOBPARAMETERS):   data work.job_Parameters (label="Created by LSAF_GETJOBPARAMETERS" KEEP=jobPath jobVersion name label type defaultValue fileVersion includeSubFolders );
MPRINT(LSAF_GETJOBPARAMETERS):   attrib returnCode length=8 message length=$200 logMsgPrefix length=$70 logMsgPrimary length=$70 logMsg length=$300 rowCount length=8 jobPath length=$2048 label="Job 
Path" jobVersion length=$32 label="Job Version" name length=$256 label="Parameter Name" label length=$256 label="Parameter Label" type length=$32 label="Parameter Type" defaultValue length=$2048 
label="Parameter Default Value" fileVersion length=$32 label="File Version if File Type" includeSubFolders length=8 label="Include Container SubFolders" includesSubFolders length=$5 label="FOR 
INTERNAL PROCESSING ONLY.  WILL BE DROPPED." ;
MPRINT(LSAF_GETJOBPARAMETERS):   rowCount=0;
MPRINT(LSAF_GETJOBPARAMETERS):   declare javaobj srv("com/sas/lsaf/macro/execution/job/JobService") ;
MPRINT(LSAF_GETJOBPARAMETERS):   declare javaobj results("com/sas/lsaf/macro/execution/job/SasJobParametersResult");
MPRINT(LSAF_GETJOBPARAMETERS):   srv.callStaticVoidMethod("getRepositoryJobParameters", "/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job", "", results) ;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_GETJOBPARAMETERS):   if (returnCode ne 0) then do;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_GETJOBPARAMETERS):   if "" NE "" then logMsg=" Cannot retrieve parameters for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job, version " ;
MPRINT(LSAF_GETJOBPARAMETERS):   else logMsg=" Cannot retrieve parameters for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   else do;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsg=" Parameters were returned for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getJobPath", jobPath);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getJobVersion", jobVersion);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callIntMethod("getSize", rowCount);
MPRINT(LSAF_GETJOBPARAMETERS):   do row=0 to rowCount - 1;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getName", row, name);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getLabel", row, label);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getType", row, type);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getDefaultValue", row, defaultValue);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getFileVersion", row, fileVersion);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getContainerIncludeSubfolders", row, includesSubFolders);
MPRINT(LSAF_GETJOBPARAMETERS):   includeSubFolders=input(includesSubFolders,best.);
MPRINT(LSAF_GETJOBPARAMETERS):   output;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   put;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " " "lsaf_getjobparameters";
MPRINT(LSAF_GETJOBPARAMETERS):   if (rowCount=0) then put logMsgPrefix " No parameters were found.";
MPRINT(LSAF_GETJOBPARAMETERS):   else put logMsgPrefix " " rowCount " records written to data set work.job_Parameters";
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(LSAF_GETJOBPARAMETERS):   put;
MPRINT(LSAF_GETJOBPARAMETERS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_GETJOBPARAMETERS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_GETJOBPARAMETERS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  Parameters were returned for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_getjobparameters
NOTE: SAS Life Science Analytics Framework Macro: *  8  records written to data set work.job_Parameters
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: The data set WORK.JOB_PARAMETERS has 8 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.02 seconds
      

MPRINT(SUBMIT_JOB):  ;
NOTE: The macro DSATTR completed compilation without errors.
      507 instructions 15072 bytes.
NOTE: The macro LOWCASE completed compilation without errors.
      29 instructions 512 bytes.
NOTE: The dataset WORK.JOB_PARAMETERS has 8 observations and 8 variables.
MPRINT(SUBMIT_JOB):   ;
MPRINT(SUBMIT_JOB):   *- dataset to specify job parameters (from macro parameters values) -*;
MPRINT(SUBMIT_JOB):   data lsaf_job_params(index=(name));
MPRINT(SUBMIT_JOB):   set work.job_Parameters(rename=(defaultValue = value));
MPRINT(SUBMIT_JOB):   if upcase(name) = "_PARENTJOB_WS_" then do;
MPRINT(SUBMIT_JOB):   if symexist("_SASWS_") and type = "CHARACTER" then value = symget("_SASWS_");
MPRINT(SUBMIT_JOB):   else value = " ";
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   else if upcase(name) = "_PARENTJOB_WRK_" then do;
MPRINT(SUBMIT_JOB):   value = pathname("WORK", "L");
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   else if symexist(name) then do;
MPRINT(SUBMIT_JOB):   if symget(name) ^= ' ' then value = symget(name);
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   new_value = translate(value, ' ', ',;()"''&%');
MPRINT(SUBMIT_JOB):   if new_value ne value then put "NOTE:(SUBMIT_JOB): Special characters may be removed from parameter value:" / @2 "parameter: " name /@2 "old value: " value /@2 "new value: " 
new_value;
MPRINT(SUBMIT_JOB):   if _n_=1 then put "Not" "ice:(SUBMIT_JOB): Updated Job parameters:";
MPRINT(SUBMIT_JOB):   if type = "FOLDER" then put " - " name @+(-1) "=" value "[" type= @+(-1) ", " includeSubFolders= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   else if TYPE = "FILE" then put " - " name @+(-1) "=" value "[" type= @+(-1) ", " fileversion= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   else put " - " name @+(-1) "=" value "[" type= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   run;
Notice:(SUBMIT_JOB): Updated Job parameters:
 - gadam_path=/clinical/argx-117/covid-19/argx-117-0000/biostat/staging/generic_adam [type=FOLDER, includeSubFolders=0]
 - sdtm_last_path=/clinical/argx-117/covid-19/argx-117-0000/biostat/staging/data_received/sdtm_last [type=FOLDER, includeSubFolders=0]
 - study_adam_path=  [type=FOLDER, includeSubFolders=0]
 - gadam_files_source=/general/biostat/gadam [type=FOLDER, includeSubFolders=1]
 - job_instance=Ngos117Prod_4_x0_1 [type=CHARACTER]
 - _PARENTJOB_WS_=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15 [type=CHARACTER]
 - _PARENTJOB_WRK_=/saswork/sas_tmp/SAS_work4CFB0019563E_xar08auv.vsp.sas.com/SAS_work5B910019563E_xar08auv.vsp.sas.com [type=CHARACTER]
 - USE_SAS_WORKSPACE_MACROS=  [type=CHARACTER]
NOTE: There were 8 observations read from the data set WORK.JOB_PARAMETERS.
NOTE: The data set WORK.LSAF_JOB_PARAMS has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

N_PARAMS=8
MPRINT(SUBMIT_JOB):   data lsaf_job_params(index=(name));
MPRINT(SUBMIT_JOB):   set lsaf_job_params;
MPRINT(SUBMIT_JOB):   by name;
MPRINT(SUBMIT_JOB):   if (not first.name) or (not last.name) then do;
MPRINT(SUBMIT_JOB):   if last.name then action = "(kept)   ";
MPRINT(SUBMIT_JOB):   else action = "(dropped)";
MPRINT(SUBMIT_JOB):   drop action;
MPRINT(SUBMIT_JOB):   put "Not" "ice:(SUBMIT_JOB): duplicate parameter " name " = " value @+(3) action;
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   if last.name;
MPRINT(SUBMIT_JOB):   run;
NOTE: There were 8 observations read from the data set WORK.LSAF_JOB_PARAMS.
NOTE: The data set WORK.LSAF_JOB_PARAMS has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SUBMIT_JOB):   data _null_;
MPRINT(SUBMIT_JOB):   file print;
MPRINT(SUBMIT_JOB):   set lsaf_job_params(where=(prxmatch('/^(FOLDER|FILE)$/', trim(type))) in=a) lsaf_job_params(where=(prxmatch('/^(FOLDER|FILE)$/', trim(type))=0 and value ^= ' ')) end=last;
MPRINT(SUBMIT_JOB):   if _n_=1 then putlog "=== 2023-02-14T23:52:27 - Submit job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job (with parameters: " @;
MPRINT(SUBMIT_JOB):   _n_a+a;
MPRINT(SUBMIT_JOB):   if _n_-1 = _n_a then do;
MPRINT(SUBMIT_JOB):   putlog / @8 @;
MPRINT(SUBMIT_JOB):   put / @8 @;
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   if a then putlog / @8 name @+(-1) "=" value ' (' type= includeSubFolders= @+(-1) ')   ' @;
MPRINT(SUBMIT_JOB):   else putlog name @+(-1) "=" value "  " @ ;
MPRINT(SUBMIT_JOB):   if last then putlog @+8 ") ===";
MPRINT(SUBMIT_JOB):   if _n_=1 then put "=== 2023-02-14T23:52:27 - Submit job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job (with parameters: " @;
MPRINT(SUBMIT_JOB):   if a then put / @8 name @+(-1) "=" value ' (' type= includeSubFolders= @+(-1) ')   ' @;
MPRINT(SUBMIT_JOB):   else put name @+(-1) "=" value "  " @ ;
MPRINT(SUBMIT_JOB):   if last then put @+8 ") ===";
MPRINT(SUBMIT_JOB):   run;
=== 2023-02-14T23:52:27 - Submit job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job (with parameters: 
       gadam_files_source=/general/biostat/gadam  (type=FOLDER includeSubFolders=1)   
       gadam_path=/clinical/argx-117/covid-19/argx-117-0000/biostat/staging/generic_adam  (type=FOLDER includeSubFolders=0)   
       sdtm_last_path=/clinical/argx-117/covid-19/argx-117-0000/biostat/staging/data_received/sdtm_last  (type=FOLDER includeSubFolders=0)   
       study_adam_path=   (type=FOLDER includeSubFolders=0)   
       _PARENTJOB_WRK_=/saswork/sas_tmp/SAS_work4CFB0019563E_xar08auv.vsp.sas.com/SAS_work5B910019563E_xar08auv.vsp.sas.com   _PARENTJOB_WS_=
/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15   job_instance=Ngos117Prod_4_x0_1           ) ===
NOTE: 7 lines were written to file PRINT.
NOTE: There were 4 observations read from the data set WORK.LSAF_JOB_PARAMS.
      WHERE PRXMATCH('/^(FOLDER|FILE)$/', TRIM(type));
NOTE: There were 3 observations read from the data set WORK.LSAF_JOB_PARAMS.
      WHERE (PRXMATCH('/^(FOLDER|FILE)$/', TRIM(type))=0) and (value not = ' ');
NOTE: The DATA step printed page 1.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: The macro LSAF_SUBMITJOB completed compilation without errors.
      156 instructions 5824 bytes.
MPRINT(LSAF_SUBMITJOB):  ;
NOTE: The macro CMPRES completed compilation without errors.
      43 instructions 856 bytes.
NOTE: The macro LEFT completed compilation without errors.
      43 instructions 824 bytes.
NOTE: The macro QTRIM completed compilation without errors.
      42 instructions 864 bytes.
NOTE: The macro VERIFY completed compilation without errors.
      65 instructions 1408 bytes.
MPRINT(LSAF_SUBMITJOB):   *;
NOTE: The macro LSAF_VALIDATE_PARAMETERS_DATASET completed compilation without errors.
      79 instructions 2736 bytes.
NOTE: lsaf_submitjob: Validating dataset lsaf_job_params
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   options nonotes;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   *;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   *;
MPRINT(LSAF_VALIDATE_SASDATASET):   *;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   options nonotes;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   data _null_;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   length message $45 libName $8 dsName $300;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   providedDatasetName=kstrip("lsaf_job_params");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsName="INVALID";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsNameIsValid=0;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dotCount=countc(providedDatasetName,".");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dotPosition=kindexc(providedDatasetName,".");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   *put dotPosition=;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (dotPosition=1 or dotPosition=length(providedDatasetName)) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message=" Missing either LIBNAME or data set.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   select (dotCount);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   when (0) dsName=providedDatasetName;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   when (1) do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (dotPosition le 9) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   libName = (ksubstr(providedDatasetName, 1, dotPosition-1));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   *put libName=;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsName = (ksubstr(providedDatasetName, dotPosition+1));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   else do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Libname longer than 8 characters.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   otherwise do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Invalid data set name structure.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   firstchar=ksubstr(kleft(dsName), 1, 1);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (anydigit(firstchar)) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Data set name must start with a character.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (length(dsName) > 32) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Data set name longer than 32 characters.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsNameIsValid=1;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   SETVARS: call symput("_lsafvaliddsn_", strip(put(dsNameIsValid, best.)));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   call symput("dsnMsg", message);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   call symput("specifiedLib", strip(libName));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   run;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   options NONOTES;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   * CHECK EXISTS: Also getting errors for data set name.;
MPRINT(LSAF_VALIDATE_SASDATASET):  ;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):  ;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   proc sort data=lsaf_job_params out=__SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   by name;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   data _null_;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   set __SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   by name;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   if (first.name AND NOT(last.name)) then do;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   call symput("_lsafMsg_", "Input data set has duplicate values for parameter name " || name || ".");
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   STOP;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   end;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   call symput("_lsafRC_", "0");
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   option notes;
MPRINT(LSAF_SUBMITJOB):  ;
MPRINT(LSAF_SUBMITJOB):   option notes;
MPRINT(LSAF_SUBMITJOB):   data _null_;
MPRINT(LSAF_SUBMITJOB):   attrib returnCode length=8 message length=$200 jobSubmissionId length=$525 logMsgPrefix length=$70 logMsgPrimary length=$70 logMsg length=$300 ;
MPRINT(LSAF_SUBMITJOB):   set lsaf_job_params end=eof;
MPRINT(LSAF_SUBMITJOB):   if (_n_ = 1) then do;
MPRINT(LSAF_SUBMITJOB):   declare javaobj params("com/sas/lsaf/macro/execution/job/SasParameterValues");
MPRINT(LSAF_SUBMITJOB):   declare javaobj srv("com/sas/lsaf/macro/execution/jobsubmission/JobSubmissionService");
MPRINT(LSAF_SUBMITJOB):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   params.callVoidMethod("addValue", kstrip(name), kstrip(value), kstrip(type), kstrip(fileVersion), includeSubFolders);
MPRINT(LSAF_SUBMITJOB):   if (eof);
MPRINT(LSAF_SUBMITJOB):   declare javaobj job("com/sas/lsaf/macro/execution/jobsubmission/SasSubmittableJob", "/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job", "", 
params);
MPRINT(LSAF_SUBMITJOB):   srv.callStaticStringMethod("submitRepositoryJob", job, results, jobSubmissionId);
MPRINT(LSAF_SUBMITJOB):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_SUBMITJOB):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_SUBMITJOB):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_SUBMITJOB):   if (returnCode ne 0) then do;
MPRINT(LSAF_SUBMITJOB):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_SUBMITJOB):   logMsg=" Cannot submit job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job";
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   else do;
MPRINT(LSAF_SUBMITJOB):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_SUBMITJOB):   logMsg=" Submitted job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job";
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   put;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " " "lsaf_submitjob";
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(LSAF_SUBMITJOB):   if "lsaf_job_params" = "" then put logMsgPrefix "No job parameters were supplied.";
MPRINT(LSAF_SUBMITJOB):   else put logMsgPrefix "sas_dsname = lsaf_job_params";
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix "_lsafJobSubmissionId_= " jobSubmissionId;
MPRINT(LSAF_SUBMITJOB):   put;
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafJobSubmissionId_", strip(jobSubmissionId));
MPRINT(LSAF_SUBMITJOB):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  Submitted job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_submitjob
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: * sas_dsname = lsaf_job_params
NOTE: SAS Life Science Analytics Framework Macro: * _lsafJobSubmissionId_= 0f90ebdd-00e5-4d75-93c9-1de797f8c944
NOTE: There were 8 observations read from the data set WORK.LSAF_JOB_PARAMS.
NOTE: DATA statement used (Total process time):
      real time           1.35 seconds
      cpu time            0.01 seconds
      

MPRINT(LSAF_SUBMITJOB):   options NONOTES;
MPRINT(SUBMIT_JOB):  ;
MPRINT(SUBMIT_JOB):   *- Job submission succeeded -*;
MPRINT(SUBMIT_JOB):   option nomprint nonotes
Calling %lsaf_getitemid(lsaf_path=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job) ...
_LSAFMSG_=Success.  _LSAFRC_=0  _LSAFITEMID_=090a95d3-6059-474f-a1bd-61c6768ba993
Calling %step_lsaf_getjobsubmissioninfos(job_subm_id=0f90ebdd-00e5-4d75-93c9-1de797f8c944) ...
Notice: SYSDATASTEPPHASE=EXECUTION IN_DATA_STEP=N
Ignoring record: submissionId=30678109-1661-4a87-858f-1bc1b0d581fa jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job jobVersion=0.1
jobId=abcfa448-6829-4513-8bef-3d8418207d45
Ignoring record: submissionId=c4fb4991-9137-4374-8d55-32ed9002f3d8 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_ongoing_studies.job jobVersion=0.1
jobId=c762f385-9376-49c8-8cec-d19326e7e18e
Ignoring record: submissionId=e10042a4-6280-4c02-92e6-fbbdbb000293 jobPath=/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job jobVersion= 
jobId=02b06e4d-7777-4a59-b2f9-2fc165603216
Ignoring record: submissionId=f00d2b52-d9f1-4ef1-8922-181d934626e0 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_ongoing_studies.job jobVersion=0.1
jobId=c762f385-9376-49c8-8cec-d19326e7e18e
Ignoring record: submissionId=feed1f0f-2d9a-42b9-8060-8fddd1e47337 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job jobVersion=0.1
jobId=abcfa448-6829-4513-8bef-3d8418207d45
Ignoring record: submissionId=7e820358-2d58-4d70-904b-c779f6bea07a jobPath=/clinical/argx-113/cidp/argx-113-1802/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job jobVersion= 
jobId=5ddfea34-d035-4d8f-a8ab-3bcb9e5707e3
Ignoring record: submissionId=b3a3cc26-3075-48a2-9a4c-e48c70a25098 jobPath=/clinical/argx-113/cidp/argx-113-1802/biostat/staging/generic_adam/jobs/job_taeisr.job jobVersion= 
jobId=110a9401-0b4f-472c-9f07-e5d644824482
Notice: _LSAFJOBSUBMISSIONID_=0f90ebdd-00e5-4d75-93c9-1de797f8c944 SESSIONID=d7454c80-70f9-4a15-bca3-28da066cc6fd JOB=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job 
JOBID=090a95d3-6059-474f-a1bd-61c6768ba993
(SUBMIT_JOB): 2023-02-14T23:52:29 - Submitted REPOSITORY Job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job          with Submission ID: 
0f90ebdd-00e5-4d75-93c9-1de797f8c944, Status: STARTED
(SUBMIT_JOB): 23:52:29.28 Elapsed: 00:00:02.17 Job Submission Status: STARTED
(SUBMIT_JOB): 23:52:31.81 Elapsed: 00:00:04.70 Job Submission Status: STARTED
(SUBMIT_JOB): 23:52:34.34 Elapsed: 00:00:07.23 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:52:36.88 Elapsed: 00:00:09.76 Job Submission Status: POST_EXECUTION_PUBLISHING
(SUBMIT_JOB): 23:52:39.42 Elapsed: 00:00:12.31 Job Submission Status: COMPLETED_SUCCESSFUL
(SUBMIT_JOB): 2023-02-14T23:52:42 - Submitted REPOSITORY job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job has completed with status: COMPLETED_SUCCESSFUL
MPRINT(SUBMIT_JOB):  ;
job_gadam_studysetup.job: get job status: 0: Success.:       Elapsed: 00:00:14.81       REPOSITORY Job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job with Submission 
ID: 0f90ebdd-00e5-4d75-93c9-1de797f8c944, Status: COMPLETED_SUCCESSFUL
MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   option NOMPRINT;
  Setup generic_adam_path=/clinical/argx-117/covid-19/argx-117-0000/biostat/staging/generic_adam : setup_result=setup_generic_adam: 0: Success.
  /clinical/argx-117/covid-19/argx-117-0000/biostat/staging/generic_adam : setup_result=skipped since &setup_gadam_folder = N
  /clinical/argx-117/covid-19/argx-117-0000/biostat/staging/generic_adam : adam_rebuild_result=skipped since sdtm pools within/across indication are not yet refreshed at this point  === 
     
Notice: === study=argx-117-2001 match_pool=0 match_stdm_ind_pool=0
%create_generic_adam_path(/clinical/argx-117/covid-19/argx-117-2001/biostat/staging/generic_adam, force=N)
MPRINT(CREATE_GENERIC_ADAM_PATH):   notes;
LOCATION_PARAMETERS=/clinical/argx-117/covid-19/argx-117-2001
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/covid-19/argx-117-2001/biostat/staging/generic_adam", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/covid-19/argx-117-2001/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/covid-19/argx-117-2001/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/covid-19/argx-117-2001/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/covid-19/argx-117-2001/biostat/staging/generic_adam
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      

MPRINT(CREATE_GENERIC_ADAM_PATH):  ;
MPRINT(CREATE_GENERIC_ADAM_PATH):   option NOMPRINT;
  Create generic_adam_path=/clinical/argx-117/covid-19/argx-117-2001/biostat/staging/generic_adam  (force=N): create_result=skip_create_generic_adam_folder - already exists: 0: Success.
%setup_generic_adam(gadam_path=/clinical/argx-117/covid-19/argx-117-2001/biostat/staging/generic_adam, 
sdtm_last_path=/clinical/argx-117/covid-19/argx-117-2001/biostat/staging/data_received/sdtm_last, study_adam_path=)
MPRINT(SETUP_GENERIC_ADAM):   notes;
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/covid-19/argx-117-2001/biostat/staging/generic_adam", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/covid-19/argx-117-2001/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/covid-19/argx-117-2001/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/covid-19/argx-117-2001/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/covid-19/argx-117-2001/biostat/staging/generic_adam
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   *-2023-01-13 - jbodart - Perform gadam study setup only if target is not up-to-date -*;
MPRINT(SETUP_GENERIC_ADAM):   *- Use parameter gadam_files_source as &source_path for the template files to be used for study setup -*;
SOURCE_REL_PATH=/general/biostat/gadam SOURCE_PATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/gadam
STUDY=argx-117-2001 studyno=->2001<-
Notice: Checking whether generic_adam reporting event is already setup in /clinical/argx-117/covid-19/argx-117-2001/biostat/staging/generic_adam ...
MPRINT(SETUP_GENERIC_ADAM):   data source_files(where=( scan(name, -1, ".") in ("xlsx" "sas" "job") and name ^= 'job_finalchecks.job' ) index=(_idx0_=(dir name)));
MPRINT(STEP_LSAF_GETCHILDREN):   *- Determine LSAF Macro API version -*;
MPRINT(STEP_LSAF_GETCHILDREN):   *- Declare the java items -*;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __srv268 ("com/sas/lsaf/macro/content/repository/RepositoryService") ;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __results268 ("com/sas/lsaf/macro/content/repository/SasRepositoryItemsResult");
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj _i_results268("com/sas/lsaf/macro/common/result/Result");
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   do __lsaf_path = "/general/biostat/gadam/documents" ,"/general/biostat/gadam/metadata/studyprograms" ,"/general/biostat/gadam/metadata/studyjobs" 
,"/general/biostat/gadam/metadata/studymacros";
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize numeric variables with default length (8) -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   rowCount=0;
MPRINT(STEP_LSAF_GETCHILDREN):   *- format numeric datetime variables -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize character variables with appropriate lengths -*;
MPRINT(STEP_LSAF_GETCHILDREN):   message = put(' ', $200.);
MPRINT(STEP_LSAF_GETCHILDREN):   path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   name = put(' ', $256.);
MPRINT(STEP_LSAF_GETCHILDREN):   description = put(' ', $512.);
MPRINT(STEP_LSAF_GETCHILDREN):   version = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   signatureStatus = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   createdBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   created = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   state = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   __createdTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   itemType = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   formattedsize = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   __lastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   *- check if container -*;
MPRINT(STEP_LSAF_GETCHILDREN):   isContainer = 1;
MPRINT(STEP_LSAF_GETCHILDREN):   *- if __lsaf_path is not a container, replace with parent folder path -*;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path ^= ' ' then __srv268.callStaticBooleanMethod("isContainer", trim(__lsaf_path), _i_results268, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   if isContainer = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_file_path = __lsaf_path;
MPRINT(STEP_LSAF_GETCHILDREN):   *- keep the original file path specified -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = resolve('%dirname('||__lsaf_path||')');
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path^='' then do;
MPRINT(STEP_LSAF_GETCHILDREN):   *- call the method -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __srv268.callStaticVoidMethod("getChildren", trim(__lsaf_path), cats(1), __results268);
MPRINT(STEP_LSAF_GETCHILDREN):   *- Retrieve the results -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __results268.callIntMethod("getReturnCode", returnCode);
MPRINT(STEP_LSAF_GETCHILDREN):   __results268.callStringMethod("getReturnMessage", message);
MPRINT(STEP_LSAF_GETCHILDREN):   if (returnCode = -1) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "WARNING:" "(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "NO" "TE-";
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else if (returnCode ^= 0) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "ER" "ROR:(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   __results268.callIntMethod("getSize", rowCount);
MPRINT(STEP_LSAF_GETCHILDREN):   if rowcount = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   message = catx(' ', message, "No observations returned.");
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   do row=0 to rowCount - 1;
MPRINT(STEP_LSAF_GETCHILDREN):   __results268.callStringMethod("getPath", row, path);
MPRINT(STEP_LSAF_GETCHILDREN):   __results268.callStringMethod("getName", row, name);
MPRINT(STEP_LSAF_GETCHILDREN):   __results268.callStringMethod("getDescription", row, description);
MPRINT(STEP_LSAF_GETCHILDREN):   __results268.callStringMethod("getVersion", row, version);
MPRINT(STEP_LSAF_GETCHILDREN):   __results268.callIntMethod("isContainer", row, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   __results268.callIntMethod("isVersioned", row, isVersioned);
MPRINT(STEP_LSAF_GETCHILDREN):   __results268.callIntMethod("isCheckedOut", row, isCheckedOut);
MPRINT(STEP_LSAF_GETCHILDREN):   __results268.callIntMethod("isLocked", row, isLocked);
MPRINT(STEP_LSAF_GETCHILDREN):   __results268.callStringMethod("getSignatureStatus", row, signatureStatus);
MPRINT(STEP_LSAF_GETCHILDREN):   __results268.callLongMethod("getFileSize", row, size);
MPRINT(STEP_LSAF_GETCHILDREN):   __results268.callStringMethod("getFormattedFileSize", row, formattedsize);
MPRINT(STEP_LSAF_GETCHILDREN):   if formattedsize = ' ' then formattedsize = ifc(size<0, " ", cats(size)||" Bytes");
MPRINT(STEP_LSAF_GETCHILDREN):   if size < 0 then size=.;
MPRINT(STEP_LSAF_GETCHILDREN):   __results268.callStringMethod("getItemType", row, itemType);
MPRINT(STEP_LSAF_GETCHILDREN):   __results268.callStringMethod("getLastModified", row, lastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results268.callStringMethod("getLastModifiedSasFormat", row, __lastModifiedTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   __results268.callStringMethod("getCreated", row, created);
MPRINT(STEP_LSAF_GETCHILDREN):   __results268.callStringMethod("getCreatedBy", row, createdBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results268.callStringMethod("getLastModifiedBy", row, lastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results268.callStringMethod("getPropertiesLastModified", row, propertiesLastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results268.callStringMethod("getPropertiesLastModifiedBy", row, propertiesLastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results268.callStringMethod("getPropertiesLastModifiedSasFormat", row, propertiesLastModifiedTempSAS);
MPRINT(STEP_LSAF_GETCHILDREN):   __results268.callStringMethod("getState", row, state);
MPRINT(STEP_LSAF_GETCHILDREN):   __results268.callStringMethod("getCreatedSasFormat", row, __createdTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   dateCreated=input(__createdTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   dateLastModified=input(__lastModifiedTempSas, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   datePropertiesLastModified=input(propertiesLastModifiedTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   pathLevel = countw(path, '/');
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_file_path = ' ' or __lsaf_file_path = path then do;
MPRINT(STEP_LSAF_GETCHILDREN):   dir=put(left(tranwrd(scan(path, -2, "/"), "study", "")), $20.);
MPRINT(STEP_LSAF_GETCHILDREN):  output;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   drop row __lastModifiedTempSAS __lsaf_file_path __createdTempSAS propertiesLastModifiedTempSAS
MPRINT(VARLIST):   itemType isContainer description version isVersioned isCheckedOut isLocked signatureStatus size formattedsize createdBy created dateCreated lastModifiedBy dateLastModified 
propertiesLastModifiedBy propertiesLastModified datePropertiesLastModified state pathLevel __lsaf_path returnCode message rowCount
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   run;
NOTE: The data set WORK.SOURCE_FILES has 60 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           1.37 seconds
      cpu time            0.42 seconds
      

MPRINT(SETUP_GENERIC_ADAM):   data target_files(where=( scan(name, -1, ".") in ("xlsx" "sas" "job") ) index=(_idx0_=(dir name)));
MPRINT(STEP_LSAF_GETCHILDREN):   *- Determine LSAF Macro API version -*;
MPRINT(STEP_LSAF_GETCHILDREN):   *- Declare the java items -*;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __srv274 ("com/sas/lsaf/macro/content/repository/RepositoryService") ;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __results274 ("com/sas/lsaf/macro/content/repository/SasRepositoryItemsResult");
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj _i_results274("com/sas/lsaf/macro/common/result/Result");
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   do __lsaf_path = "/clinical/argx-117/covid-19/argx-117-2001/biostat/staging/generic_adam/documents" 
,"/clinical/argx-117/covid-19/argx-117-2001/biostat/staging/generic_adam/programs" ,"/clinical/argx-117/covid-19/argx-117-2001/biostat/staging/generic_adam/jobs" 
,"/clinical/argx-117/covid-19/argx-117-2001/biostat/staging/generic_adam/macros";
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize numeric variables with default length (8) -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   rowCount=0;
MPRINT(STEP_LSAF_GETCHILDREN):   *- format numeric datetime variables -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize character variables with appropriate lengths -*;
MPRINT(STEP_LSAF_GETCHILDREN):   message = put(' ', $200.);
MPRINT(STEP_LSAF_GETCHILDREN):   path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   name = put(' ', $256.);
MPRINT(STEP_LSAF_GETCHILDREN):   description = put(' ', $512.);
MPRINT(STEP_LSAF_GETCHILDREN):   version = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   signatureStatus = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   createdBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   created = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   state = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   __createdTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   itemType = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   formattedsize = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   __lastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   *- check if container -*;
MPRINT(STEP_LSAF_GETCHILDREN):   isContainer = 1;
MPRINT(STEP_LSAF_GETCHILDREN):   *- if __lsaf_path is not a container, replace with parent folder path -*;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path ^= ' ' then __srv274.callStaticBooleanMethod("isContainer", trim(__lsaf_path), _i_results274, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   if isContainer = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_file_path = __lsaf_path;
MPRINT(STEP_LSAF_GETCHILDREN):   *- keep the original file path specified -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = resolve('%dirname('||__lsaf_path||')');
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path^='' then do;
MPRINT(STEP_LSAF_GETCHILDREN):   *- call the method -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __srv274.callStaticVoidMethod("getChildren", trim(__lsaf_path), cats(1), __results274);
MPRINT(STEP_LSAF_GETCHILDREN):   *- Retrieve the results -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __results274.callIntMethod("getReturnCode", returnCode);
MPRINT(STEP_LSAF_GETCHILDREN):   __results274.callStringMethod("getReturnMessage", message);
MPRINT(STEP_LSAF_GETCHILDREN):   if (returnCode = -1) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "NOTE:" "(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "NO" "TE-";
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else if (returnCode ^= 0) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "ER" "ROR:(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   __results274.callIntMethod("getSize", rowCount);
MPRINT(STEP_LSAF_GETCHILDREN):   if rowcount = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   message = catx(' ', message, "No observations returned.");
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   do row=0 to rowCount - 1;
MPRINT(STEP_LSAF_GETCHILDREN):   __results274.callStringMethod("getPath", row, path);
MPRINT(STEP_LSAF_GETCHILDREN):   __results274.callStringMethod("getName", row, name);
MPRINT(STEP_LSAF_GETCHILDREN):   __results274.callStringMethod("getDescription", row, description);
MPRINT(STEP_LSAF_GETCHILDREN):   __results274.callStringMethod("getVersion", row, version);
MPRINT(STEP_LSAF_GETCHILDREN):   __results274.callIntMethod("isContainer", row, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   __results274.callIntMethod("isVersioned", row, isVersioned);
MPRINT(STEP_LSAF_GETCHILDREN):   __results274.callIntMethod("isCheckedOut", row, isCheckedOut);
MPRINT(STEP_LSAF_GETCHILDREN):   __results274.callIntMethod("isLocked", row, isLocked);
MPRINT(STEP_LSAF_GETCHILDREN):   __results274.callStringMethod("getSignatureStatus", row, signatureStatus);
MPRINT(STEP_LSAF_GETCHILDREN):   __results274.callLongMethod("getFileSize", row, size);
MPRINT(STEP_LSAF_GETCHILDREN):   __results274.callStringMethod("getFormattedFileSize", row, formattedsize);
MPRINT(STEP_LSAF_GETCHILDREN):   if formattedsize = ' ' then formattedsize = ifc(size<0, " ", cats(size)||" Bytes");
MPRINT(STEP_LSAF_GETCHILDREN):   if size < 0 then size=.;
MPRINT(STEP_LSAF_GETCHILDREN):   __results274.callStringMethod("getItemType", row, itemType);
MPRINT(STEP_LSAF_GETCHILDREN):   __results274.callStringMethod("getLastModified", row, lastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results274.callStringMethod("getLastModifiedSasFormat", row, __lastModifiedTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   __results274.callStringMethod("getCreated", row, created);
MPRINT(STEP_LSAF_GETCHILDREN):   __results274.callStringMethod("getCreatedBy", row, createdBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results274.callStringMethod("getLastModifiedBy", row, lastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results274.callStringMethod("getPropertiesLastModified", row, propertiesLastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results274.callStringMethod("getPropertiesLastModifiedBy", row, propertiesLastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results274.callStringMethod("getPropertiesLastModifiedSasFormat", row, propertiesLastModifiedTempSAS);
MPRINT(STEP_LSAF_GETCHILDREN):   __results274.callStringMethod("getState", row, state);
MPRINT(STEP_LSAF_GETCHILDREN):   __results274.callStringMethod("getCreatedSasFormat", row, __createdTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   dateCreated=input(__createdTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   dateLastModified=input(__lastModifiedTempSas, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   datePropertiesLastModified=input(propertiesLastModifiedTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   pathLevel = countw(path, '/');
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_file_path = ' ' or __lsaf_file_path = path then do;
MPRINT(STEP_LSAF_GETCHILDREN):   dir=put(scan(path, -2, "/"), $20.);
MPRINT(STEP_LSAF_GETCHILDREN):   name=prxchange("s/^2001/_studyno_/", 1, trim(name));
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   drop row __lastModifiedTempSAS __lsaf_file_path __createdTempSAS propertiesLastModifiedTempSAS
MPRINT(VARLIST):   itemType isContainer description version isVersioned isCheckedOut isLocked signatureStatus size formattedsize createdBy created dateCreated lastModifiedBy dateLastModified 
propertiesLastModifiedBy propertiesLastModified datePropertiesLastModified state pathLevel __lsaf_path returnCode message rowCount
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   run;
NOTE: The data set WORK.TARGET_FILES has 59 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           2.25 seconds
      cpu time            0.41 seconds
      

MPRINT(SETUP_GENERIC_ADAM):   data source_target_files;
MPRINT(SETUP_GENERIC_ADAM):   merge source_files(in=a drop=path rename=(lastmodified=sourcelastmodified)) target_files(in=b drop=path rename=(lastmodified=targetlastmodified)) end=last ;
MPRINT(SETUP_GENERIC_ADAM):   by dir name;
MPRINT(SETUP_GENERIC_ADAM):   __prx = prxparse('s/((Mon|Tue|Wed|Thu|Fri|Sat|Sun)(\w*day)? )?(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]* (\d\d?) (\d?\d:\d\d:\d\d) GMT (\d{4})/\5\4\7:\6/i');
MPRINT(SETUP_GENERIC_ADAM):   if a then do;
MPRINT(SETUP_GENERIC_ADAM):   sourcemodte = input(prxchange(__prx, 1, sourcelastmodified), anydtdtm.);
MPRINT(SETUP_GENERIC_ADAM):   targetmodte = input(prxchange(__prx, 1, targetlastmodified), anydtdtm.);
MPRINT(SETUP_GENERIC_ADAM):   format sourcemodte targetmodte E8601DT.;
MPRINT(SETUP_GENERIC_ADAM):   need_update = (sourcemodte > targetmodte);
MPRINT(SETUP_GENERIC_ADAM):   tot_need_update=+need_update;
MPRINT(SETUP_GENERIC_ADAM):   tot_files=+a;
MPRINT(SETUP_GENERIC_ADAM):   output;
MPRINT(SETUP_GENERIC_ADAM):   end;
MPRINT(SETUP_GENERIC_ADAM):   if last then do;
MPRINT(SETUP_GENERIC_ADAM):   put "Target files needing update: " tot_need_update " out of " tot_files;
MPRINT(SETUP_GENERIC_ADAM):   call symputx("tot_need_update", tot_need_update);
MPRINT(SETUP_GENERIC_ADAM):   end;
MPRINT(SETUP_GENERIC_ADAM):   run;
NOTE: Invalid argument to function INPUT at line 0 column 119.
a=1 b=0 last=0 name=job_gnarrv2-orig.job sourcelastmodified=Tue Feb 14 08:25:35 GMT 2023 dir=jobs targetlastmodified=  FIRST.dir=0 LAST.dir=0 FIRST.name=1 LAST.name=1 __prx=1
sourcemodte=2023-02-14T08:25:35 targetmodte=. need_update=1 tot_need_update=1 tot_files=1 _ERROR_=1 _N_=18
Target files needing update: 1  out of 1
NOTE: Mathematical operations could not be performed at the following places. The results of the operations have been set to missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      1 at 0:119   
NOTE: There were 60 observations read from the data set WORK.SOURCE_FILES.
NOTE: There were 59 observations read from the data set WORK.TARGET_FILES.
NOTE: The data set WORK.SOURCE_TARGET_FILES has 60 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

TOT_NEED_UPDATE=1
Notice: Setting up generic_adam reporting event in /clinical/argx-117/covid-19/argx-117-2001/biostat/staging/generic_adam ...
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/covid-19/argx-117-2001/biostat/staging/data_received/adam", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/covid-19/argx-117-2001/biostat/staging/data_received/adam" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/covid-19/argx-117-2001/biostat/staging/data_received/adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/covid-19/argx-117-2001/biostat/staging/data_received/adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item does not exist: /clinical/argx-117/covid-19/argx-117-2001/biostat/staging/data_received/adam
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 0
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(SETUP_GENERIC_ADAM):  ;
Notice:(SETUP_GENERIC_ADAM): study_adam_path not found, set to null: /clinical/argx-117/covid-19/argx-117-2001/biostat/staging/data_received/adam
NUM_JOBS_SPAWNED=2
MACROAPIVER=2.6
MPRINT(SUBMIT_JOB):   proc sql noprint;
MPRINT(SUBMIT_JOB):   drop table work.job_Parameters;
NOTE: Table WORK.JOB_PARAMETERS has been dropped.
MPRINT(SUBMIT_JOB):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

DEBUG:(GEN_JOB_ENV): PRX=28
DEBUG:(GEN_JOB_ENV): prxmatch(28, /general/biostat/jobs/gadam_ongoing_studies/dev/jobs/job_gadam_studysetup.job) = 1
DEBUG:(GEN_JOB_ENV): (0) REFPATH=
DEBUG:(GEN_JOB_ENV): (0) REPEVPATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (0) RELREPEVPATH=/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (0) _SASFILEPATH_=/general/biostat/jobs/gadam_ongoing_studies/prod/programs/lsaf_get_last_sdtm.sas
DEBUG:(GEN_JOB_ENV): (0) PROGPATH=/general/biostat/jobs/gadam_ongoing_studies/prod/programs/
DEBUG:(GEN_JOB_ENV): (0) PATH=/general/biostat/jobs/gadam_ongoing_studies/dev/jobs/job_gadam_studysetup.job
Setting refpath = &repevpath
DEBUG:(GEN_JOB_ENV): (1) REFPATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (2) REFENV=prod
DEBUG:(GEN_JOB_ENV): (3) REFENV=prod
DEBUG:(F_LSAF_EXISTS) - 2023-02-14T23:52:46 - Iteration: 1: slept = 0, exists = 1
DEBUG:(F_LSAF_EXISTS) - 2023-02-14T23:52:46 - Iteration: 1: slept = 0, exists = 1
DEBUG:(F_LSAF_EXISTS) - 2023-02-14T23:52:46 - Iteration: 1: slept = 0, exists = 1
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(SUBMIT_JOB):  ;
Notice:(SUBMIT_JOB): LSAF Job Path exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job.
MPRINT(SUBMIT_JOB):   proc format;
MPRINT(SUBMIT_JOB):   value $jobabbr "job_gadam_ongoing_studies.job"= "gos" "job_studies_status.job"= "ss" "job_gadam_sdtm_key_core_vars.job"= "gskcv" "job_unzip_sdtm_sources.job"= "uss" 
"job_zip_extract_files.job"= "zef" "job_lsaf_get_last_sdtm.job"= "lgls" "setup_reporting_event_folder.job"= "sref" "job_gadam_refresh_sdtm_last.job"= "grsl" "job_gadam_update_refresh_info.job"= 
"guri" "convert_definetosas.job"= "cdts" "job_gadam_studysetup.job"= "gss" "job_gadam_rebuild_adam.job"= "gra" "job_adAAA" - "job_adzzz"= "adx" "job_qcstudyadams.job"= "qcsa" 
"job_qc_gadam_vs_study.job"= "qcgvs" "job_qc_gadam_vs_study-overview.job"= "qcgvso" "job_check_and_load.job"= "cal" "job_tAAA" - "job_tzzz"= "txx" "job_gadam_qc_overviews.job"= "gqco" 
"job_make_sdtm_pool_jobs.job"= "mspj" "job_lsaf_pool_last_sdtm.job"= "lpls" "sdtm_pool-AAA" - "sdtm_pool-zzz"= "pci" "job_gadam_refresh_sdtm_overview.job"= "grso" "getdata.job"= "gd" OTHER = "***" ;
NOTE: Format $JOBABBR is already on the library WORK.FORMATS.
NOTE: Format $JOBABBR has been output.
MPRINT(SUBMIT_JOB):   run;
NOTE: PROCEDURE FORMAT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SUBMIT_JOB):   quit;
job_instance=>Ngos117Prod_4_x0_2<
MPRINT(LSAF_GETJOBPARAMETERS):  ;
MPRINT(LSAF_GETJOBPARAMETERS):   data work.job_Parameters (label="Created by LSAF_GETJOBPARAMETERS" KEEP=jobPath jobVersion name label type defaultValue fileVersion includeSubFolders );
MPRINT(LSAF_GETJOBPARAMETERS):   attrib returnCode length=8 message length=$200 logMsgPrefix length=$70 logMsgPrimary length=$70 logMsg length=$300 rowCount length=8 jobPath length=$2048 label="Job 
Path" jobVersion length=$32 label="Job Version" name length=$256 label="Parameter Name" label length=$256 label="Parameter Label" type length=$32 label="Parameter Type" defaultValue length=$2048 
label="Parameter Default Value" fileVersion length=$32 label="File Version if File Type" includeSubFolders length=8 label="Include Container SubFolders" includesSubFolders length=$5 label="FOR 
INTERNAL PROCESSING ONLY.  WILL BE DROPPED." ;
MPRINT(LSAF_GETJOBPARAMETERS):   rowCount=0;
MPRINT(LSAF_GETJOBPARAMETERS):   declare javaobj srv("com/sas/lsaf/macro/execution/job/JobService") ;
MPRINT(LSAF_GETJOBPARAMETERS):   declare javaobj results("com/sas/lsaf/macro/execution/job/SasJobParametersResult");
MPRINT(LSAF_GETJOBPARAMETERS):   srv.callStaticVoidMethod("getRepositoryJobParameters", "/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job", "", results) ;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_GETJOBPARAMETERS):   if (returnCode ne 0) then do;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_GETJOBPARAMETERS):   if "" NE "" then logMsg=" Cannot retrieve parameters for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job, version " ;
MPRINT(LSAF_GETJOBPARAMETERS):   else logMsg=" Cannot retrieve parameters for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   else do;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsg=" Parameters were returned for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getJobPath", jobPath);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getJobVersion", jobVersion);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callIntMethod("getSize", rowCount);
MPRINT(LSAF_GETJOBPARAMETERS):   do row=0 to rowCount - 1;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getName", row, name);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getLabel", row, label);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getType", row, type);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getDefaultValue", row, defaultValue);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getFileVersion", row, fileVersion);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getContainerIncludeSubfolders", row, includesSubFolders);
MPRINT(LSAF_GETJOBPARAMETERS):   includeSubFolders=input(includesSubFolders,best.);
MPRINT(LSAF_GETJOBPARAMETERS):   output;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   put;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " " "lsaf_getjobparameters";
MPRINT(LSAF_GETJOBPARAMETERS):   if (rowCount=0) then put logMsgPrefix " No parameters were found.";
MPRINT(LSAF_GETJOBPARAMETERS):   else put logMsgPrefix " " rowCount " records written to data set work.job_Parameters";
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(LSAF_GETJOBPARAMETERS):   put;
MPRINT(LSAF_GETJOBPARAMETERS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_GETJOBPARAMETERS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_GETJOBPARAMETERS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  Parameters were returned for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_getjobparameters
NOTE: SAS Life Science Analytics Framework Macro: *  8  records written to data set work.job_Parameters
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: The data set WORK.JOB_PARAMETERS has 8 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.02 seconds
      

MPRINT(SUBMIT_JOB):  ;
NOTE: The dataset WORK.JOB_PARAMETERS has 8 observations and 8 variables.
MPRINT(SUBMIT_JOB):   ;
MPRINT(SUBMIT_JOB):   *- dataset to specify job parameters (from macro parameters values) -*;
MPRINT(SUBMIT_JOB):   data lsaf_job_params(index=(name));
MPRINT(SUBMIT_JOB):   set work.job_Parameters(rename=(defaultValue = value));
MPRINT(SUBMIT_JOB):   if upcase(name) = "_PARENTJOB_WS_" then do;
MPRINT(SUBMIT_JOB):   if symexist("_SASWS_") and type = "CHARACTER" then value = symget("_SASWS_");
MPRINT(SUBMIT_JOB):   else value = " ";
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   else if upcase(name) = "_PARENTJOB_WRK_" then do;
MPRINT(SUBMIT_JOB):   value = pathname("WORK", "L");
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   else if symexist(name) then do;
MPRINT(SUBMIT_JOB):   if symget(name) ^= ' ' then value = symget(name);
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   new_value = translate(value, ' ', ',;()"''&%');
MPRINT(SUBMIT_JOB):   if new_value ne value then put "NOTE:(SUBMIT_JOB): Special characters may be removed from parameter value:" / @2 "parameter: " name /@2 "old value: " value /@2 "new value: " 
new_value;
MPRINT(SUBMIT_JOB):   if _n_=1 then put "Not" "ice:(SUBMIT_JOB): Updated Job parameters:";
MPRINT(SUBMIT_JOB):   if type = "FOLDER" then put " - " name @+(-1) "=" value "[" type= @+(-1) ", " includeSubFolders= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   else if TYPE = "FILE" then put " - " name @+(-1) "=" value "[" type= @+(-1) ", " fileversion= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   else put " - " name @+(-1) "=" value "[" type= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   run;
Notice:(SUBMIT_JOB): Updated Job parameters:
 - gadam_path=/clinical/argx-117/covid-19/argx-117-2001/biostat/staging/generic_adam [type=FOLDER, includeSubFolders=0]
 - sdtm_last_path=/clinical/argx-117/covid-19/argx-117-2001/biostat/staging/data_received/sdtm_last [type=FOLDER, includeSubFolders=0]
 - study_adam_path=  [type=FOLDER, includeSubFolders=0]
 - gadam_files_source=/general/biostat/gadam [type=FOLDER, includeSubFolders=1]
 - job_instance=Ngos117Prod_4_x0_2 [type=CHARACTER]
 - _PARENTJOB_WS_=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15 [type=CHARACTER]
 - _PARENTJOB_WRK_=/saswork/sas_tmp/SAS_work4CFB0019563E_xar08auv.vsp.sas.com/SAS_work5B910019563E_xar08auv.vsp.sas.com [type=CHARACTER]
 - USE_SAS_WORKSPACE_MACROS=  [type=CHARACTER]
NOTE: There were 8 observations read from the data set WORK.JOB_PARAMETERS.
NOTE: The data set WORK.LSAF_JOB_PARAMS has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

N_PARAMS=8
MPRINT(SUBMIT_JOB):   data lsaf_job_params(index=(name));
MPRINT(SUBMIT_JOB):   set lsaf_job_params;
MPRINT(SUBMIT_JOB):   by name;
MPRINT(SUBMIT_JOB):   if (not first.name) or (not last.name) then do;
MPRINT(SUBMIT_JOB):   if last.name then action = "(kept)   ";
MPRINT(SUBMIT_JOB):   else action = "(dropped)";
MPRINT(SUBMIT_JOB):   drop action;
MPRINT(SUBMIT_JOB):   put "Not" "ice:(SUBMIT_JOB): duplicate parameter " name " = " value @+(3) action;
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   if last.name;
MPRINT(SUBMIT_JOB):   run;
NOTE: There were 8 observations read from the data set WORK.LSAF_JOB_PARAMS.
NOTE: The data set WORK.LSAF_JOB_PARAMS has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SUBMIT_JOB):   data _null_;
MPRINT(SUBMIT_JOB):   file print;
MPRINT(SUBMIT_JOB):   set lsaf_job_params(where=(prxmatch('/^(FOLDER|FILE)$/', trim(type))) in=a) lsaf_job_params(where=(prxmatch('/^(FOLDER|FILE)$/', trim(type))=0 and value ^= ' ')) end=last;
MPRINT(SUBMIT_JOB):   if _n_=1 then putlog "=== 2023-02-14T23:52:46 - Submit job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job (with parameters: " @;
MPRINT(SUBMIT_JOB):   _n_a+a;
MPRINT(SUBMIT_JOB):   if _n_-1 = _n_a then do;
MPRINT(SUBMIT_JOB):   putlog / @8 @;
MPRINT(SUBMIT_JOB):   put / @8 @;
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   if a then putlog / @8 name @+(-1) "=" value ' (' type= includeSubFolders= @+(-1) ')   ' @;
MPRINT(SUBMIT_JOB):   else putlog name @+(-1) "=" value "  " @ ;
MPRINT(SUBMIT_JOB):   if last then putlog @+8 ") ===";
MPRINT(SUBMIT_JOB):   if _n_=1 then put "=== 2023-02-14T23:52:46 - Submit job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job (with parameters: " @;
MPRINT(SUBMIT_JOB):   if a then put / @8 name @+(-1) "=" value ' (' type= includeSubFolders= @+(-1) ')   ' @;
MPRINT(SUBMIT_JOB):   else put name @+(-1) "=" value "  " @ ;
MPRINT(SUBMIT_JOB):   if last then put @+8 ") ===";
MPRINT(SUBMIT_JOB):   run;
=== 2023-02-14T23:52:46 - Submit job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job (with parameters: 
       gadam_files_source=/general/biostat/gadam  (type=FOLDER includeSubFolders=1)   
       gadam_path=/clinical/argx-117/covid-19/argx-117-2001/biostat/staging/generic_adam  (type=FOLDER includeSubFolders=0)   
       sdtm_last_path=/clinical/argx-117/covid-19/argx-117-2001/biostat/staging/data_received/sdtm_last  (type=FOLDER includeSubFolders=0)   
       study_adam_path=   (type=FOLDER includeSubFolders=0)   
       _PARENTJOB_WRK_=/saswork/sas_tmp/SAS_work4CFB0019563E_xar08auv.vsp.sas.com/SAS_work5B910019563E_xar08auv.vsp.sas.com   _PARENTJOB_WS_=
/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15   job_instance=Ngos117Prod_4_x0_2           ) ===
NOTE: 7 lines were written to file PRINT.
NOTE: There were 4 observations read from the data set WORK.LSAF_JOB_PARAMS.
      WHERE PRXMATCH('/^(FOLDER|FILE)$/', TRIM(type));
NOTE: There were 3 observations read from the data set WORK.LSAF_JOB_PARAMS.
      WHERE (PRXMATCH('/^(FOLDER|FILE)$/', TRIM(type))=0) and (value not = ' ');
NOTE: The DATA step printed page 3.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LSAF_SUBMITJOB):  ;
NOTE: lsaf_submitjob: Validating dataset lsaf_job_params
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   options nonotes;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   proc datasets library=work nolist;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   delete __SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   quit;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   options nonotes;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   data _null_;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   length message $45 libName $8 dsName $300;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   providedDatasetName=kstrip("lsaf_job_params");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsName="INVALID";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsNameIsValid=0;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dotCount=countc(providedDatasetName,".");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dotPosition=kindexc(providedDatasetName,".");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   *put dotPosition=;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (dotPosition=1 or dotPosition=length(providedDatasetName)) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message=" Missing either LIBNAME or data set.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   select (dotCount);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   when (0) dsName=providedDatasetName;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   when (1) do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (dotPosition le 9) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   libName = (ksubstr(providedDatasetName, 1, dotPosition-1));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   *put libName=;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsName = (ksubstr(providedDatasetName, dotPosition+1));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   else do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Libname longer than 8 characters.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   otherwise do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Invalid data set name structure.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   firstchar=ksubstr(kleft(dsName), 1, 1);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (anydigit(firstchar)) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Data set name must start with a character.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (length(dsName) > 32) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Data set name longer than 32 characters.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsNameIsValid=1;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   SETVARS: call symput("_lsafvaliddsn_", strip(put(dsNameIsValid, best.)));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   call symput("dsnMsg", message);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   call symput("specifiedLib", strip(libName));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   run;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   options NONOTES;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   * CHECK EXISTS: Also getting errors for data set name.;
MPRINT(LSAF_VALIDATE_SASDATASET):  ;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):  ;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   proc sort data=lsaf_job_params out=__SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   by name;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   data _null_;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   set __SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   by name;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   if (first.name AND NOT(last.name)) then do;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   call symput("_lsafMsg_", "Input data set has duplicate values for parameter name " || name || ".");
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   STOP;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   end;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   call symput("_lsafRC_", "0");
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   option notes;
MPRINT(LSAF_SUBMITJOB):  ;
MPRINT(LSAF_SUBMITJOB):   option notes;
MPRINT(LSAF_SUBMITJOB):   data _null_;
MPRINT(LSAF_SUBMITJOB):   attrib returnCode length=8 message length=$200 jobSubmissionId length=$525 logMsgPrefix length=$70 logMsgPrimary length=$70 logMsg length=$300 ;
MPRINT(LSAF_SUBMITJOB):   set lsaf_job_params end=eof;
MPRINT(LSAF_SUBMITJOB):   if (_n_ = 1) then do;
MPRINT(LSAF_SUBMITJOB):   declare javaobj params("com/sas/lsaf/macro/execution/job/SasParameterValues");
MPRINT(LSAF_SUBMITJOB):   declare javaobj srv("com/sas/lsaf/macro/execution/jobsubmission/JobSubmissionService");
MPRINT(LSAF_SUBMITJOB):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   params.callVoidMethod("addValue", kstrip(name), kstrip(value), kstrip(type), kstrip(fileVersion), includeSubFolders);
MPRINT(LSAF_SUBMITJOB):   if (eof);
MPRINT(LSAF_SUBMITJOB):   declare javaobj job("com/sas/lsaf/macro/execution/jobsubmission/SasSubmittableJob", "/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job", "", 
params);
MPRINT(LSAF_SUBMITJOB):   srv.callStaticStringMethod("submitRepositoryJob", job, results, jobSubmissionId);
MPRINT(LSAF_SUBMITJOB):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_SUBMITJOB):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_SUBMITJOB):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_SUBMITJOB):   if (returnCode ne 0) then do;
MPRINT(LSAF_SUBMITJOB):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_SUBMITJOB):   logMsg=" Cannot submit job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job";
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   else do;
MPRINT(LSAF_SUBMITJOB):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_SUBMITJOB):   logMsg=" Submitted job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job";
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   put;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " " "lsaf_submitjob";
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(LSAF_SUBMITJOB):   if "lsaf_job_params" = "" then put logMsgPrefix "No job parameters were supplied.";
MPRINT(LSAF_SUBMITJOB):   else put logMsgPrefix "sas_dsname = lsaf_job_params";
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix "_lsafJobSubmissionId_= " jobSubmissionId;
MPRINT(LSAF_SUBMITJOB):   put;
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafJobSubmissionId_", strip(jobSubmissionId));
MPRINT(LSAF_SUBMITJOB):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  Submitted job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_submitjob
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: * sas_dsname = lsaf_job_params
NOTE: SAS Life Science Analytics Framework Macro: * _lsafJobSubmissionId_= 3b416f85-816d-4b7b-bfb0-3286da61738a
NOTE: There were 8 observations read from the data set WORK.LSAF_JOB_PARAMS.
NOTE: DATA statement used (Total process time):
      real time           1.35 seconds
      cpu time            0.00 seconds
      

MPRINT(LSAF_SUBMITJOB):   options NONOTES;
MPRINT(SUBMIT_JOB):  ;
MPRINT(SUBMIT_JOB):   *- Job submission succeeded -*;
MPRINT(SUBMIT_JOB):   option nomprint nonotes
Calling %lsaf_getitemid(lsaf_path=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job) ...
_LSAFMSG_=Success.  _LSAFRC_=0  _LSAFITEMID_=090a95d3-6059-474f-a1bd-61c6768ba993
Calling %step_lsaf_getjobsubmissioninfos(job_subm_id=3b416f85-816d-4b7b-bfb0-3286da61738a) ...
Notice: SYSDATASTEPPHASE=EXECUTION IN_DATA_STEP=N
Ignoring record: submissionId=30678109-1661-4a87-858f-1bc1b0d581fa jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job jobVersion=0.1
jobId=abcfa448-6829-4513-8bef-3d8418207d45
Ignoring record: submissionId=c4fb4991-9137-4374-8d55-32ed9002f3d8 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_ongoing_studies.job jobVersion=0.1
jobId=c762f385-9376-49c8-8cec-d19326e7e18e
Ignoring record: submissionId=e10042a4-6280-4c02-92e6-fbbdbb000293 jobPath=/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job jobVersion= 
jobId=02b06e4d-7777-4a59-b2f9-2fc165603216
Ignoring record: submissionId=f00d2b52-d9f1-4ef1-8922-181d934626e0 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_ongoing_studies.job jobVersion=0.1
jobId=c762f385-9376-49c8-8cec-d19326e7e18e
Ignoring record: submissionId=feed1f0f-2d9a-42b9-8060-8fddd1e47337 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job jobVersion=0.1
jobId=abcfa448-6829-4513-8bef-3d8418207d45
Ignoring record: submissionId=7e820358-2d58-4d70-904b-c779f6bea07a jobPath=/clinical/argx-113/cidp/argx-113-1802/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job jobVersion= 
jobId=5ddfea34-d035-4d8f-a8ab-3bcb9e5707e3
Ignoring record: submissionId=b3a3cc26-3075-48a2-9a4c-e48c70a25098 jobPath=/clinical/argx-113/cidp/argx-113-1802/biostat/staging/generic_adam/jobs/job_taeisr.job jobVersion= 
jobId=110a9401-0b4f-472c-9f07-e5d644824482
Notice: _LSAFJOBSUBMISSIONID_=3b416f85-816d-4b7b-bfb0-3286da61738a SESSIONID=3dac6c98-3547-46e7-95b9-3620d8bff4e7 JOB=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job 
JOBID=090a95d3-6059-474f-a1bd-61c6768ba993
(SUBMIT_JOB): 2023-02-14T23:52:48 - Submitted REPOSITORY Job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job          with Submission ID: 
3b416f85-816d-4b7b-bfb0-3286da61738a, Status: STARTED
(SUBMIT_JOB): 23:52:48.10 Elapsed: 00:00:02.38 Job Submission Status: STARTED
(SUBMIT_JOB): 23:52:50.63 Elapsed: 00:00:04.91 Job Submission Status: STARTED
(SUBMIT_JOB): 23:52:53.16 Elapsed: 00:00:07.44 Job Submission Status: STARTED
(SUBMIT_JOB): 23:52:55.70 Elapsed: 00:00:09.97 Job Submission Status: STARTED
(SUBMIT_JOB): 23:52:58.24 Elapsed: 00:00:12.52 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:53:00.77 Elapsed: 00:00:15.05 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:53:03.30 Elapsed: 00:00:17.58 Job Submission Status: POST_EXECUTION_PUBLISHING
(SUBMIT_JOB): 23:53:05.83 Elapsed: 00:00:20.11 Job Submission Status: COMPLETED_SUCCESSFUL
(SUBMIT_JOB): 2023-02-14T23:53:08 - Submitted REPOSITORY job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job has completed with status: COMPLETED_SUCCESSFUL
MPRINT(SUBMIT_JOB):  ;
job_gadam_studysetup.job: get job status: 0: Success.:       Elapsed: 00:00:22.61       REPOSITORY Job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job with Submission 
ID: 3b416f85-816d-4b7b-bfb0-3286da61738a, Status: COMPLETED_SUCCESSFUL
MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   option NOMPRINT;
%rebuild_generic_adam(gadam_study_path=/clinical/argx-117/covid-19/argx-117-2001/biostat/staging/generic_adam, 
sdtm_last_path=/clinical/argx-117/covid-19/argx-117-2001/biostat/staging/data_received/sdtm_last)
MPRINT(REBUILD_GENERIC_ADAM):   notes;
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/covid-19/argx-117-2001/biostat/staging/generic_adam", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/covid-19/argx-117-2001/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/covid-19/argx-117-2001/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/covid-19/argx-117-2001/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/covid-19/argx-117-2001/biostat/staging/generic_adam
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
      

MPRINT(REBUILD_GENERIC_ADAM):  ;
Notice: Rebuilding adam datasets in generic_adam reporting event in /clinical/argx-117/covid-19/argx-117-2001/biostat/staging/generic_adam ...
NUM_JOBS_SPAWNED=3
MACROAPIVER=2.6
MPRINT(SUBMIT_JOB):   proc sql noprint;
MPRINT(SUBMIT_JOB):   drop table work.job_Parameters;
NOTE: Table WORK.JOB_PARAMETERS has been dropped.
MPRINT(SUBMIT_JOB):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

DEBUG:(GEN_JOB_ENV): PRX=35
DEBUG:(GEN_JOB_ENV): prxmatch(35, /general/biostat/jobs/gadam_rebuild_adam/dev/jobs/job_gadam_rebuild_adam.job) = 1
DEBUG:(GEN_JOB_ENV): (0) REFPATH=
DEBUG:(GEN_JOB_ENV): (0) REPEVPATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (0) RELREPEVPATH=/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (0) _SASFILEPATH_=/general/biostat/jobs/gadam_ongoing_studies/prod/programs/lsaf_get_last_sdtm.sas
DEBUG:(GEN_JOB_ENV): (0) PROGPATH=/general/biostat/jobs/gadam_ongoing_studies/prod/programs/
DEBUG:(GEN_JOB_ENV): (0) PATH=/general/biostat/jobs/gadam_rebuild_adam/dev/jobs/job_gadam_rebuild_adam.job
Setting refpath = &repevpath
DEBUG:(GEN_JOB_ENV): (1) REFPATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (2) REFENV=prod
DEBUG:(GEN_JOB_ENV): (3) REFENV=prod
DEBUG:(F_LSAF_EXISTS) - 2023-02-14T23:53:08 - Iteration: 1: slept = 0, exists = 1
DEBUG:(F_LSAF_EXISTS) - 2023-02-14T23:53:08 - Iteration: 1: slept = 0, exists = 1
DEBUG:(F_LSAF_EXISTS) - 2023-02-14T23:53:09 - Iteration: 1: slept = 0, exists = 1
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
      

MPRINT(SUBMIT_JOB):  ;
Notice:(SUBMIT_JOB): LSAF Job Path exists: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job.
MPRINT(SUBMIT_JOB):   proc format;
MPRINT(SUBMIT_JOB):   value $jobabbr "job_gadam_ongoing_studies.job"= "gos" "job_studies_status.job"= "ss" "job_gadam_sdtm_key_core_vars.job"= "gskcv" "job_unzip_sdtm_sources.job"= "uss" 
"job_zip_extract_files.job"= "zef" "job_lsaf_get_last_sdtm.job"= "lgls" "setup_reporting_event_folder.job"= "sref" "job_gadam_refresh_sdtm_last.job"= "grsl" "job_gadam_update_refresh_info.job"= 
"guri" "convert_definetosas.job"= "cdts" "job_gadam_studysetup.job"= "gss" "job_gadam_rebuild_adam.job"= "gra" "job_adAAA" - "job_adzzz"= "adx" "job_qcstudyadams.job"= "qcsa" 
"job_qc_gadam_vs_study.job"= "qcgvs" "job_qc_gadam_vs_study-overview.job"= "qcgvso" "job_check_and_load.job"= "cal" "job_tAAA" - "job_tzzz"= "txx" "job_gadam_qc_overviews.job"= "gqco" 
"job_make_sdtm_pool_jobs.job"= "mspj" "job_lsaf_pool_last_sdtm.job"= "lpls" "sdtm_pool-AAA" - "sdtm_pool-zzz"= "pci" "job_gadam_refresh_sdtm_overview.job"= "grso" "getdata.job"= "gd" OTHER = "***" ;
NOTE: Format $JOBABBR is already on the library WORK.FORMATS.
NOTE: Format $JOBABBR has been output.
MPRINT(SUBMIT_JOB):   run;
NOTE: PROCEDURE FORMAT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SUBMIT_JOB):   quit;
job_instance=>Ngos117Prod_4_x0_3<
MPRINT(LSAF_GETJOBPARAMETERS):  ;
MPRINT(LSAF_GETJOBPARAMETERS):   data work.job_Parameters (label="Created by LSAF_GETJOBPARAMETERS" KEEP=jobPath jobVersion name label type defaultValue fileVersion includeSubFolders );
MPRINT(LSAF_GETJOBPARAMETERS):   attrib returnCode length=8 message length=$200 logMsgPrefix length=$70 logMsgPrimary length=$70 logMsg length=$300 rowCount length=8 jobPath length=$2048 label="Job 
Path" jobVersion length=$32 label="Job Version" name length=$256 label="Parameter Name" label length=$256 label="Parameter Label" type length=$32 label="Parameter Type" defaultValue length=$2048 
label="Parameter Default Value" fileVersion length=$32 label="File Version if File Type" includeSubFolders length=8 label="Include Container SubFolders" includesSubFolders length=$5 label="FOR 
INTERNAL PROCESSING ONLY.  WILL BE DROPPED." ;
MPRINT(LSAF_GETJOBPARAMETERS):   rowCount=0;
MPRINT(LSAF_GETJOBPARAMETERS):   declare javaobj srv("com/sas/lsaf/macro/execution/job/JobService") ;
MPRINT(LSAF_GETJOBPARAMETERS):   declare javaobj results("com/sas/lsaf/macro/execution/job/SasJobParametersResult");
MPRINT(LSAF_GETJOBPARAMETERS):   srv.callStaticVoidMethod("getRepositoryJobParameters", "/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job", "", results) ;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_GETJOBPARAMETERS):   if (returnCode ne 0) then do;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_GETJOBPARAMETERS):   if "" NE "" then logMsg=" Cannot retrieve parameters for job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job, version " ;
MPRINT(LSAF_GETJOBPARAMETERS):   else logMsg=" Cannot retrieve parameters for job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job" ;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   else do;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsg=" Parameters were returned for job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job" ;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getJobPath", jobPath);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getJobVersion", jobVersion);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callIntMethod("getSize", rowCount);
MPRINT(LSAF_GETJOBPARAMETERS):   do row=0 to rowCount - 1;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getName", row, name);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getLabel", row, label);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getType", row, type);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getDefaultValue", row, defaultValue);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getFileVersion", row, fileVersion);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getContainerIncludeSubfolders", row, includesSubFolders);
MPRINT(LSAF_GETJOBPARAMETERS):   includeSubFolders=input(includesSubFolders,best.);
MPRINT(LSAF_GETJOBPARAMETERS):   output;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   put;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " " "lsaf_getjobparameters";
MPRINT(LSAF_GETJOBPARAMETERS):   if (rowCount=0) then put logMsgPrefix " No parameters were found.";
MPRINT(LSAF_GETJOBPARAMETERS):   else put logMsgPrefix " " rowCount " records written to data set work.job_Parameters";
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(LSAF_GETJOBPARAMETERS):   put;
MPRINT(LSAF_GETJOBPARAMETERS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_GETJOBPARAMETERS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_GETJOBPARAMETERS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  Parameters were returned for job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_getjobparameters
NOTE: SAS Life Science Analytics Framework Macro: *  12  records written to data set work.job_Parameters
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: The data set WORK.JOB_PARAMETERS has 12 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.01 seconds
      

MPRINT(SUBMIT_JOB):  ;
NOTE: The dataset WORK.JOB_PARAMETERS has 12 observations and 8 variables.
MPRINT(SUBMIT_JOB):   ;
MPRINT(SUBMIT_JOB):   *- dataset to specify job parameters (from macro parameters values) -*;
MPRINT(SUBMIT_JOB):   data lsaf_job_params(index=(name));
MPRINT(SUBMIT_JOB):   set work.job_Parameters(rename=(defaultValue = value));
MPRINT(SUBMIT_JOB):   if upcase(name) = "_PARENTJOB_WS_" then do;
MPRINT(SUBMIT_JOB):   if symexist("_SASWS_") and type = "CHARACTER" then value = symget("_SASWS_");
MPRINT(SUBMIT_JOB):   else value = " ";
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   else if upcase(name) = "_PARENTJOB_WRK_" then do;
MPRINT(SUBMIT_JOB):   value = pathname("WORK", "L");
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   else if symexist(name) then do;
MPRINT(SUBMIT_JOB):   if symget(name) ^= ' ' then value = symget(name);
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   new_value = translate(value, ' ', ',;()"''&%');
MPRINT(SUBMIT_JOB):   if new_value ne value then put "NOTE:(SUBMIT_JOB): Special characters may be removed from parameter value:" / @2 "parameter: " name /@2 "old value: " value /@2 "new value: " 
new_value;
MPRINT(SUBMIT_JOB):   if _n_=1 then put "Not" "ice:(SUBMIT_JOB): Updated Job parameters:";
MPRINT(SUBMIT_JOB):   if type = "FOLDER" then put " - " name @+(-1) "=" value "[" type= @+(-1) ", " includeSubFolders= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   else if TYPE = "FILE" then put " - " name @+(-1) "=" value "[" type= @+(-1) ", " fileversion= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   else put " - " name @+(-1) "=" value "[" type= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   run;
Notice:(SUBMIT_JOB): Updated Job parameters:
 - gadam_study_path=/clinical/argx-117/covid-19/argx-117-2001/biostat/staging/generic_adam [type=FOLDER, includeSubFolders=0]
 - sdtm_last_path=/clinical/argx-117/covid-19/argx-117-2001/biostat/staging/data_received/sdtm_last [type=FOLDER, includeSubFolders=0]
 - qc_gadam_vs_study=Y [type=CHARACTER]
 - check_and_load_gadam=Y [type=CHARACTER]
 - run_gadam_tables=Y [type=CHARACTER]
 - wait=Y [type=CHARACTER]
 - force=N [type=CHARACTER]
 - mock=N [type=CHARACTER]
 - job_instance=Ngos117Prod_4_x0_3 [type=CHARACTER]
 - _PARENTJOB_WS_=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15 [type=CHARACTER]
 - _PARENTJOB_WRK_=/saswork/sas_tmp/SAS_work4CFB0019563E_xar08auv.vsp.sas.com/SAS_work5B910019563E_xar08auv.vsp.sas.com [type=CHARACTER]
 - USE_SAS_WORKSPACE_MACROS=  [type=CHARACTER]
NOTE: There were 12 observations read from the data set WORK.JOB_PARAMETERS.
NOTE: The data set WORK.LSAF_JOB_PARAMS has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

N_PARAMS=12
MPRINT(SUBMIT_JOB):   data lsaf_job_params(index=(name));
MPRINT(SUBMIT_JOB):   set lsaf_job_params;
MPRINT(SUBMIT_JOB):   by name;
MPRINT(SUBMIT_JOB):   if (not first.name) or (not last.name) then do;
MPRINT(SUBMIT_JOB):   if last.name then action = "(kept)   ";
MPRINT(SUBMIT_JOB):   else action = "(dropped)";
MPRINT(SUBMIT_JOB):   drop action;
MPRINT(SUBMIT_JOB):   put "Not" "ice:(SUBMIT_JOB): duplicate parameter " name " = " value @+(3) action;
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   if last.name;
MPRINT(SUBMIT_JOB):   run;
NOTE: There were 12 observations read from the data set WORK.LSAF_JOB_PARAMS.
NOTE: The data set WORK.LSAF_JOB_PARAMS has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SUBMIT_JOB):   data _null_;
MPRINT(SUBMIT_JOB):   file print;
MPRINT(SUBMIT_JOB):   set lsaf_job_params(where=(prxmatch('/^(FOLDER|FILE)$/', trim(type))) in=a) lsaf_job_params(where=(prxmatch('/^(FOLDER|FILE)$/', trim(type))=0 and value ^= ' ')) end=last;
MPRINT(SUBMIT_JOB):   if _n_=1 then putlog "=== 2023-02-14T23:53:09 - Submit job: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job (with parameters: " @;
MPRINT(SUBMIT_JOB):   _n_a+a;
MPRINT(SUBMIT_JOB):   if _n_-1 = _n_a then do;
MPRINT(SUBMIT_JOB):   putlog / @8 @;
MPRINT(SUBMIT_JOB):   put / @8 @;
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   if a then putlog / @8 name @+(-1) "=" value ' (' type= includeSubFolders= @+(-1) ')   ' @;
MPRINT(SUBMIT_JOB):   else putlog name @+(-1) "=" value "  " @ ;
MPRINT(SUBMIT_JOB):   if last then putlog @+8 ") ===";
MPRINT(SUBMIT_JOB):   if _n_=1 then put "=== 2023-02-14T23:53:09 - Submit job: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job (with parameters: " @;
MPRINT(SUBMIT_JOB):   if a then put / @8 name @+(-1) "=" value ' (' type= includeSubFolders= @+(-1) ')   ' @;
MPRINT(SUBMIT_JOB):   else put name @+(-1) "=" value "  " @ ;
MPRINT(SUBMIT_JOB):   if last then put @+8 ") ===";
MPRINT(SUBMIT_JOB):   run;
=== 2023-02-14T23:53:09 - Submit job: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job (with parameters: 
       gadam_study_path=/clinical/argx-117/covid-19/argx-117-2001/biostat/staging/generic_adam  (type=FOLDER includeSubFolders=0)   
       sdtm_last_path=/clinical/argx-117/covid-19/argx-117-2001/biostat/staging/data_received/sdtm_last  (type=FOLDER includeSubFolders=0)   
       _PARENTJOB_WRK_=/saswork/sas_tmp/SAS_work4CFB0019563E_xar08auv.vsp.sas.com/SAS_work5B910019563E_xar08auv.vsp.sas.com   _PARENTJOB_WS_=
/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15   check_and_load_gadam=Y   force=N   job_instance=Ngos117Prod_4_x0_3   mock=N   qc_gadam_vs_study=Y
  run_gadam_tables=Y   wait=Y           ) ===
NOTE: 6 lines were written to file PRINT.
NOTE: There were 2 observations read from the data set WORK.LSAF_JOB_PARAMS.
      WHERE PRXMATCH('/^(FOLDER|FILE)$/', TRIM(type));
NOTE: There were 9 observations read from the data set WORK.LSAF_JOB_PARAMS.
      WHERE (PRXMATCH('/^(FOLDER|FILE)$/', TRIM(type))=0) and (value not = ' ');
NOTE: The DATA step printed page 5.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.02 seconds
      

MPRINT(LSAF_SUBMITJOB):  ;
NOTE: lsaf_submitjob: Validating dataset lsaf_job_params
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   options nonotes;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   proc datasets library=work nolist;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   delete __SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   quit;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   options nonotes;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   data _null_;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   length message $45 libName $8 dsName $300;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   providedDatasetName=kstrip("lsaf_job_params");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsName="INVALID";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsNameIsValid=0;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dotCount=countc(providedDatasetName,".");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dotPosition=kindexc(providedDatasetName,".");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   *put dotPosition=;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (dotPosition=1 or dotPosition=length(providedDatasetName)) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message=" Missing either LIBNAME or data set.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   select (dotCount);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   when (0) dsName=providedDatasetName;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   when (1) do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (dotPosition le 9) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   libName = (ksubstr(providedDatasetName, 1, dotPosition-1));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   *put libName=;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsName = (ksubstr(providedDatasetName, dotPosition+1));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   else do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Libname longer than 8 characters.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   otherwise do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Invalid data set name structure.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   firstchar=ksubstr(kleft(dsName), 1, 1);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (anydigit(firstchar)) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Data set name must start with a character.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (length(dsName) > 32) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Data set name longer than 32 characters.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsNameIsValid=1;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   SETVARS: call symput("_lsafvaliddsn_", strip(put(dsNameIsValid, best.)));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   call symput("dsnMsg", message);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   call symput("specifiedLib", strip(libName));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   run;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   options NONOTES;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   * CHECK EXISTS: Also getting errors for data set name.;
MPRINT(LSAF_VALIDATE_SASDATASET):  ;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):  ;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   proc sort data=lsaf_job_params out=__SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   by name;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   data _null_;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   set __SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   by name;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   if (first.name AND NOT(last.name)) then do;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   call symput("_lsafMsg_", "Input data set has duplicate values for parameter name " || name || ".");
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   STOP;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   end;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   call symput("_lsafRC_", "0");
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   option notes;
MPRINT(LSAF_SUBMITJOB):  ;
MPRINT(LSAF_SUBMITJOB):   option notes;
MPRINT(LSAF_SUBMITJOB):   data _null_;
MPRINT(LSAF_SUBMITJOB):   attrib returnCode length=8 message length=$200 jobSubmissionId length=$525 logMsgPrefix length=$70 logMsgPrimary length=$70 logMsg length=$300 ;
MPRINT(LSAF_SUBMITJOB):   set lsaf_job_params end=eof;
MPRINT(LSAF_SUBMITJOB):   if (_n_ = 1) then do;
MPRINT(LSAF_SUBMITJOB):   declare javaobj params("com/sas/lsaf/macro/execution/job/SasParameterValues");
MPRINT(LSAF_SUBMITJOB):   declare javaobj srv("com/sas/lsaf/macro/execution/jobsubmission/JobSubmissionService");
MPRINT(LSAF_SUBMITJOB):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   params.callVoidMethod("addValue", kstrip(name), kstrip(value), kstrip(type), kstrip(fileVersion), includeSubFolders);
MPRINT(LSAF_SUBMITJOB):   if (eof);
MPRINT(LSAF_SUBMITJOB):   declare javaobj job("com/sas/lsaf/macro/execution/jobsubmission/SasSubmittableJob", "/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job", "", 
params);
MPRINT(LSAF_SUBMITJOB):   srv.callStaticStringMethod("submitRepositoryJob", job, results, jobSubmissionId);
MPRINT(LSAF_SUBMITJOB):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_SUBMITJOB):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_SUBMITJOB):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_SUBMITJOB):   if (returnCode ne 0) then do;
MPRINT(LSAF_SUBMITJOB):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_SUBMITJOB):   logMsg=" Cannot submit job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job";
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   else do;
MPRINT(LSAF_SUBMITJOB):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_SUBMITJOB):   logMsg=" Submitted job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job";
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   put;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " " "lsaf_submitjob";
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(LSAF_SUBMITJOB):   if "lsaf_job_params" = "" then put logMsgPrefix "No job parameters were supplied.";
MPRINT(LSAF_SUBMITJOB):   else put logMsgPrefix "sas_dsname = lsaf_job_params";
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix "_lsafJobSubmissionId_= " jobSubmissionId;
MPRINT(LSAF_SUBMITJOB):   put;
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafJobSubmissionId_", strip(jobSubmissionId));
MPRINT(LSAF_SUBMITJOB):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  Submitted job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_submitjob
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: * sas_dsname = lsaf_job_params
NOTE: SAS Life Science Analytics Framework Macro: * _lsafJobSubmissionId_= f9d75586-2d72-44d4-b8bf-1a7570885e5a
NOTE: There were 12 observations read from the data set WORK.LSAF_JOB_PARAMS.
NOTE: DATA statement used (Total process time):
      real time           1.91 seconds
      cpu time            0.00 seconds
      

MPRINT(LSAF_SUBMITJOB):   options NONOTES;
MPRINT(SUBMIT_JOB):  ;
MPRINT(SUBMIT_JOB):   *- Job submission succeeded -*;
MPRINT(SUBMIT_JOB):   option nomprint nonotes
Calling %lsaf_getitemid(lsaf_path=/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job) ...
_LSAFMSG_=Success.  _LSAFRC_=0  _LSAFITEMID_=02b06e4d-7777-4a59-b2f9-2fc165603216
Calling %step_lsaf_getjobsubmissioninfos(job_subm_id=f9d75586-2d72-44d4-b8bf-1a7570885e5a) ...
Notice: SYSDATASTEPPHASE=EXECUTION IN_DATA_STEP=N
Ignoring record: submissionId=30678109-1661-4a87-858f-1bc1b0d581fa jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job jobVersion=0.1
jobId=abcfa448-6829-4513-8bef-3d8418207d45
Ignoring record: submissionId=c4fb4991-9137-4374-8d55-32ed9002f3d8 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_ongoing_studies.job jobVersion=0.1
jobId=c762f385-9376-49c8-8cec-d19326e7e18e
Ignoring record: submissionId=e10042a4-6280-4c02-92e6-fbbdbb000293 jobPath=/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job jobVersion= 
jobId=02b06e4d-7777-4a59-b2f9-2fc165603216
Ignoring record: submissionId=f00d2b52-d9f1-4ef1-8922-181d934626e0 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_ongoing_studies.job jobVersion=0.1
jobId=c762f385-9376-49c8-8cec-d19326e7e18e
Ignoring record: submissionId=feed1f0f-2d9a-42b9-8060-8fddd1e47337 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job jobVersion=0.1
jobId=abcfa448-6829-4513-8bef-3d8418207d45
Ignoring record: submissionId=7e820358-2d58-4d70-904b-c779f6bea07a jobPath=/clinical/argx-113/cidp/argx-113-1802/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job jobVersion= 
jobId=5ddfea34-d035-4d8f-a8ab-3bcb9e5707e3
Notice: _LSAFJOBSUBMISSIONID_=f9d75586-2d72-44d4-b8bf-1a7570885e5a SESSIONID=800a68c1-a3b8-4735-9f5b-41d8e810678c JOB=/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job 
JOBID=02b06e4d-7777-4a59-b2f9-2fc165603216
(SUBMIT_JOB): 2023-02-14T23:53:11 - Submitted REPOSITORY Job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job          with Submission ID: 
f9d75586-2d72-44d4-b8bf-1a7570885e5a, Status: STARTED
(SUBMIT_JOB): 23:53:11.27 Elapsed: 00:00:02.87 Job Submission Status: STARTED
(SUBMIT_JOB): 23:53:13.80 Elapsed: 00:00:05.40 Job Submission Status: STARTED
(SUBMIT_JOB): 23:53:16.33 Elapsed: 00:00:07.94 Job Submission Status: STARTED
(SUBMIT_JOB): 23:53:18.87 Elapsed: 00:00:10.47 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:53:21.43 Elapsed: 00:00:13.04 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:53:23.96 Elapsed: 00:00:15.57 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:53:26.50 Elapsed: 00:00:18.11 Job Submission Status: RUNNING_TASKS
  Setup generic_adam_path=/clinical/argx-117/covid-19/argx-117-2001/biostat/staging/generic_adam : setup_result=setup_generic_adam: 0: Success.
  /clinical/argx-117/covid-19/argx-117-2001/biostat/staging/generic_adam : setup_result=skipped since &setup_gadam_folder = N
(SUBMIT_JOB): 23:53:29.03 Elapsed: 00:00:20.64 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:53:31.57 Elapsed: 00:00:23.17 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:53:34.10 Elapsed: 00:00:25.70 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:53:36.63 Elapsed: 00:00:28.23 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:53:39.16 Elapsed: 00:00:30.76 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:53:46.69 Elapsed: 00:00:38.30 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:53:54.22 Elapsed: 00:00:45.82 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:54:01.75 Elapsed: 00:00:53.36 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:54:09.29 Elapsed: 00:01:00.89 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:54:31.82 Elapsed: 00:01:23.42 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:54:54.37 Elapsed: 00:01:45.97 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:55:24.40 Elapsed: 00:02:16.01 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:55:54.44 Elapsed: 00:02:46.04 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:56:24.48 Elapsed: 00:03:16.08 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:56:54.52 Elapsed: 00:03:46.12 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:57:24.56 Elapsed: 00:04:16.16 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:57:54.59 Elapsed: 00:04:46.20 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:58:24.63 Elapsed: 00:05:16.23 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:58:54.66 Elapsed: 00:05:46.26 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:59:24.70 Elapsed: 00:06:16.30 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:59:54.73 Elapsed: 00:06:46.34 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:00:24.76 Elapsed: 00:07:16.37 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:00:54.80 Elapsed: 00:07:46.40 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:01:24.84 Elapsed: 00:08:16.44 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:01:54.87 Elapsed: 00:08:46.47 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:02:25.13 Elapsed: 00:09:16.73 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:02:55.17 Elapsed: 00:09:46.77 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:03:25.20 Elapsed: 00:10:16.81 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:03:55.24 Elapsed: 00:10:46.85 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:04:25.28 Elapsed: 00:11:16.88 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:04:55.68 Elapsed: 00:11:47.28 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:05:25.80 Elapsed: 00:12:17.40 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:05:55.92 Elapsed: 00:12:47.52 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:06:26.37 Elapsed: 00:13:17.97 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:06:57.25 Elapsed: 00:13:48.85 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:07:27.31 Elapsed: 00:14:18.92 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:07:57.52 Elapsed: 00:14:49.12 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:08:27.74 Elapsed: 00:15:19.34 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:08:57.78 Elapsed: 00:15:49.38 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:09:27.82 Elapsed: 00:16:19.43 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:09:57.86 Elapsed: 00:16:49.46 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:10:28.19 Elapsed: 00:17:19.79 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:10:58.27 Elapsed: 00:17:49.88 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:11:28.35 Elapsed: 00:18:19.95 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:11:58.42 Elapsed: 00:18:50.02 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:12:28.54 Elapsed: 00:19:20.15 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:12:58.58 Elapsed: 00:19:50.19 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:13:28.63 Elapsed: 00:20:20.23 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:13:58.66 Elapsed: 00:20:50.27 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:14:28.80 Elapsed: 00:21:20.40 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:14:58.86 Elapsed: 00:21:50.46 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:15:28.90 Elapsed: 00:22:20.50 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:15:58.94 Elapsed: 00:22:50.54 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:16:28.97 Elapsed: 00:23:20.58 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:16:59.03 Elapsed: 00:23:50.63 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:17:29.07 Elapsed: 00:24:20.68 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:17:59.12 Elapsed: 00:24:50.72 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:18:29.30 Elapsed: 00:25:20.90 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:18:59.34 Elapsed: 00:25:50.94 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:19:29.38 Elapsed: 00:26:20.98 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:19:59.42 Elapsed: 00:26:51.03 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:20:29.47 Elapsed: 00:27:21.07 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:20:59.50 Elapsed: 00:27:51.11 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:21:29.55 Elapsed: 00:28:21.15 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:21:59.59 Elapsed: 00:28:51.19 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:22:29.63 Elapsed: 00:29:21.23 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:22:59.68 Elapsed: 00:29:51.28 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:23:29.72 Elapsed: 00:30:21.32 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:23:59.81 Elapsed: 00:30:51.41 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:24:29.86 Elapsed: 00:31:21.46 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:24:59.89 Elapsed: 00:31:51.50 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:25:29.94 Elapsed: 00:32:21.54 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:25:59.98 Elapsed: 00:32:51.58 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:26:30.01 Elapsed: 00:33:21.61 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:27:00.06 Elapsed: 00:33:51.66 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:27:30.09 Elapsed: 00:34:21.70 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:28:00.15 Elapsed: 00:34:51.76 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:28:30.19 Elapsed: 00:35:21.80 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:29:00.23 Elapsed: 00:35:51.83 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:29:30.27 Elapsed: 00:36:21.87 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:30:00.34 Elapsed: 00:36:51.94 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:30:30.37 Elapsed: 00:37:21.98 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:31:00.42 Elapsed: 00:37:52.02 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:31:30.47 Elapsed: 00:38:22.07 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:32:00.50 Elapsed: 00:38:52.11 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:32:30.54 Elapsed: 00:39:22.14 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:33:00.57 Elapsed: 00:39:52.18 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:33:30.61 Elapsed: 00:40:22.21 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:34:00.65 Elapsed: 00:40:52.26 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:34:30.69 Elapsed: 00:41:22.30 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:35:00.73 Elapsed: 00:41:52.33 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:35:30.76 Elapsed: 00:42:22.37 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:36:00.80 Elapsed: 00:42:52.40 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:36:30.86 Elapsed: 00:43:22.46 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:37:00.90 Elapsed: 00:43:52.50 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:37:30.94 Elapsed: 00:44:22.54 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:38:00.98 Elapsed: 00:44:52.58 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:38:31.02 Elapsed: 00:45:22.62 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:39:01.05 Elapsed: 00:45:52.65 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:39:31.09 Elapsed: 00:46:22.69 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:40:01.14 Elapsed: 00:46:52.74 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:40:31.18 Elapsed: 00:47:22.78 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:41:01.21 Elapsed: 00:47:52.82 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:41:31.25 Elapsed: 00:48:22.85 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:42:01.28 Elapsed: 00:48:52.89 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:42:31.32 Elapsed: 00:49:22.92 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:43:01.35 Elapsed: 00:49:52.95 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:43:31.39 Elapsed: 00:50:22.99 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:44:01.43 Elapsed: 00:50:53.03 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:44:31.48 Elapsed: 00:51:23.08 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:45:01.51 Elapsed: 00:51:53.11 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:45:31.54 Elapsed: 00:52:23.15 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:46:01.58 Elapsed: 00:52:53.18 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:46:31.62 Elapsed: 00:53:23.22 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:47:01.65 Elapsed: 00:53:53.25 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:47:31.70 Elapsed: 00:54:23.30 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:48:01.74 Elapsed: 00:54:53.34 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:48:31.79 Elapsed: 00:55:23.39 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:49:01.82 Elapsed: 00:55:53.43 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:49:31.86 Elapsed: 00:56:23.47 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:50:01.90 Elapsed: 00:56:53.50 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:50:31.94 Elapsed: 00:57:23.54 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:51:01.98 Elapsed: 00:57:53.58 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:51:32.02 Elapsed: 00:58:23.62 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:52:02.06 Elapsed: 00:58:53.66 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:52:32.09 Elapsed: 00:59:23.70 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:53:02.13 Elapsed: 00:59:53.73 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:53:32.18 Elapsed: 01:00:23.78 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:54:02.22 Elapsed: 01:00:53.82 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:54:32.25 Elapsed: 01:01:23.85 Job Submission Status: RUNNING_TASKS
WARNING:(GET_LSAF_JOB_SUBMISSION_STATUS): job has status: COMPLETED_WARNINGS
(SUBMIT_JOB): 00:55:02.29 Elapsed: 01:01:53.89 Job Submission Status: COMPLETED_WARNINGS
(SUBMIT_JOB): 2023-02-15T00:55:32 - Submitted REPOSITORY job: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job has completed with status: COMPLETED_WARNINGS
WARNING:(SUBMIT_JOB): REPOSITORY job job_gadam_rebuild_adam.job has status: COMPLETED_WARNINGS
MPRINT(SUBMIT_JOB):  ;
job_gadam_rebuild_adam.job: get job status: 0: Success.:       Elapsed: 01:02:23.89       REPOSITORY Job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job with Submission 
ID: f9d75586-2d72-44d4-b8bf-1a7570885e5a, Status: COMPLETED_WARNINGS
MPRINT(REBUILD_GENERIC_ADAM):  ;
MPRINT(REBUILD_GENERIC_ADAM):   option NOMPRINT;
%create_generic_adam_path(/clinical/argx-117/dgf/argx-117-0000/biostat/staging/generic_adam, force=N)
MPRINT(CREATE_GENERIC_ADAM_PATH):   notes;
LOCATION_PARAMETERS=/clinical/argx-117/dgf/argx-117-0000
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/dgf/argx-117-0000/biostat/staging/generic_adam", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/dgf/argx-117-0000/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/dgf/argx-117-0000/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/dgf/argx-117-0000/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/dgf/argx-117-0000/biostat/staging/generic_adam
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.01 seconds
      
  Rebuild generic_adam_path=/clinical/argx-117/covid-19/argx-117-2001/biostat/staging/generic_adam : adam_rebuild_result=rebuild_generic_adam: 0: Success.
  /clinical/argx-117/covid-19/argx-117-2001/biostat/staging/generic_adam : adam_rebuild_result=rebuild_generic_adam: 0: Success.  === 
     
Notice: === study=argx-117-0000 match_pool=0 match_stdm_ind_pool=1

MPRINT(CREATE_GENERIC_ADAM_PATH):  ;
MPRINT(CREATE_GENERIC_ADAM_PATH):   option NOMPRINT;
%setup_generic_adam(gadam_path=/clinical/argx-117/dgf/argx-117-0000/biostat/staging/generic_adam, sdtm_last_path=/clinical/argx-117/dgf/argx-117-0000/biostat/staging/data_received/sdtm_last, 
study_adam_path=)
MPRINT(SETUP_GENERIC_ADAM):   notes;
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/dgf/argx-117-0000/biostat/staging/generic_adam", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/dgf/argx-117-0000/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/dgf/argx-117-0000/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/dgf/argx-117-0000/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/dgf/argx-117-0000/biostat/staging/generic_adam
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   *-2023-01-13 - jbodart - Perform gadam study setup only if target is not up-to-date -*;
MPRINT(SETUP_GENERIC_ADAM):   *- Use parameter gadam_files_source as &source_path for the template files to be used for study setup -*;
SOURCE_REL_PATH=/general/biostat/gadam SOURCE_PATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/gadam
STUDY=argx-117-0000 studyno=->0000<-
Notice: Checking whether generic_adam reporting event is already setup in /clinical/argx-117/dgf/argx-117-0000/biostat/staging/generic_adam ...
MPRINT(SETUP_GENERIC_ADAM):   data source_files(where=( scan(name, -1, ".") in ("xlsx" "sas" "job") and name ^= 'job_finalchecks.job' ) index=(_idx0_=(dir name)));
MPRINT(STEP_LSAF_GETCHILDREN):   *- Determine LSAF Macro API version -*;
MPRINT(STEP_LSAF_GETCHILDREN):   *- Declare the java items -*;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __srv37 ("com/sas/lsaf/macro/content/repository/RepositoryService") ;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __results37 ("com/sas/lsaf/macro/content/repository/SasRepositoryItemsResult");
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj _i_results37("com/sas/lsaf/macro/common/result/Result");
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   do __lsaf_path = "/general/biostat/gadam/documents" ,"/general/biostat/gadam/metadata/studyprograms" ,"/general/biostat/gadam/metadata/studyjobs" 
,"/general/biostat/gadam/metadata/studymacros";
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize numeric variables with default length (8) -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   rowCount=0;
MPRINT(STEP_LSAF_GETCHILDREN):   *- format numeric datetime variables -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize character variables with appropriate lengths -*;
MPRINT(STEP_LSAF_GETCHILDREN):   message = put(' ', $200.);
MPRINT(STEP_LSAF_GETCHILDREN):   path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   name = put(' ', $256.);
MPRINT(STEP_LSAF_GETCHILDREN):   description = put(' ', $512.);
MPRINT(STEP_LSAF_GETCHILDREN):   version = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   signatureStatus = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   createdBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   created = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   state = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   __createdTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   itemType = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   formattedsize = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   __lastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   *- check if container -*;
MPRINT(STEP_LSAF_GETCHILDREN):   isContainer = 1;
MPRINT(STEP_LSAF_GETCHILDREN):   *- if __lsaf_path is not a container, replace with parent folder path -*;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path ^= ' ' then __srv37.callStaticBooleanMethod("isContainer", trim(__lsaf_path), _i_results37, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   if isContainer = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_file_path = __lsaf_path;
MPRINT(STEP_LSAF_GETCHILDREN):   *- keep the original file path specified -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = resolve('%dirname('||__lsaf_path||')');
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path^='' then do;
MPRINT(STEP_LSAF_GETCHILDREN):   *- call the method -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __srv37.callStaticVoidMethod("getChildren", trim(__lsaf_path), cats(1), __results37);
MPRINT(STEP_LSAF_GETCHILDREN):   *- Retrieve the results -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __results37.callIntMethod("getReturnCode", returnCode);
MPRINT(STEP_LSAF_GETCHILDREN):   __results37.callStringMethod("getReturnMessage", message);
MPRINT(STEP_LSAF_GETCHILDREN):   if (returnCode = -1) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "WARNING:" "(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "NO" "TE-";
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else if (returnCode ^= 0) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "ER" "ROR:(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   __results37.callIntMethod("getSize", rowCount);
MPRINT(STEP_LSAF_GETCHILDREN):   if rowcount = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   message = catx(' ', message, "No observations returned.");
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   do row=0 to rowCount - 1;
MPRINT(STEP_LSAF_GETCHILDREN):   __results37.callStringMethod("getPath", row, path);
MPRINT(STEP_LSAF_GETCHILDREN):   __results37.callStringMethod("getName", row, name);
MPRINT(STEP_LSAF_GETCHILDREN):   __results37.callStringMethod("getDescription", row, description);
MPRINT(STEP_LSAF_GETCHILDREN):   __results37.callStringMethod("getVersion", row, version);
MPRINT(STEP_LSAF_GETCHILDREN):   __results37.callIntMethod("isContainer", row, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   __results37.callIntMethod("isVersioned", row, isVersioned);
MPRINT(STEP_LSAF_GETCHILDREN):   __results37.callIntMethod("isCheckedOut", row, isCheckedOut);
MPRINT(STEP_LSAF_GETCHILDREN):   __results37.callIntMethod("isLocked", row, isLocked);
MPRINT(STEP_LSAF_GETCHILDREN):   __results37.callStringMethod("getSignatureStatus", row, signatureStatus);
MPRINT(STEP_LSAF_GETCHILDREN):   __results37.callLongMethod("getFileSize", row, size);
MPRINT(STEP_LSAF_GETCHILDREN):   __results37.callStringMethod("getFormattedFileSize", row, formattedsize);
MPRINT(STEP_LSAF_GETCHILDREN):   if formattedsize = ' ' then formattedsize = ifc(size<0, " ", cats(size)||" Bytes");
MPRINT(STEP_LSAF_GETCHILDREN):   if size < 0 then size=.;
MPRINT(STEP_LSAF_GETCHILDREN):   __results37.callStringMethod("getItemType", row, itemType);
MPRINT(STEP_LSAF_GETCHILDREN):   __results37.callStringMethod("getLastModified", row, lastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results37.callStringMethod("getLastModifiedSasFormat", row, __lastModifiedTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   __results37.callStringMethod("getCreated", row, created);
MPRINT(STEP_LSAF_GETCHILDREN):   __results37.callStringMethod("getCreatedBy", row, createdBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results37.callStringMethod("getLastModifiedBy", row, lastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results37.callStringMethod("getPropertiesLastModified", row, propertiesLastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results37.callStringMethod("getPropertiesLastModifiedBy", row, propertiesLastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results37.callStringMethod("getPropertiesLastModifiedSasFormat", row, propertiesLastModifiedTempSAS);
MPRINT(STEP_LSAF_GETCHILDREN):   __results37.callStringMethod("getState", row, state);
MPRINT(STEP_LSAF_GETCHILDREN):   __results37.callStringMethod("getCreatedSasFormat", row, __createdTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   dateCreated=input(__createdTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   dateLastModified=input(__lastModifiedTempSas, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   datePropertiesLastModified=input(propertiesLastModifiedTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   pathLevel = countw(path, '/');
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_file_path = ' ' or __lsaf_file_path = path then do;
MPRINT(STEP_LSAF_GETCHILDREN):   dir=put(left(tranwrd(scan(path, -2, "/"), "study", "")), $20.);
MPRINT(STEP_LSAF_GETCHILDREN):  output;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   drop row __lastModifiedTempSAS __lsaf_file_path __createdTempSAS propertiesLastModifiedTempSAS
MPRINT(VARLIST):   itemType isContainer description version isVersioned isCheckedOut isLocked signatureStatus size formattedsize createdBy created dateCreated lastModifiedBy dateLastModified 
propertiesLastModifiedBy propertiesLastModified datePropertiesLastModified state pathLevel __lsaf_path returnCode message rowCount
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   run;
NOTE: The data set WORK.SOURCE_FILES has 60 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           1.11 seconds
      cpu time            0.43 seconds
      

MPRINT(SETUP_GENERIC_ADAM):   data target_files(where=( scan(name, -1, ".") in ("xlsx" "sas" "job") ) index=(_idx0_=(dir name)));
MPRINT(STEP_LSAF_GETCHILDREN):   *- Determine LSAF Macro API version -*;
MPRINT(STEP_LSAF_GETCHILDREN):   *- Declare the java items -*;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __srv43 ("com/sas/lsaf/macro/content/repository/RepositoryService") ;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __results43 ("com/sas/lsaf/macro/content/repository/SasRepositoryItemsResult");
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj _i_results43("com/sas/lsaf/macro/common/result/Result");
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   do __lsaf_path = "/clinical/argx-117/dgf/argx-117-0000/biostat/staging/generic_adam/documents" 
,"/clinical/argx-117/dgf/argx-117-0000/biostat/staging/generic_adam/programs" ,"/clinical/argx-117/dgf/argx-117-0000/biostat/staging/generic_adam/jobs" 
,"/clinical/argx-117/dgf/argx-117-0000/biostat/staging/generic_adam/macros";
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize numeric variables with default length (8) -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   rowCount=0;
MPRINT(STEP_LSAF_GETCHILDREN):   *- format numeric datetime variables -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize character variables with appropriate lengths -*;
MPRINT(STEP_LSAF_GETCHILDREN):   message = put(' ', $200.);
MPRINT(STEP_LSAF_GETCHILDREN):   path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   name = put(' ', $256.);
MPRINT(STEP_LSAF_GETCHILDREN):   description = put(' ', $512.);
MPRINT(STEP_LSAF_GETCHILDREN):   version = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   signatureStatus = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   createdBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   created = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   state = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   __createdTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   itemType = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   formattedsize = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   __lastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   *- check if container -*;
MPRINT(STEP_LSAF_GETCHILDREN):   isContainer = 1;
MPRINT(STEP_LSAF_GETCHILDREN):   *- if __lsaf_path is not a container, replace with parent folder path -*;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path ^= ' ' then __srv43.callStaticBooleanMethod("isContainer", trim(__lsaf_path), _i_results43, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   if isContainer = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_file_path = __lsaf_path;
MPRINT(STEP_LSAF_GETCHILDREN):   *- keep the original file path specified -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = resolve('%dirname('||__lsaf_path||')');
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path^='' then do;
MPRINT(STEP_LSAF_GETCHILDREN):   *- call the method -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __srv43.callStaticVoidMethod("getChildren", trim(__lsaf_path), cats(1), __results43);
MPRINT(STEP_LSAF_GETCHILDREN):   *- Retrieve the results -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __results43.callIntMethod("getReturnCode", returnCode);
MPRINT(STEP_LSAF_GETCHILDREN):   __results43.callStringMethod("getReturnMessage", message);
MPRINT(STEP_LSAF_GETCHILDREN):   if (returnCode = -1) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "NOTE:" "(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "NO" "TE-";
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else if (returnCode ^= 0) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "ER" "ROR:(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   __results43.callIntMethod("getSize", rowCount);
MPRINT(STEP_LSAF_GETCHILDREN):   if rowcount = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   message = catx(' ', message, "No observations returned.");
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   do row=0 to rowCount - 1;
MPRINT(STEP_LSAF_GETCHILDREN):   __results43.callStringMethod("getPath", row, path);
MPRINT(STEP_LSAF_GETCHILDREN):   __results43.callStringMethod("getName", row, name);
MPRINT(STEP_LSAF_GETCHILDREN):   __results43.callStringMethod("getDescription", row, description);
MPRINT(STEP_LSAF_GETCHILDREN):   __results43.callStringMethod("getVersion", row, version);
MPRINT(STEP_LSAF_GETCHILDREN):   __results43.callIntMethod("isContainer", row, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   __results43.callIntMethod("isVersioned", row, isVersioned);
MPRINT(STEP_LSAF_GETCHILDREN):   __results43.callIntMethod("isCheckedOut", row, isCheckedOut);
MPRINT(STEP_LSAF_GETCHILDREN):   __results43.callIntMethod("isLocked", row, isLocked);
MPRINT(STEP_LSAF_GETCHILDREN):   __results43.callStringMethod("getSignatureStatus", row, signatureStatus);
MPRINT(STEP_LSAF_GETCHILDREN):   __results43.callLongMethod("getFileSize", row, size);
MPRINT(STEP_LSAF_GETCHILDREN):   __results43.callStringMethod("getFormattedFileSize", row, formattedsize);
MPRINT(STEP_LSAF_GETCHILDREN):   if formattedsize = ' ' then formattedsize = ifc(size<0, " ", cats(size)||" Bytes");
MPRINT(STEP_LSAF_GETCHILDREN):   if size < 0 then size=.;
MPRINT(STEP_LSAF_GETCHILDREN):   __results43.callStringMethod("getItemType", row, itemType);
MPRINT(STEP_LSAF_GETCHILDREN):   __results43.callStringMethod("getLastModified", row, lastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results43.callStringMethod("getLastModifiedSasFormat", row, __lastModifiedTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   __results43.callStringMethod("getCreated", row, created);
MPRINT(STEP_LSAF_GETCHILDREN):   __results43.callStringMethod("getCreatedBy", row, createdBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results43.callStringMethod("getLastModifiedBy", row, lastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results43.callStringMethod("getPropertiesLastModified", row, propertiesLastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results43.callStringMethod("getPropertiesLastModifiedBy", row, propertiesLastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results43.callStringMethod("getPropertiesLastModifiedSasFormat", row, propertiesLastModifiedTempSAS);
MPRINT(STEP_LSAF_GETCHILDREN):   __results43.callStringMethod("getState", row, state);
MPRINT(STEP_LSAF_GETCHILDREN):   __results43.callStringMethod("getCreatedSasFormat", row, __createdTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   dateCreated=input(__createdTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   dateLastModified=input(__lastModifiedTempSas, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   datePropertiesLastModified=input(propertiesLastModifiedTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   pathLevel = countw(path, '/');
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_file_path = ' ' or __lsaf_file_path = path then do;
MPRINT(STEP_LSAF_GETCHILDREN):   dir=put(scan(path, -2, "/"), $20.);
MPRINT(STEP_LSAF_GETCHILDREN):   name=prxchange("s/^0000/_studyno_/", 1, trim(name));
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   drop row __lastModifiedTempSAS __lsaf_file_path __createdTempSAS propertiesLastModifiedTempSAS
MPRINT(VARLIST):   itemType isContainer description version isVersioned isCheckedOut isLocked signatureStatus size formattedsize createdBy created dateCreated lastModifiedBy dateLastModified 
propertiesLastModifiedBy propertiesLastModified datePropertiesLastModified state pathLevel __lsaf_path returnCode message rowCount
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   run;
NOTE: The data set WORK.TARGET_FILES has 59 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.99 seconds
      cpu time            0.40 seconds
      

MPRINT(SETUP_GENERIC_ADAM):   data source_target_files;
MPRINT(SETUP_GENERIC_ADAM):   merge source_files(in=a drop=path rename=(lastmodified=sourcelastmodified)) target_files(in=b drop=path rename=(lastmodified=targetlastmodified)) end=last ;
MPRINT(SETUP_GENERIC_ADAM):   by dir name;
MPRINT(SETUP_GENERIC_ADAM):   __prx = prxparse('s/((Mon|Tue|Wed|Thu|Fri|Sat|Sun)(\w*day)? )?(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]* (\d\d?) (\d?\d:\d\d:\d\d) GMT (\d{4})/\5\4\7:\6/i');
MPRINT(SETUP_GENERIC_ADAM):   if a then do;
MPRINT(SETUP_GENERIC_ADAM):   sourcemodte = input(prxchange(__prx, 1, sourcelastmodified), anydtdtm.);
MPRINT(SETUP_GENERIC_ADAM):   targetmodte = input(prxchange(__prx, 1, targetlastmodified), anydtdtm.);
MPRINT(SETUP_GENERIC_ADAM):   format sourcemodte targetmodte E8601DT.;
MPRINT(SETUP_GENERIC_ADAM):   need_update = (sourcemodte > targetmodte);
MPRINT(SETUP_GENERIC_ADAM):   tot_need_update=+need_update;
MPRINT(SETUP_GENERIC_ADAM):   tot_files=+a;
MPRINT(SETUP_GENERIC_ADAM):   output;
MPRINT(SETUP_GENERIC_ADAM):   end;
MPRINT(SETUP_GENERIC_ADAM):   if last then do;
MPRINT(SETUP_GENERIC_ADAM):   put "Target files needing update: " tot_need_update " out of " tot_files;
MPRINT(SETUP_GENERIC_ADAM):   call symputx("tot_need_update", tot_need_update);
MPRINT(SETUP_GENERIC_ADAM):   end;
MPRINT(SETUP_GENERIC_ADAM):   run;
NOTE: Invalid argument to function INPUT at line 0 column 119.
a=1 b=0 last=0 name=job_gnarrv2-orig.job sourcelastmodified=Tue Feb 14 08:25:35 GMT 2023 dir=jobs targetlastmodified=  FIRST.dir=0 LAST.dir=0 FIRST.name=1 LAST.name=1 __prx=1
sourcemodte=2023-02-14T08:25:35 targetmodte=. need_update=1 tot_need_update=1 tot_files=1 _ERROR_=1 _N_=18
Target files needing update: 1  out of 1
NOTE: Mathematical operations could not be performed at the following places. The results of the operations have been set to missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      1 at 0:119   
NOTE: There were 60 observations read from the data set WORK.SOURCE_FILES.
NOTE: There were 59 observations read from the data set WORK.TARGET_FILES.
NOTE: The data set WORK.SOURCE_TARGET_FILES has 60 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

TOT_NEED_UPDATE=1
Notice: Setting up generic_adam reporting event in /clinical/argx-117/dgf/argx-117-0000/biostat/staging/generic_adam ...
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/dgf/argx-117-0000/biostat/staging/data_received/adam", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/dgf/argx-117-0000/biostat/staging/data_received/adam" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/dgf/argx-117-0000/biostat/staging/data_received/adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/dgf/argx-117-0000/biostat/staging/data_received/adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item does not exist: /clinical/argx-117/dgf/argx-117-0000/biostat/staging/data_received/adam
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 0
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(SETUP_GENERIC_ADAM):  ;
Notice:(SETUP_GENERIC_ADAM): study_adam_path not found, set to null: /clinical/argx-117/dgf/argx-117-0000/biostat/staging/data_received/adam
NUM_JOBS_SPAWNED=4
MACROAPIVER=2.6
MPRINT(SUBMIT_JOB):   proc sql noprint;
MPRINT(SUBMIT_JOB):   drop table work.job_Parameters;
NOTE: Table WORK.JOB_PARAMETERS has been dropped.
MPRINT(SUBMIT_JOB):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

DEBUG:(GEN_JOB_ENV): PRX=52
DEBUG:(GEN_JOB_ENV): prxmatch(52, /general/biostat/jobs/gadam_ongoing_studies/dev/jobs/job_gadam_studysetup.job) = 1
DEBUG:(GEN_JOB_ENV): (0) REFPATH=
DEBUG:(GEN_JOB_ENV): (0) REPEVPATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (0) RELREPEVPATH=/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (0) _SASFILEPATH_=/general/biostat/jobs/gadam_ongoing_studies/prod/programs/lsaf_get_last_sdtm.sas
DEBUG:(GEN_JOB_ENV): (0) PROGPATH=/general/biostat/jobs/gadam_ongoing_studies/prod/programs/
DEBUG:(GEN_JOB_ENV): (0) PATH=/general/biostat/jobs/gadam_ongoing_studies/dev/jobs/job_gadam_studysetup.job
Setting refpath = &repevpath
DEBUG:(GEN_JOB_ENV): (1) REFPATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (2) REFENV=prod
DEBUG:(GEN_JOB_ENV): (3) REFENV=prod
DEBUG:(F_LSAF_EXISTS) - 2023-02-15T00:55:35 - Iteration: 1: slept = 0, exists = 1
DEBUG:(F_LSAF_EXISTS) - 2023-02-15T00:55:35 - Iteration: 1: slept = 0, exists = 1
DEBUG:(F_LSAF_EXISTS) - 2023-02-15T00:55:35 - Iteration: 1: slept = 0, exists = 1
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(SUBMIT_JOB):  ;
Notice:(SUBMIT_JOB): LSAF Job Path exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job.
MPRINT(SUBMIT_JOB):   proc format;
MPRINT(SUBMIT_JOB):   value $jobabbr "job_gadam_ongoing_studies.job"= "gos" "job_studies_status.job"= "ss" "job_gadam_sdtm_key_core_vars.job"= "gskcv" "job_unzip_sdtm_sources.job"= "uss" 
"job_zip_extract_files.job"= "zef" "job_lsaf_get_last_sdtm.job"= "lgls" "setup_reporting_event_folder.job"= "sref" "job_gadam_refresh_sdtm_last.job"= "grsl" "job_gadam_update_refresh_info.job"= 
"guri" "convert_definetosas.job"= "cdts" "job_gadam_studysetup.job"= "gss" "job_gadam_rebuild_adam.job"= "gra" "job_adAAA" - "job_adzzz"= "adx" "job_qcstudyadams.job"= "qcsa" 
"job_qc_gadam_vs_study.job"= "qcgvs" "job_qc_gadam_vs_study-overview.job"= "qcgvso" "job_check_and_load.job"= "cal" "job_tAAA" - "job_tzzz"= "txx" "job_gadam_qc_overviews.job"= "gqco" 
"job_make_sdtm_pool_jobs.job"= "mspj" "job_lsaf_pool_last_sdtm.job"= "lpls" "sdtm_pool-AAA" - "sdtm_pool-zzz"= "pci" "job_gadam_refresh_sdtm_overview.job"= "grso" "getdata.job"= "gd" OTHER = "***" ;
NOTE: Format $JOBABBR is already on the library WORK.FORMATS.
NOTE: Format $JOBABBR has been output.
MPRINT(SUBMIT_JOB):   run;
NOTE: PROCEDURE FORMAT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SUBMIT_JOB):   quit;
job_instance=>Ngos117Prod_4_x0_4<
MPRINT(LSAF_GETJOBPARAMETERS):  ;
MPRINT(LSAF_GETJOBPARAMETERS):   data work.job_Parameters (label="Created by LSAF_GETJOBPARAMETERS" KEEP=jobPath jobVersion name label type defaultValue fileVersion includeSubFolders );
MPRINT(LSAF_GETJOBPARAMETERS):   attrib returnCode length=8 message length=$200 logMsgPrefix length=$70 logMsgPrimary length=$70 logMsg length=$300 rowCount length=8 jobPath length=$2048 label="Job 
Path" jobVersion length=$32 label="Job Version" name length=$256 label="Parameter Name" label length=$256 label="Parameter Label" type length=$32 label="Parameter Type" defaultValue length=$2048 
label="Parameter Default Value" fileVersion length=$32 label="File Version if File Type" includeSubFolders length=8 label="Include Container SubFolders" includesSubFolders length=$5 label="FOR 
INTERNAL PROCESSING ONLY.  WILL BE DROPPED." ;
MPRINT(LSAF_GETJOBPARAMETERS):   rowCount=0;
MPRINT(LSAF_GETJOBPARAMETERS):   declare javaobj srv("com/sas/lsaf/macro/execution/job/JobService") ;
MPRINT(LSAF_GETJOBPARAMETERS):   declare javaobj results("com/sas/lsaf/macro/execution/job/SasJobParametersResult");
MPRINT(LSAF_GETJOBPARAMETERS):   srv.callStaticVoidMethod("getRepositoryJobParameters", "/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job", "", results) ;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_GETJOBPARAMETERS):   if (returnCode ne 0) then do;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_GETJOBPARAMETERS):   if "" NE "" then logMsg=" Cannot retrieve parameters for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job, version " ;
MPRINT(LSAF_GETJOBPARAMETERS):   else logMsg=" Cannot retrieve parameters for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   else do;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsg=" Parameters were returned for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getJobPath", jobPath);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getJobVersion", jobVersion);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callIntMethod("getSize", rowCount);
MPRINT(LSAF_GETJOBPARAMETERS):   do row=0 to rowCount - 1;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getName", row, name);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getLabel", row, label);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getType", row, type);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getDefaultValue", row, defaultValue);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getFileVersion", row, fileVersion);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getContainerIncludeSubfolders", row, includesSubFolders);
MPRINT(LSAF_GETJOBPARAMETERS):   includeSubFolders=input(includesSubFolders,best.);
MPRINT(LSAF_GETJOBPARAMETERS):   output;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   put;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " " "lsaf_getjobparameters";
MPRINT(LSAF_GETJOBPARAMETERS):   if (rowCount=0) then put logMsgPrefix " No parameters were found.";
MPRINT(LSAF_GETJOBPARAMETERS):   else put logMsgPrefix " " rowCount " records written to data set work.job_Parameters";
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(LSAF_GETJOBPARAMETERS):   put;
MPRINT(LSAF_GETJOBPARAMETERS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_GETJOBPARAMETERS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_GETJOBPARAMETERS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  Parameters were returned for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_getjobparameters
NOTE: SAS Life Science Analytics Framework Macro: *  8  records written to data set work.job_Parameters
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: The data set WORK.JOB_PARAMETERS has 8 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
      

MPRINT(SUBMIT_JOB):  ;
NOTE: The dataset WORK.JOB_PARAMETERS has 8 observations and 8 variables.
MPRINT(SUBMIT_JOB):   ;
MPRINT(SUBMIT_JOB):   *- dataset to specify job parameters (from macro parameters values) -*;
MPRINT(SUBMIT_JOB):   data lsaf_job_params(index=(name));
MPRINT(SUBMIT_JOB):   set work.job_Parameters(rename=(defaultValue = value));
MPRINT(SUBMIT_JOB):   if upcase(name) = "_PARENTJOB_WS_" then do;
MPRINT(SUBMIT_JOB):   if symexist("_SASWS_") and type = "CHARACTER" then value = symget("_SASWS_");
MPRINT(SUBMIT_JOB):   else value = " ";
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   else if upcase(name) = "_PARENTJOB_WRK_" then do;
MPRINT(SUBMIT_JOB):   value = pathname("WORK", "L");
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   else if symexist(name) then do;
MPRINT(SUBMIT_JOB):   if symget(name) ^= ' ' then value = symget(name);
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   new_value = translate(value, ' ', ',;()"''&%');
MPRINT(SUBMIT_JOB):   if new_value ne value then put "NOTE:(SUBMIT_JOB): Special characters may be removed from parameter value:" / @2 "parameter: " name /@2 "old value: " value /@2 "new value: " 
new_value;
MPRINT(SUBMIT_JOB):   if _n_=1 then put "Not" "ice:(SUBMIT_JOB): Updated Job parameters:";
MPRINT(SUBMIT_JOB):   if type = "FOLDER" then put " - " name @+(-1) "=" value "[" type= @+(-1) ", " includeSubFolders= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   else if TYPE = "FILE" then put " - " name @+(-1) "=" value "[" type= @+(-1) ", " fileversion= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   else put " - " name @+(-1) "=" value "[" type= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   run;
Notice:(SUBMIT_JOB): Updated Job parameters:
 - gadam_path=/clinical/argx-117/dgf/argx-117-0000/biostat/staging/generic_adam [type=FOLDER, includeSubFolders=0]
 - sdtm_last_path=/clinical/argx-117/dgf/argx-117-0000/biostat/staging/data_received/sdtm_last [type=FOLDER, includeSubFolders=0]
 - study_adam_path=  [type=FOLDER, includeSubFolders=0]
 - gadam_files_source=/general/biostat/gadam [type=FOLDER, includeSubFolders=1]
 - job_instance=Ngos117Prod_4_x0_4 [type=CHARACTER]
 - _PARENTJOB_WS_=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15 [type=CHARACTER]
 - _PARENTJOB_WRK_=/saswork/sas_tmp/SAS_work4CFB0019563E_xar08auv.vsp.sas.com/SAS_work5B910019563E_xar08auv.vsp.sas.com [type=CHARACTER]
 - USE_SAS_WORKSPACE_MACROS=  [type=CHARACTER]
NOTE: There were 8 observations read from the data set WORK.JOB_PARAMETERS.
NOTE: The data set WORK.LSAF_JOB_PARAMS has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

N_PARAMS=8
MPRINT(SUBMIT_JOB):   data lsaf_job_params(index=(name));
MPRINT(SUBMIT_JOB):   set lsaf_job_params;
MPRINT(SUBMIT_JOB):   by name;
MPRINT(SUBMIT_JOB):   if (not first.name) or (not last.name) then do;
MPRINT(SUBMIT_JOB):   if last.name then action = "(kept)   ";
MPRINT(SUBMIT_JOB):   else action = "(dropped)";
MPRINT(SUBMIT_JOB):   drop action;
MPRINT(SUBMIT_JOB):   put "Not" "ice:(SUBMIT_JOB): duplicate parameter " name " = " value @+(3) action;
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   if last.name;
MPRINT(SUBMIT_JOB):   run;
NOTE: There were 8 observations read from the data set WORK.LSAF_JOB_PARAMS.
NOTE: The data set WORK.LSAF_JOB_PARAMS has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SUBMIT_JOB):   data _null_;
MPRINT(SUBMIT_JOB):   file print;
MPRINT(SUBMIT_JOB):   set lsaf_job_params(where=(prxmatch('/^(FOLDER|FILE)$/', trim(type))) in=a) lsaf_job_params(where=(prxmatch('/^(FOLDER|FILE)$/', trim(type))=0 and value ^= ' ')) end=last;
MPRINT(SUBMIT_JOB):   if _n_=1 then putlog "=== 2023-02-15T00:55:35 - Submit job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job (with parameters: " @;
MPRINT(SUBMIT_JOB):   _n_a+a;
MPRINT(SUBMIT_JOB):   if _n_-1 = _n_a then do;
MPRINT(SUBMIT_JOB):   putlog / @8 @;
MPRINT(SUBMIT_JOB):   put / @8 @;
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   if a then putlog / @8 name @+(-1) "=" value ' (' type= includeSubFolders= @+(-1) ')   ' @;
MPRINT(SUBMIT_JOB):   else putlog name @+(-1) "=" value "  " @ ;
MPRINT(SUBMIT_JOB):   if last then putlog @+8 ") ===";
MPRINT(SUBMIT_JOB):   if _n_=1 then put "=== 2023-02-15T00:55:35 - Submit job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job (with parameters: " @;
MPRINT(SUBMIT_JOB):   if a then put / @8 name @+(-1) "=" value ' (' type= includeSubFolders= @+(-1) ')   ' @;
MPRINT(SUBMIT_JOB):   else put name @+(-1) "=" value "  " @ ;
MPRINT(SUBMIT_JOB):   if last then put @+8 ") ===";
MPRINT(SUBMIT_JOB):   run;
=== 2023-02-15T00:55:35 - Submit job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job (with parameters: 
       gadam_files_source=/general/biostat/gadam  (type=FOLDER includeSubFolders=1)   
       gadam_path=/clinical/argx-117/dgf/argx-117-0000/biostat/staging/generic_adam  (type=FOLDER includeSubFolders=0)   
       sdtm_last_path=/clinical/argx-117/dgf/argx-117-0000/biostat/staging/data_received/sdtm_last  (type=FOLDER includeSubFolders=0)   
       study_adam_path=   (type=FOLDER includeSubFolders=0)   
       _PARENTJOB_WRK_=/saswork/sas_tmp/SAS_work4CFB0019563E_xar08auv.vsp.sas.com/SAS_work5B910019563E_xar08auv.vsp.sas.com   _PARENTJOB_WS_=
/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15   job_instance=Ngos117Prod_4_x0_4           ) ===
NOTE: 7 lines were written to file PRINT.
NOTE: There were 4 observations read from the data set WORK.LSAF_JOB_PARAMS.
      WHERE PRXMATCH('/^(FOLDER|FILE)$/', TRIM(type));
NOTE: There were 3 observations read from the data set WORK.LSAF_JOB_PARAMS.
      WHERE (PRXMATCH('/^(FOLDER|FILE)$/', TRIM(type))=0) and (value not = ' ');
NOTE: The DATA step printed page 7.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(LSAF_SUBMITJOB):  ;
NOTE: lsaf_submitjob: Validating dataset lsaf_job_params
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   options nonotes;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   proc datasets library=work nolist;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   delete __SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   quit;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   options nonotes;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   data _null_;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   length message $45 libName $8 dsName $300;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   providedDatasetName=kstrip("lsaf_job_params");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsName="INVALID";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsNameIsValid=0;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dotCount=countc(providedDatasetName,".");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dotPosition=kindexc(providedDatasetName,".");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   *put dotPosition=;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (dotPosition=1 or dotPosition=length(providedDatasetName)) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message=" Missing either LIBNAME or data set.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   select (dotCount);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   when (0) dsName=providedDatasetName;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   when (1) do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (dotPosition le 9) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   libName = (ksubstr(providedDatasetName, 1, dotPosition-1));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   *put libName=;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsName = (ksubstr(providedDatasetName, dotPosition+1));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   else do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Libname longer than 8 characters.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   otherwise do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Invalid data set name structure.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   firstchar=ksubstr(kleft(dsName), 1, 1);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (anydigit(firstchar)) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Data set name must start with a character.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (length(dsName) > 32) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Data set name longer than 32 characters.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsNameIsValid=1;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   SETVARS: call symput("_lsafvaliddsn_", strip(put(dsNameIsValid, best.)));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   call symput("dsnMsg", message);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   call symput("specifiedLib", strip(libName));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   run;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   options NONOTES;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   * CHECK EXISTS: Also getting errors for data set name.;
MPRINT(LSAF_VALIDATE_SASDATASET):  ;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):  ;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   proc sort data=lsaf_job_params out=__SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   by name;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   data _null_;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   set __SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   by name;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   if (first.name AND NOT(last.name)) then do;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   call symput("_lsafMsg_", "Input data set has duplicate values for parameter name " || name || ".");
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   STOP;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   end;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   call symput("_lsafRC_", "0");
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   option notes;
MPRINT(LSAF_SUBMITJOB):  ;
MPRINT(LSAF_SUBMITJOB):   option notes;
MPRINT(LSAF_SUBMITJOB):   data _null_;
MPRINT(LSAF_SUBMITJOB):   attrib returnCode length=8 message length=$200 jobSubmissionId length=$525 logMsgPrefix length=$70 logMsgPrimary length=$70 logMsg length=$300 ;
MPRINT(LSAF_SUBMITJOB):   set lsaf_job_params end=eof;
MPRINT(LSAF_SUBMITJOB):   if (_n_ = 1) then do;
MPRINT(LSAF_SUBMITJOB):   declare javaobj params("com/sas/lsaf/macro/execution/job/SasParameterValues");
MPRINT(LSAF_SUBMITJOB):   declare javaobj srv("com/sas/lsaf/macro/execution/jobsubmission/JobSubmissionService");
MPRINT(LSAF_SUBMITJOB):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   params.callVoidMethod("addValue", kstrip(name), kstrip(value), kstrip(type), kstrip(fileVersion), includeSubFolders);
MPRINT(LSAF_SUBMITJOB):   if (eof);
MPRINT(LSAF_SUBMITJOB):   declare javaobj job("com/sas/lsaf/macro/execution/jobsubmission/SasSubmittableJob", "/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job", "", 
params);
MPRINT(LSAF_SUBMITJOB):   srv.callStaticStringMethod("submitRepositoryJob", job, results, jobSubmissionId);
MPRINT(LSAF_SUBMITJOB):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_SUBMITJOB):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_SUBMITJOB):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_SUBMITJOB):   if (returnCode ne 0) then do;
MPRINT(LSAF_SUBMITJOB):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_SUBMITJOB):   logMsg=" Cannot submit job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job";
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   else do;
MPRINT(LSAF_SUBMITJOB):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_SUBMITJOB):   logMsg=" Submitted job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job";
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   put;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " " "lsaf_submitjob";
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(LSAF_SUBMITJOB):   if "lsaf_job_params" = "" then put logMsgPrefix "No job parameters were supplied.";
MPRINT(LSAF_SUBMITJOB):   else put logMsgPrefix "sas_dsname = lsaf_job_params";
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix "_lsafJobSubmissionId_= " jobSubmissionId;
MPRINT(LSAF_SUBMITJOB):   put;
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafJobSubmissionId_", strip(jobSubmissionId));
MPRINT(LSAF_SUBMITJOB):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  Submitted job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_submitjob
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: * sas_dsname = lsaf_job_params
NOTE: SAS Life Science Analytics Framework Macro: * _lsafJobSubmissionId_= c050fb37-da53-4593-98c4-d202bb3e8e32
NOTE: There were 8 observations read from the data set WORK.LSAF_JOB_PARAMS.
NOTE: DATA statement used (Total process time):
      real time           1.36 seconds
      cpu time            0.00 seconds
      

MPRINT(LSAF_SUBMITJOB):   options NONOTES;
MPRINT(SUBMIT_JOB):  ;
MPRINT(SUBMIT_JOB):   *- Job submission succeeded -*;
MPRINT(SUBMIT_JOB):   option nomprint nonotes
Calling %lsaf_getitemid(lsaf_path=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job) ...
_LSAFMSG_=Success.  _LSAFRC_=0  _LSAFITEMID_=090a95d3-6059-474f-a1bd-61c6768ba993
Calling %step_lsaf_getjobsubmissioninfos(job_subm_id=c050fb37-da53-4593-98c4-d202bb3e8e32) ...
Notice: SYSDATASTEPPHASE=EXECUTION IN_DATA_STEP=N
Ignoring record: submissionId=30678109-1661-4a87-858f-1bc1b0d581fa jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job jobVersion=0.1
jobId=abcfa448-6829-4513-8bef-3d8418207d45
Ignoring record: submissionId=c4fb4991-9137-4374-8d55-32ed9002f3d8 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_ongoing_studies.job jobVersion=0.1
jobId=c762f385-9376-49c8-8cec-d19326e7e18e
Ignoring record: submissionId=f00d2b52-d9f1-4ef1-8922-181d934626e0 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_ongoing_studies.job jobVersion=0.1
jobId=c762f385-9376-49c8-8cec-d19326e7e18e
Ignoring record: submissionId=feed1f0f-2d9a-42b9-8060-8fddd1e47337 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job jobVersion=0.1
jobId=abcfa448-6829-4513-8bef-3d8418207d45
Ignoring record: submissionId=771f920f-4235-4216-8e58-d3d5fc4f2ebe jobPath=/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job jobVersion= 
jobId=02b06e4d-7777-4a59-b2f9-2fc165603216
Ignoring record: submissionId=eb533499-a23e-418d-ba5b-36cc6ab2e243 jobPath=/clinical/argx-113/hv/argx-113-1501/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job jobVersion= 
jobId=c76f158e-6ba2-4aef-bfb0-3898a6205960
Notice: _LSAFJOBSUBMISSIONID_=c050fb37-da53-4593-98c4-d202bb3e8e32 SESSIONID=7300bfa7-e9a7-4d3d-bb3b-8e241d625a17 JOB=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job 
JOBID=090a95d3-6059-474f-a1bd-61c6768ba993
(SUBMIT_JOB): 2023-02-15T00:55:37 - Submitted REPOSITORY Job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job          with Submission ID: 
c050fb37-da53-4593-98c4-d202bb3e8e32, Status: STARTED
(SUBMIT_JOB): 00:55:36.68 Elapsed: 00:00:02.12 Job Submission Status: STARTED
(SUBMIT_JOB): 00:55:39.22 Elapsed: 00:00:04.66 Job Submission Status: STARTED
(SUBMIT_JOB): 00:55:41.76 Elapsed: 00:00:07.19 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:55:44.29 Elapsed: 00:00:09.72 Job Submission Status: POST_EXECUTION_PUBLISHING
(SUBMIT_JOB): 00:55:46.82 Elapsed: 00:00:12.26 Job Submission Status: COMPLETED_SUCCESSFUL
(SUBMIT_JOB): 2023-02-15T00:55:49 - Submitted REPOSITORY job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job has completed with status: COMPLETED_SUCCESSFUL
MPRINT(SUBMIT_JOB):  ;
job_gadam_studysetup.job: get job status: 0: Success.:       Elapsed: 00:00:14.76       REPOSITORY Job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job with Submission 
ID: c050fb37-da53-4593-98c4-d202bb3e8e32, Status: COMPLETED_SUCCESSFUL
MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   option NOMPRINT;
%create_generic_adam_path(/clinical/argx-117/dgf/argx-117-2201/biostat/staging/generic_adam, force=N)
MPRINT(CREATE_GENERIC_ADAM_PATH):   notes;
LOCATION_PARAMETERS=/clinical/argx-117/dgf/argx-117-2201
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/dgf/argx-117-2201/biostat/staging/generic_adam", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/dgf/argx-117-2201/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/dgf/argx-117-2201/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/dgf/argx-117-2201/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/dgf/argx-117-2201/biostat/staging/generic_adam
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.00 seconds
      

MPRINT(CREATE_GENERIC_ADAM_PATH):  ;
MPRINT(CREATE_GENERIC_ADAM_PATH):   option NOMPRINT;
%setup_generic_adam(gadam_path=/clinical/argx-117/dgf/argx-117-2201/biostat/staging/generic_adam, sdtm_last_path=/clinical/argx-117/dgf/argx-117-2201/biostat/staging/data_received/sdtm_last, 
study_adam_path=)
MPRINT(SETUP_GENERIC_ADAM):   notes;
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/dgf/argx-117-2201/biostat/staging/generic_adam", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/dgf/argx-117-2201/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/dgf/argx-117-2201/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/dgf/argx-117-2201/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/dgf/argx-117-2201/biostat/staging/generic_adam
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   *-2023-01-13 - jbodart - Perform gadam study setup only if target is not up-to-date -*;
MPRINT(SETUP_GENERIC_ADAM):   *- Use parameter gadam_files_source as &source_path for the template files to be used for study setup -*;
SOURCE_REL_PATH=/general/biostat/gadam SOURCE_PATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/gadam
STUDY=argx-117-2201 studyno=->2201<-
Notice: Checking whether generic_adam reporting event is already setup in /clinical/argx-117/dgf/argx-117-2201/biostat/staging/generic_adam ...
MPRINT(SETUP_GENERIC_ADAM):   data source_files(where=( scan(name, -1, ".") in ("xlsx" "sas" "job") and name ^= 'job_finalchecks.job' ) index=(_idx0_=(dir name)));
MPRINT(STEP_LSAF_GETCHILDREN):   *- Determine LSAF Macro API version -*;
MPRINT(STEP_LSAF_GETCHILDREN):   *- Declare the java items -*;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __srv295 ("com/sas/lsaf/macro/content/repository/RepositoryService") ;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __results295 ("com/sas/lsaf/macro/content/repository/SasRepositoryItemsResult");
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj _i_results295("com/sas/lsaf/macro/common/result/Result");
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   do __lsaf_path = "/general/biostat/gadam/documents" ,"/general/biostat/gadam/metadata/studyprograms" ,"/general/biostat/gadam/metadata/studyjobs" 
,"/general/biostat/gadam/metadata/studymacros";
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize numeric variables with default length (8) -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   rowCount=0;
MPRINT(STEP_LSAF_GETCHILDREN):   *- format numeric datetime variables -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize character variables with appropriate lengths -*;
MPRINT(STEP_LSAF_GETCHILDREN):   message = put(' ', $200.);
MPRINT(STEP_LSAF_GETCHILDREN):   path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   name = put(' ', $256.);
MPRINT(STEP_LSAF_GETCHILDREN):   description = put(' ', $512.);
MPRINT(STEP_LSAF_GETCHILDREN):   version = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   signatureStatus = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   createdBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   created = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   state = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   __createdTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   itemType = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   formattedsize = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   __lastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   *- check if container -*;
MPRINT(STEP_LSAF_GETCHILDREN):   isContainer = 1;
MPRINT(STEP_LSAF_GETCHILDREN):   *- if __lsaf_path is not a container, replace with parent folder path -*;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path ^= ' ' then __srv295.callStaticBooleanMethod("isContainer", trim(__lsaf_path), _i_results295, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   if isContainer = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_file_path = __lsaf_path;
MPRINT(STEP_LSAF_GETCHILDREN):   *- keep the original file path specified -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = resolve('%dirname('||__lsaf_path||')');
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path^='' then do;
MPRINT(STEP_LSAF_GETCHILDREN):   *- call the method -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __srv295.callStaticVoidMethod("getChildren", trim(__lsaf_path), cats(1), __results295);
MPRINT(STEP_LSAF_GETCHILDREN):   *- Retrieve the results -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __results295.callIntMethod("getReturnCode", returnCode);
MPRINT(STEP_LSAF_GETCHILDREN):   __results295.callStringMethod("getReturnMessage", message);
MPRINT(STEP_LSAF_GETCHILDREN):   if (returnCode = -1) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "WARNING:" "(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "NO" "TE-";
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else if (returnCode ^= 0) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "ER" "ROR:(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   __results295.callIntMethod("getSize", rowCount);
MPRINT(STEP_LSAF_GETCHILDREN):   if rowcount = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   message = catx(' ', message, "No observations returned.");
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   do row=0 to rowCount - 1;
MPRINT(STEP_LSAF_GETCHILDREN):   __results295.callStringMethod("getPath", row, path);
MPRINT(STEP_LSAF_GETCHILDREN):   __results295.callStringMethod("getName", row, name);
MPRINT(STEP_LSAF_GETCHILDREN):   __results295.callStringMethod("getDescription", row, description);
MPRINT(STEP_LSAF_GETCHILDREN):   __results295.callStringMethod("getVersion", row, version);
MPRINT(STEP_LSAF_GETCHILDREN):   __results295.callIntMethod("isContainer", row, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   __results295.callIntMethod("isVersioned", row, isVersioned);
MPRINT(STEP_LSAF_GETCHILDREN):   __results295.callIntMethod("isCheckedOut", row, isCheckedOut);
MPRINT(STEP_LSAF_GETCHILDREN):   __results295.callIntMethod("isLocked", row, isLocked);
MPRINT(STEP_LSAF_GETCHILDREN):   __results295.callStringMethod("getSignatureStatus", row, signatureStatus);
MPRINT(STEP_LSAF_GETCHILDREN):   __results295.callLongMethod("getFileSize", row, size);
MPRINT(STEP_LSAF_GETCHILDREN):   __results295.callStringMethod("getFormattedFileSize", row, formattedsize);
MPRINT(STEP_LSAF_GETCHILDREN):   if formattedsize = ' ' then formattedsize = ifc(size<0, " ", cats(size)||" Bytes");
MPRINT(STEP_LSAF_GETCHILDREN):   if size < 0 then size=.;
MPRINT(STEP_LSAF_GETCHILDREN):   __results295.callStringMethod("getItemType", row, itemType);
MPRINT(STEP_LSAF_GETCHILDREN):   __results295.callStringMethod("getLastModified", row, lastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results295.callStringMethod("getLastModifiedSasFormat", row, __lastModifiedTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   __results295.callStringMethod("getCreated", row, created);
MPRINT(STEP_LSAF_GETCHILDREN):   __results295.callStringMethod("getCreatedBy", row, createdBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results295.callStringMethod("getLastModifiedBy", row, lastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results295.callStringMethod("getPropertiesLastModified", row, propertiesLastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results295.callStringMethod("getPropertiesLastModifiedBy", row, propertiesLastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results295.callStringMethod("getPropertiesLastModifiedSasFormat", row, propertiesLastModifiedTempSAS);
MPRINT(STEP_LSAF_GETCHILDREN):   __results295.callStringMethod("getState", row, state);
MPRINT(STEP_LSAF_GETCHILDREN):   __results295.callStringMethod("getCreatedSasFormat", row, __createdTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   dateCreated=input(__createdTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   dateLastModified=input(__lastModifiedTempSas, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   datePropertiesLastModified=input(propertiesLastModifiedTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   pathLevel = countw(path, '/');
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_file_path = ' ' or __lsaf_file_path = path then do;
MPRINT(STEP_LSAF_GETCHILDREN):   dir=put(left(tranwrd(scan(path, -2, "/"), "study", "")), $20.);
MPRINT(STEP_LSAF_GETCHILDREN):  output;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   drop row __lastModifiedTempSAS __lsaf_file_path __createdTempSAS propertiesLastModifiedTempSAS
MPRINT(VARLIST):   itemType isContainer description version isVersioned isCheckedOut isLocked signatureStatus size formattedsize createdBy created dateCreated lastModifiedBy dateLastModified 
propertiesLastModifiedBy propertiesLastModified datePropertiesLastModified state pathLevel __lsaf_path returnCode message rowCount
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   run;
NOTE: The data set WORK.SOURCE_FILES has 60 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           1.47 seconds
      cpu time            0.43 seconds
      

MPRINT(SETUP_GENERIC_ADAM):   data target_files(where=( scan(name, -1, ".") in ("xlsx" "sas" "job") ) index=(_idx0_=(dir name)));
MPRINT(STEP_LSAF_GETCHILDREN):   *- Determine LSAF Macro API version -*;
MPRINT(STEP_LSAF_GETCHILDREN):   *- Declare the java items -*;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __srv301 ("com/sas/lsaf/macro/content/repository/RepositoryService") ;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __results301 ("com/sas/lsaf/macro/content/repository/SasRepositoryItemsResult");
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj _i_results301("com/sas/lsaf/macro/common/result/Result");
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   do __lsaf_path = "/clinical/argx-117/dgf/argx-117-2201/biostat/staging/generic_adam/documents" 
,"/clinical/argx-117/dgf/argx-117-2201/biostat/staging/generic_adam/programs" ,"/clinical/argx-117/dgf/argx-117-2201/biostat/staging/generic_adam/jobs" 
,"/clinical/argx-117/dgf/argx-117-2201/biostat/staging/generic_adam/macros";
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize numeric variables with default length (8) -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   rowCount=0;
MPRINT(STEP_LSAF_GETCHILDREN):   *- format numeric datetime variables -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize character variables with appropriate lengths -*;
MPRINT(STEP_LSAF_GETCHILDREN):   message = put(' ', $200.);
MPRINT(STEP_LSAF_GETCHILDREN):   path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   name = put(' ', $256.);
MPRINT(STEP_LSAF_GETCHILDREN):   description = put(' ', $512.);
MPRINT(STEP_LSAF_GETCHILDREN):   version = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   signatureStatus = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   createdBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   created = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   state = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   __createdTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   itemType = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   formattedsize = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   __lastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   *- check if container -*;
MPRINT(STEP_LSAF_GETCHILDREN):   isContainer = 1;
MPRINT(STEP_LSAF_GETCHILDREN):   *- if __lsaf_path is not a container, replace with parent folder path -*;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path ^= ' ' then __srv301.callStaticBooleanMethod("isContainer", trim(__lsaf_path), _i_results301, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   if isContainer = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_file_path = __lsaf_path;
MPRINT(STEP_LSAF_GETCHILDREN):   *- keep the original file path specified -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = resolve('%dirname('||__lsaf_path||')');
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path^='' then do;
MPRINT(STEP_LSAF_GETCHILDREN):   *- call the method -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __srv301.callStaticVoidMethod("getChildren", trim(__lsaf_path), cats(1), __results301);
MPRINT(STEP_LSAF_GETCHILDREN):   *- Retrieve the results -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __results301.callIntMethod("getReturnCode", returnCode);
MPRINT(STEP_LSAF_GETCHILDREN):   __results301.callStringMethod("getReturnMessage", message);
MPRINT(STEP_LSAF_GETCHILDREN):   if (returnCode = -1) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "NOTE:" "(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "NO" "TE-";
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else if (returnCode ^= 0) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "ER" "ROR:(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   __results301.callIntMethod("getSize", rowCount);
MPRINT(STEP_LSAF_GETCHILDREN):   if rowcount = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   message = catx(' ', message, "No observations returned.");
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   do row=0 to rowCount - 1;
MPRINT(STEP_LSAF_GETCHILDREN):   __results301.callStringMethod("getPath", row, path);
MPRINT(STEP_LSAF_GETCHILDREN):   __results301.callStringMethod("getName", row, name);
MPRINT(STEP_LSAF_GETCHILDREN):   __results301.callStringMethod("getDescription", row, description);
MPRINT(STEP_LSAF_GETCHILDREN):   __results301.callStringMethod("getVersion", row, version);
MPRINT(STEP_LSAF_GETCHILDREN):   __results301.callIntMethod("isContainer", row, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   __results301.callIntMethod("isVersioned", row, isVersioned);
MPRINT(STEP_LSAF_GETCHILDREN):   __results301.callIntMethod("isCheckedOut", row, isCheckedOut);
MPRINT(STEP_LSAF_GETCHILDREN):   __results301.callIntMethod("isLocked", row, isLocked);
MPRINT(STEP_LSAF_GETCHILDREN):   __results301.callStringMethod("getSignatureStatus", row, signatureStatus);
MPRINT(STEP_LSAF_GETCHILDREN):   __results301.callLongMethod("getFileSize", row, size);
MPRINT(STEP_LSAF_GETCHILDREN):   __results301.callStringMethod("getFormattedFileSize", row, formattedsize);
MPRINT(STEP_LSAF_GETCHILDREN):   if formattedsize = ' ' then formattedsize = ifc(size<0, " ", cats(size)||" Bytes");
MPRINT(STEP_LSAF_GETCHILDREN):   if size < 0 then size=.;
MPRINT(STEP_LSAF_GETCHILDREN):   __results301.callStringMethod("getItemType", row, itemType);
MPRINT(STEP_LSAF_GETCHILDREN):   __results301.callStringMethod("getLastModified", row, lastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results301.callStringMethod("getLastModifiedSasFormat", row, __lastModifiedTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   __results301.callStringMethod("getCreated", row, created);
MPRINT(STEP_LSAF_GETCHILDREN):   __results301.callStringMethod("getCreatedBy", row, createdBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results301.callStringMethod("getLastModifiedBy", row, lastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results301.callStringMethod("getPropertiesLastModified", row, propertiesLastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results301.callStringMethod("getPropertiesLastModifiedBy", row, propertiesLastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results301.callStringMethod("getPropertiesLastModifiedSasFormat", row, propertiesLastModifiedTempSAS);
MPRINT(STEP_LSAF_GETCHILDREN):   __results301.callStringMethod("getState", row, state);
MPRINT(STEP_LSAF_GETCHILDREN):   __results301.callStringMethod("getCreatedSasFormat", row, __createdTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   dateCreated=input(__createdTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   dateLastModified=input(__lastModifiedTempSas, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   datePropertiesLastModified=input(propertiesLastModifiedTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   pathLevel = countw(path, '/');
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_file_path = ' ' or __lsaf_file_path = path then do;
MPRINT(STEP_LSAF_GETCHILDREN):   dir=put(scan(path, -2, "/"), $20.);
MPRINT(STEP_LSAF_GETCHILDREN):   name=prxchange("s/^2201/_studyno_/", 1, trim(name));
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   drop row __lastModifiedTempSAS __lsaf_file_path __createdTempSAS propertiesLastModifiedTempSAS
MPRINT(VARLIST):   itemType isContainer description version isVersioned isCheckedOut isLocked signatureStatus size formattedsize createdBy created dateCreated lastModifiedBy dateLastModified 
propertiesLastModifiedBy propertiesLastModified datePropertiesLastModified state pathLevel __lsaf_path returnCode message rowCount
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   run;
NOTE: The data set WORK.TARGET_FILES has 59 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           2.92 seconds
      cpu time            0.40 seconds
      

MPRINT(SETUP_GENERIC_ADAM):   data source_target_files;
MPRINT(SETUP_GENERIC_ADAM):   merge source_files(in=a drop=path rename=(lastmodified=sourcelastmodified)) target_files(in=b drop=path rename=(lastmodified=targetlastmodified)) end=last ;
MPRINT(SETUP_GENERIC_ADAM):   by dir name;
MPRINT(SETUP_GENERIC_ADAM):   __prx = prxparse('s/((Mon|Tue|Wed|Thu|Fri|Sat|Sun)(\w*day)? )?(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]* (\d\d?) (\d?\d:\d\d:\d\d) GMT (\d{4})/\5\4\7:\6/i');
MPRINT(SETUP_GENERIC_ADAM):   if a then do;
MPRINT(SETUP_GENERIC_ADAM):   sourcemodte = input(prxchange(__prx, 1, sourcelastmodified), anydtdtm.);
MPRINT(SETUP_GENERIC_ADAM):   targetmodte = input(prxchange(__prx, 1, targetlastmodified), anydtdtm.);
MPRINT(SETUP_GENERIC_ADAM):   format sourcemodte targetmodte E8601DT.;
MPRINT(SETUP_GENERIC_ADAM):   need_update = (sourcemodte > targetmodte);
MPRINT(SETUP_GENERIC_ADAM):   tot_need_update=+need_update;
MPRINT(SETUP_GENERIC_ADAM):   tot_files=+a;
MPRINT(SETUP_GENERIC_ADAM):   output;
MPRINT(SETUP_GENERIC_ADAM):   end;
MPRINT(SETUP_GENERIC_ADAM):   if last then do;
MPRINT(SETUP_GENERIC_ADAM):   put "Target files needing update: " tot_need_update " out of " tot_files;
MPRINT(SETUP_GENERIC_ADAM):   call symputx("tot_need_update", tot_need_update);
MPRINT(SETUP_GENERIC_ADAM):   end;
MPRINT(SETUP_GENERIC_ADAM):   run;
NOTE: Invalid argument to function INPUT at line 0 column 119.
a=1 b=0 last=0 name=job_gnarrv2-orig.job sourcelastmodified=Tue Feb 14 08:25:35 GMT 2023 dir=jobs targetlastmodified=  FIRST.dir=0 LAST.dir=0 FIRST.name=1 LAST.name=1 __prx=1
sourcemodte=2023-02-14T08:25:35 targetmodte=. need_update=1 tot_need_update=1 tot_files=1 _ERROR_=1 _N_=18
Target files needing update: 1  out of 1
NOTE: Mathematical operations could not be performed at the following places. The results of the operations have been set to missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      1 at 0:119   
NOTE: There were 60 observations read from the data set WORK.SOURCE_FILES.
NOTE: There were 59 observations read from the data set WORK.TARGET_FILES.
NOTE: The data set WORK.SOURCE_TARGET_FILES has 60 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      
  Create generic_adam_path=/clinical/argx-117/dgf/argx-117-0000/biostat/staging/generic_adam  (force=N): create_result=skip_create_generic_adam_folder - already exists: 0: Success.
  Setup generic_adam_path=/clinical/argx-117/dgf/argx-117-0000/biostat/staging/generic_adam : setup_result=setup_generic_adam: 0: Success.
  /clinical/argx-117/dgf/argx-117-0000/biostat/staging/generic_adam : setup_result=skipped since &setup_gadam_folder = N
  /clinical/argx-117/dgf/argx-117-0000/biostat/staging/generic_adam : adam_rebuild_result=skipped since sdtm pools within/across indication are not yet refreshed at this point  === 
     
Notice: === study=argx-117-2201 match_pool=0 match_stdm_ind_pool=0
  Create generic_adam_path=/clinical/argx-117/dgf/argx-117-2201/biostat/staging/generic_adam  (force=N): create_result=skip_create_generic_adam_folder - already exists: 0: Success.

TOT_NEED_UPDATE=1
Notice: Setting up generic_adam reporting event in /clinical/argx-117/dgf/argx-117-2201/biostat/staging/generic_adam ...
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/dgf/argx-117-2201/biostat/staging/data_received/adam", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/dgf/argx-117-2201/biostat/staging/data_received/adam" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/dgf/argx-117-2201/biostat/staging/data_received/adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/dgf/argx-117-2201/biostat/staging/data_received/adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item does not exist: /clinical/argx-117/dgf/argx-117-2201/biostat/staging/data_received/adam
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 0
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
      

MPRINT(SETUP_GENERIC_ADAM):  ;
Notice:(SETUP_GENERIC_ADAM): study_adam_path not found, set to null: /clinical/argx-117/dgf/argx-117-2201/biostat/staging/data_received/adam
NUM_JOBS_SPAWNED=5
MACROAPIVER=2.6
MPRINT(SUBMIT_JOB):   proc sql noprint;
MPRINT(SUBMIT_JOB):   drop table work.job_Parameters;
NOTE: Table WORK.JOB_PARAMETERS has been dropped.
MPRINT(SUBMIT_JOB):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

DEBUG:(GEN_JOB_ENV): PRX=69
DEBUG:(GEN_JOB_ENV): prxmatch(69, /general/biostat/jobs/gadam_ongoing_studies/dev/jobs/job_gadam_studysetup.job) = 1
DEBUG:(GEN_JOB_ENV): (0) REFPATH=
DEBUG:(GEN_JOB_ENV): (0) REPEVPATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (0) RELREPEVPATH=/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (0) _SASFILEPATH_=/general/biostat/jobs/gadam_ongoing_studies/prod/programs/lsaf_get_last_sdtm.sas
DEBUG:(GEN_JOB_ENV): (0) PROGPATH=/general/biostat/jobs/gadam_ongoing_studies/prod/programs/
DEBUG:(GEN_JOB_ENV): (0) PATH=/general/biostat/jobs/gadam_ongoing_studies/dev/jobs/job_gadam_studysetup.job
Setting refpath = &repevpath
DEBUG:(GEN_JOB_ENV): (1) REFPATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (2) REFENV=prod
DEBUG:(GEN_JOB_ENV): (3) REFENV=prod
DEBUG:(F_LSAF_EXISTS) - 2023-02-15T00:55:54 - Iteration: 1: slept = 0, exists = 1
DEBUG:(F_LSAF_EXISTS) - 2023-02-15T00:55:54 - Iteration: 1: slept = 0, exists = 1
DEBUG:(F_LSAF_EXISTS) - 2023-02-15T00:55:54 - Iteration: 1: slept = 0, exists = 1
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(SUBMIT_JOB):  ;
Notice:(SUBMIT_JOB): LSAF Job Path exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job.
MPRINT(SUBMIT_JOB):   proc format;
MPRINT(SUBMIT_JOB):   value $jobabbr "job_gadam_ongoing_studies.job"= "gos" "job_studies_status.job"= "ss" "job_gadam_sdtm_key_core_vars.job"= "gskcv" "job_unzip_sdtm_sources.job"= "uss" 
"job_zip_extract_files.job"= "zef" "job_lsaf_get_last_sdtm.job"= "lgls" "setup_reporting_event_folder.job"= "sref" "job_gadam_refresh_sdtm_last.job"= "grsl" "job_gadam_update_refresh_info.job"= 
"guri" "convert_definetosas.job"= "cdts" "job_gadam_studysetup.job"= "gss" "job_gadam_rebuild_adam.job"= "gra" "job_adAAA" - "job_adzzz"= "adx" "job_qcstudyadams.job"= "qcsa" 
"job_qc_gadam_vs_study.job"= "qcgvs" "job_qc_gadam_vs_study-overview.job"= "qcgvso" "job_check_and_load.job"= "cal" "job_tAAA" - "job_tzzz"= "txx" "job_gadam_qc_overviews.job"= "gqco" 
"job_make_sdtm_pool_jobs.job"= "mspj" "job_lsaf_pool_last_sdtm.job"= "lpls" "sdtm_pool-AAA" - "sdtm_pool-zzz"= "pci" "job_gadam_refresh_sdtm_overview.job"= "grso" "getdata.job"= "gd" OTHER = "***" ;
NOTE: Format $JOBABBR is already on the library WORK.FORMATS.
NOTE: Format $JOBABBR has been output.
MPRINT(SUBMIT_JOB):   run;
NOTE: PROCEDURE FORMAT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SUBMIT_JOB):   quit;
job_instance=>Ngos117Prod_4_x0_5<
MPRINT(LSAF_GETJOBPARAMETERS):  ;
MPRINT(LSAF_GETJOBPARAMETERS):   data work.job_Parameters (label="Created by LSAF_GETJOBPARAMETERS" KEEP=jobPath jobVersion name label type defaultValue fileVersion includeSubFolders );
MPRINT(LSAF_GETJOBPARAMETERS):   attrib returnCode length=8 message length=$200 logMsgPrefix length=$70 logMsgPrimary length=$70 logMsg length=$300 rowCount length=8 jobPath length=$2048 label="Job 
Path" jobVersion length=$32 label="Job Version" name length=$256 label="Parameter Name" label length=$256 label="Parameter Label" type length=$32 label="Parameter Type" defaultValue length=$2048 
label="Parameter Default Value" fileVersion length=$32 label="File Version if File Type" includeSubFolders length=8 label="Include Container SubFolders" includesSubFolders length=$5 label="FOR 
INTERNAL PROCESSING ONLY.  WILL BE DROPPED." ;
MPRINT(LSAF_GETJOBPARAMETERS):   rowCount=0;
MPRINT(LSAF_GETJOBPARAMETERS):   declare javaobj srv("com/sas/lsaf/macro/execution/job/JobService") ;
MPRINT(LSAF_GETJOBPARAMETERS):   declare javaobj results("com/sas/lsaf/macro/execution/job/SasJobParametersResult");
MPRINT(LSAF_GETJOBPARAMETERS):   srv.callStaticVoidMethod("getRepositoryJobParameters", "/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job", "", results) ;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_GETJOBPARAMETERS):   if (returnCode ne 0) then do;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_GETJOBPARAMETERS):   if "" NE "" then logMsg=" Cannot retrieve parameters for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job, version " ;
MPRINT(LSAF_GETJOBPARAMETERS):   else logMsg=" Cannot retrieve parameters for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   else do;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsg=" Parameters were returned for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getJobPath", jobPath);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getJobVersion", jobVersion);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callIntMethod("getSize", rowCount);
MPRINT(LSAF_GETJOBPARAMETERS):   do row=0 to rowCount - 1;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getName", row, name);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getLabel", row, label);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getType", row, type);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getDefaultValue", row, defaultValue);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getFileVersion", row, fileVersion);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getContainerIncludeSubfolders", row, includesSubFolders);
MPRINT(LSAF_GETJOBPARAMETERS):   includeSubFolders=input(includesSubFolders,best.);
MPRINT(LSAF_GETJOBPARAMETERS):   output;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   put;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " " "lsaf_getjobparameters";
MPRINT(LSAF_GETJOBPARAMETERS):   if (rowCount=0) then put logMsgPrefix " No parameters were found.";
MPRINT(LSAF_GETJOBPARAMETERS):   else put logMsgPrefix " " rowCount " records written to data set work.job_Parameters";
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(LSAF_GETJOBPARAMETERS):   put;
MPRINT(LSAF_GETJOBPARAMETERS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_GETJOBPARAMETERS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_GETJOBPARAMETERS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  Parameters were returned for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_getjobparameters
NOTE: SAS Life Science Analytics Framework Macro: *  8  records written to data set work.job_Parameters
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: The data set WORK.JOB_PARAMETERS has 8 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
      

MPRINT(SUBMIT_JOB):  ;
NOTE: The dataset WORK.JOB_PARAMETERS has 8 observations and 8 variables.
MPRINT(SUBMIT_JOB):   ;
MPRINT(SUBMIT_JOB):   *- dataset to specify job parameters (from macro parameters values) -*;
MPRINT(SUBMIT_JOB):   data lsaf_job_params(index=(name));
MPRINT(SUBMIT_JOB):   set work.job_Parameters(rename=(defaultValue = value));
MPRINT(SUBMIT_JOB):   if upcase(name) = "_PARENTJOB_WS_" then do;
MPRINT(SUBMIT_JOB):   if symexist("_SASWS_") and type = "CHARACTER" then value = symget("_SASWS_");
MPRINT(SUBMIT_JOB):   else value = " ";
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   else if upcase(name) = "_PARENTJOB_WRK_" then do;
MPRINT(SUBMIT_JOB):   value = pathname("WORK", "L");
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   else if symexist(name) then do;
MPRINT(SUBMIT_JOB):   if symget(name) ^= ' ' then value = symget(name);
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   new_value = translate(value, ' ', ',;()"''&%');
MPRINT(SUBMIT_JOB):   if new_value ne value then put "NOTE:(SUBMIT_JOB): Special characters may be removed from parameter value:" / @2 "parameter: " name /@2 "old value: " value /@2 "new value: " 
new_value;
MPRINT(SUBMIT_JOB):   if _n_=1 then put "Not" "ice:(SUBMIT_JOB): Updated Job parameters:";
MPRINT(SUBMIT_JOB):   if type = "FOLDER" then put " - " name @+(-1) "=" value "[" type= @+(-1) ", " includeSubFolders= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   else if TYPE = "FILE" then put " - " name @+(-1) "=" value "[" type= @+(-1) ", " fileversion= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   else put " - " name @+(-1) "=" value "[" type= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   run;
Notice:(SUBMIT_JOB): Updated Job parameters:
 - gadam_path=/clinical/argx-117/dgf/argx-117-2201/biostat/staging/generic_adam [type=FOLDER, includeSubFolders=0]
 - sdtm_last_path=/clinical/argx-117/dgf/argx-117-2201/biostat/staging/data_received/sdtm_last [type=FOLDER, includeSubFolders=0]
 - study_adam_path=  [type=FOLDER, includeSubFolders=0]
 - gadam_files_source=/general/biostat/gadam [type=FOLDER, includeSubFolders=1]
 - job_instance=Ngos117Prod_4_x0_5 [type=CHARACTER]
 - _PARENTJOB_WS_=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15 [type=CHARACTER]
 - _PARENTJOB_WRK_=/saswork/sas_tmp/SAS_work4CFB0019563E_xar08auv.vsp.sas.com/SAS_work5B910019563E_xar08auv.vsp.sas.com [type=CHARACTER]
 - USE_SAS_WORKSPACE_MACROS=  [type=CHARACTER]
NOTE: There were 8 observations read from the data set WORK.JOB_PARAMETERS.
NOTE: The data set WORK.LSAF_JOB_PARAMS has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

N_PARAMS=8
MPRINT(SUBMIT_JOB):   data lsaf_job_params(index=(name));
MPRINT(SUBMIT_JOB):   set lsaf_job_params;
MPRINT(SUBMIT_JOB):   by name;
MPRINT(SUBMIT_JOB):   if (not first.name) or (not last.name) then do;
MPRINT(SUBMIT_JOB):   if last.name then action = "(kept)   ";
MPRINT(SUBMIT_JOB):   else action = "(dropped)";
MPRINT(SUBMIT_JOB):   drop action;
MPRINT(SUBMIT_JOB):   put "Not" "ice:(SUBMIT_JOB): duplicate parameter " name " = " value @+(3) action;
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   if last.name;
MPRINT(SUBMIT_JOB):   run;
NOTE: There were 8 observations read from the data set WORK.LSAF_JOB_PARAMS.
NOTE: The data set WORK.LSAF_JOB_PARAMS has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SUBMIT_JOB):   data _null_;
MPRINT(SUBMIT_JOB):   file print;
MPRINT(SUBMIT_JOB):   set lsaf_job_params(where=(prxmatch('/^(FOLDER|FILE)$/', trim(type))) in=a) lsaf_job_params(where=(prxmatch('/^(FOLDER|FILE)$/', trim(type))=0 and value ^= ' ')) end=last;
MPRINT(SUBMIT_JOB):   if _n_=1 then putlog "=== 2023-02-15T00:55:54 - Submit job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job (with parameters: " @;
MPRINT(SUBMIT_JOB):   _n_a+a;
MPRINT(SUBMIT_JOB):   if _n_-1 = _n_a then do;
MPRINT(SUBMIT_JOB):   putlog / @8 @;
MPRINT(SUBMIT_JOB):   put / @8 @;
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   if a then putlog / @8 name @+(-1) "=" value ' (' type= includeSubFolders= @+(-1) ')   ' @;
MPRINT(SUBMIT_JOB):   else putlog name @+(-1) "=" value "  " @ ;
MPRINT(SUBMIT_JOB):   if last then putlog @+8 ") ===";
MPRINT(SUBMIT_JOB):   if _n_=1 then put "=== 2023-02-15T00:55:54 - Submit job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job (with parameters: " @;
MPRINT(SUBMIT_JOB):   if a then put / @8 name @+(-1) "=" value ' (' type= includeSubFolders= @+(-1) ')   ' @;
MPRINT(SUBMIT_JOB):   else put name @+(-1) "=" value "  " @ ;
MPRINT(SUBMIT_JOB):   if last then put @+8 ") ===";
MPRINT(SUBMIT_JOB):   run;
=== 2023-02-15T00:55:54 - Submit job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job (with parameters: 
       gadam_files_source=/general/biostat/gadam  (type=FOLDER includeSubFolders=1)   
       gadam_path=/clinical/argx-117/dgf/argx-117-2201/biostat/staging/generic_adam  (type=FOLDER includeSubFolders=0)   
       sdtm_last_path=/clinical/argx-117/dgf/argx-117-2201/biostat/staging/data_received/sdtm_last  (type=FOLDER includeSubFolders=0)   
       study_adam_path=   (type=FOLDER includeSubFolders=0)   
       _PARENTJOB_WRK_=/saswork/sas_tmp/SAS_work4CFB0019563E_xar08auv.vsp.sas.com/SAS_work5B910019563E_xar08auv.vsp.sas.com   _PARENTJOB_WS_=
/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15   job_instance=Ngos117Prod_4_x0_5           ) ===
NOTE: 7 lines were written to file PRINT.
NOTE: There were 4 observations read from the data set WORK.LSAF_JOB_PARAMS.
      WHERE PRXMATCH('/^(FOLDER|FILE)$/', TRIM(type));
NOTE: There were 3 observations read from the data set WORK.LSAF_JOB_PARAMS.
      WHERE (PRXMATCH('/^(FOLDER|FILE)$/', TRIM(type))=0) and (value not = ' ');
NOTE: The DATA step printed page 9.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(LSAF_SUBMITJOB):  ;
NOTE: lsaf_submitjob: Validating dataset lsaf_job_params
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   options nonotes;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   proc datasets library=work nolist;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   delete __SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   quit;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   options nonotes;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   data _null_;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   length message $45 libName $8 dsName $300;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   providedDatasetName=kstrip("lsaf_job_params");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsName="INVALID";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsNameIsValid=0;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dotCount=countc(providedDatasetName,".");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dotPosition=kindexc(providedDatasetName,".");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   *put dotPosition=;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (dotPosition=1 or dotPosition=length(providedDatasetName)) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message=" Missing either LIBNAME or data set.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   select (dotCount);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   when (0) dsName=providedDatasetName;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   when (1) do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (dotPosition le 9) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   libName = (ksubstr(providedDatasetName, 1, dotPosition-1));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   *put libName=;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsName = (ksubstr(providedDatasetName, dotPosition+1));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   else do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Libname longer than 8 characters.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   otherwise do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Invalid data set name structure.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   firstchar=ksubstr(kleft(dsName), 1, 1);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (anydigit(firstchar)) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Data set name must start with a character.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (length(dsName) > 32) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Data set name longer than 32 characters.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsNameIsValid=1;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   SETVARS: call symput("_lsafvaliddsn_", strip(put(dsNameIsValid, best.)));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   call symput("dsnMsg", message);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   call symput("specifiedLib", strip(libName));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   run;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   options NONOTES;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   * CHECK EXISTS: Also getting errors for data set name.;
MPRINT(LSAF_VALIDATE_SASDATASET):  ;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):  ;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   proc sort data=lsaf_job_params out=__SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   by name;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   data _null_;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   set __SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   by name;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   if (first.name AND NOT(last.name)) then do;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   call symput("_lsafMsg_", "Input data set has duplicate values for parameter name " || name || ".");
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   STOP;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   end;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   call symput("_lsafRC_", "0");
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   option notes;
MPRINT(LSAF_SUBMITJOB):  ;
MPRINT(LSAF_SUBMITJOB):   option notes;
MPRINT(LSAF_SUBMITJOB):   data _null_;
MPRINT(LSAF_SUBMITJOB):   attrib returnCode length=8 message length=$200 jobSubmissionId length=$525 logMsgPrefix length=$70 logMsgPrimary length=$70 logMsg length=$300 ;
MPRINT(LSAF_SUBMITJOB):   set lsaf_job_params end=eof;
MPRINT(LSAF_SUBMITJOB):   if (_n_ = 1) then do;
MPRINT(LSAF_SUBMITJOB):   declare javaobj params("com/sas/lsaf/macro/execution/job/SasParameterValues");
MPRINT(LSAF_SUBMITJOB):   declare javaobj srv("com/sas/lsaf/macro/execution/jobsubmission/JobSubmissionService");
MPRINT(LSAF_SUBMITJOB):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   params.callVoidMethod("addValue", kstrip(name), kstrip(value), kstrip(type), kstrip(fileVersion), includeSubFolders);
MPRINT(LSAF_SUBMITJOB):   if (eof);
MPRINT(LSAF_SUBMITJOB):   declare javaobj job("com/sas/lsaf/macro/execution/jobsubmission/SasSubmittableJob", "/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job", "", 
params);
MPRINT(LSAF_SUBMITJOB):   srv.callStaticStringMethod("submitRepositoryJob", job, results, jobSubmissionId);
MPRINT(LSAF_SUBMITJOB):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_SUBMITJOB):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_SUBMITJOB):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_SUBMITJOB):   if (returnCode ne 0) then do;
MPRINT(LSAF_SUBMITJOB):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_SUBMITJOB):   logMsg=" Cannot submit job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job";
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   else do;
MPRINT(LSAF_SUBMITJOB):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_SUBMITJOB):   logMsg=" Submitted job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job";
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   put;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " " "lsaf_submitjob";
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(LSAF_SUBMITJOB):   if "lsaf_job_params" = "" then put logMsgPrefix "No job parameters were supplied.";
MPRINT(LSAF_SUBMITJOB):   else put logMsgPrefix "sas_dsname = lsaf_job_params";
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix "_lsafJobSubmissionId_= " jobSubmissionId;
MPRINT(LSAF_SUBMITJOB):   put;
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafJobSubmissionId_", strip(jobSubmissionId));
MPRINT(LSAF_SUBMITJOB):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  Submitted job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_submitjob
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: * sas_dsname = lsaf_job_params
NOTE: SAS Life Science Analytics Framework Macro: * _lsafJobSubmissionId_= c24eb7ea-64ac-4979-82c3-b8712ef9f04f
NOTE: There were 8 observations read from the data set WORK.LSAF_JOB_PARAMS.
NOTE: DATA statement used (Total process time):
      real time           1.47 seconds
      cpu time            0.01 seconds
      

MPRINT(LSAF_SUBMITJOB):   options NONOTES;
MPRINT(SUBMIT_JOB):  ;
MPRINT(SUBMIT_JOB):   *- Job submission succeeded -*;
MPRINT(SUBMIT_JOB):   option nomprint nonotes
Calling %lsaf_getitemid(lsaf_path=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job) ...
_LSAFMSG_=Success.  _LSAFRC_=0  _LSAFITEMID_=090a95d3-6059-474f-a1bd-61c6768ba993
Calling %step_lsaf_getjobsubmissioninfos(job_subm_id=c24eb7ea-64ac-4979-82c3-b8712ef9f04f) ...
Notice: SYSDATASTEPPHASE=EXECUTION IN_DATA_STEP=N
Ignoring record: submissionId=30678109-1661-4a87-858f-1bc1b0d581fa jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job jobVersion=0.1
jobId=abcfa448-6829-4513-8bef-3d8418207d45
Ignoring record: submissionId=c4fb4991-9137-4374-8d55-32ed9002f3d8 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_ongoing_studies.job jobVersion=0.1
jobId=c762f385-9376-49c8-8cec-d19326e7e18e
Ignoring record: submissionId=f00d2b52-d9f1-4ef1-8922-181d934626e0 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_ongoing_studies.job jobVersion=0.1
jobId=c762f385-9376-49c8-8cec-d19326e7e18e
Ignoring record: submissionId=feed1f0f-2d9a-42b9-8060-8fddd1e47337 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job jobVersion=0.1
jobId=abcfa448-6829-4513-8bef-3d8418207d45
Ignoring record: submissionId=6146180f-0c7a-4e5c-9887-8f61a330ee33 jobPath=/clinical/argx-113/hv/argx-113-1501/biostat/staging/generic_adam/jobs/job_check_and_load.job jobVersion= 
jobId=c35fd8ef-7c33-4feb-bd89-145c1d19b5da
Ignoring record: submissionId=771f920f-4235-4216-8e58-d3d5fc4f2ebe jobPath=/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job jobVersion= 
jobId=02b06e4d-7777-4a59-b2f9-2fc165603216
Ignoring record: submissionId=eb533499-a23e-418d-ba5b-36cc6ab2e243 jobPath=/clinical/argx-113/hv/argx-113-1501/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job jobVersion= 
jobId=c76f158e-6ba2-4aef-bfb0-3898a6205960
Notice: _LSAFJOBSUBMISSIONID_=c24eb7ea-64ac-4979-82c3-b8712ef9f04f SESSIONID=75b83f52-dc63-4eae-b3d9-e213d2969f96 JOB=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job 
JOBID=090a95d3-6059-474f-a1bd-61c6768ba993
(SUBMIT_JOB): 2023-02-15T00:55:56 - Submitted REPOSITORY Job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job          with Submission ID: 
c24eb7ea-64ac-4979-82c3-b8712ef9f04f, Status: STARTED
(SUBMIT_JOB): 00:55:56.45 Elapsed: 00:00:02.47 Job Submission Status: STARTED
(SUBMIT_JOB): 00:55:58.98 Elapsed: 00:00:05.01 Job Submission Status: STARTED
(SUBMIT_JOB): 00:56:01.52 Elapsed: 00:00:07.54 Job Submission Status: STARTED
(SUBMIT_JOB): 00:56:04.05 Elapsed: 00:00:10.08 Job Submission Status: STARTED
(SUBMIT_JOB): 00:56:06.59 Elapsed: 00:00:12.61 Job Submission Status: STARTED
(SUBMIT_JOB): 00:56:09.12 Elapsed: 00:00:15.14 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:56:11.65 Elapsed: 00:00:17.68 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:56:14.20 Elapsed: 00:00:20.22 Job Submission Status: POST_EXECUTION_PUBLISHING
(SUBMIT_JOB): 00:56:16.73 Elapsed: 00:00:22.76 Job Submission Status: COMPLETED_SUCCESSFUL
(SUBMIT_JOB): 2023-02-15T00:56:19 - Submitted REPOSITORY job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job has completed with status: COMPLETED_SUCCESSFUL
MPRINT(SUBMIT_JOB):  ;
job_gadam_studysetup.job: get job status: 0: Success.:       Elapsed: 00:00:25.26       REPOSITORY Job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job with Submission 
ID: c24eb7ea-64ac-4979-82c3-b8712ef9f04f, Status: COMPLETED_SUCCESSFUL
MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   option NOMPRINT;
%rebuild_generic_adam(gadam_study_path=/clinical/argx-117/dgf/argx-117-2201/biostat/staging/generic_adam, sdtm_last_path=/clinical/argx-117/dgf/argx-117-2201/biostat/staging/data_received/sdtm_last)
MPRINT(REBUILD_GENERIC_ADAM):   notes;
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/dgf/argx-117-2201/biostat/staging/generic_adam", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/dgf/argx-117-2201/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/dgf/argx-117-2201/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/dgf/argx-117-2201/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/dgf/argx-117-2201/biostat/staging/generic_adam
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      

MPRINT(REBUILD_GENERIC_ADAM):  ;
Notice: Rebuilding adam datasets in generic_adam reporting event in /clinical/argx-117/dgf/argx-117-2201/biostat/staging/generic_adam ...
NUM_JOBS_SPAWNED=6
MACROAPIVER=2.6
MPRINT(SUBMIT_JOB):   proc sql noprint;
MPRINT(SUBMIT_JOB):   drop table work.job_Parameters;
NOTE: Table WORK.JOB_PARAMETERS has been dropped.
MPRINT(SUBMIT_JOB):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

DEBUG:(GEN_JOB_ENV): PRX=76
DEBUG:(GEN_JOB_ENV): prxmatch(76, /general/biostat/jobs/gadam_rebuild_adam/dev/jobs/job_gadam_rebuild_adam.job) = 1
DEBUG:(GEN_JOB_ENV): (0) REFPATH=
DEBUG:(GEN_JOB_ENV): (0) REPEVPATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (0) RELREPEVPATH=/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (0) _SASFILEPATH_=/general/biostat/jobs/gadam_ongoing_studies/prod/programs/lsaf_get_last_sdtm.sas
DEBUG:(GEN_JOB_ENV): (0) PROGPATH=/general/biostat/jobs/gadam_ongoing_studies/prod/programs/
DEBUG:(GEN_JOB_ENV): (0) PATH=/general/biostat/jobs/gadam_rebuild_adam/dev/jobs/job_gadam_rebuild_adam.job
Setting refpath = &repevpath
DEBUG:(GEN_JOB_ENV): (1) REFPATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (2) REFENV=prod
DEBUG:(GEN_JOB_ENV): (3) REFENV=prod
DEBUG:(F_LSAF_EXISTS) - 2023-02-15T00:56:19 - Iteration: 1: slept = 0, exists = 1
DEBUG:(F_LSAF_EXISTS) - 2023-02-15T00:56:19 - Iteration: 1: slept = 0, exists = 1
DEBUG:(F_LSAF_EXISTS) - 2023-02-15T00:56:20 - Iteration: 1: slept = 0, exists = 1
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(SUBMIT_JOB):  ;
Notice:(SUBMIT_JOB): LSAF Job Path exists: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job.
MPRINT(SUBMIT_JOB):   proc format;
MPRINT(SUBMIT_JOB):   value $jobabbr "job_gadam_ongoing_studies.job"= "gos" "job_studies_status.job"= "ss" "job_gadam_sdtm_key_core_vars.job"= "gskcv" "job_unzip_sdtm_sources.job"= "uss" 
"job_zip_extract_files.job"= "zef" "job_lsaf_get_last_sdtm.job"= "lgls" "setup_reporting_event_folder.job"= "sref" "job_gadam_refresh_sdtm_last.job"= "grsl" "job_gadam_update_refresh_info.job"= 
"guri" "convert_definetosas.job"= "cdts" "job_gadam_studysetup.job"= "gss" "job_gadam_rebuild_adam.job"= "gra" "job_adAAA" - "job_adzzz"= "adx" "job_qcstudyadams.job"= "qcsa" 
"job_qc_gadam_vs_study.job"= "qcgvs" "job_qc_gadam_vs_study-overview.job"= "qcgvso" "job_check_and_load.job"= "cal" "job_tAAA" - "job_tzzz"= "txx" "job_gadam_qc_overviews.job"= "gqco" 
"job_make_sdtm_pool_jobs.job"= "mspj" "job_lsaf_pool_last_sdtm.job"= "lpls" "sdtm_pool-AAA" - "sdtm_pool-zzz"= "pci" "job_gadam_refresh_sdtm_overview.job"= "grso" "getdata.job"= "gd" OTHER = "***" ;
NOTE: Format $JOBABBR is already on the library WORK.FORMATS.
NOTE: Format $JOBABBR has been output.
MPRINT(SUBMIT_JOB):   run;
NOTE: PROCEDURE FORMAT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SUBMIT_JOB):   quit;
job_instance=>Ngos117Prod_4_x0_6<
MPRINT(LSAF_GETJOBPARAMETERS):  ;
MPRINT(LSAF_GETJOBPARAMETERS):   data work.job_Parameters (label="Created by LSAF_GETJOBPARAMETERS" KEEP=jobPath jobVersion name label type defaultValue fileVersion includeSubFolders );
MPRINT(LSAF_GETJOBPARAMETERS):   attrib returnCode length=8 message length=$200 logMsgPrefix length=$70 logMsgPrimary length=$70 logMsg length=$300 rowCount length=8 jobPath length=$2048 label="Job 
Path" jobVersion length=$32 label="Job Version" name length=$256 label="Parameter Name" label length=$256 label="Parameter Label" type length=$32 label="Parameter Type" defaultValue length=$2048 
label="Parameter Default Value" fileVersion length=$32 label="File Version if File Type" includeSubFolders length=8 label="Include Container SubFolders" includesSubFolders length=$5 label="FOR 
INTERNAL PROCESSING ONLY.  WILL BE DROPPED." ;
MPRINT(LSAF_GETJOBPARAMETERS):   rowCount=0;
MPRINT(LSAF_GETJOBPARAMETERS):   declare javaobj srv("com/sas/lsaf/macro/execution/job/JobService") ;
MPRINT(LSAF_GETJOBPARAMETERS):   declare javaobj results("com/sas/lsaf/macro/execution/job/SasJobParametersResult");
MPRINT(LSAF_GETJOBPARAMETERS):   srv.callStaticVoidMethod("getRepositoryJobParameters", "/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job", "", results) ;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_GETJOBPARAMETERS):   if (returnCode ne 0) then do;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_GETJOBPARAMETERS):   if "" NE "" then logMsg=" Cannot retrieve parameters for job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job, version " ;
MPRINT(LSAF_GETJOBPARAMETERS):   else logMsg=" Cannot retrieve parameters for job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job" ;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   else do;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsg=" Parameters were returned for job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job" ;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getJobPath", jobPath);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getJobVersion", jobVersion);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callIntMethod("getSize", rowCount);
MPRINT(LSAF_GETJOBPARAMETERS):   do row=0 to rowCount - 1;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getName", row, name);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getLabel", row, label);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getType", row, type);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getDefaultValue", row, defaultValue);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getFileVersion", row, fileVersion);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getContainerIncludeSubfolders", row, includesSubFolders);
MPRINT(LSAF_GETJOBPARAMETERS):   includeSubFolders=input(includesSubFolders,best.);
MPRINT(LSAF_GETJOBPARAMETERS):   output;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   put;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " " "lsaf_getjobparameters";
MPRINT(LSAF_GETJOBPARAMETERS):   if (rowCount=0) then put logMsgPrefix " No parameters were found.";
MPRINT(LSAF_GETJOBPARAMETERS):   else put logMsgPrefix " " rowCount " records written to data set work.job_Parameters";
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(LSAF_GETJOBPARAMETERS):   put;
MPRINT(LSAF_GETJOBPARAMETERS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_GETJOBPARAMETERS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_GETJOBPARAMETERS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  Parameters were returned for job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_getjobparameters
NOTE: SAS Life Science Analytics Framework Macro: *  12  records written to data set work.job_Parameters
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: The data set WORK.JOB_PARAMETERS has 12 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
      

MPRINT(SUBMIT_JOB):  ;
NOTE: The dataset WORK.JOB_PARAMETERS has 12 observations and 8 variables.
MPRINT(SUBMIT_JOB):   ;
MPRINT(SUBMIT_JOB):   *- dataset to specify job parameters (from macro parameters values) -*;
MPRINT(SUBMIT_JOB):   data lsaf_job_params(index=(name));
MPRINT(SUBMIT_JOB):   set work.job_Parameters(rename=(defaultValue = value));
MPRINT(SUBMIT_JOB):   if upcase(name) = "_PARENTJOB_WS_" then do;
MPRINT(SUBMIT_JOB):   if symexist("_SASWS_") and type = "CHARACTER" then value = symget("_SASWS_");
MPRINT(SUBMIT_JOB):   else value = " ";
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   else if upcase(name) = "_PARENTJOB_WRK_" then do;
MPRINT(SUBMIT_JOB):   value = pathname("WORK", "L");
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   else if symexist(name) then do;
MPRINT(SUBMIT_JOB):   if symget(name) ^= ' ' then value = symget(name);
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   new_value = translate(value, ' ', ',;()"''&%');
MPRINT(SUBMIT_JOB):   if new_value ne value then put "NOTE:(SUBMIT_JOB): Special characters may be removed from parameter value:" / @2 "parameter: " name /@2 "old value: " value /@2 "new value: " 
new_value;
MPRINT(SUBMIT_JOB):   if _n_=1 then put "Not" "ice:(SUBMIT_JOB): Updated Job parameters:";
MPRINT(SUBMIT_JOB):   if type = "FOLDER" then put " - " name @+(-1) "=" value "[" type= @+(-1) ", " includeSubFolders= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   else if TYPE = "FILE" then put " - " name @+(-1) "=" value "[" type= @+(-1) ", " fileversion= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   else put " - " name @+(-1) "=" value "[" type= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   run;
Notice:(SUBMIT_JOB): Updated Job parameters:
 - gadam_study_path=/clinical/argx-117/dgf/argx-117-2201/biostat/staging/generic_adam [type=FOLDER, includeSubFolders=0]
 - sdtm_last_path=/clinical/argx-117/dgf/argx-117-2201/biostat/staging/data_received/sdtm_last [type=FOLDER, includeSubFolders=0]
 - qc_gadam_vs_study=Y [type=CHARACTER]
 - check_and_load_gadam=Y [type=CHARACTER]
 - run_gadam_tables=Y [type=CHARACTER]
 - wait=Y [type=CHARACTER]
 - force=N [type=CHARACTER]
 - mock=N [type=CHARACTER]
 - job_instance=Ngos117Prod_4_x0_6 [type=CHARACTER]
 - _PARENTJOB_WS_=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15 [type=CHARACTER]
 - _PARENTJOB_WRK_=/saswork/sas_tmp/SAS_work4CFB0019563E_xar08auv.vsp.sas.com/SAS_work5B910019563E_xar08auv.vsp.sas.com [type=CHARACTER]
 - USE_SAS_WORKSPACE_MACROS=  [type=CHARACTER]
NOTE: There were 12 observations read from the data set WORK.JOB_PARAMETERS.
NOTE: The data set WORK.LSAF_JOB_PARAMS has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

N_PARAMS=12
MPRINT(SUBMIT_JOB):   data lsaf_job_params(index=(name));
MPRINT(SUBMIT_JOB):   set lsaf_job_params;
MPRINT(SUBMIT_JOB):   by name;
MPRINT(SUBMIT_JOB):   if (not first.name) or (not last.name) then do;
MPRINT(SUBMIT_JOB):   if last.name then action = "(kept)   ";
MPRINT(SUBMIT_JOB):   else action = "(dropped)";
MPRINT(SUBMIT_JOB):   drop action;
MPRINT(SUBMIT_JOB):   put "Not" "ice:(SUBMIT_JOB): duplicate parameter " name " = " value @+(3) action;
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   if last.name;
MPRINT(SUBMIT_JOB):   run;
NOTE: There were 12 observations read from the data set WORK.LSAF_JOB_PARAMS.
NOTE: The data set WORK.LSAF_JOB_PARAMS has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SUBMIT_JOB):   data _null_;
MPRINT(SUBMIT_JOB):   file print;
MPRINT(SUBMIT_JOB):   set lsaf_job_params(where=(prxmatch('/^(FOLDER|FILE)$/', trim(type))) in=a) lsaf_job_params(where=(prxmatch('/^(FOLDER|FILE)$/', trim(type))=0 and value ^= ' ')) end=last;
MPRINT(SUBMIT_JOB):   if _n_=1 then putlog "=== 2023-02-15T00:56:20 - Submit job: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job (with parameters: " @;
MPRINT(SUBMIT_JOB):   _n_a+a;
MPRINT(SUBMIT_JOB):   if _n_-1 = _n_a then do;
MPRINT(SUBMIT_JOB):   putlog / @8 @;
MPRINT(SUBMIT_JOB):   put / @8 @;
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   if a then putlog / @8 name @+(-1) "=" value ' (' type= includeSubFolders= @+(-1) ')   ' @;
MPRINT(SUBMIT_JOB):   else putlog name @+(-1) "=" value "  " @ ;
MPRINT(SUBMIT_JOB):   if last then putlog @+8 ") ===";
MPRINT(SUBMIT_JOB):   if _n_=1 then put "=== 2023-02-15T00:56:20 - Submit job: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job (with parameters: " @;
MPRINT(SUBMIT_JOB):   if a then put / @8 name @+(-1) "=" value ' (' type= includeSubFolders= @+(-1) ')   ' @;
MPRINT(SUBMIT_JOB):   else put name @+(-1) "=" value "  " @ ;
MPRINT(SUBMIT_JOB):   if last then put @+8 ") ===";
MPRINT(SUBMIT_JOB):   run;
=== 2023-02-15T00:56:20 - Submit job: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job (with parameters: 
       gadam_study_path=/clinical/argx-117/dgf/argx-117-2201/biostat/staging/generic_adam  (type=FOLDER includeSubFolders=0)   
       sdtm_last_path=/clinical/argx-117/dgf/argx-117-2201/biostat/staging/data_received/sdtm_last  (type=FOLDER includeSubFolders=0)   
       _PARENTJOB_WRK_=/saswork/sas_tmp/SAS_work4CFB0019563E_xar08auv.vsp.sas.com/SAS_work5B910019563E_xar08auv.vsp.sas.com   _PARENTJOB_WS_=
/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15   check_and_load_gadam=Y   force=N   job_instance=Ngos117Prod_4_x0_6   mock=N   qc_gadam_vs_study=Y
  run_gadam_tables=Y   wait=Y           ) ===
NOTE: 6 lines were written to file PRINT.
NOTE: There were 2 observations read from the data set WORK.LSAF_JOB_PARAMS.
      WHERE PRXMATCH('/^(FOLDER|FILE)$/', TRIM(type));
NOTE: There were 9 observations read from the data set WORK.LSAF_JOB_PARAMS.
      WHERE (PRXMATCH('/^(FOLDER|FILE)$/', TRIM(type))=0) and (value not = ' ');
NOTE: The DATA step printed page 11.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LSAF_SUBMITJOB):  ;
NOTE: lsaf_submitjob: Validating dataset lsaf_job_params
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   options nonotes;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   proc datasets library=work nolist;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   delete __SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   quit;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   options nonotes;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   data _null_;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   length message $45 libName $8 dsName $300;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   providedDatasetName=kstrip("lsaf_job_params");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsName="INVALID";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsNameIsValid=0;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dotCount=countc(providedDatasetName,".");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dotPosition=kindexc(providedDatasetName,".");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   *put dotPosition=;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (dotPosition=1 or dotPosition=length(providedDatasetName)) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message=" Missing either LIBNAME or data set.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   select (dotCount);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   when (0) dsName=providedDatasetName;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   when (1) do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (dotPosition le 9) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   libName = (ksubstr(providedDatasetName, 1, dotPosition-1));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   *put libName=;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsName = (ksubstr(providedDatasetName, dotPosition+1));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   else do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Libname longer than 8 characters.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   otherwise do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Invalid data set name structure.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   firstchar=ksubstr(kleft(dsName), 1, 1);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (anydigit(firstchar)) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Data set name must start with a character.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (length(dsName) > 32) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Data set name longer than 32 characters.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsNameIsValid=1;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   SETVARS: call symput("_lsafvaliddsn_", strip(put(dsNameIsValid, best.)));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   call symput("dsnMsg", message);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   call symput("specifiedLib", strip(libName));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   run;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   options NONOTES;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   * CHECK EXISTS: Also getting errors for data set name.;
MPRINT(LSAF_VALIDATE_SASDATASET):  ;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):  ;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   proc sort data=lsaf_job_params out=__SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   by name;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   data _null_;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   set __SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   by name;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   if (first.name AND NOT(last.name)) then do;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   call symput("_lsafMsg_", "Input data set has duplicate values for parameter name " || name || ".");
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   STOP;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   end;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   call symput("_lsafRC_", "0");
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   option notes;
MPRINT(LSAF_SUBMITJOB):  ;
MPRINT(LSAF_SUBMITJOB):   option notes;
MPRINT(LSAF_SUBMITJOB):   data _null_;
MPRINT(LSAF_SUBMITJOB):   attrib returnCode length=8 message length=$200 jobSubmissionId length=$525 logMsgPrefix length=$70 logMsgPrimary length=$70 logMsg length=$300 ;
MPRINT(LSAF_SUBMITJOB):   set lsaf_job_params end=eof;
MPRINT(LSAF_SUBMITJOB):   if (_n_ = 1) then do;
MPRINT(LSAF_SUBMITJOB):   declare javaobj params("com/sas/lsaf/macro/execution/job/SasParameterValues");
MPRINT(LSAF_SUBMITJOB):   declare javaobj srv("com/sas/lsaf/macro/execution/jobsubmission/JobSubmissionService");
MPRINT(LSAF_SUBMITJOB):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   params.callVoidMethod("addValue", kstrip(name), kstrip(value), kstrip(type), kstrip(fileVersion), includeSubFolders);
MPRINT(LSAF_SUBMITJOB):   if (eof);
MPRINT(LSAF_SUBMITJOB):   declare javaobj job("com/sas/lsaf/macro/execution/jobsubmission/SasSubmittableJob", "/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job", "", 
params);
MPRINT(LSAF_SUBMITJOB):   srv.callStaticStringMethod("submitRepositoryJob", job, results, jobSubmissionId);
MPRINT(LSAF_SUBMITJOB):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_SUBMITJOB):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_SUBMITJOB):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_SUBMITJOB):   if (returnCode ne 0) then do;
MPRINT(LSAF_SUBMITJOB):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_SUBMITJOB):   logMsg=" Cannot submit job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job";
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   else do;
MPRINT(LSAF_SUBMITJOB):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_SUBMITJOB):   logMsg=" Submitted job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job";
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   put;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " " "lsaf_submitjob";
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(LSAF_SUBMITJOB):   if "lsaf_job_params" = "" then put logMsgPrefix "No job parameters were supplied.";
MPRINT(LSAF_SUBMITJOB):   else put logMsgPrefix "sas_dsname = lsaf_job_params";
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix "_lsafJobSubmissionId_= " jobSubmissionId;
MPRINT(LSAF_SUBMITJOB):   put;
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafJobSubmissionId_", strip(jobSubmissionId));
MPRINT(LSAF_SUBMITJOB):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  Submitted job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_submitjob
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: * sas_dsname = lsaf_job_params
NOTE: SAS Life Science Analytics Framework Macro: * _lsafJobSubmissionId_= e4cbc09d-3ab5-4f18-a3f8-8c72c899cc01
NOTE: There were 12 observations read from the data set WORK.LSAF_JOB_PARAMS.
NOTE: DATA statement used (Total process time):
      real time           1.63 seconds
      cpu time            0.01 seconds
      

MPRINT(LSAF_SUBMITJOB):   options NONOTES;
MPRINT(SUBMIT_JOB):  ;
MPRINT(SUBMIT_JOB):   *- Job submission succeeded -*;
MPRINT(SUBMIT_JOB):   option nomprint nonotes
Calling %lsaf_getitemid(lsaf_path=/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job) ...
_LSAFMSG_=Success.  _LSAFRC_=0  _LSAFITEMID_=02b06e4d-7777-4a59-b2f9-2fc165603216
Calling %step_lsaf_getjobsubmissioninfos(job_subm_id=e4cbc09d-3ab5-4f18-a3f8-8c72c899cc01) ...
Notice: SYSDATASTEPPHASE=EXECUTION IN_DATA_STEP=N
Ignoring record: submissionId=30678109-1661-4a87-858f-1bc1b0d581fa jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job jobVersion=0.1
jobId=abcfa448-6829-4513-8bef-3d8418207d45
Ignoring record: submissionId=c4fb4991-9137-4374-8d55-32ed9002f3d8 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_ongoing_studies.job jobVersion=0.1
jobId=c762f385-9376-49c8-8cec-d19326e7e18e
Ignoring record: submissionId=f00d2b52-d9f1-4ef1-8922-181d934626e0 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_ongoing_studies.job jobVersion=0.1
jobId=c762f385-9376-49c8-8cec-d19326e7e18e
Ignoring record: submissionId=feed1f0f-2d9a-42b9-8060-8fddd1e47337 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job jobVersion=0.1
jobId=abcfa448-6829-4513-8bef-3d8418207d45
Ignoring record: submissionId=6146180f-0c7a-4e5c-9887-8f61a330ee33 jobPath=/clinical/argx-113/hv/argx-113-1501/biostat/staging/generic_adam/jobs/job_check_and_load.job jobVersion= 
jobId=c35fd8ef-7c33-4feb-bd89-145c1d19b5da
Ignoring record: submissionId=771f920f-4235-4216-8e58-d3d5fc4f2ebe jobPath=/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job jobVersion= 
jobId=02b06e4d-7777-4a59-b2f9-2fc165603216
Ignoring record: submissionId=eb533499-a23e-418d-ba5b-36cc6ab2e243 jobPath=/clinical/argx-113/hv/argx-113-1501/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job jobVersion= 
jobId=c76f158e-6ba2-4aef-bfb0-3898a6205960
Notice: _LSAFJOBSUBMISSIONID_=e4cbc09d-3ab5-4f18-a3f8-8c72c899cc01 SESSIONID=bb0bc35a-bbb0-4248-ae36-875168c639a5 JOB=/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job 
JOBID=02b06e4d-7777-4a59-b2f9-2fc165603216
(SUBMIT_JOB): 2023-02-15T00:56:22 - Submitted REPOSITORY Job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job          with Submission ID: 
e4cbc09d-3ab5-4f18-a3f8-8c72c899cc01, Status: STARTED
(SUBMIT_JOB): 00:56:21.82 Elapsed: 00:00:02.51 Job Submission Status: STARTED
(SUBMIT_JOB): 00:56:24.36 Elapsed: 00:00:05.05 Job Submission Status: STARTED
(SUBMIT_JOB): 00:56:26.89 Elapsed: 00:00:07.58 Job Submission Status: STARTED
(SUBMIT_JOB): 00:56:29.42 Elapsed: 00:00:10.12 Job Submission Status: STARTED
(SUBMIT_JOB): 00:56:31.96 Elapsed: 00:00:12.65 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:56:34.49 Elapsed: 00:00:15.18 Job Submission Status: RUNNING_TASKS
  Setup generic_adam_path=/clinical/argx-117/dgf/argx-117-2201/biostat/staging/generic_adam : setup_result=setup_generic_adam: 0: Success.
  /clinical/argx-117/dgf/argx-117-2201/biostat/staging/generic_adam : setup_result=skipped since &setup_gadam_folder = N
(SUBMIT_JOB): 00:56:37.02 Elapsed: 00:00:17.71 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:56:39.55 Elapsed: 00:00:20.25 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:56:42.09 Elapsed: 00:00:22.78 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:56:44.64 Elapsed: 00:00:25.33 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:56:47.17 Elapsed: 00:00:27.86 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:56:49.70 Elapsed: 00:00:30.39 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:56:57.24 Elapsed: 00:00:37.93 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:57:04.77 Elapsed: 00:00:45.46 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:57:12.30 Elapsed: 00:00:53.00 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:57:19.84 Elapsed: 00:01:00.53 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:57:42.37 Elapsed: 00:01:23.07 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:58:04.91 Elapsed: 00:01:45.60 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:58:34.94 Elapsed: 00:02:15.64 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:59:04.98 Elapsed: 00:02:45.68 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 00:59:35.02 Elapsed: 00:03:15.71 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:00:05.05 Elapsed: 00:03:45.75 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:00:35.10 Elapsed: 00:04:15.79 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:01:05.14 Elapsed: 00:04:45.83 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:01:35.18 Elapsed: 00:05:15.87 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:02:05.22 Elapsed: 00:05:45.91 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:02:35.26 Elapsed: 00:06:15.96 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:03:05.30 Elapsed: 00:06:45.99 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:03:35.34 Elapsed: 00:07:16.03 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:04:05.38 Elapsed: 00:07:46.07 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:04:35.41 Elapsed: 00:08:16.10 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:05:05.45 Elapsed: 00:08:46.14 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:05:35.49 Elapsed: 00:09:16.18 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:06:05.54 Elapsed: 00:09:46.23 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:06:35.58 Elapsed: 00:10:16.27 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:07:05.62 Elapsed: 00:10:46.31 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:07:35.91 Elapsed: 00:11:16.60 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:08:05.95 Elapsed: 00:11:46.64 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:08:35.99 Elapsed: 00:12:16.68 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:09:06.02 Elapsed: 00:12:46.72 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:09:36.06 Elapsed: 00:13:16.75 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:10:06.10 Elapsed: 00:13:46.79 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:10:36.14 Elapsed: 00:14:16.84 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:11:06.18 Elapsed: 00:14:46.87 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:11:36.21 Elapsed: 00:15:16.91 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:12:06.26 Elapsed: 00:15:46.95 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:12:36.29 Elapsed: 00:16:16.98 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:13:06.35 Elapsed: 00:16:47.04 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:13:36.40 Elapsed: 00:17:17.09 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:14:06.43 Elapsed: 00:17:47.12 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:14:36.46 Elapsed: 00:18:17.16 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:15:06.50 Elapsed: 00:18:47.20 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:15:36.55 Elapsed: 00:19:17.24 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:16:06.58 Elapsed: 00:19:47.28 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:16:36.62 Elapsed: 00:20:17.31 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:17:06.65 Elapsed: 00:20:47.34 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:17:36.69 Elapsed: 00:21:17.38 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:18:06.72 Elapsed: 00:21:47.41 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:18:36.76 Elapsed: 00:22:17.45 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:19:06.79 Elapsed: 00:22:47.49 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:19:36.83 Elapsed: 00:23:17.52 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:20:06.87 Elapsed: 00:23:47.56 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:20:36.93 Elapsed: 00:24:17.62 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:21:06.97 Elapsed: 00:24:47.66 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:21:37.00 Elapsed: 00:25:17.70 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:22:07.04 Elapsed: 00:25:47.73 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:22:37.09 Elapsed: 00:26:17.79 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:23:07.13 Elapsed: 00:26:47.82 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:23:37.16 Elapsed: 00:27:17.86 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:24:07.20 Elapsed: 00:27:47.89 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:24:37.23 Elapsed: 00:28:17.93 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:25:07.28 Elapsed: 00:28:47.97 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:25:37.31 Elapsed: 00:29:18.00 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:26:07.37 Elapsed: 00:29:48.06 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:26:37.41 Elapsed: 00:30:18.10 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:27:07.45 Elapsed: 00:30:48.14 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:27:37.48 Elapsed: 00:31:18.17 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:28:07.54 Elapsed: 00:31:48.24 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:28:37.58 Elapsed: 00:32:18.27 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:29:07.62 Elapsed: 00:32:48.31 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:29:37.65 Elapsed: 00:33:18.34 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:30:07.68 Elapsed: 00:33:48.37 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:30:37.72 Elapsed: 00:34:18.41 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:31:07.77 Elapsed: 00:34:48.47 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:31:37.81 Elapsed: 00:35:18.50 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:32:07.84 Elapsed: 00:35:48.54 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:32:37.89 Elapsed: 00:36:18.58 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:33:07.93 Elapsed: 00:36:48.62 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:33:37.96 Elapsed: 00:37:18.65 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:34:08.00 Elapsed: 00:37:48.69 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:34:38.03 Elapsed: 00:38:18.72 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:35:08.06 Elapsed: 00:38:48.76 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:35:38.10 Elapsed: 00:39:18.79 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:36:08.13 Elapsed: 00:39:48.82 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:36:38.16 Elapsed: 00:40:18.86 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:37:08.20 Elapsed: 00:40:48.89 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:37:38.23 Elapsed: 00:41:18.92 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:38:08.27 Elapsed: 00:41:48.96 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:38:38.30 Elapsed: 00:42:19.00 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:39:08.34 Elapsed: 00:42:49.04 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:39:38.40 Elapsed: 00:43:19.09 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:40:08.43 Elapsed: 00:43:49.13 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:40:38.47 Elapsed: 00:44:19.16 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:41:08.51 Elapsed: 00:44:49.20 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:41:38.55 Elapsed: 00:45:19.24 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:42:08.58 Elapsed: 00:45:49.27 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:42:38.62 Elapsed: 00:46:19.31 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:43:08.67 Elapsed: 00:46:49.36 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:43:38.71 Elapsed: 00:47:19.40 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:44:08.74 Elapsed: 00:47:49.43 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:44:38.78 Elapsed: 00:48:19.47 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:45:08.81 Elapsed: 00:48:49.50 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:45:38.84 Elapsed: 00:49:19.53 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:46:08.88 Elapsed: 00:49:49.57 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:46:38.92 Elapsed: 00:50:19.61 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:47:08.97 Elapsed: 00:50:49.66 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:47:39.00 Elapsed: 00:51:19.69 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:48:09.05 Elapsed: 00:51:49.74 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:48:39.09 Elapsed: 00:52:19.78 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:49:09.13 Elapsed: 00:52:49.82 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:49:39.16 Elapsed: 00:53:19.85 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:50:09.20 Elapsed: 00:53:49.89 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:50:39.23 Elapsed: 00:54:19.92 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:51:09.27 Elapsed: 00:54:49.96 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:51:39.30 Elapsed: 00:55:20.00 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:52:09.33 Elapsed: 00:55:50.03 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:52:39.37 Elapsed: 00:56:20.07 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:53:09.43 Elapsed: 00:56:50.12 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:53:39.48 Elapsed: 00:57:20.17 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:54:09.51 Elapsed: 00:57:50.21 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:54:39.56 Elapsed: 00:58:20.25 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:55:09.61 Elapsed: 00:58:50.30 Job Submission Status: RUNNING_TASKS
WARNING:(GET_LSAF_JOB_SUBMISSION_STATUS): job has status: COMPLETED_WARNINGS
(SUBMIT_JOB): 01:55:39.65 Elapsed: 00:59:20.34 Job Submission Status: COMPLETED_WARNINGS
(SUBMIT_JOB): 2023-02-15T01:56:10 - Submitted REPOSITORY job: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job has completed with status: COMPLETED_WARNINGS
WARNING:(SUBMIT_JOB): REPOSITORY job job_gadam_rebuild_adam.job has status: COMPLETED_WARNINGS
MPRINT(SUBMIT_JOB):  ;
job_gadam_rebuild_adam.job: get job status: 0: Success.:       Elapsed: 00:59:50.35       REPOSITORY Job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job with Submission 
ID: e4cbc09d-3ab5-4f18-a3f8-8c72c899cc01, Status: COMPLETED_WARNINGS
MPRINT(REBUILD_GENERIC_ADAM):  ;
MPRINT(REBUILD_GENERIC_ADAM):   option NOMPRINT;
  Rebuild generic_adam_path=/clinical/argx-117/dgf/argx-117-2201/biostat/staging/generic_adam : adam_rebuild_result=rebuild_generic_adam: 0: Success.
  /clinical/argx-117/dgf/argx-117-2201/biostat/staging/generic_adam : adam_rebuild_result=rebuild_generic_adam: 0: Success.  === 
     
Notice: === study=argx-117-0000 match_pool=0 match_stdm_ind_pool=1
%create_generic_adam_path(/clinical/argx-117/hv/argx-117-0000/biostat/staging/generic_adam, force=N)
MPRINT(CREATE_GENERIC_ADAM_PATH):   notes;
LOCATION_PARAMETERS=/clinical/argx-117/hv/argx-117-0000
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/hv/argx-117-0000/biostat/staging/generic_adam", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/hv/argx-117-0000/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/hv/argx-117-0000/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/hv/argx-117-0000/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/hv/argx-117-0000/biostat/staging/generic_adam
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.02 seconds
      

MPRINT(CREATE_GENERIC_ADAM_PATH):  ;
MPRINT(CREATE_GENERIC_ADAM_PATH):   option NOMPRINT;
%setup_generic_adam(gadam_path=/clinical/argx-117/hv/argx-117-0000/biostat/staging/generic_adam, sdtm_last_path=/clinical/argx-117/hv/argx-117-0000/biostat/staging/data_received/sdtm_last, 
study_adam_path=)
MPRINT(SETUP_GENERIC_ADAM):   notes;
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/hv/argx-117-0000/biostat/staging/generic_adam", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/hv/argx-117-0000/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/hv/argx-117-0000/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/hv/argx-117-0000/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/hv/argx-117-0000/biostat/staging/generic_adam
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   *-2023-01-13 - jbodart - Perform gadam study setup only if target is not up-to-date -*;
MPRINT(SETUP_GENERIC_ADAM):   *- Use parameter gadam_files_source as &source_path for the template files to be used for study setup -*;
SOURCE_REL_PATH=/general/biostat/gadam SOURCE_PATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/gadam
STUDY=argx-117-0000 studyno=->0000<-
Notice: Checking whether generic_adam reporting event is already setup in /clinical/argx-117/hv/argx-117-0000/biostat/staging/generic_adam ...
MPRINT(SETUP_GENERIC_ADAM):   data source_files(where=( scan(name, -1, ".") in ("xlsx" "sas" "job") and name ^= 'job_finalchecks.job' ) index=(_idx0_=(dir name)));
MPRINT(STEP_LSAF_GETCHILDREN):   *- Determine LSAF Macro API version -*;
MPRINT(STEP_LSAF_GETCHILDREN):   *- Declare the java items -*;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __srv56 ("com/sas/lsaf/macro/content/repository/RepositoryService") ;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __results56 ("com/sas/lsaf/macro/content/repository/SasRepositoryItemsResult");
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj _i_results56("com/sas/lsaf/macro/common/result/Result");
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   do __lsaf_path = "/general/biostat/gadam/documents" ,"/general/biostat/gadam/metadata/studyprograms" ,"/general/biostat/gadam/metadata/studyjobs" 
,"/general/biostat/gadam/metadata/studymacros";
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize numeric variables with default length (8) -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   rowCount=0;
MPRINT(STEP_LSAF_GETCHILDREN):   *- format numeric datetime variables -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize character variables with appropriate lengths -*;
MPRINT(STEP_LSAF_GETCHILDREN):   message = put(' ', $200.);
MPRINT(STEP_LSAF_GETCHILDREN):   path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   name = put(' ', $256.);
MPRINT(STEP_LSAF_GETCHILDREN):   description = put(' ', $512.);
MPRINT(STEP_LSAF_GETCHILDREN):   version = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   signatureStatus = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   createdBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   created = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   state = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   __createdTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   itemType = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   formattedsize = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   __lastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   *- check if container -*;
MPRINT(STEP_LSAF_GETCHILDREN):   isContainer = 1;
MPRINT(STEP_LSAF_GETCHILDREN):   *- if __lsaf_path is not a container, replace with parent folder path -*;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path ^= ' ' then __srv56.callStaticBooleanMethod("isContainer", trim(__lsaf_path), _i_results56, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   if isContainer = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_file_path = __lsaf_path;
MPRINT(STEP_LSAF_GETCHILDREN):   *- keep the original file path specified -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = resolve('%dirname('||__lsaf_path||')');
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path^='' then do;
MPRINT(STEP_LSAF_GETCHILDREN):   *- call the method -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __srv56.callStaticVoidMethod("getChildren", trim(__lsaf_path), cats(1), __results56);
MPRINT(STEP_LSAF_GETCHILDREN):   *- Retrieve the results -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __results56.callIntMethod("getReturnCode", returnCode);
MPRINT(STEP_LSAF_GETCHILDREN):   __results56.callStringMethod("getReturnMessage", message);
MPRINT(STEP_LSAF_GETCHILDREN):   if (returnCode = -1) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "WARNING:" "(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "NO" "TE-";
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else if (returnCode ^= 0) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "ER" "ROR:(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   __results56.callIntMethod("getSize", rowCount);
MPRINT(STEP_LSAF_GETCHILDREN):   if rowcount = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   message = catx(' ', message, "No observations returned.");
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   do row=0 to rowCount - 1;
MPRINT(STEP_LSAF_GETCHILDREN):   __results56.callStringMethod("getPath", row, path);
MPRINT(STEP_LSAF_GETCHILDREN):   __results56.callStringMethod("getName", row, name);
MPRINT(STEP_LSAF_GETCHILDREN):   __results56.callStringMethod("getDescription", row, description);
MPRINT(STEP_LSAF_GETCHILDREN):   __results56.callStringMethod("getVersion", row, version);
MPRINT(STEP_LSAF_GETCHILDREN):   __results56.callIntMethod("isContainer", row, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   __results56.callIntMethod("isVersioned", row, isVersioned);
MPRINT(STEP_LSAF_GETCHILDREN):   __results56.callIntMethod("isCheckedOut", row, isCheckedOut);
MPRINT(STEP_LSAF_GETCHILDREN):   __results56.callIntMethod("isLocked", row, isLocked);
MPRINT(STEP_LSAF_GETCHILDREN):   __results56.callStringMethod("getSignatureStatus", row, signatureStatus);
MPRINT(STEP_LSAF_GETCHILDREN):   __results56.callLongMethod("getFileSize", row, size);
MPRINT(STEP_LSAF_GETCHILDREN):   __results56.callStringMethod("getFormattedFileSize", row, formattedsize);
MPRINT(STEP_LSAF_GETCHILDREN):   if formattedsize = ' ' then formattedsize = ifc(size<0, " ", cats(size)||" Bytes");
MPRINT(STEP_LSAF_GETCHILDREN):   if size < 0 then size=.;
MPRINT(STEP_LSAF_GETCHILDREN):   __results56.callStringMethod("getItemType", row, itemType);
MPRINT(STEP_LSAF_GETCHILDREN):   __results56.callStringMethod("getLastModified", row, lastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results56.callStringMethod("getLastModifiedSasFormat", row, __lastModifiedTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   __results56.callStringMethod("getCreated", row, created);
MPRINT(STEP_LSAF_GETCHILDREN):   __results56.callStringMethod("getCreatedBy", row, createdBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results56.callStringMethod("getLastModifiedBy", row, lastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results56.callStringMethod("getPropertiesLastModified", row, propertiesLastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results56.callStringMethod("getPropertiesLastModifiedBy", row, propertiesLastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results56.callStringMethod("getPropertiesLastModifiedSasFormat", row, propertiesLastModifiedTempSAS);
MPRINT(STEP_LSAF_GETCHILDREN):   __results56.callStringMethod("getState", row, state);
MPRINT(STEP_LSAF_GETCHILDREN):   __results56.callStringMethod("getCreatedSasFormat", row, __createdTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   dateCreated=input(__createdTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   dateLastModified=input(__lastModifiedTempSas, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   datePropertiesLastModified=input(propertiesLastModifiedTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   pathLevel = countw(path, '/');
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_file_path = ' ' or __lsaf_file_path = path then do;
MPRINT(STEP_LSAF_GETCHILDREN):   dir=put(left(tranwrd(scan(path, -2, "/"), "study", "")), $20.);
MPRINT(STEP_LSAF_GETCHILDREN):  output;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   drop row __lastModifiedTempSAS __lsaf_file_path __createdTempSAS propertiesLastModifiedTempSAS
MPRINT(VARLIST):   itemType isContainer description version isVersioned isCheckedOut isLocked signatureStatus size formattedsize createdBy created dateCreated lastModifiedBy dateLastModified 
propertiesLastModifiedBy propertiesLastModified datePropertiesLastModified state pathLevel __lsaf_path returnCode message rowCount
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   run;
NOTE: The data set WORK.SOURCE_FILES has 60 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           1.16 seconds
      cpu time            0.43 seconds
      

MPRINT(SETUP_GENERIC_ADAM):   data target_files(where=( scan(name, -1, ".") in ("xlsx" "sas" "job") ) index=(_idx0_=(dir name)));
MPRINT(STEP_LSAF_GETCHILDREN):   *- Determine LSAF Macro API version -*;
MPRINT(STEP_LSAF_GETCHILDREN):   *- Declare the java items -*;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __srv62 ("com/sas/lsaf/macro/content/repository/RepositoryService") ;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __results62 ("com/sas/lsaf/macro/content/repository/SasRepositoryItemsResult");
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj _i_results62("com/sas/lsaf/macro/common/result/Result");
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   do __lsaf_path = "/clinical/argx-117/hv/argx-117-0000/biostat/staging/generic_adam/documents" 
,"/clinical/argx-117/hv/argx-117-0000/biostat/staging/generic_adam/programs" ,"/clinical/argx-117/hv/argx-117-0000/biostat/staging/generic_adam/jobs" 
,"/clinical/argx-117/hv/argx-117-0000/biostat/staging/generic_adam/macros";
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize numeric variables with default length (8) -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   rowCount=0;
MPRINT(STEP_LSAF_GETCHILDREN):   *- format numeric datetime variables -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize character variables with appropriate lengths -*;
MPRINT(STEP_LSAF_GETCHILDREN):   message = put(' ', $200.);
MPRINT(STEP_LSAF_GETCHILDREN):   path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   name = put(' ', $256.);
MPRINT(STEP_LSAF_GETCHILDREN):   description = put(' ', $512.);
MPRINT(STEP_LSAF_GETCHILDREN):   version = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   signatureStatus = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   createdBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   created = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   state = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   __createdTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   itemType = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   formattedsize = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   __lastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   *- check if container -*;
MPRINT(STEP_LSAF_GETCHILDREN):   isContainer = 1;
MPRINT(STEP_LSAF_GETCHILDREN):   *- if __lsaf_path is not a container, replace with parent folder path -*;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path ^= ' ' then __srv62.callStaticBooleanMethod("isContainer", trim(__lsaf_path), _i_results62, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   if isContainer = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_file_path = __lsaf_path;
MPRINT(STEP_LSAF_GETCHILDREN):   *- keep the original file path specified -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = resolve('%dirname('||__lsaf_path||')');
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path^='' then do;
MPRINT(STEP_LSAF_GETCHILDREN):   *- call the method -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __srv62.callStaticVoidMethod("getChildren", trim(__lsaf_path), cats(1), __results62);
MPRINT(STEP_LSAF_GETCHILDREN):   *- Retrieve the results -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __results62.callIntMethod("getReturnCode", returnCode);
MPRINT(STEP_LSAF_GETCHILDREN):   __results62.callStringMethod("getReturnMessage", message);
MPRINT(STEP_LSAF_GETCHILDREN):   if (returnCode = -1) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "NOTE:" "(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "NO" "TE-";
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else if (returnCode ^= 0) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "ER" "ROR:(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   __results62.callIntMethod("getSize", rowCount);
MPRINT(STEP_LSAF_GETCHILDREN):   if rowcount = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   message = catx(' ', message, "No observations returned.");
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   do row=0 to rowCount - 1;
MPRINT(STEP_LSAF_GETCHILDREN):   __results62.callStringMethod("getPath", row, path);
MPRINT(STEP_LSAF_GETCHILDREN):   __results62.callStringMethod("getName", row, name);
MPRINT(STEP_LSAF_GETCHILDREN):   __results62.callStringMethod("getDescription", row, description);
MPRINT(STEP_LSAF_GETCHILDREN):   __results62.callStringMethod("getVersion", row, version);
MPRINT(STEP_LSAF_GETCHILDREN):   __results62.callIntMethod("isContainer", row, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   __results62.callIntMethod("isVersioned", row, isVersioned);
MPRINT(STEP_LSAF_GETCHILDREN):   __results62.callIntMethod("isCheckedOut", row, isCheckedOut);
MPRINT(STEP_LSAF_GETCHILDREN):   __results62.callIntMethod("isLocked", row, isLocked);
MPRINT(STEP_LSAF_GETCHILDREN):   __results62.callStringMethod("getSignatureStatus", row, signatureStatus);
MPRINT(STEP_LSAF_GETCHILDREN):   __results62.callLongMethod("getFileSize", row, size);
MPRINT(STEP_LSAF_GETCHILDREN):   __results62.callStringMethod("getFormattedFileSize", row, formattedsize);
MPRINT(STEP_LSAF_GETCHILDREN):   if formattedsize = ' ' then formattedsize = ifc(size<0, " ", cats(size)||" Bytes");
MPRINT(STEP_LSAF_GETCHILDREN):   if size < 0 then size=.;
MPRINT(STEP_LSAF_GETCHILDREN):   __results62.callStringMethod("getItemType", row, itemType);
MPRINT(STEP_LSAF_GETCHILDREN):   __results62.callStringMethod("getLastModified", row, lastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results62.callStringMethod("getLastModifiedSasFormat", row, __lastModifiedTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   __results62.callStringMethod("getCreated", row, created);
MPRINT(STEP_LSAF_GETCHILDREN):   __results62.callStringMethod("getCreatedBy", row, createdBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results62.callStringMethod("getLastModifiedBy", row, lastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results62.callStringMethod("getPropertiesLastModified", row, propertiesLastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results62.callStringMethod("getPropertiesLastModifiedBy", row, propertiesLastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results62.callStringMethod("getPropertiesLastModifiedSasFormat", row, propertiesLastModifiedTempSAS);
MPRINT(STEP_LSAF_GETCHILDREN):   __results62.callStringMethod("getState", row, state);
MPRINT(STEP_LSAF_GETCHILDREN):   __results62.callStringMethod("getCreatedSasFormat", row, __createdTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   dateCreated=input(__createdTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   dateLastModified=input(__lastModifiedTempSas, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   datePropertiesLastModified=input(propertiesLastModifiedTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   pathLevel = countw(path, '/');
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_file_path = ' ' or __lsaf_file_path = path then do;
MPRINT(STEP_LSAF_GETCHILDREN):   dir=put(scan(path, -2, "/"), $20.);
MPRINT(STEP_LSAF_GETCHILDREN):   name=prxchange("s/^0000/_studyno_/", 1, trim(name));
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   drop row __lastModifiedTempSAS __lsaf_file_path __createdTempSAS propertiesLastModifiedTempSAS
MPRINT(VARLIST):   itemType isContainer description version isVersioned isCheckedOut isLocked signatureStatus size formattedsize createdBy created dateCreated lastModifiedBy dateLastModified 
propertiesLastModifiedBy propertiesLastModified datePropertiesLastModified state pathLevel __lsaf_path returnCode message rowCount
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   run;
NOTE: The data set WORK.TARGET_FILES has 59 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           1.03 seconds
      cpu time            0.39 seconds
      

MPRINT(SETUP_GENERIC_ADAM):   data source_target_files;
MPRINT(SETUP_GENERIC_ADAM):   merge source_files(in=a drop=path rename=(lastmodified=sourcelastmodified)) target_files(in=b drop=path rename=(lastmodified=targetlastmodified)) end=last ;
MPRINT(SETUP_GENERIC_ADAM):   by dir name;
MPRINT(SETUP_GENERIC_ADAM):   __prx = prxparse('s/((Mon|Tue|Wed|Thu|Fri|Sat|Sun)(\w*day)? )?(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]* (\d\d?) (\d?\d:\d\d:\d\d) GMT (\d{4})/\5\4\7:\6/i');
MPRINT(SETUP_GENERIC_ADAM):   if a then do;
MPRINT(SETUP_GENERIC_ADAM):   sourcemodte = input(prxchange(__prx, 1, sourcelastmodified), anydtdtm.);
MPRINT(SETUP_GENERIC_ADAM):   targetmodte = input(prxchange(__prx, 1, targetlastmodified), anydtdtm.);
MPRINT(SETUP_GENERIC_ADAM):   format sourcemodte targetmodte E8601DT.;
MPRINT(SETUP_GENERIC_ADAM):   need_update = (sourcemodte > targetmodte);
MPRINT(SETUP_GENERIC_ADAM):   tot_need_update=+need_update;
MPRINT(SETUP_GENERIC_ADAM):   tot_files=+a;
MPRINT(SETUP_GENERIC_ADAM):   output;
MPRINT(SETUP_GENERIC_ADAM):   end;
MPRINT(SETUP_GENERIC_ADAM):   if last then do;
MPRINT(SETUP_GENERIC_ADAM):   put "Target files needing update: " tot_need_update " out of " tot_files;
MPRINT(SETUP_GENERIC_ADAM):   call symputx("tot_need_update", tot_need_update);
MPRINT(SETUP_GENERIC_ADAM):   end;
MPRINT(SETUP_GENERIC_ADAM):   run;
NOTE: Invalid argument to function INPUT at line 0 column 119.
a=1 b=0 last=0 name=job_gnarrv2-orig.job sourcelastmodified=Tue Feb 14 08:25:35 GMT 2023 dir=jobs targetlastmodified=  FIRST.dir=0 LAST.dir=0 FIRST.name=1 LAST.name=1 __prx=1
sourcemodte=2023-02-14T08:25:35 targetmodte=. need_update=1 tot_need_update=1 tot_files=1 _ERROR_=1 _N_=18
Target files needing update: 1  out of 1
NOTE: Mathematical operations could not be performed at the following places. The results of the operations have been set to missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      1 at 0:119   
NOTE: There were 60 observations read from the data set WORK.SOURCE_FILES.
NOTE: There were 59 observations read from the data set WORK.TARGET_FILES.
NOTE: The data set WORK.SOURCE_TARGET_FILES has 60 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

TOT_NEED_UPDATE=1
Notice: Setting up generic_adam reporting event in /clinical/argx-117/hv/argx-117-0000/biostat/staging/generic_adam ...
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/hv/argx-117-0000/biostat/staging/data_received/adam", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/hv/argx-117-0000/biostat/staging/data_received/adam" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/hv/argx-117-0000/biostat/staging/data_received/adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/hv/argx-117-0000/biostat/staging/data_received/adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item does not exist: /clinical/argx-117/hv/argx-117-0000/biostat/staging/data_received/adam
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 0
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(SETUP_GENERIC_ADAM):  ;
Notice:(SETUP_GENERIC_ADAM): study_adam_path not found, set to null: /clinical/argx-117/hv/argx-117-0000/biostat/staging/data_received/adam
NUM_JOBS_SPAWNED=7
MACROAPIVER=2.6
MPRINT(SUBMIT_JOB):   proc sql noprint;
MPRINT(SUBMIT_JOB):   drop table work.job_Parameters;
NOTE: Table WORK.JOB_PARAMETERS has been dropped.
MPRINT(SUBMIT_JOB):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

DEBUG:(GEN_JOB_ENV): PRX=93
DEBUG:(GEN_JOB_ENV): prxmatch(93, /general/biostat/jobs/gadam_ongoing_studies/dev/jobs/job_gadam_studysetup.job) = 1
DEBUG:(GEN_JOB_ENV): (0) REFPATH=
DEBUG:(GEN_JOB_ENV): (0) REPEVPATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (0) RELREPEVPATH=/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (0) _SASFILEPATH_=/general/biostat/jobs/gadam_ongoing_studies/prod/programs/lsaf_get_last_sdtm.sas
DEBUG:(GEN_JOB_ENV): (0) PROGPATH=/general/biostat/jobs/gadam_ongoing_studies/prod/programs/
DEBUG:(GEN_JOB_ENV): (0) PATH=/general/biostat/jobs/gadam_ongoing_studies/dev/jobs/job_gadam_studysetup.job
Setting refpath = &repevpath
DEBUG:(GEN_JOB_ENV): (1) REFPATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (2) REFENV=prod
DEBUG:(GEN_JOB_ENV): (3) REFENV=prod
DEBUG:(F_LSAF_EXISTS) - 2023-02-15T01:56:12 - Iteration: 1: slept = 0, exists = 1
DEBUG:(F_LSAF_EXISTS) - 2023-02-15T01:56:12 - Iteration: 1: slept = 0, exists = 1
DEBUG:(F_LSAF_EXISTS) - 2023-02-15T01:56:12 - Iteration: 1: slept = 0, exists = 1
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(SUBMIT_JOB):  ;
Notice:(SUBMIT_JOB): LSAF Job Path exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job.
MPRINT(SUBMIT_JOB):   proc format;
MPRINT(SUBMIT_JOB):   value $jobabbr "job_gadam_ongoing_studies.job"= "gos" "job_studies_status.job"= "ss" "job_gadam_sdtm_key_core_vars.job"= "gskcv" "job_unzip_sdtm_sources.job"= "uss" 
"job_zip_extract_files.job"= "zef" "job_lsaf_get_last_sdtm.job"= "lgls" "setup_reporting_event_folder.job"= "sref" "job_gadam_refresh_sdtm_last.job"= "grsl" "job_gadam_update_refresh_info.job"= 
"guri" "convert_definetosas.job"= "cdts" "job_gadam_studysetup.job"= "gss" "job_gadam_rebuild_adam.job"= "gra" "job_adAAA" - "job_adzzz"= "adx" "job_qcstudyadams.job"= "qcsa" 
"job_qc_gadam_vs_study.job"= "qcgvs" "job_qc_gadam_vs_study-overview.job"= "qcgvso" "job_check_and_load.job"= "cal" "job_tAAA" - "job_tzzz"= "txx" "job_gadam_qc_overviews.job"= "gqco" 
"job_make_sdtm_pool_jobs.job"= "mspj" "job_lsaf_pool_last_sdtm.job"= "lpls" "sdtm_pool-AAA" - "sdtm_pool-zzz"= "pci" "job_gadam_refresh_sdtm_overview.job"= "grso" "getdata.job"= "gd" OTHER = "***" ;
NOTE: Format $JOBABBR is already on the library WORK.FORMATS.
NOTE: Format $JOBABBR has been output.
MPRINT(SUBMIT_JOB):   run;
NOTE: PROCEDURE FORMAT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SUBMIT_JOB):   quit;
job_instance=>Ngos117Prod_4_x0_7<
MPRINT(LSAF_GETJOBPARAMETERS):  ;
MPRINT(LSAF_GETJOBPARAMETERS):   data work.job_Parameters (label="Created by LSAF_GETJOBPARAMETERS" KEEP=jobPath jobVersion name label type defaultValue fileVersion includeSubFolders );
MPRINT(LSAF_GETJOBPARAMETERS):   attrib returnCode length=8 message length=$200 logMsgPrefix length=$70 logMsgPrimary length=$70 logMsg length=$300 rowCount length=8 jobPath length=$2048 label="Job 
Path" jobVersion length=$32 label="Job Version" name length=$256 label="Parameter Name" label length=$256 label="Parameter Label" type length=$32 label="Parameter Type" defaultValue length=$2048 
label="Parameter Default Value" fileVersion length=$32 label="File Version if File Type" includeSubFolders length=8 label="Include Container SubFolders" includesSubFolders length=$5 label="FOR 
INTERNAL PROCESSING ONLY.  WILL BE DROPPED." ;
MPRINT(LSAF_GETJOBPARAMETERS):   rowCount=0;
MPRINT(LSAF_GETJOBPARAMETERS):   declare javaobj srv("com/sas/lsaf/macro/execution/job/JobService") ;
MPRINT(LSAF_GETJOBPARAMETERS):   declare javaobj results("com/sas/lsaf/macro/execution/job/SasJobParametersResult");
MPRINT(LSAF_GETJOBPARAMETERS):   srv.callStaticVoidMethod("getRepositoryJobParameters", "/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job", "", results) ;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_GETJOBPARAMETERS):   if (returnCode ne 0) then do;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_GETJOBPARAMETERS):   if "" NE "" then logMsg=" Cannot retrieve parameters for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job, version " ;
MPRINT(LSAF_GETJOBPARAMETERS):   else logMsg=" Cannot retrieve parameters for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   else do;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsg=" Parameters were returned for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getJobPath", jobPath);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getJobVersion", jobVersion);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callIntMethod("getSize", rowCount);
MPRINT(LSAF_GETJOBPARAMETERS):   do row=0 to rowCount - 1;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getName", row, name);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getLabel", row, label);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getType", row, type);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getDefaultValue", row, defaultValue);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getFileVersion", row, fileVersion);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getContainerIncludeSubfolders", row, includesSubFolders);
MPRINT(LSAF_GETJOBPARAMETERS):   includeSubFolders=input(includesSubFolders,best.);
MPRINT(LSAF_GETJOBPARAMETERS):   output;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   put;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " " "lsaf_getjobparameters";
MPRINT(LSAF_GETJOBPARAMETERS):   if (rowCount=0) then put logMsgPrefix " No parameters were found.";
MPRINT(LSAF_GETJOBPARAMETERS):   else put logMsgPrefix " " rowCount " records written to data set work.job_Parameters";
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(LSAF_GETJOBPARAMETERS):   put;
MPRINT(LSAF_GETJOBPARAMETERS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_GETJOBPARAMETERS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_GETJOBPARAMETERS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  Parameters were returned for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_getjobparameters
NOTE: SAS Life Science Analytics Framework Macro: *  8  records written to data set work.job_Parameters
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: The data set WORK.JOB_PARAMETERS has 8 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.02 seconds
      

MPRINT(SUBMIT_JOB):  ;
NOTE: The dataset WORK.JOB_PARAMETERS has 8 observations and 8 variables.
MPRINT(SUBMIT_JOB):   ;
MPRINT(SUBMIT_JOB):   *- dataset to specify job parameters (from macro parameters values) -*;
MPRINT(SUBMIT_JOB):   data lsaf_job_params(index=(name));
MPRINT(SUBMIT_JOB):   set work.job_Parameters(rename=(defaultValue = value));
MPRINT(SUBMIT_JOB):   if upcase(name) = "_PARENTJOB_WS_" then do;
MPRINT(SUBMIT_JOB):   if symexist("_SASWS_") and type = "CHARACTER" then value = symget("_SASWS_");
MPRINT(SUBMIT_JOB):   else value = " ";
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   else if upcase(name) = "_PARENTJOB_WRK_" then do;
MPRINT(SUBMIT_JOB):   value = pathname("WORK", "L");
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   else if symexist(name) then do;
MPRINT(SUBMIT_JOB):   if symget(name) ^= ' ' then value = symget(name);
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   new_value = translate(value, ' ', ',;()"''&%');
MPRINT(SUBMIT_JOB):   if new_value ne value then put "NOTE:(SUBMIT_JOB): Special characters may be removed from parameter value:" / @2 "parameter: " name /@2 "old value: " value /@2 "new value: " 
new_value;
MPRINT(SUBMIT_JOB):   if _n_=1 then put "Not" "ice:(SUBMIT_JOB): Updated Job parameters:";
MPRINT(SUBMIT_JOB):   if type = "FOLDER" then put " - " name @+(-1) "=" value "[" type= @+(-1) ", " includeSubFolders= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   else if TYPE = "FILE" then put " - " name @+(-1) "=" value "[" type= @+(-1) ", " fileversion= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   else put " - " name @+(-1) "=" value "[" type= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   run;
Notice:(SUBMIT_JOB): Updated Job parameters:
 - gadam_path=/clinical/argx-117/hv/argx-117-0000/biostat/staging/generic_adam [type=FOLDER, includeSubFolders=0]
 - sdtm_last_path=/clinical/argx-117/hv/argx-117-0000/biostat/staging/data_received/sdtm_last [type=FOLDER, includeSubFolders=0]
 - study_adam_path=  [type=FOLDER, includeSubFolders=0]
 - gadam_files_source=/general/biostat/gadam [type=FOLDER, includeSubFolders=1]
 - job_instance=Ngos117Prod_4_x0_7 [type=CHARACTER]
 - _PARENTJOB_WS_=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15 [type=CHARACTER]
 - _PARENTJOB_WRK_=/saswork/sas_tmp/SAS_work4CFB0019563E_xar08auv.vsp.sas.com/SAS_work5B910019563E_xar08auv.vsp.sas.com [type=CHARACTER]
 - USE_SAS_WORKSPACE_MACROS=  [type=CHARACTER]
NOTE: There were 8 observations read from the data set WORK.JOB_PARAMETERS.
NOTE: The data set WORK.LSAF_JOB_PARAMS has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

N_PARAMS=8
MPRINT(SUBMIT_JOB):   data lsaf_job_params(index=(name));
MPRINT(SUBMIT_JOB):   set lsaf_job_params;
MPRINT(SUBMIT_JOB):   by name;
MPRINT(SUBMIT_JOB):   if (not first.name) or (not last.name) then do;
MPRINT(SUBMIT_JOB):   if last.name then action = "(kept)   ";
MPRINT(SUBMIT_JOB):   else action = "(dropped)";
MPRINT(SUBMIT_JOB):   drop action;
MPRINT(SUBMIT_JOB):   put "Not" "ice:(SUBMIT_JOB): duplicate parameter " name " = " value @+(3) action;
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   if last.name;
MPRINT(SUBMIT_JOB):   run;
NOTE: There were 8 observations read from the data set WORK.LSAF_JOB_PARAMS.
NOTE: The data set WORK.LSAF_JOB_PARAMS has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SUBMIT_JOB):   data _null_;
MPRINT(SUBMIT_JOB):   file print;
MPRINT(SUBMIT_JOB):   set lsaf_job_params(where=(prxmatch('/^(FOLDER|FILE)$/', trim(type))) in=a) lsaf_job_params(where=(prxmatch('/^(FOLDER|FILE)$/', trim(type))=0 and value ^= ' ')) end=last;
MPRINT(SUBMIT_JOB):   if _n_=1 then putlog "=== 2023-02-15T01:56:12 - Submit job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job (with parameters: " @;
MPRINT(SUBMIT_JOB):   _n_a+a;
MPRINT(SUBMIT_JOB):   if _n_-1 = _n_a then do;
MPRINT(SUBMIT_JOB):   putlog / @8 @;
MPRINT(SUBMIT_JOB):   put / @8 @;
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   if a then putlog / @8 name @+(-1) "=" value ' (' type= includeSubFolders= @+(-1) ')   ' @;
MPRINT(SUBMIT_JOB):   else putlog name @+(-1) "=" value "  " @ ;
MPRINT(SUBMIT_JOB):   if last then putlog @+8 ") ===";
MPRINT(SUBMIT_JOB):   if _n_=1 then put "=== 2023-02-15T01:56:12 - Submit job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job (with parameters: " @;
MPRINT(SUBMIT_JOB):   if a then put / @8 name @+(-1) "=" value ' (' type= includeSubFolders= @+(-1) ')   ' @;
MPRINT(SUBMIT_JOB):   else put name @+(-1) "=" value "  " @ ;
MPRINT(SUBMIT_JOB):   if last then put @+8 ") ===";
MPRINT(SUBMIT_JOB):   run;
=== 2023-02-15T01:56:12 - Submit job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job (with parameters: 
       gadam_files_source=/general/biostat/gadam  (type=FOLDER includeSubFolders=1)   
       gadam_path=/clinical/argx-117/hv/argx-117-0000/biostat/staging/generic_adam  (type=FOLDER includeSubFolders=0)   
       sdtm_last_path=/clinical/argx-117/hv/argx-117-0000/biostat/staging/data_received/sdtm_last  (type=FOLDER includeSubFolders=0)   
       study_adam_path=   (type=FOLDER includeSubFolders=0)   
       _PARENTJOB_WRK_=/saswork/sas_tmp/SAS_work4CFB0019563E_xar08auv.vsp.sas.com/SAS_work5B910019563E_xar08auv.vsp.sas.com   _PARENTJOB_WS_=
/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15   job_instance=Ngos117Prod_4_x0_7           ) ===
NOTE: 7 lines were written to file PRINT.
NOTE: There were 4 observations read from the data set WORK.LSAF_JOB_PARAMS.
      WHERE PRXMATCH('/^(FOLDER|FILE)$/', TRIM(type));
NOTE: There were 3 observations read from the data set WORK.LSAF_JOB_PARAMS.
      WHERE (PRXMATCH('/^(FOLDER|FILE)$/', TRIM(type))=0) and (value not = ' ');
NOTE: The DATA step printed page 13.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LSAF_SUBMITJOB):  ;
NOTE: lsaf_submitjob: Validating dataset lsaf_job_params
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   options nonotes;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   proc datasets library=work nolist;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   delete __SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   quit;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   options nonotes;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   data _null_;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   length message $45 libName $8 dsName $300;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   providedDatasetName=kstrip("lsaf_job_params");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsName="INVALID";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsNameIsValid=0;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dotCount=countc(providedDatasetName,".");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dotPosition=kindexc(providedDatasetName,".");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   *put dotPosition=;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (dotPosition=1 or dotPosition=length(providedDatasetName)) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message=" Missing either LIBNAME or data set.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   select (dotCount);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   when (0) dsName=providedDatasetName;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   when (1) do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (dotPosition le 9) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   libName = (ksubstr(providedDatasetName, 1, dotPosition-1));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   *put libName=;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsName = (ksubstr(providedDatasetName, dotPosition+1));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   else do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Libname longer than 8 characters.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   otherwise do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Invalid data set name structure.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   firstchar=ksubstr(kleft(dsName), 1, 1);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (anydigit(firstchar)) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Data set name must start with a character.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (length(dsName) > 32) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Data set name longer than 32 characters.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsNameIsValid=1;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   SETVARS: call symput("_lsafvaliddsn_", strip(put(dsNameIsValid, best.)));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   call symput("dsnMsg", message);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   call symput("specifiedLib", strip(libName));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   run;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   options NONOTES;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   * CHECK EXISTS: Also getting errors for data set name.;
MPRINT(LSAF_VALIDATE_SASDATASET):  ;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):  ;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   proc sort data=lsaf_job_params out=__SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   by name;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   data _null_;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   set __SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   by name;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   if (first.name AND NOT(last.name)) then do;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   call symput("_lsafMsg_", "Input data set has duplicate values for parameter name " || name || ".");
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   STOP;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   end;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   call symput("_lsafRC_", "0");
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   option notes;
MPRINT(LSAF_SUBMITJOB):  ;
MPRINT(LSAF_SUBMITJOB):   option notes;
MPRINT(LSAF_SUBMITJOB):   data _null_;
MPRINT(LSAF_SUBMITJOB):   attrib returnCode length=8 message length=$200 jobSubmissionId length=$525 logMsgPrefix length=$70 logMsgPrimary length=$70 logMsg length=$300 ;
MPRINT(LSAF_SUBMITJOB):   set lsaf_job_params end=eof;
MPRINT(LSAF_SUBMITJOB):   if (_n_ = 1) then do;
MPRINT(LSAF_SUBMITJOB):   declare javaobj params("com/sas/lsaf/macro/execution/job/SasParameterValues");
MPRINT(LSAF_SUBMITJOB):   declare javaobj srv("com/sas/lsaf/macro/execution/jobsubmission/JobSubmissionService");
MPRINT(LSAF_SUBMITJOB):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   params.callVoidMethod("addValue", kstrip(name), kstrip(value), kstrip(type), kstrip(fileVersion), includeSubFolders);
MPRINT(LSAF_SUBMITJOB):   if (eof);
MPRINT(LSAF_SUBMITJOB):   declare javaobj job("com/sas/lsaf/macro/execution/jobsubmission/SasSubmittableJob", "/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job", "", 
params);
MPRINT(LSAF_SUBMITJOB):   srv.callStaticStringMethod("submitRepositoryJob", job, results, jobSubmissionId);
MPRINT(LSAF_SUBMITJOB):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_SUBMITJOB):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_SUBMITJOB):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_SUBMITJOB):   if (returnCode ne 0) then do;
MPRINT(LSAF_SUBMITJOB):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_SUBMITJOB):   logMsg=" Cannot submit job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job";
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   else do;
MPRINT(LSAF_SUBMITJOB):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_SUBMITJOB):   logMsg=" Submitted job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job";
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   put;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " " "lsaf_submitjob";
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(LSAF_SUBMITJOB):   if "lsaf_job_params" = "" then put logMsgPrefix "No job parameters were supplied.";
MPRINT(LSAF_SUBMITJOB):   else put logMsgPrefix "sas_dsname = lsaf_job_params";
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix "_lsafJobSubmissionId_= " jobSubmissionId;
MPRINT(LSAF_SUBMITJOB):   put;
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafJobSubmissionId_", strip(jobSubmissionId));
MPRINT(LSAF_SUBMITJOB):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  Submitted job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_submitjob
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: * sas_dsname = lsaf_job_params
NOTE: SAS Life Science Analytics Framework Macro: * _lsafJobSubmissionId_= 5dd3e7be-3824-4e8b-8363-337a003c305d
NOTE: There were 8 observations read from the data set WORK.LSAF_JOB_PARAMS.
NOTE: DATA statement used (Total process time):
      real time           1.36 seconds
      cpu time            0.01 seconds
      

MPRINT(LSAF_SUBMITJOB):   options NONOTES;
MPRINT(SUBMIT_JOB):  ;
MPRINT(SUBMIT_JOB):   *- Job submission succeeded -*;
MPRINT(SUBMIT_JOB):   option nomprint nonotes
Calling %lsaf_getitemid(lsaf_path=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job) ...
_LSAFMSG_=Success.  _LSAFRC_=0  _LSAFITEMID_=090a95d3-6059-474f-a1bd-61c6768ba993
Calling %step_lsaf_getjobsubmissioninfos(job_subm_id=5dd3e7be-3824-4e8b-8363-337a003c305d) ...
Notice: SYSDATASTEPPHASE=EXECUTION IN_DATA_STEP=N
Ignoring record: submissionId=30678109-1661-4a87-858f-1bc1b0d581fa jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job jobVersion=0.1
jobId=abcfa448-6829-4513-8bef-3d8418207d45
Ignoring record: submissionId=c4fb4991-9137-4374-8d55-32ed9002f3d8 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_ongoing_studies.job jobVersion=0.1
jobId=c762f385-9376-49c8-8cec-d19326e7e18e
Ignoring record: submissionId=f00d2b52-d9f1-4ef1-8922-181d934626e0 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_ongoing_studies.job jobVersion=0.1
jobId=c762f385-9376-49c8-8cec-d19326e7e18e
Ignoring record: submissionId=05e0665e-78cd-4a3c-9aa3-9ddb53288cad jobPath=/clinical/argx-113/hv/argx-113-1702/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job jobVersion=52.0
jobId=bd48e139-ba53-466d-a613-fa25b86270cc
Ignoring record: submissionId=feed1f0f-2d9a-42b9-8060-8fddd1e47337 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job jobVersion=0.1
jobId=abcfa448-6829-4513-8bef-3d8418207d45
Ignoring record: submissionId=52f5bc3e-db8f-43c5-be1a-3909fcd156ee jobPath=/clinical/argx-113/hv/argx-113-1702/biostat/staging/generic_adam/jobs/job_qcstudyadams.job jobVersion= 
jobId=e3ec9fb0-bc3c-4432-ab83-8330d270037a
Ignoring record: submissionId=0e426e98-1f39-407e-a152-2a4b08808841 jobPath=/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job jobVersion= 
jobId=02b06e4d-7777-4a59-b2f9-2fc165603216
Notice: _LSAFJOBSUBMISSIONID_=5dd3e7be-3824-4e8b-8363-337a003c305d SESSIONID=79583691-798a-4c6e-837a-26dd11701228 JOB=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job 
JOBID=090a95d3-6059-474f-a1bd-61c6768ba993
(SUBMIT_JOB): 2023-02-15T01:56:14 - Submitted REPOSITORY Job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job          with Submission ID: 
5dd3e7be-3824-4e8b-8363-337a003c305d, Status: STARTED
(SUBMIT_JOB): 01:56:14.19 Elapsed: 00:00:02.21 Job Submission Status: STARTED
(SUBMIT_JOB): 01:56:16.73 Elapsed: 00:00:04.74 Job Submission Status: STARTED
(SUBMIT_JOB): 01:56:19.26 Elapsed: 00:00:07.28 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:56:21.79 Elapsed: 00:00:09.81 Job Submission Status: POST_EXECUTION_PUBLISHING
(SUBMIT_JOB): 01:56:24.33 Elapsed: 00:00:12.35 Job Submission Status: COMPLETED_SUCCESSFUL
(SUBMIT_JOB): 2023-02-15T01:56:27 - Submitted REPOSITORY job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job has completed with status: COMPLETED_SUCCESSFUL
MPRINT(SUBMIT_JOB):  ;
job_gadam_studysetup.job: get job status: 0: Success.:       Elapsed: 00:00:14.85       REPOSITORY Job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job with Submission 
ID: 5dd3e7be-3824-4e8b-8363-337a003c305d, Status: COMPLETED_SUCCESSFUL
MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   option NOMPRINT;
%create_generic_adam_path(/clinical/argx-117/hv/argx-117-1901/biostat/staging/generic_adam, force=N)
MPRINT(CREATE_GENERIC_ADAM_PATH):   notes;
LOCATION_PARAMETERS=/clinical/argx-117/hv/argx-117-1901
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/hv/argx-117-1901/biostat/staging/generic_adam", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/hv/argx-117-1901/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/hv/argx-117-1901/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/hv/argx-117-1901/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/hv/argx-117-1901/biostat/staging/generic_adam
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
      

MPRINT(CREATE_GENERIC_ADAM_PATH):  ;
MPRINT(CREATE_GENERIC_ADAM_PATH):   option NOMPRINT;
%setup_generic_adam(gadam_path=/clinical/argx-117/hv/argx-117-1901/biostat/staging/generic_adam, sdtm_last_path=/clinical/argx-117/hv/argx-117-1901/biostat/staging/data_received/sdtm_last, 
study_adam_path=)
MPRINT(SETUP_GENERIC_ADAM):   notes;
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/hv/argx-117-1901/biostat/staging/generic_adam", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/hv/argx-117-1901/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/hv/argx-117-1901/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/hv/argx-117-1901/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/hv/argx-117-1901/biostat/staging/generic_adam
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      

MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   *-2023-01-13 - jbodart - Perform gadam study setup only if target is not up-to-date -*;
MPRINT(SETUP_GENERIC_ADAM):   *- Use parameter gadam_files_source as &source_path for the template files to be used for study setup -*;
SOURCE_REL_PATH=/general/biostat/gadam SOURCE_PATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/gadam
STUDY=argx-117-1901 studyno=->1901<-
Notice: Checking whether generic_adam reporting event is already setup in /clinical/argx-117/hv/argx-117-1901/biostat/staging/generic_adam ...
MPRINT(SETUP_GENERIC_ADAM):   data source_files(where=( scan(name, -1, ".") in ("xlsx" "sas" "job") and name ^= 'job_finalchecks.job' ) index=(_idx0_=(dir name)));
MPRINT(STEP_LSAF_GETCHILDREN):   *- Determine LSAF Macro API version -*;
MPRINT(STEP_LSAF_GETCHILDREN):   *- Declare the java items -*;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __srv314 ("com/sas/lsaf/macro/content/repository/RepositoryService") ;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __results314 ("com/sas/lsaf/macro/content/repository/SasRepositoryItemsResult");
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj _i_results314("com/sas/lsaf/macro/common/result/Result");
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   do __lsaf_path = "/general/biostat/gadam/documents" ,"/general/biostat/gadam/metadata/studyprograms" ,"/general/biostat/gadam/metadata/studyjobs" 
,"/general/biostat/gadam/metadata/studymacros";
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize numeric variables with default length (8) -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   rowCount=0;
MPRINT(STEP_LSAF_GETCHILDREN):   *- format numeric datetime variables -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize character variables with appropriate lengths -*;
MPRINT(STEP_LSAF_GETCHILDREN):   message = put(' ', $200.);
MPRINT(STEP_LSAF_GETCHILDREN):   path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   name = put(' ', $256.);
MPRINT(STEP_LSAF_GETCHILDREN):   description = put(' ', $512.);
MPRINT(STEP_LSAF_GETCHILDREN):   version = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   signatureStatus = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   createdBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   created = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   state = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   __createdTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   itemType = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   formattedsize = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   __lastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   *- check if container -*;
MPRINT(STEP_LSAF_GETCHILDREN):   isContainer = 1;
MPRINT(STEP_LSAF_GETCHILDREN):   *- if __lsaf_path is not a container, replace with parent folder path -*;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path ^= ' ' then __srv314.callStaticBooleanMethod("isContainer", trim(__lsaf_path), _i_results314, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   if isContainer = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_file_path = __lsaf_path;
MPRINT(STEP_LSAF_GETCHILDREN):   *- keep the original file path specified -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = resolve('%dirname('||__lsaf_path||')');
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path^='' then do;
MPRINT(STEP_LSAF_GETCHILDREN):   *- call the method -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __srv314.callStaticVoidMethod("getChildren", trim(__lsaf_path), cats(1), __results314);
MPRINT(STEP_LSAF_GETCHILDREN):   *- Retrieve the results -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __results314.callIntMethod("getReturnCode", returnCode);
MPRINT(STEP_LSAF_GETCHILDREN):   __results314.callStringMethod("getReturnMessage", message);
MPRINT(STEP_LSAF_GETCHILDREN):   if (returnCode = -1) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "WARNING:" "(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "NO" "TE-";
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else if (returnCode ^= 0) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "ER" "ROR:(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   __results314.callIntMethod("getSize", rowCount);
MPRINT(STEP_LSAF_GETCHILDREN):   if rowcount = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   message = catx(' ', message, "No observations returned.");
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   do row=0 to rowCount - 1;
MPRINT(STEP_LSAF_GETCHILDREN):   __results314.callStringMethod("getPath", row, path);
MPRINT(STEP_LSAF_GETCHILDREN):   __results314.callStringMethod("getName", row, name);
MPRINT(STEP_LSAF_GETCHILDREN):   __results314.callStringMethod("getDescription", row, description);
MPRINT(STEP_LSAF_GETCHILDREN):   __results314.callStringMethod("getVersion", row, version);
MPRINT(STEP_LSAF_GETCHILDREN):   __results314.callIntMethod("isContainer", row, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   __results314.callIntMethod("isVersioned", row, isVersioned);
MPRINT(STEP_LSAF_GETCHILDREN):   __results314.callIntMethod("isCheckedOut", row, isCheckedOut);
MPRINT(STEP_LSAF_GETCHILDREN):   __results314.callIntMethod("isLocked", row, isLocked);
MPRINT(STEP_LSAF_GETCHILDREN):   __results314.callStringMethod("getSignatureStatus", row, signatureStatus);
MPRINT(STEP_LSAF_GETCHILDREN):   __results314.callLongMethod("getFileSize", row, size);
MPRINT(STEP_LSAF_GETCHILDREN):   __results314.callStringMethod("getFormattedFileSize", row, formattedsize);
MPRINT(STEP_LSAF_GETCHILDREN):   if formattedsize = ' ' then formattedsize = ifc(size<0, " ", cats(size)||" Bytes");
MPRINT(STEP_LSAF_GETCHILDREN):   if size < 0 then size=.;
MPRINT(STEP_LSAF_GETCHILDREN):   __results314.callStringMethod("getItemType", row, itemType);
MPRINT(STEP_LSAF_GETCHILDREN):   __results314.callStringMethod("getLastModified", row, lastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results314.callStringMethod("getLastModifiedSasFormat", row, __lastModifiedTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   __results314.callStringMethod("getCreated", row, created);
MPRINT(STEP_LSAF_GETCHILDREN):   __results314.callStringMethod("getCreatedBy", row, createdBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results314.callStringMethod("getLastModifiedBy", row, lastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results314.callStringMethod("getPropertiesLastModified", row, propertiesLastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results314.callStringMethod("getPropertiesLastModifiedBy", row, propertiesLastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results314.callStringMethod("getPropertiesLastModifiedSasFormat", row, propertiesLastModifiedTempSAS);
MPRINT(STEP_LSAF_GETCHILDREN):   __results314.callStringMethod("getState", row, state);
MPRINT(STEP_LSAF_GETCHILDREN):   __results314.callStringMethod("getCreatedSasFormat", row, __createdTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   dateCreated=input(__createdTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   dateLastModified=input(__lastModifiedTempSas, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   datePropertiesLastModified=input(propertiesLastModifiedTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   pathLevel = countw(path, '/');
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_file_path = ' ' or __lsaf_file_path = path then do;
MPRINT(STEP_LSAF_GETCHILDREN):   dir=put(left(tranwrd(scan(path, -2, "/"), "study", "")), $20.);
MPRINT(STEP_LSAF_GETCHILDREN):  output;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   drop row __lastModifiedTempSAS __lsaf_file_path __createdTempSAS propertiesLastModifiedTempSAS
MPRINT(VARLIST):   itemType isContainer description version isVersioned isCheckedOut isLocked signatureStatus size formattedsize createdBy created dateCreated lastModifiedBy dateLastModified 
propertiesLastModifiedBy propertiesLastModified datePropertiesLastModified state pathLevel __lsaf_path returnCode message rowCount
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   run;
NOTE: The data set WORK.SOURCE_FILES has 60 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           1.44 seconds
      cpu time            0.43 seconds
      

MPRINT(SETUP_GENERIC_ADAM):   data target_files(where=( scan(name, -1, ".") in ("xlsx" "sas" "job") ) index=(_idx0_=(dir name)));
MPRINT(STEP_LSAF_GETCHILDREN):   *- Determine LSAF Macro API version -*;
MPRINT(STEP_LSAF_GETCHILDREN):   *- Declare the java items -*;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __srv320 ("com/sas/lsaf/macro/content/repository/RepositoryService") ;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __results320 ("com/sas/lsaf/macro/content/repository/SasRepositoryItemsResult");
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj _i_results320("com/sas/lsaf/macro/common/result/Result");
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   do __lsaf_path = "/clinical/argx-117/hv/argx-117-1901/biostat/staging/generic_adam/documents" 
,"/clinical/argx-117/hv/argx-117-1901/biostat/staging/generic_adam/programs" ,"/clinical/argx-117/hv/argx-117-1901/biostat/staging/generic_adam/jobs" 
,"/clinical/argx-117/hv/argx-117-1901/biostat/staging/generic_adam/macros";
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize numeric variables with default length (8) -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   rowCount=0;
MPRINT(STEP_LSAF_GETCHILDREN):   *- format numeric datetime variables -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize character variables with appropriate lengths -*;
MPRINT(STEP_LSAF_GETCHILDREN):   message = put(' ', $200.);
MPRINT(STEP_LSAF_GETCHILDREN):   path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   name = put(' ', $256.);
MPRINT(STEP_LSAF_GETCHILDREN):   description = put(' ', $512.);
MPRINT(STEP_LSAF_GETCHILDREN):   version = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   signatureStatus = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   createdBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   created = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   state = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   __createdTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   itemType = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   formattedsize = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   __lastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   *- check if container -*;
MPRINT(STEP_LSAF_GETCHILDREN):   isContainer = 1;
MPRINT(STEP_LSAF_GETCHILDREN):   *- if __lsaf_path is not a container, replace with parent folder path -*;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path ^= ' ' then __srv320.callStaticBooleanMethod("isContainer", trim(__lsaf_path), _i_results320, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   if isContainer = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_file_path = __lsaf_path;
MPRINT(STEP_LSAF_GETCHILDREN):   *- keep the original file path specified -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = resolve('%dirname('||__lsaf_path||')');
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path^='' then do;
MPRINT(STEP_LSAF_GETCHILDREN):   *- call the method -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __srv320.callStaticVoidMethod("getChildren", trim(__lsaf_path), cats(1), __results320);
MPRINT(STEP_LSAF_GETCHILDREN):   *- Retrieve the results -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __results320.callIntMethod("getReturnCode", returnCode);
MPRINT(STEP_LSAF_GETCHILDREN):   __results320.callStringMethod("getReturnMessage", message);
MPRINT(STEP_LSAF_GETCHILDREN):   if (returnCode = -1) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "NOTE:" "(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "NO" "TE-";
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else if (returnCode ^= 0) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "ER" "ROR:(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   __results320.callIntMethod("getSize", rowCount);
MPRINT(STEP_LSAF_GETCHILDREN):   if rowcount = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   message = catx(' ', message, "No observations returned.");
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   do row=0 to rowCount - 1;
MPRINT(STEP_LSAF_GETCHILDREN):   __results320.callStringMethod("getPath", row, path);
MPRINT(STEP_LSAF_GETCHILDREN):   __results320.callStringMethod("getName", row, name);
MPRINT(STEP_LSAF_GETCHILDREN):   __results320.callStringMethod("getDescription", row, description);
MPRINT(STEP_LSAF_GETCHILDREN):   __results320.callStringMethod("getVersion", row, version);
MPRINT(STEP_LSAF_GETCHILDREN):   __results320.callIntMethod("isContainer", row, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   __results320.callIntMethod("isVersioned", row, isVersioned);
MPRINT(STEP_LSAF_GETCHILDREN):   __results320.callIntMethod("isCheckedOut", row, isCheckedOut);
MPRINT(STEP_LSAF_GETCHILDREN):   __results320.callIntMethod("isLocked", row, isLocked);
MPRINT(STEP_LSAF_GETCHILDREN):   __results320.callStringMethod("getSignatureStatus", row, signatureStatus);
MPRINT(STEP_LSAF_GETCHILDREN):   __results320.callLongMethod("getFileSize", row, size);
MPRINT(STEP_LSAF_GETCHILDREN):   __results320.callStringMethod("getFormattedFileSize", row, formattedsize);
MPRINT(STEP_LSAF_GETCHILDREN):   if formattedsize = ' ' then formattedsize = ifc(size<0, " ", cats(size)||" Bytes");
MPRINT(STEP_LSAF_GETCHILDREN):   if size < 0 then size=.;
MPRINT(STEP_LSAF_GETCHILDREN):   __results320.callStringMethod("getItemType", row, itemType);
MPRINT(STEP_LSAF_GETCHILDREN):   __results320.callStringMethod("getLastModified", row, lastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results320.callStringMethod("getLastModifiedSasFormat", row, __lastModifiedTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   __results320.callStringMethod("getCreated", row, created);
MPRINT(STEP_LSAF_GETCHILDREN):   __results320.callStringMethod("getCreatedBy", row, createdBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results320.callStringMethod("getLastModifiedBy", row, lastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results320.callStringMethod("getPropertiesLastModified", row, propertiesLastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results320.callStringMethod("getPropertiesLastModifiedBy", row, propertiesLastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results320.callStringMethod("getPropertiesLastModifiedSasFormat", row, propertiesLastModifiedTempSAS);
MPRINT(STEP_LSAF_GETCHILDREN):   __results320.callStringMethod("getState", row, state);
MPRINT(STEP_LSAF_GETCHILDREN):   __results320.callStringMethod("getCreatedSasFormat", row, __createdTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   dateCreated=input(__createdTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   dateLastModified=input(__lastModifiedTempSas, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   datePropertiesLastModified=input(propertiesLastModifiedTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   pathLevel = countw(path, '/');
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_file_path = ' ' or __lsaf_file_path = path then do;
MPRINT(STEP_LSAF_GETCHILDREN):   dir=put(scan(path, -2, "/"), $20.);
MPRINT(STEP_LSAF_GETCHILDREN):   name=prxchange("s/^1901/_studyno_/", 1, trim(name));
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   drop row __lastModifiedTempSAS __lsaf_file_path __createdTempSAS propertiesLastModifiedTempSAS
MPRINT(VARLIST):   itemType isContainer description version isVersioned isCheckedOut isLocked signatureStatus size formattedsize createdBy created dateCreated lastModifiedBy dateLastModified 
propertiesLastModifiedBy propertiesLastModified datePropertiesLastModified state pathLevel __lsaf_path returnCode message rowCount
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   run;
NOTE: The data set WORK.TARGET_FILES has 59 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           2.54 seconds
      cpu time            0.40 seconds
      

MPRINT(SETUP_GENERIC_ADAM):   data source_target_files;
MPRINT(SETUP_GENERIC_ADAM):   merge source_files(in=a drop=path rename=(lastmodified=sourcelastmodified)) target_files(in=b drop=path rename=(lastmodified=targetlastmodified)) end=last ;
MPRINT(SETUP_GENERIC_ADAM):   by dir name;
MPRINT(SETUP_GENERIC_ADAM):   __prx = prxparse('s/((Mon|Tue|Wed|Thu|Fri|Sat|Sun)(\w*day)? )?(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]* (\d\d?) (\d?\d:\d\d:\d\d) GMT (\d{4})/\5\4\7:\6/i');
MPRINT(SETUP_GENERIC_ADAM):   if a then do;
MPRINT(SETUP_GENERIC_ADAM):   sourcemodte = input(prxchange(__prx, 1, sourcelastmodified), anydtdtm.);
MPRINT(SETUP_GENERIC_ADAM):   targetmodte = input(prxchange(__prx, 1, targetlastmodified), anydtdtm.);
MPRINT(SETUP_GENERIC_ADAM):   format sourcemodte targetmodte E8601DT.;
MPRINT(SETUP_GENERIC_ADAM):   need_update = (sourcemodte > targetmodte);
MPRINT(SETUP_GENERIC_ADAM):   tot_need_update=+need_update;
MPRINT(SETUP_GENERIC_ADAM):   tot_files=+a;
MPRINT(SETUP_GENERIC_ADAM):   output;
MPRINT(SETUP_GENERIC_ADAM):   end;
MPRINT(SETUP_GENERIC_ADAM):   if last then do;
MPRINT(SETUP_GENERIC_ADAM):   put "Target files needing update: " tot_need_update " out of " tot_files;
MPRINT(SETUP_GENERIC_ADAM):   call symputx("tot_need_update", tot_need_update);
MPRINT(SETUP_GENERIC_ADAM):   end;
MPRINT(SETUP_GENERIC_ADAM):   run;
NOTE: Invalid argument to function INPUT at line 0 column 119.
a=1 b=0 last=0 name=job_gnarrv2-orig.job sourcelastmodified=Tue Feb 14 08:25:35 GMT 2023 dir=jobs targetlastmodified=  FIRST.dir=0 LAST.dir=0 FIRST.name=1 LAST.name=1 __prx=1
sourcemodte=2023-02-14T08:25:35 targetmodte=. need_update=1 tot_need_update=1 tot_files=1 _ERROR_=1 _N_=18
Target files needing update: 1  out of 1
NOTE: Mathematical operations could not be performed at the following places. The results of the operations have been set to missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      1 at 0:119   
NOTE: There were 60 observations read from the data set WORK.SOURCE_FILES.
NOTE: There were 59 observations read from the data set WORK.TARGET_FILES.
NOTE: The data set WORK.SOURCE_TARGET_FILES has 60 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      
  Create generic_adam_path=/clinical/argx-117/hv/argx-117-0000/biostat/staging/generic_adam  (force=N): create_result=skip_create_generic_adam_folder - already exists: 0: Success.
  Setup generic_adam_path=/clinical/argx-117/hv/argx-117-0000/biostat/staging/generic_adam : setup_result=setup_generic_adam: 0: Success.
  /clinical/argx-117/hv/argx-117-0000/biostat/staging/generic_adam : setup_result=skipped since &setup_gadam_folder = N
  /clinical/argx-117/hv/argx-117-0000/biostat/staging/generic_adam : adam_rebuild_result=skipped since sdtm pools within/across indication are not yet refreshed at this point  === 
     
Notice: === study=argx-117-1901 match_pool=0 match_stdm_ind_pool=0
  Create generic_adam_path=/clinical/argx-117/hv/argx-117-1901/biostat/staging/generic_adam  (force=N): create_result=skip_create_generic_adam_folder - already exists: 0: Success.

TOT_NEED_UPDATE=1
Notice: Setting up generic_adam reporting event in /clinical/argx-117/hv/argx-117-1901/biostat/staging/generic_adam ...
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/hv/argx-117-1901/biostat/staging/data_received/adam", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/hv/argx-117-1901/biostat/staging/data_received/adam" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/hv/argx-117-1901/biostat/staging/data_received/adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/hv/argx-117-1901/biostat/staging/data_received/adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item does not exist: /clinical/argx-117/hv/argx-117-1901/biostat/staging/data_received/adam
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 0
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

MPRINT(SETUP_GENERIC_ADAM):  ;
Notice:(SETUP_GENERIC_ADAM): study_adam_path not found, set to null: /clinical/argx-117/hv/argx-117-1901/biostat/staging/data_received/adam
NUM_JOBS_SPAWNED=8
MACROAPIVER=2.6
MPRINT(SUBMIT_JOB):   proc sql noprint;
MPRINT(SUBMIT_JOB):   drop table work.job_Parameters;
NOTE: Table WORK.JOB_PARAMETERS has been dropped.
MPRINT(SUBMIT_JOB):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

DEBUG:(GEN_JOB_ENV): PRX=110
DEBUG:(GEN_JOB_ENV): prxmatch(110, /general/biostat/jobs/gadam_ongoing_studies/dev/jobs/job_gadam_studysetup.job) = 1
DEBUG:(GEN_JOB_ENV): (0) REFPATH=
DEBUG:(GEN_JOB_ENV): (0) REPEVPATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (0) RELREPEVPATH=/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (0) _SASFILEPATH_=/general/biostat/jobs/gadam_ongoing_studies/prod/programs/lsaf_get_last_sdtm.sas
DEBUG:(GEN_JOB_ENV): (0) PROGPATH=/general/biostat/jobs/gadam_ongoing_studies/prod/programs/
DEBUG:(GEN_JOB_ENV): (0) PATH=/general/biostat/jobs/gadam_ongoing_studies/dev/jobs/job_gadam_studysetup.job
Setting refpath = &repevpath
DEBUG:(GEN_JOB_ENV): (1) REFPATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (2) REFENV=prod
DEBUG:(GEN_JOB_ENV): (3) REFENV=prod
DEBUG:(F_LSAF_EXISTS) - 2023-02-15T01:56:31 - Iteration: 1: slept = 0, exists = 1
DEBUG:(F_LSAF_EXISTS) - 2023-02-15T01:56:31 - Iteration: 1: slept = 0, exists = 1
DEBUG:(F_LSAF_EXISTS) - 2023-02-15T01:56:31 - Iteration: 1: slept = 0, exists = 1
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

MPRINT(SUBMIT_JOB):  ;
Notice:(SUBMIT_JOB): LSAF Job Path exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job.
MPRINT(SUBMIT_JOB):   proc format;
MPRINT(SUBMIT_JOB):   value $jobabbr "job_gadam_ongoing_studies.job"= "gos" "job_studies_status.job"= "ss" "job_gadam_sdtm_key_core_vars.job"= "gskcv" "job_unzip_sdtm_sources.job"= "uss" 
"job_zip_extract_files.job"= "zef" "job_lsaf_get_last_sdtm.job"= "lgls" "setup_reporting_event_folder.job"= "sref" "job_gadam_refresh_sdtm_last.job"= "grsl" "job_gadam_update_refresh_info.job"= 
"guri" "convert_definetosas.job"= "cdts" "job_gadam_studysetup.job"= "gss" "job_gadam_rebuild_adam.job"= "gra" "job_adAAA" - "job_adzzz"= "adx" "job_qcstudyadams.job"= "qcsa" 
"job_qc_gadam_vs_study.job"= "qcgvs" "job_qc_gadam_vs_study-overview.job"= "qcgvso" "job_check_and_load.job"= "cal" "job_tAAA" - "job_tzzz"= "txx" "job_gadam_qc_overviews.job"= "gqco" 
"job_make_sdtm_pool_jobs.job"= "mspj" "job_lsaf_pool_last_sdtm.job"= "lpls" "sdtm_pool-AAA" - "sdtm_pool-zzz"= "pci" "job_gadam_refresh_sdtm_overview.job"= "grso" "getdata.job"= "gd" OTHER = "***" ;
NOTE: Format $JOBABBR is already on the library WORK.FORMATS.
NOTE: Format $JOBABBR has been output.
MPRINT(SUBMIT_JOB):   run;
NOTE: PROCEDURE FORMAT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SUBMIT_JOB):   quit;
job_instance=>Ngos117Prod_4_x0_8<
MPRINT(LSAF_GETJOBPARAMETERS):  ;
MPRINT(LSAF_GETJOBPARAMETERS):   data work.job_Parameters (label="Created by LSAF_GETJOBPARAMETERS" KEEP=jobPath jobVersion name label type defaultValue fileVersion includeSubFolders );
MPRINT(LSAF_GETJOBPARAMETERS):   attrib returnCode length=8 message length=$200 logMsgPrefix length=$70 logMsgPrimary length=$70 logMsg length=$300 rowCount length=8 jobPath length=$2048 label="Job 
Path" jobVersion length=$32 label="Job Version" name length=$256 label="Parameter Name" label length=$256 label="Parameter Label" type length=$32 label="Parameter Type" defaultValue length=$2048 
label="Parameter Default Value" fileVersion length=$32 label="File Version if File Type" includeSubFolders length=8 label="Include Container SubFolders" includesSubFolders length=$5 label="FOR 
INTERNAL PROCESSING ONLY.  WILL BE DROPPED." ;
MPRINT(LSAF_GETJOBPARAMETERS):   rowCount=0;
MPRINT(LSAF_GETJOBPARAMETERS):   declare javaobj srv("com/sas/lsaf/macro/execution/job/JobService") ;
MPRINT(LSAF_GETJOBPARAMETERS):   declare javaobj results("com/sas/lsaf/macro/execution/job/SasJobParametersResult");
MPRINT(LSAF_GETJOBPARAMETERS):   srv.callStaticVoidMethod("getRepositoryJobParameters", "/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job", "", results) ;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_GETJOBPARAMETERS):   if (returnCode ne 0) then do;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_GETJOBPARAMETERS):   if "" NE "" then logMsg=" Cannot retrieve parameters for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job, version " ;
MPRINT(LSAF_GETJOBPARAMETERS):   else logMsg=" Cannot retrieve parameters for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   else do;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsg=" Parameters were returned for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getJobPath", jobPath);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getJobVersion", jobVersion);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callIntMethod("getSize", rowCount);
MPRINT(LSAF_GETJOBPARAMETERS):   do row=0 to rowCount - 1;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getName", row, name);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getLabel", row, label);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getType", row, type);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getDefaultValue", row, defaultValue);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getFileVersion", row, fileVersion);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getContainerIncludeSubfolders", row, includesSubFolders);
MPRINT(LSAF_GETJOBPARAMETERS):   includeSubFolders=input(includesSubFolders,best.);
MPRINT(LSAF_GETJOBPARAMETERS):   output;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   put;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " " "lsaf_getjobparameters";
MPRINT(LSAF_GETJOBPARAMETERS):   if (rowCount=0) then put logMsgPrefix " No parameters were found.";
MPRINT(LSAF_GETJOBPARAMETERS):   else put logMsgPrefix " " rowCount " records written to data set work.job_Parameters";
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(LSAF_GETJOBPARAMETERS):   put;
MPRINT(LSAF_GETJOBPARAMETERS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_GETJOBPARAMETERS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_GETJOBPARAMETERS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  Parameters were returned for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_getjobparameters
NOTE: SAS Life Science Analytics Framework Macro: *  8  records written to data set work.job_Parameters
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: The data set WORK.JOB_PARAMETERS has 8 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(SUBMIT_JOB):  ;
NOTE: The dataset WORK.JOB_PARAMETERS has 8 observations and 8 variables.
MPRINT(SUBMIT_JOB):   ;
MPRINT(SUBMIT_JOB):   *- dataset to specify job parameters (from macro parameters values) -*;
MPRINT(SUBMIT_JOB):   data lsaf_job_params(index=(name));
MPRINT(SUBMIT_JOB):   set work.job_Parameters(rename=(defaultValue = value));
MPRINT(SUBMIT_JOB):   if upcase(name) = "_PARENTJOB_WS_" then do;
MPRINT(SUBMIT_JOB):   if symexist("_SASWS_") and type = "CHARACTER" then value = symget("_SASWS_");
MPRINT(SUBMIT_JOB):   else value = " ";
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   else if upcase(name) = "_PARENTJOB_WRK_" then do;
MPRINT(SUBMIT_JOB):   value = pathname("WORK", "L");
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   else if symexist(name) then do;
MPRINT(SUBMIT_JOB):   if symget(name) ^= ' ' then value = symget(name);
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   new_value = translate(value, ' ', ',;()"''&%');
MPRINT(SUBMIT_JOB):   if new_value ne value then put "NOTE:(SUBMIT_JOB): Special characters may be removed from parameter value:" / @2 "parameter: " name /@2 "old value: " value /@2 "new value: " 
new_value;
MPRINT(SUBMIT_JOB):   if _n_=1 then put "Not" "ice:(SUBMIT_JOB): Updated Job parameters:";
MPRINT(SUBMIT_JOB):   if type = "FOLDER" then put " - " name @+(-1) "=" value "[" type= @+(-1) ", " includeSubFolders= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   else if TYPE = "FILE" then put " - " name @+(-1) "=" value "[" type= @+(-1) ", " fileversion= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   else put " - " name @+(-1) "=" value "[" type= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   run;
Notice:(SUBMIT_JOB): Updated Job parameters:
 - gadam_path=/clinical/argx-117/hv/argx-117-1901/biostat/staging/generic_adam [type=FOLDER, includeSubFolders=0]
 - sdtm_last_path=/clinical/argx-117/hv/argx-117-1901/biostat/staging/data_received/sdtm_last [type=FOLDER, includeSubFolders=0]
 - study_adam_path=  [type=FOLDER, includeSubFolders=0]
 - gadam_files_source=/general/biostat/gadam [type=FOLDER, includeSubFolders=1]
 - job_instance=Ngos117Prod_4_x0_8 [type=CHARACTER]
 - _PARENTJOB_WS_=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15 [type=CHARACTER]
 - _PARENTJOB_WRK_=/saswork/sas_tmp/SAS_work4CFB0019563E_xar08auv.vsp.sas.com/SAS_work5B910019563E_xar08auv.vsp.sas.com [type=CHARACTER]
 - USE_SAS_WORKSPACE_MACROS=  [type=CHARACTER]
NOTE: There were 8 observations read from the data set WORK.JOB_PARAMETERS.
NOTE: The data set WORK.LSAF_JOB_PARAMS has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

N_PARAMS=8
MPRINT(SUBMIT_JOB):   data lsaf_job_params(index=(name));
MPRINT(SUBMIT_JOB):   set lsaf_job_params;
MPRINT(SUBMIT_JOB):   by name;
MPRINT(SUBMIT_JOB):   if (not first.name) or (not last.name) then do;
MPRINT(SUBMIT_JOB):   if last.name then action = "(kept)   ";
MPRINT(SUBMIT_JOB):   else action = "(dropped)";
MPRINT(SUBMIT_JOB):   drop action;
MPRINT(SUBMIT_JOB):   put "Not" "ice:(SUBMIT_JOB): duplicate parameter " name " = " value @+(3) action;
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   if last.name;
MPRINT(SUBMIT_JOB):   run;
NOTE: There were 8 observations read from the data set WORK.LSAF_JOB_PARAMS.
NOTE: The data set WORK.LSAF_JOB_PARAMS has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SUBMIT_JOB):   data _null_;
MPRINT(SUBMIT_JOB):   file print;
MPRINT(SUBMIT_JOB):   set lsaf_job_params(where=(prxmatch('/^(FOLDER|FILE)$/', trim(type))) in=a) lsaf_job_params(where=(prxmatch('/^(FOLDER|FILE)$/', trim(type))=0 and value ^= ' ')) end=last;
MPRINT(SUBMIT_JOB):   if _n_=1 then putlog "=== 2023-02-15T01:56:31 - Submit job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job (with parameters: " @;
MPRINT(SUBMIT_JOB):   _n_a+a;
MPRINT(SUBMIT_JOB):   if _n_-1 = _n_a then do;
MPRINT(SUBMIT_JOB):   putlog / @8 @;
MPRINT(SUBMIT_JOB):   put / @8 @;
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   if a then putlog / @8 name @+(-1) "=" value ' (' type= includeSubFolders= @+(-1) ')   ' @;
MPRINT(SUBMIT_JOB):   else putlog name @+(-1) "=" value "  " @ ;
MPRINT(SUBMIT_JOB):   if last then putlog @+8 ") ===";
MPRINT(SUBMIT_JOB):   if _n_=1 then put "=== 2023-02-15T01:56:31 - Submit job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job (with parameters: " @;
MPRINT(SUBMIT_JOB):   if a then put / @8 name @+(-1) "=" value ' (' type= includeSubFolders= @+(-1) ')   ' @;
MPRINT(SUBMIT_JOB):   else put name @+(-1) "=" value "  " @ ;
MPRINT(SUBMIT_JOB):   if last then put @+8 ") ===";
MPRINT(SUBMIT_JOB):   run;
=== 2023-02-15T01:56:31 - Submit job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job (with parameters: 
       gadam_files_source=/general/biostat/gadam  (type=FOLDER includeSubFolders=1)   
       gadam_path=/clinical/argx-117/hv/argx-117-1901/biostat/staging/generic_adam  (type=FOLDER includeSubFolders=0)   
       sdtm_last_path=/clinical/argx-117/hv/argx-117-1901/biostat/staging/data_received/sdtm_last  (type=FOLDER includeSubFolders=0)   
       study_adam_path=   (type=FOLDER includeSubFolders=0)   
       _PARENTJOB_WRK_=/saswork/sas_tmp/SAS_work4CFB0019563E_xar08auv.vsp.sas.com/SAS_work5B910019563E_xar08auv.vsp.sas.com   _PARENTJOB_WS_=
/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15   job_instance=Ngos117Prod_4_x0_8           ) ===
NOTE: 7 lines were written to file PRINT.
NOTE: There were 4 observations read from the data set WORK.LSAF_JOB_PARAMS.
      WHERE PRXMATCH('/^(FOLDER|FILE)$/', TRIM(type));
NOTE: There were 3 observations read from the data set WORK.LSAF_JOB_PARAMS.
      WHERE (PRXMATCH('/^(FOLDER|FILE)$/', TRIM(type))=0) and (value not = ' ');
NOTE: The DATA step printed page 15.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(LSAF_SUBMITJOB):  ;
NOTE: lsaf_submitjob: Validating dataset lsaf_job_params
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   options nonotes;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   proc datasets library=work nolist;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   delete __SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   quit;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   options nonotes;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   data _null_;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   length message $45 libName $8 dsName $300;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   providedDatasetName=kstrip("lsaf_job_params");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsName="INVALID";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsNameIsValid=0;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dotCount=countc(providedDatasetName,".");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dotPosition=kindexc(providedDatasetName,".");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   *put dotPosition=;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (dotPosition=1 or dotPosition=length(providedDatasetName)) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message=" Missing either LIBNAME or data set.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   select (dotCount);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   when (0) dsName=providedDatasetName;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   when (1) do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (dotPosition le 9) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   libName = (ksubstr(providedDatasetName, 1, dotPosition-1));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   *put libName=;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsName = (ksubstr(providedDatasetName, dotPosition+1));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   else do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Libname longer than 8 characters.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   otherwise do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Invalid data set name structure.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   firstchar=ksubstr(kleft(dsName), 1, 1);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (anydigit(firstchar)) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Data set name must start with a character.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (length(dsName) > 32) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Data set name longer than 32 characters.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsNameIsValid=1;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   SETVARS: call symput("_lsafvaliddsn_", strip(put(dsNameIsValid, best.)));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   call symput("dsnMsg", message);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   call symput("specifiedLib", strip(libName));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   run;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   options NONOTES;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   * CHECK EXISTS: Also getting errors for data set name.;
MPRINT(LSAF_VALIDATE_SASDATASET):  ;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):  ;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   proc sort data=lsaf_job_params out=__SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   by name;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   data _null_;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   set __SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   by name;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   if (first.name AND NOT(last.name)) then do;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   call symput("_lsafMsg_", "Input data set has duplicate values for parameter name " || name || ".");
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   STOP;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   end;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   call symput("_lsafRC_", "0");
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   option notes;
MPRINT(LSAF_SUBMITJOB):  ;
MPRINT(LSAF_SUBMITJOB):   option notes;
MPRINT(LSAF_SUBMITJOB):   data _null_;
MPRINT(LSAF_SUBMITJOB):   attrib returnCode length=8 message length=$200 jobSubmissionId length=$525 logMsgPrefix length=$70 logMsgPrimary length=$70 logMsg length=$300 ;
MPRINT(LSAF_SUBMITJOB):   set lsaf_job_params end=eof;
MPRINT(LSAF_SUBMITJOB):   if (_n_ = 1) then do;
MPRINT(LSAF_SUBMITJOB):   declare javaobj params("com/sas/lsaf/macro/execution/job/SasParameterValues");
MPRINT(LSAF_SUBMITJOB):   declare javaobj srv("com/sas/lsaf/macro/execution/jobsubmission/JobSubmissionService");
MPRINT(LSAF_SUBMITJOB):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   params.callVoidMethod("addValue", kstrip(name), kstrip(value), kstrip(type), kstrip(fileVersion), includeSubFolders);
MPRINT(LSAF_SUBMITJOB):   if (eof);
MPRINT(LSAF_SUBMITJOB):   declare javaobj job("com/sas/lsaf/macro/execution/jobsubmission/SasSubmittableJob", "/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job", "", 
params);
MPRINT(LSAF_SUBMITJOB):   srv.callStaticStringMethod("submitRepositoryJob", job, results, jobSubmissionId);
MPRINT(LSAF_SUBMITJOB):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_SUBMITJOB):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_SUBMITJOB):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_SUBMITJOB):   if (returnCode ne 0) then do;
MPRINT(LSAF_SUBMITJOB):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_SUBMITJOB):   logMsg=" Cannot submit job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job";
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   else do;
MPRINT(LSAF_SUBMITJOB):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_SUBMITJOB):   logMsg=" Submitted job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job";
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   put;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " " "lsaf_submitjob";
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(LSAF_SUBMITJOB):   if "lsaf_job_params" = "" then put logMsgPrefix "No job parameters were supplied.";
MPRINT(LSAF_SUBMITJOB):   else put logMsgPrefix "sas_dsname = lsaf_job_params";
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix "_lsafJobSubmissionId_= " jobSubmissionId;
MPRINT(LSAF_SUBMITJOB):   put;
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafJobSubmissionId_", strip(jobSubmissionId));
MPRINT(LSAF_SUBMITJOB):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  Submitted job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_submitjob
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: * sas_dsname = lsaf_job_params
NOTE: SAS Life Science Analytics Framework Macro: * _lsafJobSubmissionId_= e10fb33f-b740-43b5-bab8-e2c647f9f686
NOTE: There were 8 observations read from the data set WORK.LSAF_JOB_PARAMS.
NOTE: DATA statement used (Total process time):
      real time           1.62 seconds
      cpu time            0.00 seconds
      

MPRINT(LSAF_SUBMITJOB):   options NONOTES;
MPRINT(SUBMIT_JOB):  ;
MPRINT(SUBMIT_JOB):   *- Job submission succeeded -*;
MPRINT(SUBMIT_JOB):   option nomprint nonotes
Calling %lsaf_getitemid(lsaf_path=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job) ...
_LSAFMSG_=Success.  _LSAFRC_=0  _LSAFITEMID_=090a95d3-6059-474f-a1bd-61c6768ba993
Calling %step_lsaf_getjobsubmissioninfos(job_subm_id=e10fb33f-b740-43b5-bab8-e2c647f9f686) ...
Notice: SYSDATASTEPPHASE=EXECUTION IN_DATA_STEP=N
Ignoring record: submissionId=30678109-1661-4a87-858f-1bc1b0d581fa jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job jobVersion=0.1
jobId=abcfa448-6829-4513-8bef-3d8418207d45
Ignoring record: submissionId=c4fb4991-9137-4374-8d55-32ed9002f3d8 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_ongoing_studies.job jobVersion=0.1
jobId=c762f385-9376-49c8-8cec-d19326e7e18e
Ignoring record: submissionId=f00d2b52-d9f1-4ef1-8922-181d934626e0 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_ongoing_studies.job jobVersion=0.1
jobId=c762f385-9376-49c8-8cec-d19326e7e18e
Ignoring record: submissionId=05e0665e-78cd-4a3c-9aa3-9ddb53288cad jobPath=/clinical/argx-113/hv/argx-113-1702/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job jobVersion=52.0
jobId=bd48e139-ba53-466d-a613-fa25b86270cc
Ignoring record: submissionId=feed1f0f-2d9a-42b9-8060-8fddd1e47337 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job jobVersion=0.1
jobId=abcfa448-6829-4513-8bef-3d8418207d45
Ignoring record: submissionId=0e426e98-1f39-407e-a152-2a4b08808841 jobPath=/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job jobVersion= 
jobId=02b06e4d-7777-4a59-b2f9-2fc165603216
Notice: _LSAFJOBSUBMISSIONID_=e10fb33f-b740-43b5-bab8-e2c647f9f686 SESSIONID=ff49c076-f89e-471b-a0b6-5b8b298ed69a JOB=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job 
JOBID=090a95d3-6059-474f-a1bd-61c6768ba993
(SUBMIT_JOB): 2023-02-15T01:56:33 - Submitted REPOSITORY Job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job          with Submission ID: 
e10fb33f-b740-43b5-bab8-e2c647f9f686, Status: STARTED
(SUBMIT_JOB): 01:56:33.51 Elapsed: 00:00:02.49 Job Submission Status: STARTED
(SUBMIT_JOB): 01:56:36.05 Elapsed: 00:00:05.02 Job Submission Status: STARTED
(SUBMIT_JOB): 01:56:38.58 Elapsed: 00:00:07.56 Job Submission Status: STARTED
(SUBMIT_JOB): 01:56:41.12 Elapsed: 00:00:10.10 Job Submission Status: STARTED
(SUBMIT_JOB): 01:56:43.66 Elapsed: 00:00:12.63 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:56:46.19 Elapsed: 00:00:15.16 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:56:48.72 Elapsed: 00:00:17.69 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:56:51.25 Elapsed: 00:00:20.22 Job Submission Status: POST_EXECUTION_PUBLISHING
(SUBMIT_JOB): 01:56:53.81 Elapsed: 00:00:22.78 Job Submission Status: COMPLETED_SUCCESSFUL
(SUBMIT_JOB): 2023-02-15T01:56:56 - Submitted REPOSITORY job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job has completed with status: COMPLETED_SUCCESSFUL
MPRINT(SUBMIT_JOB):  ;
job_gadam_studysetup.job: get job status: 0: Success.:       Elapsed: 00:00:25.29       REPOSITORY Job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job with Submission 
ID: e10fb33f-b740-43b5-bab8-e2c647f9f686, Status: COMPLETED_SUCCESSFUL
MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   option NOMPRINT;
%rebuild_generic_adam(gadam_study_path=/clinical/argx-117/hv/argx-117-1901/biostat/staging/generic_adam, sdtm_last_path=/clinical/argx-117/hv/argx-117-1901/biostat/staging/data_received/sdtm_last)
MPRINT(REBUILD_GENERIC_ADAM):   notes;
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/hv/argx-117-1901/biostat/staging/generic_adam", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/hv/argx-117-1901/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/hv/argx-117-1901/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/hv/argx-117-1901/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/hv/argx-117-1901/biostat/staging/generic_adam
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(REBUILD_GENERIC_ADAM):  ;
Notice: Rebuilding adam datasets in generic_adam reporting event in /clinical/argx-117/hv/argx-117-1901/biostat/staging/generic_adam ...
NUM_JOBS_SPAWNED=9
MACROAPIVER=2.6
MPRINT(SUBMIT_JOB):   proc sql noprint;
MPRINT(SUBMIT_JOB):   drop table work.job_Parameters;
NOTE: Table WORK.JOB_PARAMETERS has been dropped.
MPRINT(SUBMIT_JOB):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

DEBUG:(GEN_JOB_ENV): PRX=117
DEBUG:(GEN_JOB_ENV): prxmatch(117, /general/biostat/jobs/gadam_rebuild_adam/dev/jobs/job_gadam_rebuild_adam.job) = 1
DEBUG:(GEN_JOB_ENV): (0) REFPATH=
DEBUG:(GEN_JOB_ENV): (0) REPEVPATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (0) RELREPEVPATH=/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (0) _SASFILEPATH_=/general/biostat/jobs/gadam_ongoing_studies/prod/programs/lsaf_get_last_sdtm.sas
DEBUG:(GEN_JOB_ENV): (0) PROGPATH=/general/biostat/jobs/gadam_ongoing_studies/prod/programs/
DEBUG:(GEN_JOB_ENV): (0) PATH=/general/biostat/jobs/gadam_rebuild_adam/dev/jobs/job_gadam_rebuild_adam.job
Setting refpath = &repevpath
DEBUG:(GEN_JOB_ENV): (1) REFPATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (2) REFENV=prod
DEBUG:(GEN_JOB_ENV): (3) REFENV=prod
DEBUG:(F_LSAF_EXISTS) - 2023-02-15T01:56:56 - Iteration: 1: slept = 0, exists = 1
DEBUG:(F_LSAF_EXISTS) - 2023-02-15T01:56:56 - Iteration: 1: slept = 0, exists = 1
DEBUG:(F_LSAF_EXISTS) - 2023-02-15T01:56:56 - Iteration: 1: slept = 0, exists = 1
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(SUBMIT_JOB):  ;
Notice:(SUBMIT_JOB): LSAF Job Path exists: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job.
MPRINT(SUBMIT_JOB):   proc format;
MPRINT(SUBMIT_JOB):   value $jobabbr "job_gadam_ongoing_studies.job"= "gos" "job_studies_status.job"= "ss" "job_gadam_sdtm_key_core_vars.job"= "gskcv" "job_unzip_sdtm_sources.job"= "uss" 
"job_zip_extract_files.job"= "zef" "job_lsaf_get_last_sdtm.job"= "lgls" "setup_reporting_event_folder.job"= "sref" "job_gadam_refresh_sdtm_last.job"= "grsl" "job_gadam_update_refresh_info.job"= 
"guri" "convert_definetosas.job"= "cdts" "job_gadam_studysetup.job"= "gss" "job_gadam_rebuild_adam.job"= "gra" "job_adAAA" - "job_adzzz"= "adx" "job_qcstudyadams.job"= "qcsa" 
"job_qc_gadam_vs_study.job"= "qcgvs" "job_qc_gadam_vs_study-overview.job"= "qcgvso" "job_check_and_load.job"= "cal" "job_tAAA" - "job_tzzz"= "txx" "job_gadam_qc_overviews.job"= "gqco" 
"job_make_sdtm_pool_jobs.job"= "mspj" "job_lsaf_pool_last_sdtm.job"= "lpls" "sdtm_pool-AAA" - "sdtm_pool-zzz"= "pci" "job_gadam_refresh_sdtm_overview.job"= "grso" "getdata.job"= "gd" OTHER = "***" ;
NOTE: Format $JOBABBR is already on the library WORK.FORMATS.
NOTE: Format $JOBABBR has been output.
MPRINT(SUBMIT_JOB):   run;
NOTE: PROCEDURE FORMAT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SUBMIT_JOB):   quit;
job_instance=>Ngos117Prod_4_x0_9<
MPRINT(LSAF_GETJOBPARAMETERS):  ;
MPRINT(LSAF_GETJOBPARAMETERS):   data work.job_Parameters (label="Created by LSAF_GETJOBPARAMETERS" KEEP=jobPath jobVersion name label type defaultValue fileVersion includeSubFolders );
MPRINT(LSAF_GETJOBPARAMETERS):   attrib returnCode length=8 message length=$200 logMsgPrefix length=$70 logMsgPrimary length=$70 logMsg length=$300 rowCount length=8 jobPath length=$2048 label="Job 
Path" jobVersion length=$32 label="Job Version" name length=$256 label="Parameter Name" label length=$256 label="Parameter Label" type length=$32 label="Parameter Type" defaultValue length=$2048 
label="Parameter Default Value" fileVersion length=$32 label="File Version if File Type" includeSubFolders length=8 label="Include Container SubFolders" includesSubFolders length=$5 label="FOR 
INTERNAL PROCESSING ONLY.  WILL BE DROPPED." ;
MPRINT(LSAF_GETJOBPARAMETERS):   rowCount=0;
MPRINT(LSAF_GETJOBPARAMETERS):   declare javaobj srv("com/sas/lsaf/macro/execution/job/JobService") ;
MPRINT(LSAF_GETJOBPARAMETERS):   declare javaobj results("com/sas/lsaf/macro/execution/job/SasJobParametersResult");
MPRINT(LSAF_GETJOBPARAMETERS):   srv.callStaticVoidMethod("getRepositoryJobParameters", "/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job", "", results) ;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_GETJOBPARAMETERS):   if (returnCode ne 0) then do;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_GETJOBPARAMETERS):   if "" NE "" then logMsg=" Cannot retrieve parameters for job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job, version " ;
MPRINT(LSAF_GETJOBPARAMETERS):   else logMsg=" Cannot retrieve parameters for job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job" ;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   else do;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsg=" Parameters were returned for job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job" ;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getJobPath", jobPath);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getJobVersion", jobVersion);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callIntMethod("getSize", rowCount);
MPRINT(LSAF_GETJOBPARAMETERS):   do row=0 to rowCount - 1;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getName", row, name);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getLabel", row, label);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getType", row, type);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getDefaultValue", row, defaultValue);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getFileVersion", row, fileVersion);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getContainerIncludeSubfolders", row, includesSubFolders);
MPRINT(LSAF_GETJOBPARAMETERS):   includeSubFolders=input(includesSubFolders,best.);
MPRINT(LSAF_GETJOBPARAMETERS):   output;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   put;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " " "lsaf_getjobparameters";
MPRINT(LSAF_GETJOBPARAMETERS):   if (rowCount=0) then put logMsgPrefix " No parameters were found.";
MPRINT(LSAF_GETJOBPARAMETERS):   else put logMsgPrefix " " rowCount " records written to data set work.job_Parameters";
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(LSAF_GETJOBPARAMETERS):   put;
MPRINT(LSAF_GETJOBPARAMETERS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_GETJOBPARAMETERS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_GETJOBPARAMETERS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  Parameters were returned for job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_getjobparameters
NOTE: SAS Life Science Analytics Framework Macro: *  12  records written to data set work.job_Parameters
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: The data set WORK.JOB_PARAMETERS has 12 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
      

MPRINT(SUBMIT_JOB):  ;
NOTE: The dataset WORK.JOB_PARAMETERS has 12 observations and 8 variables.
MPRINT(SUBMIT_JOB):   ;
MPRINT(SUBMIT_JOB):   *- dataset to specify job parameters (from macro parameters values) -*;
MPRINT(SUBMIT_JOB):   data lsaf_job_params(index=(name));
MPRINT(SUBMIT_JOB):   set work.job_Parameters(rename=(defaultValue = value));
MPRINT(SUBMIT_JOB):   if upcase(name) = "_PARENTJOB_WS_" then do;
MPRINT(SUBMIT_JOB):   if symexist("_SASWS_") and type = "CHARACTER" then value = symget("_SASWS_");
MPRINT(SUBMIT_JOB):   else value = " ";
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   else if upcase(name) = "_PARENTJOB_WRK_" then do;
MPRINT(SUBMIT_JOB):   value = pathname("WORK", "L");
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   else if symexist(name) then do;
MPRINT(SUBMIT_JOB):   if symget(name) ^= ' ' then value = symget(name);
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   new_value = translate(value, ' ', ',;()"''&%');
MPRINT(SUBMIT_JOB):   if new_value ne value then put "NOTE:(SUBMIT_JOB): Special characters may be removed from parameter value:" / @2 "parameter: " name /@2 "old value: " value /@2 "new value: " 
new_value;
MPRINT(SUBMIT_JOB):   if _n_=1 then put "Not" "ice:(SUBMIT_JOB): Updated Job parameters:";
MPRINT(SUBMIT_JOB):   if type = "FOLDER" then put " - " name @+(-1) "=" value "[" type= @+(-1) ", " includeSubFolders= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   else if TYPE = "FILE" then put " - " name @+(-1) "=" value "[" type= @+(-1) ", " fileversion= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   else put " - " name @+(-1) "=" value "[" type= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   run;
Notice:(SUBMIT_JOB): Updated Job parameters:
 - gadam_study_path=/clinical/argx-117/hv/argx-117-1901/biostat/staging/generic_adam [type=FOLDER, includeSubFolders=0]
 - sdtm_last_path=/clinical/argx-117/hv/argx-117-1901/biostat/staging/data_received/sdtm_last [type=FOLDER, includeSubFolders=0]
 - qc_gadam_vs_study=Y [type=CHARACTER]
 - check_and_load_gadam=Y [type=CHARACTER]
 - run_gadam_tables=Y [type=CHARACTER]
 - wait=Y [type=CHARACTER]
 - force=N [type=CHARACTER]
 - mock=N [type=CHARACTER]
 - job_instance=Ngos117Prod_4_x0_9 [type=CHARACTER]
 - _PARENTJOB_WS_=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15 [type=CHARACTER]
 - _PARENTJOB_WRK_=/saswork/sas_tmp/SAS_work4CFB0019563E_xar08auv.vsp.sas.com/SAS_work5B910019563E_xar08auv.vsp.sas.com [type=CHARACTER]
 - USE_SAS_WORKSPACE_MACROS=  [type=CHARACTER]
NOTE: There were 12 observations read from the data set WORK.JOB_PARAMETERS.
NOTE: The data set WORK.LSAF_JOB_PARAMS has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

N_PARAMS=12
MPRINT(SUBMIT_JOB):   data lsaf_job_params(index=(name));
MPRINT(SUBMIT_JOB):   set lsaf_job_params;
MPRINT(SUBMIT_JOB):   by name;
MPRINT(SUBMIT_JOB):   if (not first.name) or (not last.name) then do;
MPRINT(SUBMIT_JOB):   if last.name then action = "(kept)   ";
MPRINT(SUBMIT_JOB):   else action = "(dropped)";
MPRINT(SUBMIT_JOB):   drop action;
MPRINT(SUBMIT_JOB):   put "Not" "ice:(SUBMIT_JOB): duplicate parameter " name " = " value @+(3) action;
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   if last.name;
MPRINT(SUBMIT_JOB):   run;
NOTE: There were 12 observations read from the data set WORK.LSAF_JOB_PARAMS.
NOTE: The data set WORK.LSAF_JOB_PARAMS has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SUBMIT_JOB):   data _null_;
MPRINT(SUBMIT_JOB):   file print;
MPRINT(SUBMIT_JOB):   set lsaf_job_params(where=(prxmatch('/^(FOLDER|FILE)$/', trim(type))) in=a) lsaf_job_params(where=(prxmatch('/^(FOLDER|FILE)$/', trim(type))=0 and value ^= ' ')) end=last;
MPRINT(SUBMIT_JOB):   if _n_=1 then putlog "=== 2023-02-15T01:56:57 - Submit job: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job (with parameters: " @;
MPRINT(SUBMIT_JOB):   _n_a+a;
MPRINT(SUBMIT_JOB):   if _n_-1 = _n_a then do;
MPRINT(SUBMIT_JOB):   putlog / @8 @;
MPRINT(SUBMIT_JOB):   put / @8 @;
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   if a then putlog / @8 name @+(-1) "=" value ' (' type= includeSubFolders= @+(-1) ')   ' @;
MPRINT(SUBMIT_JOB):   else putlog name @+(-1) "=" value "  " @ ;
MPRINT(SUBMIT_JOB):   if last then putlog @+8 ") ===";
MPRINT(SUBMIT_JOB):   if _n_=1 then put "=== 2023-02-15T01:56:57 - Submit job: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job (with parameters: " @;
MPRINT(SUBMIT_JOB):   if a then put / @8 name @+(-1) "=" value ' (' type= includeSubFolders= @+(-1) ')   ' @;
MPRINT(SUBMIT_JOB):   else put name @+(-1) "=" value "  " @ ;
MPRINT(SUBMIT_JOB):   if last then put @+8 ") ===";
MPRINT(SUBMIT_JOB):   run;
=== 2023-02-15T01:56:57 - Submit job: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job (with parameters: 
       gadam_study_path=/clinical/argx-117/hv/argx-117-1901/biostat/staging/generic_adam  (type=FOLDER includeSubFolders=0)   
       sdtm_last_path=/clinical/argx-117/hv/argx-117-1901/biostat/staging/data_received/sdtm_last  (type=FOLDER includeSubFolders=0)   
       _PARENTJOB_WRK_=/saswork/sas_tmp/SAS_work4CFB0019563E_xar08auv.vsp.sas.com/SAS_work5B910019563E_xar08auv.vsp.sas.com   _PARENTJOB_WS_=
/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15   check_and_load_gadam=Y   force=N   job_instance=Ngos117Prod_4_x0_9   mock=N   qc_gadam_vs_study=Y
  run_gadam_tables=Y   wait=Y           ) ===
NOTE: 6 lines were written to file PRINT.
NOTE: There were 2 observations read from the data set WORK.LSAF_JOB_PARAMS.
      WHERE PRXMATCH('/^(FOLDER|FILE)$/', TRIM(type));
NOTE: There were 9 observations read from the data set WORK.LSAF_JOB_PARAMS.
      WHERE (PRXMATCH('/^(FOLDER|FILE)$/', TRIM(type))=0) and (value not = ' ');
NOTE: The DATA step printed page 17.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(LSAF_SUBMITJOB):  ;
NOTE: lsaf_submitjob: Validating dataset lsaf_job_params
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   options nonotes;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   proc datasets library=work nolist;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   delete __SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   quit;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   options nonotes;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   data _null_;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   length message $45 libName $8 dsName $300;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   providedDatasetName=kstrip("lsaf_job_params");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsName="INVALID";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsNameIsValid=0;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dotCount=countc(providedDatasetName,".");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dotPosition=kindexc(providedDatasetName,".");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   *put dotPosition=;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (dotPosition=1 or dotPosition=length(providedDatasetName)) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message=" Missing either LIBNAME or data set.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   select (dotCount);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   when (0) dsName=providedDatasetName;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   when (1) do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (dotPosition le 9) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   libName = (ksubstr(providedDatasetName, 1, dotPosition-1));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   *put libName=;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsName = (ksubstr(providedDatasetName, dotPosition+1));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   else do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Libname longer than 8 characters.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   otherwise do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Invalid data set name structure.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   firstchar=ksubstr(kleft(dsName), 1, 1);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (anydigit(firstchar)) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Data set name must start with a character.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (length(dsName) > 32) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Data set name longer than 32 characters.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsNameIsValid=1;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   SETVARS: call symput("_lsafvaliddsn_", strip(put(dsNameIsValid, best.)));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   call symput("dsnMsg", message);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   call symput("specifiedLib", strip(libName));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   run;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   options NONOTES;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   * CHECK EXISTS: Also getting errors for data set name.;
MPRINT(LSAF_VALIDATE_SASDATASET):  ;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):  ;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   proc sort data=lsaf_job_params out=__SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   by name;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   data _null_;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   set __SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   by name;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   if (first.name AND NOT(last.name)) then do;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   call symput("_lsafMsg_", "Input data set has duplicate values for parameter name " || name || ".");
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   STOP;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   end;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   call symput("_lsafRC_", "0");
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   option notes;
MPRINT(LSAF_SUBMITJOB):  ;
MPRINT(LSAF_SUBMITJOB):   option notes;
MPRINT(LSAF_SUBMITJOB):   data _null_;
MPRINT(LSAF_SUBMITJOB):   attrib returnCode length=8 message length=$200 jobSubmissionId length=$525 logMsgPrefix length=$70 logMsgPrimary length=$70 logMsg length=$300 ;
MPRINT(LSAF_SUBMITJOB):   set lsaf_job_params end=eof;
MPRINT(LSAF_SUBMITJOB):   if (_n_ = 1) then do;
MPRINT(LSAF_SUBMITJOB):   declare javaobj params("com/sas/lsaf/macro/execution/job/SasParameterValues");
MPRINT(LSAF_SUBMITJOB):   declare javaobj srv("com/sas/lsaf/macro/execution/jobsubmission/JobSubmissionService");
MPRINT(LSAF_SUBMITJOB):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   params.callVoidMethod("addValue", kstrip(name), kstrip(value), kstrip(type), kstrip(fileVersion), includeSubFolders);
MPRINT(LSAF_SUBMITJOB):   if (eof);
MPRINT(LSAF_SUBMITJOB):   declare javaobj job("com/sas/lsaf/macro/execution/jobsubmission/SasSubmittableJob", "/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job", "", 
params);
MPRINT(LSAF_SUBMITJOB):   srv.callStaticStringMethod("submitRepositoryJob", job, results, jobSubmissionId);
MPRINT(LSAF_SUBMITJOB):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_SUBMITJOB):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_SUBMITJOB):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_SUBMITJOB):   if (returnCode ne 0) then do;
MPRINT(LSAF_SUBMITJOB):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_SUBMITJOB):   logMsg=" Cannot submit job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job";
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   else do;
MPRINT(LSAF_SUBMITJOB):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_SUBMITJOB):   logMsg=" Submitted job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job";
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   put;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " " "lsaf_submitjob";
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(LSAF_SUBMITJOB):   if "lsaf_job_params" = "" then put logMsgPrefix "No job parameters were supplied.";
MPRINT(LSAF_SUBMITJOB):   else put logMsgPrefix "sas_dsname = lsaf_job_params";
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix "_lsafJobSubmissionId_= " jobSubmissionId;
MPRINT(LSAF_SUBMITJOB):   put;
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafJobSubmissionId_", strip(jobSubmissionId));
MPRINT(LSAF_SUBMITJOB):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  Submitted job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_submitjob
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: * sas_dsname = lsaf_job_params
NOTE: SAS Life Science Analytics Framework Macro: * _lsafJobSubmissionId_= 5fcd3a12-dfcd-4c7f-ab4b-9428601af366
NOTE: There were 12 observations read from the data set WORK.LSAF_JOB_PARAMS.
NOTE: DATA statement used (Total process time):
      real time           1.48 seconds
      cpu time            0.00 seconds
      

MPRINT(LSAF_SUBMITJOB):   options NONOTES;
MPRINT(SUBMIT_JOB):  ;
MPRINT(SUBMIT_JOB):   *- Job submission succeeded -*;
MPRINT(SUBMIT_JOB):   option nomprint nonotes
Calling %lsaf_getitemid(lsaf_path=/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job) ...
_LSAFMSG_=Success.  _LSAFRC_=0  _LSAFITEMID_=02b06e4d-7777-4a59-b2f9-2fc165603216
Calling %step_lsaf_getjobsubmissioninfos(job_subm_id=5fcd3a12-dfcd-4c7f-ab4b-9428601af366) ...
Notice: SYSDATASTEPPHASE=EXECUTION IN_DATA_STEP=N
Ignoring record: submissionId=30678109-1661-4a87-858f-1bc1b0d581fa jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job jobVersion=0.1
jobId=abcfa448-6829-4513-8bef-3d8418207d45
Ignoring record: submissionId=c4fb4991-9137-4374-8d55-32ed9002f3d8 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_ongoing_studies.job jobVersion=0.1
jobId=c762f385-9376-49c8-8cec-d19326e7e18e
Ignoring record: submissionId=f00d2b52-d9f1-4ef1-8922-181d934626e0 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_ongoing_studies.job jobVersion=0.1
jobId=c762f385-9376-49c8-8cec-d19326e7e18e
Ignoring record: submissionId=05e0665e-78cd-4a3c-9aa3-9ddb53288cad jobPath=/clinical/argx-113/hv/argx-113-1702/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job jobVersion=52.0
jobId=bd48e139-ba53-466d-a613-fa25b86270cc
Ignoring record: submissionId=feed1f0f-2d9a-42b9-8060-8fddd1e47337 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job jobVersion=0.1
jobId=abcfa448-6829-4513-8bef-3d8418207d45
Ignoring record: submissionId=0e426e98-1f39-407e-a152-2a4b08808841 jobPath=/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job jobVersion= 
jobId=02b06e4d-7777-4a59-b2f9-2fc165603216
Notice: _LSAFJOBSUBMISSIONID_=5fcd3a12-dfcd-4c7f-ab4b-9428601af366 SESSIONID=8e799793-5007-4874-9a48-bdef46d103a6 JOB=/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job 
JOBID=02b06e4d-7777-4a59-b2f9-2fc165603216
(SUBMIT_JOB): 2023-02-15T01:56:59 - Submitted REPOSITORY Job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job          with Submission ID: 
5fcd3a12-dfcd-4c7f-ab4b-9428601af366, Status: STARTED
(SUBMIT_JOB): 01:56:58.91 Elapsed: 00:00:02.56 Job Submission Status: STARTED
(SUBMIT_JOB): 01:57:01.50 Elapsed: 00:00:05.14 Job Submission Status: STARTED
(SUBMIT_JOB): 01:57:04.03 Elapsed: 00:00:07.67 Job Submission Status: STARTED
(SUBMIT_JOB): 01:57:06.56 Elapsed: 00:00:10.21 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:57:09.11 Elapsed: 00:00:12.76 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:57:12.21 Elapsed: 00:00:15.85 Job Submission Status: RUNNING_TASKS
  Setup generic_adam_path=/clinical/argx-117/hv/argx-117-1901/biostat/staging/generic_adam : setup_result=setup_generic_adam: 0: Success.
  /clinical/argx-117/hv/argx-117-1901/biostat/staging/generic_adam : setup_result=skipped since &setup_gadam_folder = N
(SUBMIT_JOB): 01:57:15.56 Elapsed: 00:00:19.21 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:57:18.09 Elapsed: 00:00:21.74 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:57:20.62 Elapsed: 00:00:24.27 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:57:23.15 Elapsed: 00:00:26.80 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:57:25.86 Elapsed: 00:00:29.50 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:57:28.39 Elapsed: 00:00:32.04 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:57:35.92 Elapsed: 00:00:39.57 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:57:43.45 Elapsed: 00:00:47.10 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:57:50.98 Elapsed: 00:00:54.63 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:57:58.91 Elapsed: 00:01:02.56 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:58:21.44 Elapsed: 00:01:25.09 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:58:43.97 Elapsed: 00:01:47.62 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:59:14.01 Elapsed: 00:02:17.65 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 01:59:44.04 Elapsed: 00:02:47.69 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:00:14.96 Elapsed: 00:03:18.61 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:00:44.99 Elapsed: 00:03:48.64 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:01:15.03 Elapsed: 00:04:18.68 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:01:45.06 Elapsed: 00:04:48.71 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:02:15.09 Elapsed: 00:05:18.74 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:02:45.13 Elapsed: 00:05:48.77 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:03:15.18 Elapsed: 00:06:18.83 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:03:45.22 Elapsed: 00:06:48.87 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:04:15.25 Elapsed: 00:07:18.90 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:04:45.29 Elapsed: 00:07:48.94 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:05:15.32 Elapsed: 00:08:18.97 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:05:45.35 Elapsed: 00:08:49.00 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:06:15.41 Elapsed: 00:09:19.06 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:06:45.45 Elapsed: 00:09:49.10 Job Submission Status: RUNNING_TASKS
WARNING:(GET_LSAF_JOB_SUBMISSION_STATUS): job has status: COMPLETED_WARNINGS
(SUBMIT_JOB): 02:07:15.49 Elapsed: 00:10:19.14 Job Submission Status: COMPLETED_WARNINGS
(SUBMIT_JOB): 2023-02-15T02:07:45 - Submitted REPOSITORY job: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job has completed with status: COMPLETED_WARNINGS
WARNING:(SUBMIT_JOB): REPOSITORY job job_gadam_rebuild_adam.job has status: COMPLETED_WARNINGS
MPRINT(SUBMIT_JOB):  ;
job_gadam_rebuild_adam.job: get job status: 0: Success.:       Elapsed: 00:10:49.15       REPOSITORY Job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job with Submission 
ID: 5fcd3a12-dfcd-4c7f-ab4b-9428601af366, Status: COMPLETED_WARNINGS
MPRINT(REBUILD_GENERIC_ADAM):  ;
MPRINT(REBUILD_GENERIC_ADAM):   option NOMPRINT;
  Rebuild generic_adam_path=/clinical/argx-117/hv/argx-117-1901/biostat/staging/generic_adam : adam_rebuild_result=rebuild_generic_adam: 0: Success.
  /clinical/argx-117/hv/argx-117-1901/biostat/staging/generic_adam : adam_rebuild_result=rebuild_generic_adam: 0: Success.  === 
     
Notice: === study=argx-117-0000 match_pool=0 match_stdm_ind_pool=1
%create_generic_adam_path(/clinical/argx-117/mmn/argx-117-0000/biostat/staging/generic_adam, force=N)
MPRINT(CREATE_GENERIC_ADAM_PATH):   notes;
LOCATION_PARAMETERS=/clinical/argx-117/mmn/argx-117-0000
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/mmn/argx-117-0000/biostat/staging/generic_adam", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/mmn/argx-117-0000/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/mmn/argx-117-0000/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/mmn/argx-117-0000/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/mmn/argx-117-0000/biostat/staging/generic_adam
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(CREATE_GENERIC_ADAM_PATH):  ;
MPRINT(CREATE_GENERIC_ADAM_PATH):   option NOMPRINT;
%setup_generic_adam(gadam_path=/clinical/argx-117/mmn/argx-117-0000/biostat/staging/generic_adam, sdtm_last_path=/clinical/argx-117/mmn/argx-117-0000/biostat/staging/data_received/sdtm_last, 
study_adam_path=)
MPRINT(SETUP_GENERIC_ADAM):   notes;
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/mmn/argx-117-0000/biostat/staging/generic_adam", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/mmn/argx-117-0000/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/mmn/argx-117-0000/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/mmn/argx-117-0000/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/mmn/argx-117-0000/biostat/staging/generic_adam
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   *-2023-01-13 - jbodart - Perform gadam study setup only if target is not up-to-date -*;
MPRINT(SETUP_GENERIC_ADAM):   *- Use parameter gadam_files_source as &source_path for the template files to be used for study setup -*;
SOURCE_REL_PATH=/general/biostat/gadam SOURCE_PATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/gadam
STUDY=argx-117-0000 studyno=->0000<-
Notice: Checking whether generic_adam reporting event is already setup in /clinical/argx-117/mmn/argx-117-0000/biostat/staging/generic_adam ...
MPRINT(SETUP_GENERIC_ADAM):   data source_files(where=( scan(name, -1, ".") in ("xlsx" "sas" "job") and name ^= 'job_finalchecks.job' ) index=(_idx0_=(dir name)));
MPRINT(STEP_LSAF_GETCHILDREN):   *- Determine LSAF Macro API version -*;
MPRINT(STEP_LSAF_GETCHILDREN):   *- Declare the java items -*;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __srv879 ("com/sas/lsaf/macro/content/repository/RepositoryService") ;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __results879 ("com/sas/lsaf/macro/content/repository/SasRepositoryItemsResult");
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj _i_results879("com/sas/lsaf/macro/common/result/Result");
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   do __lsaf_path = "/general/biostat/gadam/documents" ,"/general/biostat/gadam/metadata/studyprograms" ,"/general/biostat/gadam/metadata/studyjobs" 
,"/general/biostat/gadam/metadata/studymacros";
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize numeric variables with default length (8) -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   rowCount=0;
MPRINT(STEP_LSAF_GETCHILDREN):   *- format numeric datetime variables -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize character variables with appropriate lengths -*;
MPRINT(STEP_LSAF_GETCHILDREN):   message = put(' ', $200.);
MPRINT(STEP_LSAF_GETCHILDREN):   path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   name = put(' ', $256.);
MPRINT(STEP_LSAF_GETCHILDREN):   description = put(' ', $512.);
MPRINT(STEP_LSAF_GETCHILDREN):   version = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   signatureStatus = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   createdBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   created = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   state = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   __createdTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   itemType = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   formattedsize = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   __lastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   *- check if container -*;
MPRINT(STEP_LSAF_GETCHILDREN):   isContainer = 1;
MPRINT(STEP_LSAF_GETCHILDREN):   *- if __lsaf_path is not a container, replace with parent folder path -*;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path ^= ' ' then __srv879.callStaticBooleanMethod("isContainer", trim(__lsaf_path), _i_results879, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   if isContainer = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_file_path = __lsaf_path;
MPRINT(STEP_LSAF_GETCHILDREN):   *- keep the original file path specified -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = resolve('%dirname('||__lsaf_path||')');
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path^='' then do;
MPRINT(STEP_LSAF_GETCHILDREN):   *- call the method -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __srv879.callStaticVoidMethod("getChildren", trim(__lsaf_path), cats(1), __results879);
MPRINT(STEP_LSAF_GETCHILDREN):   *- Retrieve the results -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __results879.callIntMethod("getReturnCode", returnCode);
MPRINT(STEP_LSAF_GETCHILDREN):   __results879.callStringMethod("getReturnMessage", message);
MPRINT(STEP_LSAF_GETCHILDREN):   if (returnCode = -1) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "WARNING:" "(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "NO" "TE-";
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else if (returnCode ^= 0) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "ER" "ROR:(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   __results879.callIntMethod("getSize", rowCount);
MPRINT(STEP_LSAF_GETCHILDREN):   if rowcount = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   message = catx(' ', message, "No observations returned.");
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   do row=0 to rowCount - 1;
MPRINT(STEP_LSAF_GETCHILDREN):   __results879.callStringMethod("getPath", row, path);
MPRINT(STEP_LSAF_GETCHILDREN):   __results879.callStringMethod("getName", row, name);
MPRINT(STEP_LSAF_GETCHILDREN):   __results879.callStringMethod("getDescription", row, description);
MPRINT(STEP_LSAF_GETCHILDREN):   __results879.callStringMethod("getVersion", row, version);
MPRINT(STEP_LSAF_GETCHILDREN):   __results879.callIntMethod("isContainer", row, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   __results879.callIntMethod("isVersioned", row, isVersioned);
MPRINT(STEP_LSAF_GETCHILDREN):   __results879.callIntMethod("isCheckedOut", row, isCheckedOut);
MPRINT(STEP_LSAF_GETCHILDREN):   __results879.callIntMethod("isLocked", row, isLocked);
MPRINT(STEP_LSAF_GETCHILDREN):   __results879.callStringMethod("getSignatureStatus", row, signatureStatus);
MPRINT(STEP_LSAF_GETCHILDREN):   __results879.callLongMethod("getFileSize", row, size);
MPRINT(STEP_LSAF_GETCHILDREN):   __results879.callStringMethod("getFormattedFileSize", row, formattedsize);
MPRINT(STEP_LSAF_GETCHILDREN):   if formattedsize = ' ' then formattedsize = ifc(size<0, " ", cats(size)||" Bytes");
MPRINT(STEP_LSAF_GETCHILDREN):   if size < 0 then size=.;
MPRINT(STEP_LSAF_GETCHILDREN):   __results879.callStringMethod("getItemType", row, itemType);
MPRINT(STEP_LSAF_GETCHILDREN):   __results879.callStringMethod("getLastModified", row, lastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results879.callStringMethod("getLastModifiedSasFormat", row, __lastModifiedTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   __results879.callStringMethod("getCreated", row, created);
MPRINT(STEP_LSAF_GETCHILDREN):   __results879.callStringMethod("getCreatedBy", row, createdBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results879.callStringMethod("getLastModifiedBy", row, lastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results879.callStringMethod("getPropertiesLastModified", row, propertiesLastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results879.callStringMethod("getPropertiesLastModifiedBy", row, propertiesLastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results879.callStringMethod("getPropertiesLastModifiedSasFormat", row, propertiesLastModifiedTempSAS);
MPRINT(STEP_LSAF_GETCHILDREN):   __results879.callStringMethod("getState", row, state);
MPRINT(STEP_LSAF_GETCHILDREN):   __results879.callStringMethod("getCreatedSasFormat", row, __createdTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   dateCreated=input(__createdTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   dateLastModified=input(__lastModifiedTempSas, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   datePropertiesLastModified=input(propertiesLastModifiedTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   pathLevel = countw(path, '/');
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_file_path = ' ' or __lsaf_file_path = path then do;
MPRINT(STEP_LSAF_GETCHILDREN):   dir=put(left(tranwrd(scan(path, -2, "/"), "study", "")), $20.);
MPRINT(STEP_LSAF_GETCHILDREN):  output;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   drop row __lastModifiedTempSAS __lsaf_file_path __createdTempSAS propertiesLastModifiedTempSAS
MPRINT(VARLIST):   itemType isContainer description version isVersioned isCheckedOut isLocked signatureStatus size formattedsize createdBy created dateCreated lastModifiedBy dateLastModified 
propertiesLastModifiedBy propertiesLastModified datePropertiesLastModified state pathLevel __lsaf_path returnCode message rowCount
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   run;
NOTE: The data set WORK.SOURCE_FILES has 60 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           1.12 seconds
      cpu time            0.42 seconds
      

MPRINT(SETUP_GENERIC_ADAM):   data target_files(where=( scan(name, -1, ".") in ("xlsx" "sas" "job") ) index=(_idx0_=(dir name)));
MPRINT(STEP_LSAF_GETCHILDREN):   *- Determine LSAF Macro API version -*;
MPRINT(STEP_LSAF_GETCHILDREN):   *- Declare the java items -*;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __srv885 ("com/sas/lsaf/macro/content/repository/RepositoryService") ;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __results885 ("com/sas/lsaf/macro/content/repository/SasRepositoryItemsResult");
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj _i_results885("com/sas/lsaf/macro/common/result/Result");
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   do __lsaf_path = "/clinical/argx-117/mmn/argx-117-0000/biostat/staging/generic_adam/documents" 
,"/clinical/argx-117/mmn/argx-117-0000/biostat/staging/generic_adam/programs" ,"/clinical/argx-117/mmn/argx-117-0000/biostat/staging/generic_adam/jobs" 
,"/clinical/argx-117/mmn/argx-117-0000/biostat/staging/generic_adam/macros";
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize numeric variables with default length (8) -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   rowCount=0;
MPRINT(STEP_LSAF_GETCHILDREN):   *- format numeric datetime variables -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize character variables with appropriate lengths -*;
MPRINT(STEP_LSAF_GETCHILDREN):   message = put(' ', $200.);
MPRINT(STEP_LSAF_GETCHILDREN):   path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   name = put(' ', $256.);
MPRINT(STEP_LSAF_GETCHILDREN):   description = put(' ', $512.);
MPRINT(STEP_LSAF_GETCHILDREN):   version = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   signatureStatus = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   createdBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   created = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   state = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   __createdTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   itemType = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   formattedsize = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   __lastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   *- check if container -*;
MPRINT(STEP_LSAF_GETCHILDREN):   isContainer = 1;
MPRINT(STEP_LSAF_GETCHILDREN):   *- if __lsaf_path is not a container, replace with parent folder path -*;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path ^= ' ' then __srv885.callStaticBooleanMethod("isContainer", trim(__lsaf_path), _i_results885, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   if isContainer = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_file_path = __lsaf_path;
MPRINT(STEP_LSAF_GETCHILDREN):   *- keep the original file path specified -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = resolve('%dirname('||__lsaf_path||')');
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path^='' then do;
MPRINT(STEP_LSAF_GETCHILDREN):   *- call the method -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __srv885.callStaticVoidMethod("getChildren", trim(__lsaf_path), cats(1), __results885);
MPRINT(STEP_LSAF_GETCHILDREN):   *- Retrieve the results -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __results885.callIntMethod("getReturnCode", returnCode);
MPRINT(STEP_LSAF_GETCHILDREN):   __results885.callStringMethod("getReturnMessage", message);
MPRINT(STEP_LSAF_GETCHILDREN):   if (returnCode = -1) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "NOTE:" "(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "NO" "TE-";
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else if (returnCode ^= 0) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "ER" "ROR:(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   __results885.callIntMethod("getSize", rowCount);
MPRINT(STEP_LSAF_GETCHILDREN):   if rowcount = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   message = catx(' ', message, "No observations returned.");
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   do row=0 to rowCount - 1;
MPRINT(STEP_LSAF_GETCHILDREN):   __results885.callStringMethod("getPath", row, path);
MPRINT(STEP_LSAF_GETCHILDREN):   __results885.callStringMethod("getName", row, name);
MPRINT(STEP_LSAF_GETCHILDREN):   __results885.callStringMethod("getDescription", row, description);
MPRINT(STEP_LSAF_GETCHILDREN):   __results885.callStringMethod("getVersion", row, version);
MPRINT(STEP_LSAF_GETCHILDREN):   __results885.callIntMethod("isContainer", row, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   __results885.callIntMethod("isVersioned", row, isVersioned);
MPRINT(STEP_LSAF_GETCHILDREN):   __results885.callIntMethod("isCheckedOut", row, isCheckedOut);
MPRINT(STEP_LSAF_GETCHILDREN):   __results885.callIntMethod("isLocked", row, isLocked);
MPRINT(STEP_LSAF_GETCHILDREN):   __results885.callStringMethod("getSignatureStatus", row, signatureStatus);
MPRINT(STEP_LSAF_GETCHILDREN):   __results885.callLongMethod("getFileSize", row, size);
MPRINT(STEP_LSAF_GETCHILDREN):   __results885.callStringMethod("getFormattedFileSize", row, formattedsize);
MPRINT(STEP_LSAF_GETCHILDREN):   if formattedsize = ' ' then formattedsize = ifc(size<0, " ", cats(size)||" Bytes");
MPRINT(STEP_LSAF_GETCHILDREN):   if size < 0 then size=.;
MPRINT(STEP_LSAF_GETCHILDREN):   __results885.callStringMethod("getItemType", row, itemType);
MPRINT(STEP_LSAF_GETCHILDREN):   __results885.callStringMethod("getLastModified", row, lastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results885.callStringMethod("getLastModifiedSasFormat", row, __lastModifiedTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   __results885.callStringMethod("getCreated", row, created);
MPRINT(STEP_LSAF_GETCHILDREN):   __results885.callStringMethod("getCreatedBy", row, createdBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results885.callStringMethod("getLastModifiedBy", row, lastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results885.callStringMethod("getPropertiesLastModified", row, propertiesLastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results885.callStringMethod("getPropertiesLastModifiedBy", row, propertiesLastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results885.callStringMethod("getPropertiesLastModifiedSasFormat", row, propertiesLastModifiedTempSAS);
MPRINT(STEP_LSAF_GETCHILDREN):   __results885.callStringMethod("getState", row, state);
MPRINT(STEP_LSAF_GETCHILDREN):   __results885.callStringMethod("getCreatedSasFormat", row, __createdTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   dateCreated=input(__createdTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   dateLastModified=input(__lastModifiedTempSas, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   datePropertiesLastModified=input(propertiesLastModifiedTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   pathLevel = countw(path, '/');
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_file_path = ' ' or __lsaf_file_path = path then do;
MPRINT(STEP_LSAF_GETCHILDREN):   dir=put(scan(path, -2, "/"), $20.);
MPRINT(STEP_LSAF_GETCHILDREN):   name=prxchange("s/^0000/_studyno_/", 1, trim(name));
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   drop row __lastModifiedTempSAS __lsaf_file_path __createdTempSAS propertiesLastModifiedTempSAS
MPRINT(VARLIST):   itemType isContainer description version isVersioned isCheckedOut isLocked signatureStatus size formattedsize createdBy created dateCreated lastModifiedBy dateLastModified 
propertiesLastModifiedBy propertiesLastModified datePropertiesLastModified state pathLevel __lsaf_path returnCode message rowCount
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   run;
NOTE: The data set WORK.TARGET_FILES has 59 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.99 seconds
      cpu time            0.40 seconds
      

MPRINT(SETUP_GENERIC_ADAM):   data source_target_files;
MPRINT(SETUP_GENERIC_ADAM):   merge source_files(in=a drop=path rename=(lastmodified=sourcelastmodified)) target_files(in=b drop=path rename=(lastmodified=targetlastmodified)) end=last ;
MPRINT(SETUP_GENERIC_ADAM):   by dir name;
MPRINT(SETUP_GENERIC_ADAM):   __prx = prxparse('s/((Mon|Tue|Wed|Thu|Fri|Sat|Sun)(\w*day)? )?(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]* (\d\d?) (\d?\d:\d\d:\d\d) GMT (\d{4})/\5\4\7:\6/i');
MPRINT(SETUP_GENERIC_ADAM):   if a then do;
MPRINT(SETUP_GENERIC_ADAM):   sourcemodte = input(prxchange(__prx, 1, sourcelastmodified), anydtdtm.);
MPRINT(SETUP_GENERIC_ADAM):   targetmodte = input(prxchange(__prx, 1, targetlastmodified), anydtdtm.);
MPRINT(SETUP_GENERIC_ADAM):   format sourcemodte targetmodte E8601DT.;
MPRINT(SETUP_GENERIC_ADAM):   need_update = (sourcemodte > targetmodte);
MPRINT(SETUP_GENERIC_ADAM):   tot_need_update=+need_update;
MPRINT(SETUP_GENERIC_ADAM):   tot_files=+a;
MPRINT(SETUP_GENERIC_ADAM):   output;
MPRINT(SETUP_GENERIC_ADAM):   end;
MPRINT(SETUP_GENERIC_ADAM):   if last then do;
MPRINT(SETUP_GENERIC_ADAM):   put "Target files needing update: " tot_need_update " out of " tot_files;
MPRINT(SETUP_GENERIC_ADAM):   call symputx("tot_need_update", tot_need_update);
MPRINT(SETUP_GENERIC_ADAM):   end;
MPRINT(SETUP_GENERIC_ADAM):   run;
NOTE: Invalid argument to function INPUT at line 0 column 119.
a=1 b=0 last=0 name=job_gnarrv2-orig.job sourcelastmodified=Tue Feb 14 08:25:35 GMT 2023 dir=jobs targetlastmodified=  FIRST.dir=0 LAST.dir=0 FIRST.name=1 LAST.name=1 __prx=1
sourcemodte=2023-02-14T08:25:35 targetmodte=. need_update=1 tot_need_update=1 tot_files=1 _ERROR_=1 _N_=18
Target files needing update: 1  out of 1
NOTE: Mathematical operations could not be performed at the following places. The results of the operations have been set to missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      1 at 0:119   
NOTE: There were 60 observations read from the data set WORK.SOURCE_FILES.
NOTE: There were 59 observations read from the data set WORK.TARGET_FILES.
NOTE: The data set WORK.SOURCE_TARGET_FILES has 60 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

TOT_NEED_UPDATE=1
Notice: Setting up generic_adam reporting event in /clinical/argx-117/mmn/argx-117-0000/biostat/staging/generic_adam ...
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/mmn/argx-117-0000/biostat/staging/data_received/adam", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/mmn/argx-117-0000/biostat/staging/data_received/adam" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/mmn/argx-117-0000/biostat/staging/data_received/adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/mmn/argx-117-0000/biostat/staging/data_received/adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item does not exist: /clinical/argx-117/mmn/argx-117-0000/biostat/staging/data_received/adam
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 0
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(SETUP_GENERIC_ADAM):  ;
Notice:(SETUP_GENERIC_ADAM): study_adam_path not found, set to null: /clinical/argx-117/mmn/argx-117-0000/biostat/staging/data_received/adam
NUM_JOBS_SPAWNED=10
MACROAPIVER=2.6
MPRINT(SUBMIT_JOB):   proc sql noprint;
MPRINT(SUBMIT_JOB):   drop table work.job_Parameters;
NOTE: Table WORK.JOB_PARAMETERS has been dropped.
MPRINT(SUBMIT_JOB):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

DEBUG:(GEN_JOB_ENV): PRX=134
DEBUG:(GEN_JOB_ENV): prxmatch(134, /general/biostat/jobs/gadam_ongoing_studies/dev/jobs/job_gadam_studysetup.job) = 1
DEBUG:(GEN_JOB_ENV): (0) REFPATH=
DEBUG:(GEN_JOB_ENV): (0) REPEVPATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (0) RELREPEVPATH=/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (0) _SASFILEPATH_=/general/biostat/jobs/gadam_ongoing_studies/prod/programs/lsaf_get_last_sdtm.sas
DEBUG:(GEN_JOB_ENV): (0) PROGPATH=/general/biostat/jobs/gadam_ongoing_studies/prod/programs/
DEBUG:(GEN_JOB_ENV): (0) PATH=/general/biostat/jobs/gadam_ongoing_studies/dev/jobs/job_gadam_studysetup.job
Setting refpath = &repevpath
DEBUG:(GEN_JOB_ENV): (1) REFPATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (2) REFENV=prod
DEBUG:(GEN_JOB_ENV): (3) REFENV=prod
DEBUG:(F_LSAF_EXISTS) - 2023-02-15T02:07:48 - Iteration: 1: slept = 0, exists = 1
DEBUG:(F_LSAF_EXISTS) - 2023-02-15T02:07:48 - Iteration: 1: slept = 0, exists = 1
DEBUG:(F_LSAF_EXISTS) - 2023-02-15T02:07:48 - Iteration: 1: slept = 0, exists = 1
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(SUBMIT_JOB):  ;
Notice:(SUBMIT_JOB): LSAF Job Path exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job.
MPRINT(SUBMIT_JOB):   proc format;
MPRINT(SUBMIT_JOB):   value $jobabbr "job_gadam_ongoing_studies.job"= "gos" "job_studies_status.job"= "ss" "job_gadam_sdtm_key_core_vars.job"= "gskcv" "job_unzip_sdtm_sources.job"= "uss" 
"job_zip_extract_files.job"= "zef" "job_lsaf_get_last_sdtm.job"= "lgls" "setup_reporting_event_folder.job"= "sref" "job_gadam_refresh_sdtm_last.job"= "grsl" "job_gadam_update_refresh_info.job"= 
"guri" "convert_definetosas.job"= "cdts" "job_gadam_studysetup.job"= "gss" "job_gadam_rebuild_adam.job"= "gra" "job_adAAA" - "job_adzzz"= "adx" "job_qcstudyadams.job"= "qcsa" 
"job_qc_gadam_vs_study.job"= "qcgvs" "job_qc_gadam_vs_study-overview.job"= "qcgvso" "job_check_and_load.job"= "cal" "job_tAAA" - "job_tzzz"= "txx" "job_gadam_qc_overviews.job"= "gqco" 
"job_make_sdtm_pool_jobs.job"= "mspj" "job_lsaf_pool_last_sdtm.job"= "lpls" "sdtm_pool-AAA" - "sdtm_pool-zzz"= "pci" "job_gadam_refresh_sdtm_overview.job"= "grso" "getdata.job"= "gd" OTHER = "***" ;
NOTE: Format $JOBABBR is already on the library WORK.FORMATS.
NOTE: Format $JOBABBR has been output.
MPRINT(SUBMIT_JOB):   run;
NOTE: PROCEDURE FORMAT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SUBMIT_JOB):   quit;
job_instance=>Ngos117Prod_4_x0_10<
MPRINT(LSAF_GETJOBPARAMETERS):  ;
MPRINT(LSAF_GETJOBPARAMETERS):   data work.job_Parameters (label="Created by LSAF_GETJOBPARAMETERS" KEEP=jobPath jobVersion name label type defaultValue fileVersion includeSubFolders );
MPRINT(LSAF_GETJOBPARAMETERS):   attrib returnCode length=8 message length=$200 logMsgPrefix length=$70 logMsgPrimary length=$70 logMsg length=$300 rowCount length=8 jobPath length=$2048 label="Job 
Path" jobVersion length=$32 label="Job Version" name length=$256 label="Parameter Name" label length=$256 label="Parameter Label" type length=$32 label="Parameter Type" defaultValue length=$2048 
label="Parameter Default Value" fileVersion length=$32 label="File Version if File Type" includeSubFolders length=8 label="Include Container SubFolders" includesSubFolders length=$5 label="FOR 
INTERNAL PROCESSING ONLY.  WILL BE DROPPED." ;
MPRINT(LSAF_GETJOBPARAMETERS):   rowCount=0;
MPRINT(LSAF_GETJOBPARAMETERS):   declare javaobj srv("com/sas/lsaf/macro/execution/job/JobService") ;
MPRINT(LSAF_GETJOBPARAMETERS):   declare javaobj results("com/sas/lsaf/macro/execution/job/SasJobParametersResult");
MPRINT(LSAF_GETJOBPARAMETERS):   srv.callStaticVoidMethod("getRepositoryJobParameters", "/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job", "", results) ;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_GETJOBPARAMETERS):   if (returnCode ne 0) then do;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_GETJOBPARAMETERS):   if "" NE "" then logMsg=" Cannot retrieve parameters for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job, version " ;
MPRINT(LSAF_GETJOBPARAMETERS):   else logMsg=" Cannot retrieve parameters for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   else do;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsg=" Parameters were returned for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getJobPath", jobPath);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getJobVersion", jobVersion);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callIntMethod("getSize", rowCount);
MPRINT(LSAF_GETJOBPARAMETERS):   do row=0 to rowCount - 1;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getName", row, name);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getLabel", row, label);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getType", row, type);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getDefaultValue", row, defaultValue);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getFileVersion", row, fileVersion);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getContainerIncludeSubfolders", row, includesSubFolders);
MPRINT(LSAF_GETJOBPARAMETERS):   includeSubFolders=input(includesSubFolders,best.);
MPRINT(LSAF_GETJOBPARAMETERS):   output;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   put;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " " "lsaf_getjobparameters";
MPRINT(LSAF_GETJOBPARAMETERS):   if (rowCount=0) then put logMsgPrefix " No parameters were found.";
MPRINT(LSAF_GETJOBPARAMETERS):   else put logMsgPrefix " " rowCount " records written to data set work.job_Parameters";
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(LSAF_GETJOBPARAMETERS):   put;
MPRINT(LSAF_GETJOBPARAMETERS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_GETJOBPARAMETERS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_GETJOBPARAMETERS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  Parameters were returned for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_getjobparameters
NOTE: SAS Life Science Analytics Framework Macro: *  8  records written to data set work.job_Parameters
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: The data set WORK.JOB_PARAMETERS has 8 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
      

MPRINT(SUBMIT_JOB):  ;
NOTE: The dataset WORK.JOB_PARAMETERS has 8 observations and 8 variables.
MPRINT(SUBMIT_JOB):   ;
MPRINT(SUBMIT_JOB):   *- dataset to specify job parameters (from macro parameters values) -*;
MPRINT(SUBMIT_JOB):   data lsaf_job_params(index=(name));
MPRINT(SUBMIT_JOB):   set work.job_Parameters(rename=(defaultValue = value));
MPRINT(SUBMIT_JOB):   if upcase(name) = "_PARENTJOB_WS_" then do;
MPRINT(SUBMIT_JOB):   if symexist("_SASWS_") and type = "CHARACTER" then value = symget("_SASWS_");
MPRINT(SUBMIT_JOB):   else value = " ";
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   else if upcase(name) = "_PARENTJOB_WRK_" then do;
MPRINT(SUBMIT_JOB):   value = pathname("WORK", "L");
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   else if symexist(name) then do;
MPRINT(SUBMIT_JOB):   if symget(name) ^= ' ' then value = symget(name);
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   new_value = translate(value, ' ', ',;()"''&%');
MPRINT(SUBMIT_JOB):   if new_value ne value then put "NOTE:(SUBMIT_JOB): Special characters may be removed from parameter value:" / @2 "parameter: " name /@2 "old value: " value /@2 "new value: " 
new_value;
MPRINT(SUBMIT_JOB):   if _n_=1 then put "Not" "ice:(SUBMIT_JOB): Updated Job parameters:";
MPRINT(SUBMIT_JOB):   if type = "FOLDER" then put " - " name @+(-1) "=" value "[" type= @+(-1) ", " includeSubFolders= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   else if TYPE = "FILE" then put " - " name @+(-1) "=" value "[" type= @+(-1) ", " fileversion= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   else put " - " name @+(-1) "=" value "[" type= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   run;
Notice:(SUBMIT_JOB): Updated Job parameters:
 - gadam_path=/clinical/argx-117/mmn/argx-117-0000/biostat/staging/generic_adam [type=FOLDER, includeSubFolders=0]
 - sdtm_last_path=/clinical/argx-117/mmn/argx-117-0000/biostat/staging/data_received/sdtm_last [type=FOLDER, includeSubFolders=0]
 - study_adam_path=  [type=FOLDER, includeSubFolders=0]
 - gadam_files_source=/general/biostat/gadam [type=FOLDER, includeSubFolders=1]
 - job_instance=Ngos117Prod_4_x0_10 [type=CHARACTER]
 - _PARENTJOB_WS_=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15 [type=CHARACTER]
 - _PARENTJOB_WRK_=/saswork/sas_tmp/SAS_work4CFB0019563E_xar08auv.vsp.sas.com/SAS_work5B910019563E_xar08auv.vsp.sas.com [type=CHARACTER]
 - USE_SAS_WORKSPACE_MACROS=  [type=CHARACTER]
NOTE: There were 8 observations read from the data set WORK.JOB_PARAMETERS.
NOTE: The data set WORK.LSAF_JOB_PARAMS has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

N_PARAMS=8
MPRINT(SUBMIT_JOB):   data lsaf_job_params(index=(name));
MPRINT(SUBMIT_JOB):   set lsaf_job_params;
MPRINT(SUBMIT_JOB):   by name;
MPRINT(SUBMIT_JOB):   if (not first.name) or (not last.name) then do;
MPRINT(SUBMIT_JOB):   if last.name then action = "(kept)   ";
MPRINT(SUBMIT_JOB):   else action = "(dropped)";
MPRINT(SUBMIT_JOB):   drop action;
MPRINT(SUBMIT_JOB):   put "Not" "ice:(SUBMIT_JOB): duplicate parameter " name " = " value @+(3) action;
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   if last.name;
MPRINT(SUBMIT_JOB):   run;
NOTE: There were 8 observations read from the data set WORK.LSAF_JOB_PARAMS.
NOTE: The data set WORK.LSAF_JOB_PARAMS has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SUBMIT_JOB):   data _null_;
MPRINT(SUBMIT_JOB):   file print;
MPRINT(SUBMIT_JOB):   set lsaf_job_params(where=(prxmatch('/^(FOLDER|FILE)$/', trim(type))) in=a) lsaf_job_params(where=(prxmatch('/^(FOLDER|FILE)$/', trim(type))=0 and value ^= ' ')) end=last;
MPRINT(SUBMIT_JOB):   if _n_=1 then putlog "=== 2023-02-15T02:07:48 - Submit job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job (with parameters: " @;
MPRINT(SUBMIT_JOB):   _n_a+a;
MPRINT(SUBMIT_JOB):   if _n_-1 = _n_a then do;
MPRINT(SUBMIT_JOB):   putlog / @8 @;
MPRINT(SUBMIT_JOB):   put / @8 @;
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   if a then putlog / @8 name @+(-1) "=" value ' (' type= includeSubFolders= @+(-1) ')   ' @;
MPRINT(SUBMIT_JOB):   else putlog name @+(-1) "=" value "  " @ ;
MPRINT(SUBMIT_JOB):   if last then putlog @+8 ") ===";
MPRINT(SUBMIT_JOB):   if _n_=1 then put "=== 2023-02-15T02:07:48 - Submit job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job (with parameters: " @;
MPRINT(SUBMIT_JOB):   if a then put / @8 name @+(-1) "=" value ' (' type= includeSubFolders= @+(-1) ')   ' @;
MPRINT(SUBMIT_JOB):   else put name @+(-1) "=" value "  " @ ;
MPRINT(SUBMIT_JOB):   if last then put @+8 ") ===";
MPRINT(SUBMIT_JOB):   run;
=== 2023-02-15T02:07:48 - Submit job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job (with parameters: 
       gadam_files_source=/general/biostat/gadam  (type=FOLDER includeSubFolders=1)   
       gadam_path=/clinical/argx-117/mmn/argx-117-0000/biostat/staging/generic_adam  (type=FOLDER includeSubFolders=0)   
       sdtm_last_path=/clinical/argx-117/mmn/argx-117-0000/biostat/staging/data_received/sdtm_last  (type=FOLDER includeSubFolders=0)   
       study_adam_path=   (type=FOLDER includeSubFolders=0)   
       _PARENTJOB_WRK_=/saswork/sas_tmp/SAS_work4CFB0019563E_xar08auv.vsp.sas.com/SAS_work5B910019563E_xar08auv.vsp.sas.com   _PARENTJOB_WS_=
/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15   job_instance=Ngos117Prod_4_x0_10           ) ===
NOTE: 7 lines were written to file PRINT.
NOTE: There were 4 observations read from the data set WORK.LSAF_JOB_PARAMS.
      WHERE PRXMATCH('/^(FOLDER|FILE)$/', TRIM(type));
NOTE: There were 3 observations read from the data set WORK.LSAF_JOB_PARAMS.
      WHERE (PRXMATCH('/^(FOLDER|FILE)$/', TRIM(type))=0) and (value not = ' ');
NOTE: The DATA step printed page 19.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(LSAF_SUBMITJOB):  ;
NOTE: lsaf_submitjob: Validating dataset lsaf_job_params
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   options nonotes;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   proc datasets library=work nolist;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   delete __SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   quit;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   options nonotes;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   data _null_;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   length message $45 libName $8 dsName $300;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   providedDatasetName=kstrip("lsaf_job_params");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsName="INVALID";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsNameIsValid=0;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dotCount=countc(providedDatasetName,".");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dotPosition=kindexc(providedDatasetName,".");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   *put dotPosition=;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (dotPosition=1 or dotPosition=length(providedDatasetName)) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message=" Missing either LIBNAME or data set.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   select (dotCount);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   when (0) dsName=providedDatasetName;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   when (1) do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (dotPosition le 9) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   libName = (ksubstr(providedDatasetName, 1, dotPosition-1));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   *put libName=;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsName = (ksubstr(providedDatasetName, dotPosition+1));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   else do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Libname longer than 8 characters.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   otherwise do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Invalid data set name structure.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   firstchar=ksubstr(kleft(dsName), 1, 1);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (anydigit(firstchar)) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Data set name must start with a character.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (length(dsName) > 32) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Data set name longer than 32 characters.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsNameIsValid=1;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   SETVARS: call symput("_lsafvaliddsn_", strip(put(dsNameIsValid, best.)));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   call symput("dsnMsg", message);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   call symput("specifiedLib", strip(libName));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   run;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   options NONOTES;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   * CHECK EXISTS: Also getting errors for data set name.;
MPRINT(LSAF_VALIDATE_SASDATASET):  ;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):  ;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   proc sort data=lsaf_job_params out=__SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   by name;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   data _null_;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   set __SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   by name;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   if (first.name AND NOT(last.name)) then do;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   call symput("_lsafMsg_", "Input data set has duplicate values for parameter name " || name || ".");
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   STOP;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   end;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   call symput("_lsafRC_", "0");
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   option notes;
MPRINT(LSAF_SUBMITJOB):  ;
MPRINT(LSAF_SUBMITJOB):   option notes;
MPRINT(LSAF_SUBMITJOB):   data _null_;
MPRINT(LSAF_SUBMITJOB):   attrib returnCode length=8 message length=$200 jobSubmissionId length=$525 logMsgPrefix length=$70 logMsgPrimary length=$70 logMsg length=$300 ;
MPRINT(LSAF_SUBMITJOB):   set lsaf_job_params end=eof;
MPRINT(LSAF_SUBMITJOB):   if (_n_ = 1) then do;
MPRINT(LSAF_SUBMITJOB):   declare javaobj params("com/sas/lsaf/macro/execution/job/SasParameterValues");
MPRINT(LSAF_SUBMITJOB):   declare javaobj srv("com/sas/lsaf/macro/execution/jobsubmission/JobSubmissionService");
MPRINT(LSAF_SUBMITJOB):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   params.callVoidMethod("addValue", kstrip(name), kstrip(value), kstrip(type), kstrip(fileVersion), includeSubFolders);
MPRINT(LSAF_SUBMITJOB):   if (eof);
MPRINT(LSAF_SUBMITJOB):   declare javaobj job("com/sas/lsaf/macro/execution/jobsubmission/SasSubmittableJob", "/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job", "", 
params);
MPRINT(LSAF_SUBMITJOB):   srv.callStaticStringMethod("submitRepositoryJob", job, results, jobSubmissionId);
MPRINT(LSAF_SUBMITJOB):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_SUBMITJOB):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_SUBMITJOB):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_SUBMITJOB):   if (returnCode ne 0) then do;
MPRINT(LSAF_SUBMITJOB):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_SUBMITJOB):   logMsg=" Cannot submit job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job";
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   else do;
MPRINT(LSAF_SUBMITJOB):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_SUBMITJOB):   logMsg=" Submitted job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job";
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   put;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " " "lsaf_submitjob";
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(LSAF_SUBMITJOB):   if "lsaf_job_params" = "" then put logMsgPrefix "No job parameters were supplied.";
MPRINT(LSAF_SUBMITJOB):   else put logMsgPrefix "sas_dsname = lsaf_job_params";
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix "_lsafJobSubmissionId_= " jobSubmissionId;
MPRINT(LSAF_SUBMITJOB):   put;
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafJobSubmissionId_", strip(jobSubmissionId));
MPRINT(LSAF_SUBMITJOB):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  Submitted job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_submitjob
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: * sas_dsname = lsaf_job_params
NOTE: SAS Life Science Analytics Framework Macro: * _lsafJobSubmissionId_= dabed42d-85ca-4439-bfef-bf9ab53b9c46
NOTE: There were 8 observations read from the data set WORK.LSAF_JOB_PARAMS.
NOTE: DATA statement used (Total process time):
      real time           1.34 seconds
      cpu time            0.00 seconds
      

MPRINT(LSAF_SUBMITJOB):   options NONOTES;
MPRINT(SUBMIT_JOB):  ;
MPRINT(SUBMIT_JOB):   *- Job submission succeeded -*;
MPRINT(SUBMIT_JOB):   option nomprint nonotes
Calling %lsaf_getitemid(lsaf_path=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job) ...
_LSAFMSG_=Success.  _LSAFRC_=0  _LSAFITEMID_=090a95d3-6059-474f-a1bd-61c6768ba993
Calling %step_lsaf_getjobsubmissioninfos(job_subm_id=dabed42d-85ca-4439-bfef-bf9ab53b9c46) ...
Notice: SYSDATASTEPPHASE=EXECUTION IN_DATA_STEP=N
Ignoring record: submissionId=30678109-1661-4a87-858f-1bc1b0d581fa jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job jobVersion=0.1
jobId=abcfa448-6829-4513-8bef-3d8418207d45
Ignoring record: submissionId=c4fb4991-9137-4374-8d55-32ed9002f3d8 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_ongoing_studies.job jobVersion=0.1
jobId=c762f385-9376-49c8-8cec-d19326e7e18e
Ignoring record: submissionId=f00d2b52-d9f1-4ef1-8922-181d934626e0 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_ongoing_studies.job jobVersion=0.1
jobId=c762f385-9376-49c8-8cec-d19326e7e18e
Ignoring record: submissionId=05e0665e-78cd-4a3c-9aa3-9ddb53288cad jobPath=/clinical/argx-113/hv/argx-113-1702/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job jobVersion=52.0
jobId=bd48e139-ba53-466d-a613-fa25b86270cc
Ignoring record: submissionId=feed1f0f-2d9a-42b9-8060-8fddd1e47337 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job jobVersion=0.1
jobId=abcfa448-6829-4513-8bef-3d8418207d45
Ignoring record: submissionId=0e426e98-1f39-407e-a152-2a4b08808841 jobPath=/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job jobVersion= 
jobId=02b06e4d-7777-4a59-b2f9-2fc165603216
Notice: _LSAFJOBSUBMISSIONID_=dabed42d-85ca-4439-bfef-bf9ab53b9c46 SESSIONID=1e7adac7-3f28-4c46-ba94-b23e092725a6 JOB=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job 
JOBID=090a95d3-6059-474f-a1bd-61c6768ba993
(SUBMIT_JOB): 2023-02-15T02:07:50 - Submitted REPOSITORY Job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job          with Submission ID: 
dabed42d-85ca-4439-bfef-bf9ab53b9c46, Status: STARTED
(SUBMIT_JOB): 02:07:49.83 Elapsed: 00:00:02.10 Job Submission Status: STARTED
(SUBMIT_JOB): 02:07:52.37 Elapsed: 00:00:04.65 Job Submission Status: STARTED
(SUBMIT_JOB): 02:07:54.91 Elapsed: 00:00:07.18 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:07:57.44 Elapsed: 00:00:09.72 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:08:00.00 Elapsed: 00:00:12.28 Job Submission Status: COMPLETED_SUCCESSFUL
(SUBMIT_JOB): 2023-02-15T02:08:03 - Submitted REPOSITORY job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job has completed with status: COMPLETED_SUCCESSFUL
MPRINT(SUBMIT_JOB):  ;
job_gadam_studysetup.job: get job status: 0: Success.:       Elapsed: 00:00:14.78       REPOSITORY Job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job with Submission 
ID: dabed42d-85ca-4439-bfef-bf9ab53b9c46, Status: COMPLETED_SUCCESSFUL
MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   option NOMPRINT;
%create_generic_adam_path(/clinical/argx-117/mmn/argx-117-2002/biostat/staging/generic_adam, force=N)
MPRINT(CREATE_GENERIC_ADAM_PATH):   notes;
LOCATION_PARAMETERS=/clinical/argx-117/mmn/argx-117-2002
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/mmn/argx-117-2002/biostat/staging/generic_adam", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/mmn/argx-117-2002/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/mmn/argx-117-2002/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/mmn/argx-117-2002/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/mmn/argx-117-2002/biostat/staging/generic_adam
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      

MPRINT(CREATE_GENERIC_ADAM_PATH):  ;
MPRINT(CREATE_GENERIC_ADAM_PATH):   option NOMPRINT;
%setup_generic_adam(gadam_path=/clinical/argx-117/mmn/argx-117-2002/biostat/staging/generic_adam, sdtm_last_path=/clinical/argx-117/mmn/argx-117-2002/biostat/staging/data_received/sdtm_last, 
study_adam_path=)
MPRINT(SETUP_GENERIC_ADAM):   notes;
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/mmn/argx-117-2002/biostat/staging/generic_adam", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/mmn/argx-117-2002/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/mmn/argx-117-2002/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/mmn/argx-117-2002/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/mmn/argx-117-2002/biostat/staging/generic_adam
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   *-2023-01-13 - jbodart - Perform gadam study setup only if target is not up-to-date -*;
MPRINT(SETUP_GENERIC_ADAM):   *- Use parameter gadam_files_source as &source_path for the template files to be used for study setup -*;
SOURCE_REL_PATH=/general/biostat/gadam SOURCE_PATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/gadam
STUDY=argx-117-2002 studyno=->2002<-
Notice: Checking whether generic_adam reporting event is already setup in /clinical/argx-117/mmn/argx-117-2002/biostat/staging/generic_adam ...
MPRINT(SETUP_GENERIC_ADAM):   data source_files(where=( scan(name, -1, ".") in ("xlsx" "sas" "job") and name ^= 'job_finalchecks.job' ) index=(_idx0_=(dir name)));
MPRINT(STEP_LSAF_GETCHILDREN):   *- Determine LSAF Macro API version -*;
MPRINT(STEP_LSAF_GETCHILDREN):   *- Declare the java items -*;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __srv137 ("com/sas/lsaf/macro/content/repository/RepositoryService") ;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __results137 ("com/sas/lsaf/macro/content/repository/SasRepositoryItemsResult");
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj _i_results137("com/sas/lsaf/macro/common/result/Result");
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   do __lsaf_path = "/general/biostat/gadam/documents" ,"/general/biostat/gadam/metadata/studyprograms" ,"/general/biostat/gadam/metadata/studyjobs" 
,"/general/biostat/gadam/metadata/studymacros";
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize numeric variables with default length (8) -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   rowCount=0;
MPRINT(STEP_LSAF_GETCHILDREN):   *- format numeric datetime variables -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize character variables with appropriate lengths -*;
MPRINT(STEP_LSAF_GETCHILDREN):   message = put(' ', $200.);
MPRINT(STEP_LSAF_GETCHILDREN):   path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   name = put(' ', $256.);
MPRINT(STEP_LSAF_GETCHILDREN):   description = put(' ', $512.);
MPRINT(STEP_LSAF_GETCHILDREN):   version = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   signatureStatus = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   createdBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   created = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   state = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   __createdTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   itemType = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   formattedsize = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   __lastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   *- check if container -*;
MPRINT(STEP_LSAF_GETCHILDREN):   isContainer = 1;
MPRINT(STEP_LSAF_GETCHILDREN):   *- if __lsaf_path is not a container, replace with parent folder path -*;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path ^= ' ' then __srv137.callStaticBooleanMethod("isContainer", trim(__lsaf_path), _i_results137, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   if isContainer = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_file_path = __lsaf_path;
MPRINT(STEP_LSAF_GETCHILDREN):   *- keep the original file path specified -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = resolve('%dirname('||__lsaf_path||')');
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path^='' then do;
MPRINT(STEP_LSAF_GETCHILDREN):   *- call the method -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __srv137.callStaticVoidMethod("getChildren", trim(__lsaf_path), cats(1), __results137);
MPRINT(STEP_LSAF_GETCHILDREN):   *- Retrieve the results -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __results137.callIntMethod("getReturnCode", returnCode);
MPRINT(STEP_LSAF_GETCHILDREN):   __results137.callStringMethod("getReturnMessage", message);
MPRINT(STEP_LSAF_GETCHILDREN):   if (returnCode = -1) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "WARNING:" "(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "NO" "TE-";
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else if (returnCode ^= 0) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "ER" "ROR:(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   __results137.callIntMethod("getSize", rowCount);
MPRINT(STEP_LSAF_GETCHILDREN):   if rowcount = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   message = catx(' ', message, "No observations returned.");
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   do row=0 to rowCount - 1;
MPRINT(STEP_LSAF_GETCHILDREN):   __results137.callStringMethod("getPath", row, path);
MPRINT(STEP_LSAF_GETCHILDREN):   __results137.callStringMethod("getName", row, name);
MPRINT(STEP_LSAF_GETCHILDREN):   __results137.callStringMethod("getDescription", row, description);
MPRINT(STEP_LSAF_GETCHILDREN):   __results137.callStringMethod("getVersion", row, version);
MPRINT(STEP_LSAF_GETCHILDREN):   __results137.callIntMethod("isContainer", row, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   __results137.callIntMethod("isVersioned", row, isVersioned);
MPRINT(STEP_LSAF_GETCHILDREN):   __results137.callIntMethod("isCheckedOut", row, isCheckedOut);
MPRINT(STEP_LSAF_GETCHILDREN):   __results137.callIntMethod("isLocked", row, isLocked);
MPRINT(STEP_LSAF_GETCHILDREN):   __results137.callStringMethod("getSignatureStatus", row, signatureStatus);
MPRINT(STEP_LSAF_GETCHILDREN):   __results137.callLongMethod("getFileSize", row, size);
MPRINT(STEP_LSAF_GETCHILDREN):   __results137.callStringMethod("getFormattedFileSize", row, formattedsize);
MPRINT(STEP_LSAF_GETCHILDREN):   if formattedsize = ' ' then formattedsize = ifc(size<0, " ", cats(size)||" Bytes");
MPRINT(STEP_LSAF_GETCHILDREN):   if size < 0 then size=.;
MPRINT(STEP_LSAF_GETCHILDREN):   __results137.callStringMethod("getItemType", row, itemType);
MPRINT(STEP_LSAF_GETCHILDREN):   __results137.callStringMethod("getLastModified", row, lastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results137.callStringMethod("getLastModifiedSasFormat", row, __lastModifiedTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   __results137.callStringMethod("getCreated", row, created);
MPRINT(STEP_LSAF_GETCHILDREN):   __results137.callStringMethod("getCreatedBy", row, createdBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results137.callStringMethod("getLastModifiedBy", row, lastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results137.callStringMethod("getPropertiesLastModified", row, propertiesLastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results137.callStringMethod("getPropertiesLastModifiedBy", row, propertiesLastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results137.callStringMethod("getPropertiesLastModifiedSasFormat", row, propertiesLastModifiedTempSAS);
MPRINT(STEP_LSAF_GETCHILDREN):   __results137.callStringMethod("getState", row, state);
MPRINT(STEP_LSAF_GETCHILDREN):   __results137.callStringMethod("getCreatedSasFormat", row, __createdTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   dateCreated=input(__createdTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   dateLastModified=input(__lastModifiedTempSas, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   datePropertiesLastModified=input(propertiesLastModifiedTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   pathLevel = countw(path, '/');
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_file_path = ' ' or __lsaf_file_path = path then do;
MPRINT(STEP_LSAF_GETCHILDREN):   dir=put(left(tranwrd(scan(path, -2, "/"), "study", "")), $20.);
MPRINT(STEP_LSAF_GETCHILDREN):  output;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   drop row __lastModifiedTempSAS __lsaf_file_path __createdTempSAS propertiesLastModifiedTempSAS
MPRINT(VARLIST):   itemType isContainer description version isVersioned isCheckedOut isLocked signatureStatus size formattedsize createdBy created dateCreated lastModifiedBy dateLastModified 
propertiesLastModifiedBy propertiesLastModified datePropertiesLastModified state pathLevel __lsaf_path returnCode message rowCount
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   run;
NOTE: The data set WORK.SOURCE_FILES has 60 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           1.23 seconds
      cpu time            0.42 seconds
      

MPRINT(SETUP_GENERIC_ADAM):   data target_files(where=( scan(name, -1, ".") in ("xlsx" "sas" "job") ) index=(_idx0_=(dir name)));
MPRINT(STEP_LSAF_GETCHILDREN):   *- Determine LSAF Macro API version -*;
MPRINT(STEP_LSAF_GETCHILDREN):   *- Declare the java items -*;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __srv143 ("com/sas/lsaf/macro/content/repository/RepositoryService") ;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __results143 ("com/sas/lsaf/macro/content/repository/SasRepositoryItemsResult");
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj _i_results143("com/sas/lsaf/macro/common/result/Result");
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   do __lsaf_path = "/clinical/argx-117/mmn/argx-117-2002/biostat/staging/generic_adam/documents" 
,"/clinical/argx-117/mmn/argx-117-2002/biostat/staging/generic_adam/programs" ,"/clinical/argx-117/mmn/argx-117-2002/biostat/staging/generic_adam/jobs" 
,"/clinical/argx-117/mmn/argx-117-2002/biostat/staging/generic_adam/macros";
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize numeric variables with default length (8) -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   rowCount=0;
MPRINT(STEP_LSAF_GETCHILDREN):   *- format numeric datetime variables -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize character variables with appropriate lengths -*;
MPRINT(STEP_LSAF_GETCHILDREN):   message = put(' ', $200.);
MPRINT(STEP_LSAF_GETCHILDREN):   path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   name = put(' ', $256.);
MPRINT(STEP_LSAF_GETCHILDREN):   description = put(' ', $512.);
MPRINT(STEP_LSAF_GETCHILDREN):   version = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   signatureStatus = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   createdBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   created = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   state = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   __createdTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   itemType = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   formattedsize = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   __lastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   *- check if container -*;
MPRINT(STEP_LSAF_GETCHILDREN):   isContainer = 1;
MPRINT(STEP_LSAF_GETCHILDREN):   *- if __lsaf_path is not a container, replace with parent folder path -*;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path ^= ' ' then __srv143.callStaticBooleanMethod("isContainer", trim(__lsaf_path), _i_results143, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   if isContainer = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_file_path = __lsaf_path;
MPRINT(STEP_LSAF_GETCHILDREN):   *- keep the original file path specified -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = resolve('%dirname('||__lsaf_path||')');
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path^='' then do;
MPRINT(STEP_LSAF_GETCHILDREN):   *- call the method -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __srv143.callStaticVoidMethod("getChildren", trim(__lsaf_path), cats(1), __results143);
MPRINT(STEP_LSAF_GETCHILDREN):   *- Retrieve the results -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __results143.callIntMethod("getReturnCode", returnCode);
MPRINT(STEP_LSAF_GETCHILDREN):   __results143.callStringMethod("getReturnMessage", message);
MPRINT(STEP_LSAF_GETCHILDREN):   if (returnCode = -1) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "NOTE:" "(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "NO" "TE-";
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else if (returnCode ^= 0) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "ER" "ROR:(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   __results143.callIntMethod("getSize", rowCount);
MPRINT(STEP_LSAF_GETCHILDREN):   if rowcount = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   message = catx(' ', message, "No observations returned.");
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   do row=0 to rowCount - 1;
MPRINT(STEP_LSAF_GETCHILDREN):   __results143.callStringMethod("getPath", row, path);
MPRINT(STEP_LSAF_GETCHILDREN):   __results143.callStringMethod("getName", row, name);
MPRINT(STEP_LSAF_GETCHILDREN):   __results143.callStringMethod("getDescription", row, description);
MPRINT(STEP_LSAF_GETCHILDREN):   __results143.callStringMethod("getVersion", row, version);
MPRINT(STEP_LSAF_GETCHILDREN):   __results143.callIntMethod("isContainer", row, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   __results143.callIntMethod("isVersioned", row, isVersioned);
MPRINT(STEP_LSAF_GETCHILDREN):   __results143.callIntMethod("isCheckedOut", row, isCheckedOut);
MPRINT(STEP_LSAF_GETCHILDREN):   __results143.callIntMethod("isLocked", row, isLocked);
MPRINT(STEP_LSAF_GETCHILDREN):   __results143.callStringMethod("getSignatureStatus", row, signatureStatus);
MPRINT(STEP_LSAF_GETCHILDREN):   __results143.callLongMethod("getFileSize", row, size);
MPRINT(STEP_LSAF_GETCHILDREN):   __results143.callStringMethod("getFormattedFileSize", row, formattedsize);
MPRINT(STEP_LSAF_GETCHILDREN):   if formattedsize = ' ' then formattedsize = ifc(size<0, " ", cats(size)||" Bytes");
MPRINT(STEP_LSAF_GETCHILDREN):   if size < 0 then size=.;
MPRINT(STEP_LSAF_GETCHILDREN):   __results143.callStringMethod("getItemType", row, itemType);
MPRINT(STEP_LSAF_GETCHILDREN):   __results143.callStringMethod("getLastModified", row, lastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results143.callStringMethod("getLastModifiedSasFormat", row, __lastModifiedTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   __results143.callStringMethod("getCreated", row, created);
MPRINT(STEP_LSAF_GETCHILDREN):   __results143.callStringMethod("getCreatedBy", row, createdBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results143.callStringMethod("getLastModifiedBy", row, lastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results143.callStringMethod("getPropertiesLastModified", row, propertiesLastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results143.callStringMethod("getPropertiesLastModifiedBy", row, propertiesLastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results143.callStringMethod("getPropertiesLastModifiedSasFormat", row, propertiesLastModifiedTempSAS);
MPRINT(STEP_LSAF_GETCHILDREN):   __results143.callStringMethod("getState", row, state);
MPRINT(STEP_LSAF_GETCHILDREN):   __results143.callStringMethod("getCreatedSasFormat", row, __createdTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   dateCreated=input(__createdTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   dateLastModified=input(__lastModifiedTempSas, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   datePropertiesLastModified=input(propertiesLastModifiedTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   pathLevel = countw(path, '/');
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_file_path = ' ' or __lsaf_file_path = path then do;
MPRINT(STEP_LSAF_GETCHILDREN):   dir=put(scan(path, -2, "/"), $20.);
MPRINT(STEP_LSAF_GETCHILDREN):   name=prxchange("s/^2002/_studyno_/", 1, trim(name));
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   drop row __lastModifiedTempSAS __lsaf_file_path __createdTempSAS propertiesLastModifiedTempSAS
MPRINT(VARLIST):   itemType isContainer description version isVersioned isCheckedOut isLocked signatureStatus size formattedsize createdBy created dateCreated lastModifiedBy dateLastModified 
propertiesLastModifiedBy propertiesLastModified datePropertiesLastModified state pathLevel __lsaf_path returnCode message rowCount
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   run;
NOTE: The data set WORK.TARGET_FILES has 59 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           2.15 seconds
      cpu time            0.40 seconds
      

MPRINT(SETUP_GENERIC_ADAM):   data source_target_files;
MPRINT(SETUP_GENERIC_ADAM):   merge source_files(in=a drop=path rename=(lastmodified=sourcelastmodified)) target_files(in=b drop=path rename=(lastmodified=targetlastmodified)) end=last ;
MPRINT(SETUP_GENERIC_ADAM):   by dir name;
MPRINT(SETUP_GENERIC_ADAM):   __prx = prxparse('s/((Mon|Tue|Wed|Thu|Fri|Sat|Sun)(\w*day)? )?(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]* (\d\d?) (\d?\d:\d\d:\d\d) GMT (\d{4})/\5\4\7:\6/i');
MPRINT(SETUP_GENERIC_ADAM):   if a then do;
MPRINT(SETUP_GENERIC_ADAM):   sourcemodte = input(prxchange(__prx, 1, sourcelastmodified), anydtdtm.);
MPRINT(SETUP_GENERIC_ADAM):   targetmodte = input(prxchange(__prx, 1, targetlastmodified), anydtdtm.);
MPRINT(SETUP_GENERIC_ADAM):   format sourcemodte targetmodte E8601DT.;
MPRINT(SETUP_GENERIC_ADAM):   need_update = (sourcemodte > targetmodte);
MPRINT(SETUP_GENERIC_ADAM):   tot_need_update=+need_update;
MPRINT(SETUP_GENERIC_ADAM):   tot_files=+a;
MPRINT(SETUP_GENERIC_ADAM):   output;
MPRINT(SETUP_GENERIC_ADAM):   end;
MPRINT(SETUP_GENERIC_ADAM):   if last then do;
MPRINT(SETUP_GENERIC_ADAM):   put "Target files needing update: " tot_need_update " out of " tot_files;
MPRINT(SETUP_GENERIC_ADAM):   call symputx("tot_need_update", tot_need_update);
MPRINT(SETUP_GENERIC_ADAM):   end;
MPRINT(SETUP_GENERIC_ADAM):   run;
NOTE: Invalid argument to function INPUT at line 0 column 119.
a=1 b=0 last=0 name=job_gnarrv2-orig.job sourcelastmodified=Tue Feb 14 08:25:35 GMT 2023 dir=jobs targetlastmodified=  FIRST.dir=0 LAST.dir=0 FIRST.name=1 LAST.name=1 __prx=1
sourcemodte=2023-02-14T08:25:35 targetmodte=. need_update=1 tot_need_update=1 tot_files=1 _ERROR_=1 _N_=18
Target files needing update: 1  out of 1
NOTE: Mathematical operations could not be performed at the following places. The results of the operations have been set to missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      1 at 0:119   
NOTE: There were 60 observations read from the data set WORK.SOURCE_FILES.
NOTE: There were 59 observations read from the data set WORK.TARGET_FILES.
NOTE: The data set WORK.SOURCE_TARGET_FILES has 60 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      
  Create generic_adam_path=/clinical/argx-117/mmn/argx-117-0000/biostat/staging/generic_adam  (force=N): create_result=skip_create_generic_adam_folder - already exists: 0: Success.
  Setup generic_adam_path=/clinical/argx-117/mmn/argx-117-0000/biostat/staging/generic_adam : setup_result=setup_generic_adam: 0: Success.
  /clinical/argx-117/mmn/argx-117-0000/biostat/staging/generic_adam : setup_result=skipped since &setup_gadam_folder = N
  /clinical/argx-117/mmn/argx-117-0000/biostat/staging/generic_adam : adam_rebuild_result=skipped since sdtm pools within/across indication are not yet refreshed at this point  === 
     
Notice: === study=argx-117-2002 match_pool=0 match_stdm_ind_pool=0
  Create generic_adam_path=/clinical/argx-117/mmn/argx-117-2002/biostat/staging/generic_adam  (force=N): create_result=skip_create_generic_adam_folder - already exists: 0: Success.

TOT_NEED_UPDATE=1
Notice: Setting up generic_adam reporting event in /clinical/argx-117/mmn/argx-117-2002/biostat/staging/generic_adam ...
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/mmn/argx-117-2002/biostat/staging/data_received/adam", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/mmn/argx-117-2002/biostat/staging/data_received/adam" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/mmn/argx-117-2002/biostat/staging/data_received/adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/mmn/argx-117-2002/biostat/staging/data_received/adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item does not exist: /clinical/argx-117/mmn/argx-117-2002/biostat/staging/data_received/adam
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 0
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(SETUP_GENERIC_ADAM):  ;
Notice:(SETUP_GENERIC_ADAM): study_adam_path not found, set to null: /clinical/argx-117/mmn/argx-117-2002/biostat/staging/data_received/adam
NUM_JOBS_SPAWNED=11
MACROAPIVER=2.6
MPRINT(SUBMIT_JOB):   proc sql noprint;
MPRINT(SUBMIT_JOB):   drop table work.job_Parameters;
NOTE: Table WORK.JOB_PARAMETERS has been dropped.
MPRINT(SUBMIT_JOB):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

DEBUG:(GEN_JOB_ENV): PRX=151
DEBUG:(GEN_JOB_ENV): prxmatch(151, /general/biostat/jobs/gadam_ongoing_studies/dev/jobs/job_gadam_studysetup.job) = 1
DEBUG:(GEN_JOB_ENV): (0) REFPATH=
DEBUG:(GEN_JOB_ENV): (0) REPEVPATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (0) RELREPEVPATH=/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (0) _SASFILEPATH_=/general/biostat/jobs/gadam_ongoing_studies/prod/programs/lsaf_get_last_sdtm.sas
DEBUG:(GEN_JOB_ENV): (0) PROGPATH=/general/biostat/jobs/gadam_ongoing_studies/prod/programs/
DEBUG:(GEN_JOB_ENV): (0) PATH=/general/biostat/jobs/gadam_ongoing_studies/dev/jobs/job_gadam_studysetup.job
Setting refpath = &repevpath
DEBUG:(GEN_JOB_ENV): (1) REFPATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (2) REFENV=prod
DEBUG:(GEN_JOB_ENV): (3) REFENV=prod
DEBUG:(F_LSAF_EXISTS) - 2023-02-15T02:08:06 - Iteration: 1: slept = 0, exists = 1
DEBUG:(F_LSAF_EXISTS) - 2023-02-15T02:08:06 - Iteration: 1: slept = 0, exists = 1
DEBUG:(F_LSAF_EXISTS) - 2023-02-15T02:08:06 - Iteration: 1: slept = 0, exists = 1
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(SUBMIT_JOB):  ;
Notice:(SUBMIT_JOB): LSAF Job Path exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job.
MPRINT(SUBMIT_JOB):   proc format;
MPRINT(SUBMIT_JOB):   value $jobabbr "job_gadam_ongoing_studies.job"= "gos" "job_studies_status.job"= "ss" "job_gadam_sdtm_key_core_vars.job"= "gskcv" "job_unzip_sdtm_sources.job"= "uss" 
"job_zip_extract_files.job"= "zef" "job_lsaf_get_last_sdtm.job"= "lgls" "setup_reporting_event_folder.job"= "sref" "job_gadam_refresh_sdtm_last.job"= "grsl" "job_gadam_update_refresh_info.job"= 
"guri" "convert_definetosas.job"= "cdts" "job_gadam_studysetup.job"= "gss" "job_gadam_rebuild_adam.job"= "gra" "job_adAAA" - "job_adzzz"= "adx" "job_qcstudyadams.job"= "qcsa" 
"job_qc_gadam_vs_study.job"= "qcgvs" "job_qc_gadam_vs_study-overview.job"= "qcgvso" "job_check_and_load.job"= "cal" "job_tAAA" - "job_tzzz"= "txx" "job_gadam_qc_overviews.job"= "gqco" 
"job_make_sdtm_pool_jobs.job"= "mspj" "job_lsaf_pool_last_sdtm.job"= "lpls" "sdtm_pool-AAA" - "sdtm_pool-zzz"= "pci" "job_gadam_refresh_sdtm_overview.job"= "grso" "getdata.job"= "gd" OTHER = "***" ;
NOTE: Format $JOBABBR is already on the library WORK.FORMATS.
NOTE: Format $JOBABBR has been output.
MPRINT(SUBMIT_JOB):   run;
NOTE: PROCEDURE FORMAT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SUBMIT_JOB):   quit;
job_instance=>Ngos117Prod_4_x0_11<
MPRINT(LSAF_GETJOBPARAMETERS):  ;
MPRINT(LSAF_GETJOBPARAMETERS):   data work.job_Parameters (label="Created by LSAF_GETJOBPARAMETERS" KEEP=jobPath jobVersion name label type defaultValue fileVersion includeSubFolders );
MPRINT(LSAF_GETJOBPARAMETERS):   attrib returnCode length=8 message length=$200 logMsgPrefix length=$70 logMsgPrimary length=$70 logMsg length=$300 rowCount length=8 jobPath length=$2048 label="Job 
Path" jobVersion length=$32 label="Job Version" name length=$256 label="Parameter Name" label length=$256 label="Parameter Label" type length=$32 label="Parameter Type" defaultValue length=$2048 
label="Parameter Default Value" fileVersion length=$32 label="File Version if File Type" includeSubFolders length=8 label="Include Container SubFolders" includesSubFolders length=$5 label="FOR 
INTERNAL PROCESSING ONLY.  WILL BE DROPPED." ;
MPRINT(LSAF_GETJOBPARAMETERS):   rowCount=0;
MPRINT(LSAF_GETJOBPARAMETERS):   declare javaobj srv("com/sas/lsaf/macro/execution/job/JobService") ;
MPRINT(LSAF_GETJOBPARAMETERS):   declare javaobj results("com/sas/lsaf/macro/execution/job/SasJobParametersResult");
MPRINT(LSAF_GETJOBPARAMETERS):   srv.callStaticVoidMethod("getRepositoryJobParameters", "/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job", "", results) ;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_GETJOBPARAMETERS):   if (returnCode ne 0) then do;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_GETJOBPARAMETERS):   if "" NE "" then logMsg=" Cannot retrieve parameters for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job, version " ;
MPRINT(LSAF_GETJOBPARAMETERS):   else logMsg=" Cannot retrieve parameters for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   else do;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsg=" Parameters were returned for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getJobPath", jobPath);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getJobVersion", jobVersion);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callIntMethod("getSize", rowCount);
MPRINT(LSAF_GETJOBPARAMETERS):   do row=0 to rowCount - 1;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getName", row, name);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getLabel", row, label);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getType", row, type);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getDefaultValue", row, defaultValue);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getFileVersion", row, fileVersion);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getContainerIncludeSubfolders", row, includesSubFolders);
MPRINT(LSAF_GETJOBPARAMETERS):   includeSubFolders=input(includesSubFolders,best.);
MPRINT(LSAF_GETJOBPARAMETERS):   output;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   put;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " " "lsaf_getjobparameters";
MPRINT(LSAF_GETJOBPARAMETERS):   if (rowCount=0) then put logMsgPrefix " No parameters were found.";
MPRINT(LSAF_GETJOBPARAMETERS):   else put logMsgPrefix " " rowCount " records written to data set work.job_Parameters";
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(LSAF_GETJOBPARAMETERS):   put;
MPRINT(LSAF_GETJOBPARAMETERS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_GETJOBPARAMETERS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_GETJOBPARAMETERS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  Parameters were returned for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_getjobparameters
NOTE: SAS Life Science Analytics Framework Macro: *  8  records written to data set work.job_Parameters
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: The data set WORK.JOB_PARAMETERS has 8 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(SUBMIT_JOB):  ;
NOTE: The dataset WORK.JOB_PARAMETERS has 8 observations and 8 variables.
MPRINT(SUBMIT_JOB):   ;
MPRINT(SUBMIT_JOB):   *- dataset to specify job parameters (from macro parameters values) -*;
MPRINT(SUBMIT_JOB):   data lsaf_job_params(index=(name));
MPRINT(SUBMIT_JOB):   set work.job_Parameters(rename=(defaultValue = value));
MPRINT(SUBMIT_JOB):   if upcase(name) = "_PARENTJOB_WS_" then do;
MPRINT(SUBMIT_JOB):   if symexist("_SASWS_") and type = "CHARACTER" then value = symget("_SASWS_");
MPRINT(SUBMIT_JOB):   else value = " ";
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   else if upcase(name) = "_PARENTJOB_WRK_" then do;
MPRINT(SUBMIT_JOB):   value = pathname("WORK", "L");
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   else if symexist(name) then do;
MPRINT(SUBMIT_JOB):   if symget(name) ^= ' ' then value = symget(name);
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   new_value = translate(value, ' ', ',;()"''&%');
MPRINT(SUBMIT_JOB):   if new_value ne value then put "NOTE:(SUBMIT_JOB): Special characters may be removed from parameter value:" / @2 "parameter: " name /@2 "old value: " value /@2 "new value: " 
new_value;
MPRINT(SUBMIT_JOB):   if _n_=1 then put "Not" "ice:(SUBMIT_JOB): Updated Job parameters:";
MPRINT(SUBMIT_JOB):   if type = "FOLDER" then put " - " name @+(-1) "=" value "[" type= @+(-1) ", " includeSubFolders= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   else if TYPE = "FILE" then put " - " name @+(-1) "=" value "[" type= @+(-1) ", " fileversion= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   else put " - " name @+(-1) "=" value "[" type= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   run;
Notice:(SUBMIT_JOB): Updated Job parameters:
 - gadam_path=/clinical/argx-117/mmn/argx-117-2002/biostat/staging/generic_adam [type=FOLDER, includeSubFolders=0]
 - sdtm_last_path=/clinical/argx-117/mmn/argx-117-2002/biostat/staging/data_received/sdtm_last [type=FOLDER, includeSubFolders=0]
 - study_adam_path=  [type=FOLDER, includeSubFolders=0]
 - gadam_files_source=/general/biostat/gadam [type=FOLDER, includeSubFolders=1]
 - job_instance=Ngos117Prod_4_x0_11 [type=CHARACTER]
 - _PARENTJOB_WS_=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15 [type=CHARACTER]
 - _PARENTJOB_WRK_=/saswork/sas_tmp/SAS_work4CFB0019563E_xar08auv.vsp.sas.com/SAS_work5B910019563E_xar08auv.vsp.sas.com [type=CHARACTER]
 - USE_SAS_WORKSPACE_MACROS=  [type=CHARACTER]
NOTE: There were 8 observations read from the data set WORK.JOB_PARAMETERS.
NOTE: The data set WORK.LSAF_JOB_PARAMS has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

N_PARAMS=8
MPRINT(SUBMIT_JOB):   data lsaf_job_params(index=(name));
MPRINT(SUBMIT_JOB):   set lsaf_job_params;
MPRINT(SUBMIT_JOB):   by name;
MPRINT(SUBMIT_JOB):   if (not first.name) or (not last.name) then do;
MPRINT(SUBMIT_JOB):   if last.name then action = "(kept)   ";
MPRINT(SUBMIT_JOB):   else action = "(dropped)";
MPRINT(SUBMIT_JOB):   drop action;
MPRINT(SUBMIT_JOB):   put "Not" "ice:(SUBMIT_JOB): duplicate parameter " name " = " value @+(3) action;
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   if last.name;
MPRINT(SUBMIT_JOB):   run;
NOTE: There were 8 observations read from the data set WORK.LSAF_JOB_PARAMS.
NOTE: The data set WORK.LSAF_JOB_PARAMS has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SUBMIT_JOB):   data _null_;
MPRINT(SUBMIT_JOB):   file print;
MPRINT(SUBMIT_JOB):   set lsaf_job_params(where=(prxmatch('/^(FOLDER|FILE)$/', trim(type))) in=a) lsaf_job_params(where=(prxmatch('/^(FOLDER|FILE)$/', trim(type))=0 and value ^= ' ')) end=last;
MPRINT(SUBMIT_JOB):   if _n_=1 then putlog "=== 2023-02-15T02:08:06 - Submit job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job (with parameters: " @;
MPRINT(SUBMIT_JOB):   _n_a+a;
MPRINT(SUBMIT_JOB):   if _n_-1 = _n_a then do;
MPRINT(SUBMIT_JOB):   putlog / @8 @;
MPRINT(SUBMIT_JOB):   put / @8 @;
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   if a then putlog / @8 name @+(-1) "=" value ' (' type= includeSubFolders= @+(-1) ')   ' @;
MPRINT(SUBMIT_JOB):   else putlog name @+(-1) "=" value "  " @ ;
MPRINT(SUBMIT_JOB):   if last then putlog @+8 ") ===";
MPRINT(SUBMIT_JOB):   if _n_=1 then put "=== 2023-02-15T02:08:06 - Submit job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job (with parameters: " @;
MPRINT(SUBMIT_JOB):   if a then put / @8 name @+(-1) "=" value ' (' type= includeSubFolders= @+(-1) ')   ' @;
MPRINT(SUBMIT_JOB):   else put name @+(-1) "=" value "  " @ ;
MPRINT(SUBMIT_JOB):   if last then put @+8 ") ===";
MPRINT(SUBMIT_JOB):   run;
=== 2023-02-15T02:08:06 - Submit job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job (with parameters: 
       gadam_files_source=/general/biostat/gadam  (type=FOLDER includeSubFolders=1)   
       gadam_path=/clinical/argx-117/mmn/argx-117-2002/biostat/staging/generic_adam  (type=FOLDER includeSubFolders=0)   
       sdtm_last_path=/clinical/argx-117/mmn/argx-117-2002/biostat/staging/data_received/sdtm_last  (type=FOLDER includeSubFolders=0)   
       study_adam_path=   (type=FOLDER includeSubFolders=0)   
       _PARENTJOB_WRK_=/saswork/sas_tmp/SAS_work4CFB0019563E_xar08auv.vsp.sas.com/SAS_work5B910019563E_xar08auv.vsp.sas.com   _PARENTJOB_WS_=
/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15   job_instance=Ngos117Prod_4_x0_11           ) ===
NOTE: 7 lines were written to file PRINT.
NOTE: There were 4 observations read from the data set WORK.LSAF_JOB_PARAMS.
      WHERE PRXMATCH('/^(FOLDER|FILE)$/', TRIM(type));
NOTE: There were 3 observations read from the data set WORK.LSAF_JOB_PARAMS.
      WHERE (PRXMATCH('/^(FOLDER|FILE)$/', TRIM(type))=0) and (value not = ' ');
NOTE: The DATA step printed page 21.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LSAF_SUBMITJOB):  ;
NOTE: lsaf_submitjob: Validating dataset lsaf_job_params
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   options nonotes;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   proc datasets library=work nolist;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   delete __SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   quit;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   options nonotes;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   data _null_;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   length message $45 libName $8 dsName $300;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   providedDatasetName=kstrip("lsaf_job_params");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsName="INVALID";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsNameIsValid=0;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dotCount=countc(providedDatasetName,".");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dotPosition=kindexc(providedDatasetName,".");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   *put dotPosition=;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (dotPosition=1 or dotPosition=length(providedDatasetName)) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message=" Missing either LIBNAME or data set.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   select (dotCount);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   when (0) dsName=providedDatasetName;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   when (1) do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (dotPosition le 9) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   libName = (ksubstr(providedDatasetName, 1, dotPosition-1));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   *put libName=;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsName = (ksubstr(providedDatasetName, dotPosition+1));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   else do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Libname longer than 8 characters.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   otherwise do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Invalid data set name structure.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   firstchar=ksubstr(kleft(dsName), 1, 1);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (anydigit(firstchar)) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Data set name must start with a character.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (length(dsName) > 32) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Data set name longer than 32 characters.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsNameIsValid=1;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   SETVARS: call symput("_lsafvaliddsn_", strip(put(dsNameIsValid, best.)));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   call symput("dsnMsg", message);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   call symput("specifiedLib", strip(libName));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   run;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   options NONOTES;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   * CHECK EXISTS: Also getting errors for data set name.;
MPRINT(LSAF_VALIDATE_SASDATASET):  ;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):  ;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   proc sort data=lsaf_job_params out=__SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   by name;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   data _null_;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   set __SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   by name;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   if (first.name AND NOT(last.name)) then do;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   call symput("_lsafMsg_", "Input data set has duplicate values for parameter name " || name || ".");
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   STOP;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   end;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   call symput("_lsafRC_", "0");
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   option notes;
MPRINT(LSAF_SUBMITJOB):  ;
MPRINT(LSAF_SUBMITJOB):   option notes;
MPRINT(LSAF_SUBMITJOB):   data _null_;
MPRINT(LSAF_SUBMITJOB):   attrib returnCode length=8 message length=$200 jobSubmissionId length=$525 logMsgPrefix length=$70 logMsgPrimary length=$70 logMsg length=$300 ;
MPRINT(LSAF_SUBMITJOB):   set lsaf_job_params end=eof;
MPRINT(LSAF_SUBMITJOB):   if (_n_ = 1) then do;
MPRINT(LSAF_SUBMITJOB):   declare javaobj params("com/sas/lsaf/macro/execution/job/SasParameterValues");
MPRINT(LSAF_SUBMITJOB):   declare javaobj srv("com/sas/lsaf/macro/execution/jobsubmission/JobSubmissionService");
MPRINT(LSAF_SUBMITJOB):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   params.callVoidMethod("addValue", kstrip(name), kstrip(value), kstrip(type), kstrip(fileVersion), includeSubFolders);
MPRINT(LSAF_SUBMITJOB):   if (eof);
MPRINT(LSAF_SUBMITJOB):   declare javaobj job("com/sas/lsaf/macro/execution/jobsubmission/SasSubmittableJob", "/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job", "", 
params);
MPRINT(LSAF_SUBMITJOB):   srv.callStaticStringMethod("submitRepositoryJob", job, results, jobSubmissionId);
MPRINT(LSAF_SUBMITJOB):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_SUBMITJOB):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_SUBMITJOB):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_SUBMITJOB):   if (returnCode ne 0) then do;
MPRINT(LSAF_SUBMITJOB):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_SUBMITJOB):   logMsg=" Cannot submit job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job";
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   else do;
MPRINT(LSAF_SUBMITJOB):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_SUBMITJOB):   logMsg=" Submitted job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job";
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   put;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " " "lsaf_submitjob";
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(LSAF_SUBMITJOB):   if "lsaf_job_params" = "" then put logMsgPrefix "No job parameters were supplied.";
MPRINT(LSAF_SUBMITJOB):   else put logMsgPrefix "sas_dsname = lsaf_job_params";
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix "_lsafJobSubmissionId_= " jobSubmissionId;
MPRINT(LSAF_SUBMITJOB):   put;
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafJobSubmissionId_", strip(jobSubmissionId));
MPRINT(LSAF_SUBMITJOB):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  Submitted job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_submitjob
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: * sas_dsname = lsaf_job_params
NOTE: SAS Life Science Analytics Framework Macro: * _lsafJobSubmissionId_= 92c8f589-4f0b-458d-8591-51e66f1b754f
NOTE: There were 8 observations read from the data set WORK.LSAF_JOB_PARAMS.
NOTE: DATA statement used (Total process time):
      real time           1.72 seconds
      cpu time            0.02 seconds
      

MPRINT(LSAF_SUBMITJOB):   options NONOTES;
MPRINT(SUBMIT_JOB):  ;
MPRINT(SUBMIT_JOB):   *- Job submission succeeded -*;
MPRINT(SUBMIT_JOB):   option nomprint nonotes
Calling %lsaf_getitemid(lsaf_path=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job) ...
_LSAFMSG_=Success.  _LSAFRC_=0  _LSAFITEMID_=090a95d3-6059-474f-a1bd-61c6768ba993
Calling %step_lsaf_getjobsubmissioninfos(job_subm_id=92c8f589-4f0b-458d-8591-51e66f1b754f) ...
Notice: SYSDATASTEPPHASE=EXECUTION IN_DATA_STEP=N
Ignoring record: submissionId=30678109-1661-4a87-858f-1bc1b0d581fa jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job jobVersion=0.1
jobId=abcfa448-6829-4513-8bef-3d8418207d45
Ignoring record: submissionId=c4fb4991-9137-4374-8d55-32ed9002f3d8 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_ongoing_studies.job jobVersion=0.1
jobId=c762f385-9376-49c8-8cec-d19326e7e18e
Ignoring record: submissionId=f00d2b52-d9f1-4ef1-8922-181d934626e0 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_ongoing_studies.job jobVersion=0.1
jobId=c762f385-9376-49c8-8cec-d19326e7e18e
Ignoring record: submissionId=05e0665e-78cd-4a3c-9aa3-9ddb53288cad jobPath=/clinical/argx-113/hv/argx-113-1702/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job jobVersion=52.0
jobId=bd48e139-ba53-466d-a613-fa25b86270cc
Ignoring record: submissionId=406cb2c5-cd8e-434c-a190-fd11e2da6f0b jobPath=/general/biostat/jobs/dashboard/dev/jobs/pp.job jobVersion=1.2 jobId=030fd944-90dd-464a-8101-6d0ab92dae81
Ignoring record: submissionId=feed1f0f-2d9a-42b9-8060-8fddd1e47337 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job jobVersion=0.1
jobId=abcfa448-6829-4513-8bef-3d8418207d45
Ignoring record: submissionId=0e426e98-1f39-407e-a152-2a4b08808841 jobPath=/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job jobVersion= 
jobId=02b06e4d-7777-4a59-b2f9-2fc165603216
Ignoring record: submissionId=5710a56b-caf7-44f5-898a-7fd347962e81 jobPath=/clinical/argx-113/hv/argx-113-1702/biostat/staging/generic_adam/jobs/job_tecg.job jobVersion= 
jobId=f9577a47-d047-415c-a9f8-05eeb42e041e
Notice: _LSAFJOBSUBMISSIONID_=92c8f589-4f0b-458d-8591-51e66f1b754f SESSIONID=713c6044-e121-4199-a654-d5857f475986 JOB=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job 
JOBID=090a95d3-6059-474f-a1bd-61c6768ba993
(SUBMIT_JOB): 2023-02-15T02:08:09 - Submitted REPOSITORY Job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job          with Submission ID: 
92c8f589-4f0b-458d-8591-51e66f1b754f, Status: STARTED
(SUBMIT_JOB): 02:08:08.67 Elapsed: 00:00:02.64 Job Submission Status: STARTED
(SUBMIT_JOB): 02:08:11.21 Elapsed: 00:00:05.17 Job Submission Status: STARTED
(SUBMIT_JOB): 02:08:13.74 Elapsed: 00:00:07.70 Job Submission Status: STARTED
(SUBMIT_JOB): 02:08:16.27 Elapsed: 00:00:10.24 Job Submission Status: STARTED
(SUBMIT_JOB): 02:08:18.82 Elapsed: 00:00:12.78 Job Submission Status: STARTED
(SUBMIT_JOB): 02:08:21.35 Elapsed: 00:00:15.31 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:08:23.89 Elapsed: 00:00:17.85 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:08:26.42 Elapsed: 00:00:20.38 Job Submission Status: POST_EXECUTION_PUBLISHING
(SUBMIT_JOB): 02:08:28.96 Elapsed: 00:00:22.92 Job Submission Status: COMPLETED_SUCCESSFUL
(SUBMIT_JOB): 2023-02-15T02:08:31 - Submitted REPOSITORY job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job has completed with status: COMPLETED_SUCCESSFUL
MPRINT(SUBMIT_JOB):  ;
job_gadam_studysetup.job: get job status: 0: Success.:       Elapsed: 00:00:25.42       REPOSITORY Job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job with Submission 
ID: 92c8f589-4f0b-458d-8591-51e66f1b754f, Status: COMPLETED_SUCCESSFUL
MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   option NOMPRINT;
%rebuild_generic_adam(gadam_study_path=/clinical/argx-117/mmn/argx-117-2002/biostat/staging/generic_adam, sdtm_last_path=/clinical/argx-117/mmn/argx-117-2002/biostat/staging/data_received/sdtm_last)
MPRINT(REBUILD_GENERIC_ADAM):   notes;
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/mmn/argx-117-2002/biostat/staging/generic_adam", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/mmn/argx-117-2002/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/mmn/argx-117-2002/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/mmn/argx-117-2002/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/mmn/argx-117-2002/biostat/staging/generic_adam
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
      

MPRINT(REBUILD_GENERIC_ADAM):  ;
Notice: Rebuilding adam datasets in generic_adam reporting event in /clinical/argx-117/mmn/argx-117-2002/biostat/staging/generic_adam ...
NUM_JOBS_SPAWNED=12
MACROAPIVER=2.6
MPRINT(SUBMIT_JOB):   proc sql noprint;
MPRINT(SUBMIT_JOB):   drop table work.job_Parameters;
NOTE: Table WORK.JOB_PARAMETERS has been dropped.
MPRINT(SUBMIT_JOB):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

DEBUG:(GEN_JOB_ENV): PRX=158
DEBUG:(GEN_JOB_ENV): prxmatch(158, /general/biostat/jobs/gadam_rebuild_adam/dev/jobs/job_gadam_rebuild_adam.job) = 1
DEBUG:(GEN_JOB_ENV): (0) REFPATH=
DEBUG:(GEN_JOB_ENV): (0) REPEVPATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (0) RELREPEVPATH=/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (0) _SASFILEPATH_=/general/biostat/jobs/gadam_ongoing_studies/prod/programs/lsaf_get_last_sdtm.sas
DEBUG:(GEN_JOB_ENV): (0) PROGPATH=/general/biostat/jobs/gadam_ongoing_studies/prod/programs/
DEBUG:(GEN_JOB_ENV): (0) PATH=/general/biostat/jobs/gadam_rebuild_adam/dev/jobs/job_gadam_rebuild_adam.job
Setting refpath = &repevpath
DEBUG:(GEN_JOB_ENV): (1) REFPATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (2) REFENV=prod
DEBUG:(GEN_JOB_ENV): (3) REFENV=prod
DEBUG:(F_LSAF_EXISTS) - 2023-02-15T02:08:32 - Iteration: 1: slept = 0, exists = 1
DEBUG:(F_LSAF_EXISTS) - 2023-02-15T02:08:32 - Iteration: 1: slept = 0, exists = 1
DEBUG:(F_LSAF_EXISTS) - 2023-02-15T02:08:32 - Iteration: 1: slept = 0, exists = 1
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(SUBMIT_JOB):  ;
Notice:(SUBMIT_JOB): LSAF Job Path exists: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job.
MPRINT(SUBMIT_JOB):   proc format;
MPRINT(SUBMIT_JOB):   value $jobabbr "job_gadam_ongoing_studies.job"= "gos" "job_studies_status.job"= "ss" "job_gadam_sdtm_key_core_vars.job"= "gskcv" "job_unzip_sdtm_sources.job"= "uss" 
"job_zip_extract_files.job"= "zef" "job_lsaf_get_last_sdtm.job"= "lgls" "setup_reporting_event_folder.job"= "sref" "job_gadam_refresh_sdtm_last.job"= "grsl" "job_gadam_update_refresh_info.job"= 
"guri" "convert_definetosas.job"= "cdts" "job_gadam_studysetup.job"= "gss" "job_gadam_rebuild_adam.job"= "gra" "job_adAAA" - "job_adzzz"= "adx" "job_qcstudyadams.job"= "qcsa" 
"job_qc_gadam_vs_study.job"= "qcgvs" "job_qc_gadam_vs_study-overview.job"= "qcgvso" "job_check_and_load.job"= "cal" "job_tAAA" - "job_tzzz"= "txx" "job_gadam_qc_overviews.job"= "gqco" 
"job_make_sdtm_pool_jobs.job"= "mspj" "job_lsaf_pool_last_sdtm.job"= "lpls" "sdtm_pool-AAA" - "sdtm_pool-zzz"= "pci" "job_gadam_refresh_sdtm_overview.job"= "grso" "getdata.job"= "gd" OTHER = "***" ;
NOTE: Format $JOBABBR is already on the library WORK.FORMATS.
NOTE: Format $JOBABBR has been output.
MPRINT(SUBMIT_JOB):   run;
NOTE: PROCEDURE FORMAT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SUBMIT_JOB):   quit;
job_instance=>Ngos117Prod_4_x0_12<
MPRINT(LSAF_GETJOBPARAMETERS):  ;
MPRINT(LSAF_GETJOBPARAMETERS):   data work.job_Parameters (label="Created by LSAF_GETJOBPARAMETERS" KEEP=jobPath jobVersion name label type defaultValue fileVersion includeSubFolders );
MPRINT(LSAF_GETJOBPARAMETERS):   attrib returnCode length=8 message length=$200 logMsgPrefix length=$70 logMsgPrimary length=$70 logMsg length=$300 rowCount length=8 jobPath length=$2048 label="Job 
Path" jobVersion length=$32 label="Job Version" name length=$256 label="Parameter Name" label length=$256 label="Parameter Label" type length=$32 label="Parameter Type" defaultValue length=$2048 
label="Parameter Default Value" fileVersion length=$32 label="File Version if File Type" includeSubFolders length=8 label="Include Container SubFolders" includesSubFolders length=$5 label="FOR 
INTERNAL PROCESSING ONLY.  WILL BE DROPPED." ;
MPRINT(LSAF_GETJOBPARAMETERS):   rowCount=0;
MPRINT(LSAF_GETJOBPARAMETERS):   declare javaobj srv("com/sas/lsaf/macro/execution/job/JobService") ;
MPRINT(LSAF_GETJOBPARAMETERS):   declare javaobj results("com/sas/lsaf/macro/execution/job/SasJobParametersResult");
MPRINT(LSAF_GETJOBPARAMETERS):   srv.callStaticVoidMethod("getRepositoryJobParameters", "/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job", "", results) ;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_GETJOBPARAMETERS):   if (returnCode ne 0) then do;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_GETJOBPARAMETERS):   if "" NE "" then logMsg=" Cannot retrieve parameters for job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job, version " ;
MPRINT(LSAF_GETJOBPARAMETERS):   else logMsg=" Cannot retrieve parameters for job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job" ;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   else do;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsg=" Parameters were returned for job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job" ;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getJobPath", jobPath);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getJobVersion", jobVersion);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callIntMethod("getSize", rowCount);
MPRINT(LSAF_GETJOBPARAMETERS):   do row=0 to rowCount - 1;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getName", row, name);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getLabel", row, label);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getType", row, type);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getDefaultValue", row, defaultValue);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getFileVersion", row, fileVersion);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getContainerIncludeSubfolders", row, includesSubFolders);
MPRINT(LSAF_GETJOBPARAMETERS):   includeSubFolders=input(includesSubFolders,best.);
MPRINT(LSAF_GETJOBPARAMETERS):   output;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   put;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " " "lsaf_getjobparameters";
MPRINT(LSAF_GETJOBPARAMETERS):   if (rowCount=0) then put logMsgPrefix " No parameters were found.";
MPRINT(LSAF_GETJOBPARAMETERS):   else put logMsgPrefix " " rowCount " records written to data set work.job_Parameters";
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(LSAF_GETJOBPARAMETERS):   put;
MPRINT(LSAF_GETJOBPARAMETERS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_GETJOBPARAMETERS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_GETJOBPARAMETERS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  Parameters were returned for job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_getjobparameters
NOTE: SAS Life Science Analytics Framework Macro: *  12  records written to data set work.job_Parameters
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: The data set WORK.JOB_PARAMETERS has 12 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
      

MPRINT(SUBMIT_JOB):  ;
NOTE: The dataset WORK.JOB_PARAMETERS has 12 observations and 8 variables.
MPRINT(SUBMIT_JOB):   ;
MPRINT(SUBMIT_JOB):   *- dataset to specify job parameters (from macro parameters values) -*;
MPRINT(SUBMIT_JOB):   data lsaf_job_params(index=(name));
MPRINT(SUBMIT_JOB):   set work.job_Parameters(rename=(defaultValue = value));
MPRINT(SUBMIT_JOB):   if upcase(name) = "_PARENTJOB_WS_" then do;
MPRINT(SUBMIT_JOB):   if symexist("_SASWS_") and type = "CHARACTER" then value = symget("_SASWS_");
MPRINT(SUBMIT_JOB):   else value = " ";
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   else if upcase(name) = "_PARENTJOB_WRK_" then do;
MPRINT(SUBMIT_JOB):   value = pathname("WORK", "L");
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   else if symexist(name) then do;
MPRINT(SUBMIT_JOB):   if symget(name) ^= ' ' then value = symget(name);
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   new_value = translate(value, ' ', ',;()"''&%');
MPRINT(SUBMIT_JOB):   if new_value ne value then put "NOTE:(SUBMIT_JOB): Special characters may be removed from parameter value:" / @2 "parameter: " name /@2 "old value: " value /@2 "new value: " 
new_value;
MPRINT(SUBMIT_JOB):   if _n_=1 then put "Not" "ice:(SUBMIT_JOB): Updated Job parameters:";
MPRINT(SUBMIT_JOB):   if type = "FOLDER" then put " - " name @+(-1) "=" value "[" type= @+(-1) ", " includeSubFolders= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   else if TYPE = "FILE" then put " - " name @+(-1) "=" value "[" type= @+(-1) ", " fileversion= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   else put " - " name @+(-1) "=" value "[" type= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   run;
Notice:(SUBMIT_JOB): Updated Job parameters:
 - gadam_study_path=/clinical/argx-117/mmn/argx-117-2002/biostat/staging/generic_adam [type=FOLDER, includeSubFolders=0]
 - sdtm_last_path=/clinical/argx-117/mmn/argx-117-2002/biostat/staging/data_received/sdtm_last [type=FOLDER, includeSubFolders=0]
 - qc_gadam_vs_study=Y [type=CHARACTER]
 - check_and_load_gadam=Y [type=CHARACTER]
 - run_gadam_tables=Y [type=CHARACTER]
 - wait=Y [type=CHARACTER]
 - force=N [type=CHARACTER]
 - mock=N [type=CHARACTER]
 - job_instance=Ngos117Prod_4_x0_12 [type=CHARACTER]
 - _PARENTJOB_WS_=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15 [type=CHARACTER]
 - _PARENTJOB_WRK_=/saswork/sas_tmp/SAS_work4CFB0019563E_xar08auv.vsp.sas.com/SAS_work5B910019563E_xar08auv.vsp.sas.com [type=CHARACTER]
 - USE_SAS_WORKSPACE_MACROS=  [type=CHARACTER]
NOTE: There were 12 observations read from the data set WORK.JOB_PARAMETERS.
NOTE: The data set WORK.LSAF_JOB_PARAMS has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

N_PARAMS=12
MPRINT(SUBMIT_JOB):   data lsaf_job_params(index=(name));
MPRINT(SUBMIT_JOB):   set lsaf_job_params;
MPRINT(SUBMIT_JOB):   by name;
MPRINT(SUBMIT_JOB):   if (not first.name) or (not last.name) then do;
MPRINT(SUBMIT_JOB):   if last.name then action = "(kept)   ";
MPRINT(SUBMIT_JOB):   else action = "(dropped)";
MPRINT(SUBMIT_JOB):   drop action;
MPRINT(SUBMIT_JOB):   put "Not" "ice:(SUBMIT_JOB): duplicate parameter " name " = " value @+(3) action;
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   if last.name;
MPRINT(SUBMIT_JOB):   run;
NOTE: There were 12 observations read from the data set WORK.LSAF_JOB_PARAMS.
NOTE: The data set WORK.LSAF_JOB_PARAMS has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SUBMIT_JOB):   data _null_;
MPRINT(SUBMIT_JOB):   file print;
MPRINT(SUBMIT_JOB):   set lsaf_job_params(where=(prxmatch('/^(FOLDER|FILE)$/', trim(type))) in=a) lsaf_job_params(where=(prxmatch('/^(FOLDER|FILE)$/', trim(type))=0 and value ^= ' ')) end=last;
MPRINT(SUBMIT_JOB):   if _n_=1 then putlog "=== 2023-02-15T02:08:32 - Submit job: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job (with parameters: " @;
MPRINT(SUBMIT_JOB):   _n_a+a;
MPRINT(SUBMIT_JOB):   if _n_-1 = _n_a then do;
MPRINT(SUBMIT_JOB):   putlog / @8 @;
MPRINT(SUBMIT_JOB):   put / @8 @;
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   if a then putlog / @8 name @+(-1) "=" value ' (' type= includeSubFolders= @+(-1) ')   ' @;
MPRINT(SUBMIT_JOB):   else putlog name @+(-1) "=" value "  " @ ;
MPRINT(SUBMIT_JOB):   if last then putlog @+8 ") ===";
MPRINT(SUBMIT_JOB):   if _n_=1 then put "=== 2023-02-15T02:08:32 - Submit job: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job (with parameters: " @;
MPRINT(SUBMIT_JOB):   if a then put / @8 name @+(-1) "=" value ' (' type= includeSubFolders= @+(-1) ')   ' @;
MPRINT(SUBMIT_JOB):   else put name @+(-1) "=" value "  " @ ;
MPRINT(SUBMIT_JOB):   if last then put @+8 ") ===";
MPRINT(SUBMIT_JOB):   run;
=== 2023-02-15T02:08:32 - Submit job: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job (with parameters: 
       gadam_study_path=/clinical/argx-117/mmn/argx-117-2002/biostat/staging/generic_adam  (type=FOLDER includeSubFolders=0)   
       sdtm_last_path=/clinical/argx-117/mmn/argx-117-2002/biostat/staging/data_received/sdtm_last  (type=FOLDER includeSubFolders=0)   
       _PARENTJOB_WRK_=/saswork/sas_tmp/SAS_work4CFB0019563E_xar08auv.vsp.sas.com/SAS_work5B910019563E_xar08auv.vsp.sas.com   _PARENTJOB_WS_=
/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15   check_and_load_gadam=Y   force=N   job_instance=Ngos117Prod_4_x0_12   mock=N   qc_gadam_vs_study=
Y   run_gadam_tables=Y   wait=Y           ) ===
NOTE: 6 lines were written to file PRINT.
NOTE: There were 2 observations read from the data set WORK.LSAF_JOB_PARAMS.
      WHERE PRXMATCH('/^(FOLDER|FILE)$/', TRIM(type));
NOTE: There were 9 observations read from the data set WORK.LSAF_JOB_PARAMS.
      WHERE (PRXMATCH('/^(FOLDER|FILE)$/', TRIM(type))=0) and (value not = ' ');
NOTE: The DATA step printed page 23.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LSAF_SUBMITJOB):  ;
NOTE: lsaf_submitjob: Validating dataset lsaf_job_params
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   options nonotes;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   proc datasets library=work nolist;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   delete __SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   quit;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   options nonotes;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   data _null_;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   length message $45 libName $8 dsName $300;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   providedDatasetName=kstrip("lsaf_job_params");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsName="INVALID";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsNameIsValid=0;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dotCount=countc(providedDatasetName,".");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dotPosition=kindexc(providedDatasetName,".");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   *put dotPosition=;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (dotPosition=1 or dotPosition=length(providedDatasetName)) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message=" Missing either LIBNAME or data set.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   select (dotCount);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   when (0) dsName=providedDatasetName;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   when (1) do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (dotPosition le 9) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   libName = (ksubstr(providedDatasetName, 1, dotPosition-1));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   *put libName=;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsName = (ksubstr(providedDatasetName, dotPosition+1));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   else do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Libname longer than 8 characters.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   otherwise do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Invalid data set name structure.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   firstchar=ksubstr(kleft(dsName), 1, 1);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (anydigit(firstchar)) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Data set name must start with a character.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (length(dsName) > 32) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Data set name longer than 32 characters.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsNameIsValid=1;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   SETVARS: call symput("_lsafvaliddsn_", strip(put(dsNameIsValid, best.)));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   call symput("dsnMsg", message);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   call symput("specifiedLib", strip(libName));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   run;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   options NONOTES;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   * CHECK EXISTS: Also getting errors for data set name.;
MPRINT(LSAF_VALIDATE_SASDATASET):  ;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):  ;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   proc sort data=lsaf_job_params out=__SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   by name;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   data _null_;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   set __SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   by name;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   if (first.name AND NOT(last.name)) then do;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   call symput("_lsafMsg_", "Input data set has duplicate values for parameter name " || name || ".");
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   STOP;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   end;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   call symput("_lsafRC_", "0");
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   option notes;
MPRINT(LSAF_SUBMITJOB):  ;
MPRINT(LSAF_SUBMITJOB):   option notes;
MPRINT(LSAF_SUBMITJOB):   data _null_;
MPRINT(LSAF_SUBMITJOB):   attrib returnCode length=8 message length=$200 jobSubmissionId length=$525 logMsgPrefix length=$70 logMsgPrimary length=$70 logMsg length=$300 ;
MPRINT(LSAF_SUBMITJOB):   set lsaf_job_params end=eof;
MPRINT(LSAF_SUBMITJOB):   if (_n_ = 1) then do;
MPRINT(LSAF_SUBMITJOB):   declare javaobj params("com/sas/lsaf/macro/execution/job/SasParameterValues");
MPRINT(LSAF_SUBMITJOB):   declare javaobj srv("com/sas/lsaf/macro/execution/jobsubmission/JobSubmissionService");
MPRINT(LSAF_SUBMITJOB):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   params.callVoidMethod("addValue", kstrip(name), kstrip(value), kstrip(type), kstrip(fileVersion), includeSubFolders);
MPRINT(LSAF_SUBMITJOB):   if (eof);
MPRINT(LSAF_SUBMITJOB):   declare javaobj job("com/sas/lsaf/macro/execution/jobsubmission/SasSubmittableJob", "/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job", "", 
params);
MPRINT(LSAF_SUBMITJOB):   srv.callStaticStringMethod("submitRepositoryJob", job, results, jobSubmissionId);
MPRINT(LSAF_SUBMITJOB):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_SUBMITJOB):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_SUBMITJOB):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_SUBMITJOB):   if (returnCode ne 0) then do;
MPRINT(LSAF_SUBMITJOB):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_SUBMITJOB):   logMsg=" Cannot submit job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job";
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   else do;
MPRINT(LSAF_SUBMITJOB):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_SUBMITJOB):   logMsg=" Submitted job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job";
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   put;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " " "lsaf_submitjob";
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(LSAF_SUBMITJOB):   if "lsaf_job_params" = "" then put logMsgPrefix "No job parameters were supplied.";
MPRINT(LSAF_SUBMITJOB):   else put logMsgPrefix "sas_dsname = lsaf_job_params";
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix "_lsafJobSubmissionId_= " jobSubmissionId;
MPRINT(LSAF_SUBMITJOB):   put;
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafJobSubmissionId_", strip(jobSubmissionId));
MPRINT(LSAF_SUBMITJOB):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  Submitted job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_submitjob
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: * sas_dsname = lsaf_job_params
NOTE: SAS Life Science Analytics Framework Macro: * _lsafJobSubmissionId_= 85e0341e-d2b7-4e41-98f7-e37a938b66b2
NOTE: There were 12 observations read from the data set WORK.LSAF_JOB_PARAMS.
NOTE: DATA statement used (Total process time):
      real time           1.45 seconds
      cpu time            0.00 seconds
      

MPRINT(LSAF_SUBMITJOB):   options NONOTES;
MPRINT(SUBMIT_JOB):  ;
MPRINT(SUBMIT_JOB):   *- Job submission succeeded -*;
MPRINT(SUBMIT_JOB):   option nomprint nonotes
Calling %lsaf_getitemid(lsaf_path=/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job) ...
_LSAFMSG_=Success.  _LSAFRC_=0  _LSAFITEMID_=02b06e4d-7777-4a59-b2f9-2fc165603216
Calling %step_lsaf_getjobsubmissioninfos(job_subm_id=85e0341e-d2b7-4e41-98f7-e37a938b66b2) ...
Notice: SYSDATASTEPPHASE=EXECUTION IN_DATA_STEP=N
Ignoring record: submissionId=30678109-1661-4a87-858f-1bc1b0d581fa jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job jobVersion=0.1
jobId=abcfa448-6829-4513-8bef-3d8418207d45
Ignoring record: submissionId=c4fb4991-9137-4374-8d55-32ed9002f3d8 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_ongoing_studies.job jobVersion=0.1
jobId=c762f385-9376-49c8-8cec-d19326e7e18e
Ignoring record: submissionId=f00d2b52-d9f1-4ef1-8922-181d934626e0 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_ongoing_studies.job jobVersion=0.1
jobId=c762f385-9376-49c8-8cec-d19326e7e18e
Ignoring record: submissionId=05e0665e-78cd-4a3c-9aa3-9ddb53288cad jobPath=/clinical/argx-113/hv/argx-113-1702/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job jobVersion=52.0
jobId=bd48e139-ba53-466d-a613-fa25b86270cc
Ignoring record: submissionId=406cb2c5-cd8e-434c-a190-fd11e2da6f0b jobPath=/general/biostat/jobs/dashboard/dev/jobs/pp.job jobVersion=1.2 jobId=030fd944-90dd-464a-8101-6d0ab92dae81
Ignoring record: submissionId=feed1f0f-2d9a-42b9-8060-8fddd1e47337 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job jobVersion=0.1
jobId=abcfa448-6829-4513-8bef-3d8418207d45
Ignoring record: submissionId=0e426e98-1f39-407e-a152-2a4b08808841 jobPath=/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job jobVersion= 
jobId=02b06e4d-7777-4a59-b2f9-2fc165603216
Ignoring record: submissionId=5710a56b-caf7-44f5-898a-7fd347962e81 jobPath=/clinical/argx-113/hv/argx-113-1702/biostat/staging/generic_adam/jobs/job_tecg.job jobVersion= 
jobId=f9577a47-d047-415c-a9f8-05eeb42e041e
Notice: _LSAFJOBSUBMISSIONID_=85e0341e-d2b7-4e41-98f7-e37a938b66b2 SESSIONID=163e9d73-ab7d-498a-bc13-4079db68a404 JOB=/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job 
JOBID=02b06e4d-7777-4a59-b2f9-2fc165603216
(SUBMIT_JOB): 2023-02-15T02:08:34 - Submitted REPOSITORY Job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job          with Submission ID: 
85e0341e-d2b7-4e41-98f7-e37a938b66b2, Status: STARTED
(SUBMIT_JOB): 02:08:33.94 Elapsed: 00:00:02.40 Job Submission Status: STARTED
(SUBMIT_JOB): 02:08:36.47 Elapsed: 00:00:04.94 Job Submission Status: STARTED
(SUBMIT_JOB): 02:08:39.01 Elapsed: 00:00:07.47 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:08:41.54 Elapsed: 00:00:10.01 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:08:44.07 Elapsed: 00:00:12.54 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:08:46.61 Elapsed: 00:00:15.08 Job Submission Status: RUNNING_TASKS
  Setup generic_adam_path=/clinical/argx-117/mmn/argx-117-2002/biostat/staging/generic_adam : setup_result=setup_generic_adam: 0: Success.
  /clinical/argx-117/mmn/argx-117-2002/biostat/staging/generic_adam : setup_result=skipped since &setup_gadam_folder = N
(SUBMIT_JOB): 02:08:49.14 Elapsed: 00:00:17.61 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:08:51.67 Elapsed: 00:00:20.14 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:08:54.21 Elapsed: 00:00:22.68 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:08:56.74 Elapsed: 00:00:25.21 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:08:59.27 Elapsed: 00:00:27.74 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:09:01.81 Elapsed: 00:00:30.27 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:09:09.34 Elapsed: 00:00:37.81 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:09:16.87 Elapsed: 00:00:45.34 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:09:24.41 Elapsed: 00:00:52.88 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:09:31.94 Elapsed: 00:01:00.41 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:09:54.49 Elapsed: 00:01:22.96 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:10:17.05 Elapsed: 00:01:45.52 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:10:47.09 Elapsed: 00:02:15.56 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:11:17.14 Elapsed: 00:02:45.61 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:11:47.18 Elapsed: 00:03:15.64 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:12:17.22 Elapsed: 00:03:45.68 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:12:47.25 Elapsed: 00:04:15.72 Job Submission Status: COMPLETED_SUCCESSFUL
(SUBMIT_JOB): 2023-02-15T02:13:17 - Submitted REPOSITORY job: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job has completed with status: COMPLETED_SUCCESSFUL
MPRINT(SUBMIT_JOB):  ;
job_gadam_rebuild_adam.job: get job status: 0: Success.:       Elapsed: 00:04:45.72       REPOSITORY Job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job with Submission 
ID: 85e0341e-d2b7-4e41-98f7-e37a938b66b2, Status: COMPLETED_SUCCESSFUL
MPRINT(REBUILD_GENERIC_ADAM):  ;
MPRINT(REBUILD_GENERIC_ADAM):   option NOMPRINT;
  Rebuild generic_adam_path=/clinical/argx-117/mmn/argx-117-2002/biostat/staging/generic_adam : adam_rebuild_result=rebuild_generic_adam: 0: Success.
  /clinical/argx-117/mmn/argx-117-2002/biostat/staging/generic_adam : adam_rebuild_result=rebuild_generic_adam: 0: Success.  === 
     
Notice: === study=argx-117-2003 match_pool=0 match_stdm_ind_pool=0
%create_generic_adam_path(/clinical/argx-117/mmn/argx-117-2003/biostat/staging/generic_adam, force=N)
MPRINT(CREATE_GENERIC_ADAM_PATH):   notes;
LOCATION_PARAMETERS=/clinical/argx-117/mmn/argx-117-2003
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/mmn/argx-117-2003/biostat/staging/generic_adam", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/mmn/argx-117-2003/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/mmn/argx-117-2003/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/mmn/argx-117-2003/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/mmn/argx-117-2003/biostat/staging/generic_adam
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(CREATE_GENERIC_ADAM_PATH):  ;
MPRINT(CREATE_GENERIC_ADAM_PATH):   option NOMPRINT;
%setup_generic_adam(gadam_path=/clinical/argx-117/mmn/argx-117-2003/biostat/staging/generic_adam, sdtm_last_path=/clinical/argx-117/mmn/argx-117-2003/biostat/staging/data_received/sdtm_last, 
study_adam_path=)
MPRINT(SETUP_GENERIC_ADAM):   notes;
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/mmn/argx-117-2003/biostat/staging/generic_adam", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/mmn/argx-117-2003/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/mmn/argx-117-2003/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/mmn/argx-117-2003/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/mmn/argx-117-2003/biostat/staging/generic_adam
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   *-2023-01-13 - jbodart - Perform gadam study setup only if target is not up-to-date -*;
MPRINT(SETUP_GENERIC_ADAM):   *- Use parameter gadam_files_source as &source_path for the template files to be used for study setup -*;
SOURCE_REL_PATH=/general/biostat/gadam SOURCE_PATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/gadam
STUDY=argx-117-2003 studyno=->2003<-
Notice: Checking whether generic_adam reporting event is already setup in /clinical/argx-117/mmn/argx-117-2003/biostat/staging/generic_adam ...
MPRINT(SETUP_GENERIC_ADAM):   data source_files(where=( scan(name, -1, ".") in ("xlsx" "sas" "job") and name ^= 'job_finalchecks.job' ) index=(_idx0_=(dir name)));
MPRINT(STEP_LSAF_GETCHILDREN):   *- Determine LSAF Macro API version -*;
MPRINT(STEP_LSAF_GETCHILDREN):   *- Declare the java items -*;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __srv678 ("com/sas/lsaf/macro/content/repository/RepositoryService") ;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __results678 ("com/sas/lsaf/macro/content/repository/SasRepositoryItemsResult");
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj _i_results678("com/sas/lsaf/macro/common/result/Result");
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   do __lsaf_path = "/general/biostat/gadam/documents" ,"/general/biostat/gadam/metadata/studyprograms" ,"/general/biostat/gadam/metadata/studyjobs" 
,"/general/biostat/gadam/metadata/studymacros";
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize numeric variables with default length (8) -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   rowCount=0;
MPRINT(STEP_LSAF_GETCHILDREN):   *- format numeric datetime variables -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize character variables with appropriate lengths -*;
MPRINT(STEP_LSAF_GETCHILDREN):   message = put(' ', $200.);
MPRINT(STEP_LSAF_GETCHILDREN):   path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   name = put(' ', $256.);
MPRINT(STEP_LSAF_GETCHILDREN):   description = put(' ', $512.);
MPRINT(STEP_LSAF_GETCHILDREN):   version = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   signatureStatus = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   createdBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   created = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   state = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   __createdTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   itemType = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   formattedsize = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   __lastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   *- check if container -*;
MPRINT(STEP_LSAF_GETCHILDREN):   isContainer = 1;
MPRINT(STEP_LSAF_GETCHILDREN):   *- if __lsaf_path is not a container, replace with parent folder path -*;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path ^= ' ' then __srv678.callStaticBooleanMethod("isContainer", trim(__lsaf_path), _i_results678, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   if isContainer = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_file_path = __lsaf_path;
MPRINT(STEP_LSAF_GETCHILDREN):   *- keep the original file path specified -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = resolve('%dirname('||__lsaf_path||')');
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path^='' then do;
MPRINT(STEP_LSAF_GETCHILDREN):   *- call the method -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __srv678.callStaticVoidMethod("getChildren", trim(__lsaf_path), cats(1), __results678);
MPRINT(STEP_LSAF_GETCHILDREN):   *- Retrieve the results -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __results678.callIntMethod("getReturnCode", returnCode);
MPRINT(STEP_LSAF_GETCHILDREN):   __results678.callStringMethod("getReturnMessage", message);
MPRINT(STEP_LSAF_GETCHILDREN):   if (returnCode = -1) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "WARNING:" "(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "NO" "TE-";
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else if (returnCode ^= 0) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "ER" "ROR:(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   __results678.callIntMethod("getSize", rowCount);
MPRINT(STEP_LSAF_GETCHILDREN):   if rowcount = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   message = catx(' ', message, "No observations returned.");
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   do row=0 to rowCount - 1;
MPRINT(STEP_LSAF_GETCHILDREN):   __results678.callStringMethod("getPath", row, path);
MPRINT(STEP_LSAF_GETCHILDREN):   __results678.callStringMethod("getName", row, name);
MPRINT(STEP_LSAF_GETCHILDREN):   __results678.callStringMethod("getDescription", row, description);
MPRINT(STEP_LSAF_GETCHILDREN):   __results678.callStringMethod("getVersion", row, version);
MPRINT(STEP_LSAF_GETCHILDREN):   __results678.callIntMethod("isContainer", row, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   __results678.callIntMethod("isVersioned", row, isVersioned);
MPRINT(STEP_LSAF_GETCHILDREN):   __results678.callIntMethod("isCheckedOut", row, isCheckedOut);
MPRINT(STEP_LSAF_GETCHILDREN):   __results678.callIntMethod("isLocked", row, isLocked);
MPRINT(STEP_LSAF_GETCHILDREN):   __results678.callStringMethod("getSignatureStatus", row, signatureStatus);
MPRINT(STEP_LSAF_GETCHILDREN):   __results678.callLongMethod("getFileSize", row, size);
MPRINT(STEP_LSAF_GETCHILDREN):   __results678.callStringMethod("getFormattedFileSize", row, formattedsize);
MPRINT(STEP_LSAF_GETCHILDREN):   if formattedsize = ' ' then formattedsize = ifc(size<0, " ", cats(size)||" Bytes");
MPRINT(STEP_LSAF_GETCHILDREN):   if size < 0 then size=.;
MPRINT(STEP_LSAF_GETCHILDREN):   __results678.callStringMethod("getItemType", row, itemType);
MPRINT(STEP_LSAF_GETCHILDREN):   __results678.callStringMethod("getLastModified", row, lastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results678.callStringMethod("getLastModifiedSasFormat", row, __lastModifiedTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   __results678.callStringMethod("getCreated", row, created);
MPRINT(STEP_LSAF_GETCHILDREN):   __results678.callStringMethod("getCreatedBy", row, createdBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results678.callStringMethod("getLastModifiedBy", row, lastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results678.callStringMethod("getPropertiesLastModified", row, propertiesLastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results678.callStringMethod("getPropertiesLastModifiedBy", row, propertiesLastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results678.callStringMethod("getPropertiesLastModifiedSasFormat", row, propertiesLastModifiedTempSAS);
MPRINT(STEP_LSAF_GETCHILDREN):   __results678.callStringMethod("getState", row, state);
MPRINT(STEP_LSAF_GETCHILDREN):   __results678.callStringMethod("getCreatedSasFormat", row, __createdTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   dateCreated=input(__createdTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   dateLastModified=input(__lastModifiedTempSas, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   datePropertiesLastModified=input(propertiesLastModifiedTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   pathLevel = countw(path, '/');
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_file_path = ' ' or __lsaf_file_path = path then do;
MPRINT(STEP_LSAF_GETCHILDREN):   dir=put(left(tranwrd(scan(path, -2, "/"), "study", "")), $20.);
MPRINT(STEP_LSAF_GETCHILDREN):  output;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   drop row __lastModifiedTempSAS __lsaf_file_path __createdTempSAS propertiesLastModifiedTempSAS
MPRINT(VARLIST):   itemType isContainer description version isVersioned isCheckedOut isLocked signatureStatus size formattedsize createdBy created dateCreated lastModifiedBy dateLastModified 
propertiesLastModifiedBy propertiesLastModified datePropertiesLastModified state pathLevel __lsaf_path returnCode message rowCount
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   run;
NOTE: The data set WORK.SOURCE_FILES has 60 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.87 seconds
      cpu time            0.42 seconds
      

MPRINT(SETUP_GENERIC_ADAM):   data target_files(where=( scan(name, -1, ".") in ("xlsx" "sas" "job") ) index=(_idx0_=(dir name)));
MPRINT(STEP_LSAF_GETCHILDREN):   *- Determine LSAF Macro API version -*;
MPRINT(STEP_LSAF_GETCHILDREN):   *- Declare the java items -*;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __srv684 ("com/sas/lsaf/macro/content/repository/RepositoryService") ;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __results684 ("com/sas/lsaf/macro/content/repository/SasRepositoryItemsResult");
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj _i_results684("com/sas/lsaf/macro/common/result/Result");
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   do __lsaf_path = "/clinical/argx-117/mmn/argx-117-2003/biostat/staging/generic_adam/documents" 
,"/clinical/argx-117/mmn/argx-117-2003/biostat/staging/generic_adam/programs" ,"/clinical/argx-117/mmn/argx-117-2003/biostat/staging/generic_adam/jobs" 
,"/clinical/argx-117/mmn/argx-117-2003/biostat/staging/generic_adam/macros";
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize numeric variables with default length (8) -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   rowCount=0;
MPRINT(STEP_LSAF_GETCHILDREN):   *- format numeric datetime variables -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize character variables with appropriate lengths -*;
MPRINT(STEP_LSAF_GETCHILDREN):   message = put(' ', $200.);
MPRINT(STEP_LSAF_GETCHILDREN):   path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   name = put(' ', $256.);
MPRINT(STEP_LSAF_GETCHILDREN):   description = put(' ', $512.);
MPRINT(STEP_LSAF_GETCHILDREN):   version = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   signatureStatus = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   createdBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   created = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   state = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   __createdTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   itemType = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   formattedsize = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   __lastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   *- check if container -*;
MPRINT(STEP_LSAF_GETCHILDREN):   isContainer = 1;
MPRINT(STEP_LSAF_GETCHILDREN):   *- if __lsaf_path is not a container, replace with parent folder path -*;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path ^= ' ' then __srv684.callStaticBooleanMethod("isContainer", trim(__lsaf_path), _i_results684, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   if isContainer = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_file_path = __lsaf_path;
MPRINT(STEP_LSAF_GETCHILDREN):   *- keep the original file path specified -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = resolve('%dirname('||__lsaf_path||')');
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path^='' then do;
MPRINT(STEP_LSAF_GETCHILDREN):   *- call the method -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __srv684.callStaticVoidMethod("getChildren", trim(__lsaf_path), cats(1), __results684);
MPRINT(STEP_LSAF_GETCHILDREN):   *- Retrieve the results -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __results684.callIntMethod("getReturnCode", returnCode);
MPRINT(STEP_LSAF_GETCHILDREN):   __results684.callStringMethod("getReturnMessage", message);
MPRINT(STEP_LSAF_GETCHILDREN):   if (returnCode = -1) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "NOTE:" "(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "NO" "TE-";
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else if (returnCode ^= 0) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "ER" "ROR:(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   __results684.callIntMethod("getSize", rowCount);
MPRINT(STEP_LSAF_GETCHILDREN):   if rowcount = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   message = catx(' ', message, "No observations returned.");
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   do row=0 to rowCount - 1;
MPRINT(STEP_LSAF_GETCHILDREN):   __results684.callStringMethod("getPath", row, path);
MPRINT(STEP_LSAF_GETCHILDREN):   __results684.callStringMethod("getName", row, name);
MPRINT(STEP_LSAF_GETCHILDREN):   __results684.callStringMethod("getDescription", row, description);
MPRINT(STEP_LSAF_GETCHILDREN):   __results684.callStringMethod("getVersion", row, version);
MPRINT(STEP_LSAF_GETCHILDREN):   __results684.callIntMethod("isContainer", row, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   __results684.callIntMethod("isVersioned", row, isVersioned);
MPRINT(STEP_LSAF_GETCHILDREN):   __results684.callIntMethod("isCheckedOut", row, isCheckedOut);
MPRINT(STEP_LSAF_GETCHILDREN):   __results684.callIntMethod("isLocked", row, isLocked);
MPRINT(STEP_LSAF_GETCHILDREN):   __results684.callStringMethod("getSignatureStatus", row, signatureStatus);
MPRINT(STEP_LSAF_GETCHILDREN):   __results684.callLongMethod("getFileSize", row, size);
MPRINT(STEP_LSAF_GETCHILDREN):   __results684.callStringMethod("getFormattedFileSize", row, formattedsize);
MPRINT(STEP_LSAF_GETCHILDREN):   if formattedsize = ' ' then formattedsize = ifc(size<0, " ", cats(size)||" Bytes");
MPRINT(STEP_LSAF_GETCHILDREN):   if size < 0 then size=.;
MPRINT(STEP_LSAF_GETCHILDREN):   __results684.callStringMethod("getItemType", row, itemType);
MPRINT(STEP_LSAF_GETCHILDREN):   __results684.callStringMethod("getLastModified", row, lastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results684.callStringMethod("getLastModifiedSasFormat", row, __lastModifiedTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   __results684.callStringMethod("getCreated", row, created);
MPRINT(STEP_LSAF_GETCHILDREN):   __results684.callStringMethod("getCreatedBy", row, createdBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results684.callStringMethod("getLastModifiedBy", row, lastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results684.callStringMethod("getPropertiesLastModified", row, propertiesLastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results684.callStringMethod("getPropertiesLastModifiedBy", row, propertiesLastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results684.callStringMethod("getPropertiesLastModifiedSasFormat", row, propertiesLastModifiedTempSAS);
MPRINT(STEP_LSAF_GETCHILDREN):   __results684.callStringMethod("getState", row, state);
MPRINT(STEP_LSAF_GETCHILDREN):   __results684.callStringMethod("getCreatedSasFormat", row, __createdTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   dateCreated=input(__createdTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   dateLastModified=input(__lastModifiedTempSas, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   datePropertiesLastModified=input(propertiesLastModifiedTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   pathLevel = countw(path, '/');
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_file_path = ' ' or __lsaf_file_path = path then do;
MPRINT(STEP_LSAF_GETCHILDREN):   dir=put(scan(path, -2, "/"), $20.);
MPRINT(STEP_LSAF_GETCHILDREN):   name=prxchange("s/^2003/_studyno_/", 1, trim(name));
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   drop row __lastModifiedTempSAS __lsaf_file_path __createdTempSAS propertiesLastModifiedTempSAS
MPRINT(VARLIST):   itemType isContainer description version isVersioned isCheckedOut isLocked signatureStatus size formattedsize createdBy created dateCreated lastModifiedBy dateLastModified 
propertiesLastModifiedBy propertiesLastModified datePropertiesLastModified state pathLevel __lsaf_path returnCode message rowCount
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   run;
NOTE: The data set WORK.TARGET_FILES has 59 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.96 seconds
      cpu time            0.40 seconds
      

MPRINT(SETUP_GENERIC_ADAM):   data source_target_files;
MPRINT(SETUP_GENERIC_ADAM):   merge source_files(in=a drop=path rename=(lastmodified=sourcelastmodified)) target_files(in=b drop=path rename=(lastmodified=targetlastmodified)) end=last ;
MPRINT(SETUP_GENERIC_ADAM):   by dir name;
MPRINT(SETUP_GENERIC_ADAM):   __prx = prxparse('s/((Mon|Tue|Wed|Thu|Fri|Sat|Sun)(\w*day)? )?(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]* (\d\d?) (\d?\d:\d\d:\d\d) GMT (\d{4})/\5\4\7:\6/i');
MPRINT(SETUP_GENERIC_ADAM):   if a then do;
MPRINT(SETUP_GENERIC_ADAM):   sourcemodte = input(prxchange(__prx, 1, sourcelastmodified), anydtdtm.);
MPRINT(SETUP_GENERIC_ADAM):   targetmodte = input(prxchange(__prx, 1, targetlastmodified), anydtdtm.);
MPRINT(SETUP_GENERIC_ADAM):   format sourcemodte targetmodte E8601DT.;
MPRINT(SETUP_GENERIC_ADAM):   need_update = (sourcemodte > targetmodte);
MPRINT(SETUP_GENERIC_ADAM):   tot_need_update=+need_update;
MPRINT(SETUP_GENERIC_ADAM):   tot_files=+a;
MPRINT(SETUP_GENERIC_ADAM):   output;
MPRINT(SETUP_GENERIC_ADAM):   end;
MPRINT(SETUP_GENERIC_ADAM):   if last then do;
MPRINT(SETUP_GENERIC_ADAM):   put "Target files needing update: " tot_need_update " out of " tot_files;
MPRINT(SETUP_GENERIC_ADAM):   call symputx("tot_need_update", tot_need_update);
MPRINT(SETUP_GENERIC_ADAM):   end;
MPRINT(SETUP_GENERIC_ADAM):   run;
NOTE: Invalid argument to function INPUT at line 0 column 119.
a=1 b=0 last=0 name=job_gnarrv2-orig.job sourcelastmodified=Tue Feb 14 08:25:35 GMT 2023 dir=jobs targetlastmodified=  FIRST.dir=0 LAST.dir=0 FIRST.name=1 LAST.name=1 __prx=1
sourcemodte=2023-02-14T08:25:35 targetmodte=. need_update=1 tot_need_update=1 tot_files=1 _ERROR_=1 _N_=18
Target files needing update: 1  out of 1
NOTE: Mathematical operations could not be performed at the following places. The results of the operations have been set to missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      1 at 0:119   
NOTE: There were 60 observations read from the data set WORK.SOURCE_FILES.
NOTE: There were 59 observations read from the data set WORK.TARGET_FILES.
NOTE: The data set WORK.SOURCE_TARGET_FILES has 60 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

TOT_NEED_UPDATE=1
Notice: Setting up generic_adam reporting event in /clinical/argx-117/mmn/argx-117-2003/biostat/staging/generic_adam ...
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/mmn/argx-117-2003/biostat/staging/data_received/adam", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/mmn/argx-117-2003/biostat/staging/data_received/adam" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/mmn/argx-117-2003/biostat/staging/data_received/adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/mmn/argx-117-2003/biostat/staging/data_received/adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item does not exist: /clinical/argx-117/mmn/argx-117-2003/biostat/staging/data_received/adam
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 0
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

MPRINT(SETUP_GENERIC_ADAM):  ;
Notice:(SETUP_GENERIC_ADAM): study_adam_path not found, set to null: /clinical/argx-117/mmn/argx-117-2003/biostat/staging/data_received/adam
NUM_JOBS_SPAWNED=13
MACROAPIVER=2.6
MPRINT(SUBMIT_JOB):   proc sql noprint;
MPRINT(SUBMIT_JOB):   drop table work.job_Parameters;
NOTE: Table WORK.JOB_PARAMETERS has been dropped.
MPRINT(SUBMIT_JOB):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

DEBUG:(GEN_JOB_ENV): PRX=175
DEBUG:(GEN_JOB_ENV): prxmatch(175, /general/biostat/jobs/gadam_ongoing_studies/dev/jobs/job_gadam_studysetup.job) = 1
DEBUG:(GEN_JOB_ENV): (0) REFPATH=
DEBUG:(GEN_JOB_ENV): (0) REPEVPATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (0) RELREPEVPATH=/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (0) _SASFILEPATH_=/general/biostat/jobs/gadam_ongoing_studies/prod/programs/lsaf_get_last_sdtm.sas
DEBUG:(GEN_JOB_ENV): (0) PROGPATH=/general/biostat/jobs/gadam_ongoing_studies/prod/programs/
DEBUG:(GEN_JOB_ENV): (0) PATH=/general/biostat/jobs/gadam_ongoing_studies/dev/jobs/job_gadam_studysetup.job
Setting refpath = &repevpath
DEBUG:(GEN_JOB_ENV): (1) REFPATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (2) REFENV=prod
DEBUG:(GEN_JOB_ENV): (3) REFENV=prod
DEBUG:(F_LSAF_EXISTS) - 2023-02-15T02:13:19 - Iteration: 1: slept = 0, exists = 1
DEBUG:(F_LSAF_EXISTS) - 2023-02-15T02:13:19 - Iteration: 1: slept = 0, exists = 1
DEBUG:(F_LSAF_EXISTS) - 2023-02-15T02:13:19 - Iteration: 1: slept = 0, exists = 1
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(SUBMIT_JOB):  ;
Notice:(SUBMIT_JOB): LSAF Job Path exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job.
MPRINT(SUBMIT_JOB):   proc format;
MPRINT(SUBMIT_JOB):   value $jobabbr "job_gadam_ongoing_studies.job"= "gos" "job_studies_status.job"= "ss" "job_gadam_sdtm_key_core_vars.job"= "gskcv" "job_unzip_sdtm_sources.job"= "uss" 
"job_zip_extract_files.job"= "zef" "job_lsaf_get_last_sdtm.job"= "lgls" "setup_reporting_event_folder.job"= "sref" "job_gadam_refresh_sdtm_last.job"= "grsl" "job_gadam_update_refresh_info.job"= 
"guri" "convert_definetosas.job"= "cdts" "job_gadam_studysetup.job"= "gss" "job_gadam_rebuild_adam.job"= "gra" "job_adAAA" - "job_adzzz"= "adx" "job_qcstudyadams.job"= "qcsa" 
"job_qc_gadam_vs_study.job"= "qcgvs" "job_qc_gadam_vs_study-overview.job"= "qcgvso" "job_check_and_load.job"= "cal" "job_tAAA" - "job_tzzz"= "txx" "job_gadam_qc_overviews.job"= "gqco" 
"job_make_sdtm_pool_jobs.job"= "mspj" "job_lsaf_pool_last_sdtm.job"= "lpls" "sdtm_pool-AAA" - "sdtm_pool-zzz"= "pci" "job_gadam_refresh_sdtm_overview.job"= "grso" "getdata.job"= "gd" OTHER = "***" ;
NOTE: Format $JOBABBR is already on the library WORK.FORMATS.
NOTE: Format $JOBABBR has been output.
MPRINT(SUBMIT_JOB):   run;
NOTE: PROCEDURE FORMAT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SUBMIT_JOB):   quit;
job_instance=>Ngos117Prod_4_x0_13<
MPRINT(LSAF_GETJOBPARAMETERS):  ;
MPRINT(LSAF_GETJOBPARAMETERS):   data work.job_Parameters (label="Created by LSAF_GETJOBPARAMETERS" KEEP=jobPath jobVersion name label type defaultValue fileVersion includeSubFolders );
MPRINT(LSAF_GETJOBPARAMETERS):   attrib returnCode length=8 message length=$200 logMsgPrefix length=$70 logMsgPrimary length=$70 logMsg length=$300 rowCount length=8 jobPath length=$2048 label="Job 
Path" jobVersion length=$32 label="Job Version" name length=$256 label="Parameter Name" label length=$256 label="Parameter Label" type length=$32 label="Parameter Type" defaultValue length=$2048 
label="Parameter Default Value" fileVersion length=$32 label="File Version if File Type" includeSubFolders length=8 label="Include Container SubFolders" includesSubFolders length=$5 label="FOR 
INTERNAL PROCESSING ONLY.  WILL BE DROPPED." ;
MPRINT(LSAF_GETJOBPARAMETERS):   rowCount=0;
MPRINT(LSAF_GETJOBPARAMETERS):   declare javaobj srv("com/sas/lsaf/macro/execution/job/JobService") ;
MPRINT(LSAF_GETJOBPARAMETERS):   declare javaobj results("com/sas/lsaf/macro/execution/job/SasJobParametersResult");
MPRINT(LSAF_GETJOBPARAMETERS):   srv.callStaticVoidMethod("getRepositoryJobParameters", "/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job", "", results) ;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_GETJOBPARAMETERS):   if (returnCode ne 0) then do;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_GETJOBPARAMETERS):   if "" NE "" then logMsg=" Cannot retrieve parameters for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job, version " ;
MPRINT(LSAF_GETJOBPARAMETERS):   else logMsg=" Cannot retrieve parameters for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   else do;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsg=" Parameters were returned for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getJobPath", jobPath);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getJobVersion", jobVersion);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callIntMethod("getSize", rowCount);
MPRINT(LSAF_GETJOBPARAMETERS):   do row=0 to rowCount - 1;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getName", row, name);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getLabel", row, label);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getType", row, type);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getDefaultValue", row, defaultValue);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getFileVersion", row, fileVersion);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getContainerIncludeSubfolders", row, includesSubFolders);
MPRINT(LSAF_GETJOBPARAMETERS):   includeSubFolders=input(includesSubFolders,best.);
MPRINT(LSAF_GETJOBPARAMETERS):   output;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   put;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " " "lsaf_getjobparameters";
MPRINT(LSAF_GETJOBPARAMETERS):   if (rowCount=0) then put logMsgPrefix " No parameters were found.";
MPRINT(LSAF_GETJOBPARAMETERS):   else put logMsgPrefix " " rowCount " records written to data set work.job_Parameters";
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(LSAF_GETJOBPARAMETERS):   put;
MPRINT(LSAF_GETJOBPARAMETERS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_GETJOBPARAMETERS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_GETJOBPARAMETERS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  Parameters were returned for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_getjobparameters
NOTE: SAS Life Science Analytics Framework Macro: *  8  records written to data set work.job_Parameters
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: The data set WORK.JOB_PARAMETERS has 8 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.02 seconds
      

MPRINT(SUBMIT_JOB):  ;
NOTE: The dataset WORK.JOB_PARAMETERS has 8 observations and 8 variables.
MPRINT(SUBMIT_JOB):   ;
MPRINT(SUBMIT_JOB):   *- dataset to specify job parameters (from macro parameters values) -*;
MPRINT(SUBMIT_JOB):   data lsaf_job_params(index=(name));
MPRINT(SUBMIT_JOB):   set work.job_Parameters(rename=(defaultValue = value));
MPRINT(SUBMIT_JOB):   if upcase(name) = "_PARENTJOB_WS_" then do;
MPRINT(SUBMIT_JOB):   if symexist("_SASWS_") and type = "CHARACTER" then value = symget("_SASWS_");
MPRINT(SUBMIT_JOB):   else value = " ";
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   else if upcase(name) = "_PARENTJOB_WRK_" then do;
MPRINT(SUBMIT_JOB):   value = pathname("WORK", "L");
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   else if symexist(name) then do;
MPRINT(SUBMIT_JOB):   if symget(name) ^= ' ' then value = symget(name);
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   new_value = translate(value, ' ', ',;()"''&%');
MPRINT(SUBMIT_JOB):   if new_value ne value then put "NOTE:(SUBMIT_JOB): Special characters may be removed from parameter value:" / @2 "parameter: " name /@2 "old value: " value /@2 "new value: " 
new_value;
MPRINT(SUBMIT_JOB):   if _n_=1 then put "Not" "ice:(SUBMIT_JOB): Updated Job parameters:";
MPRINT(SUBMIT_JOB):   if type = "FOLDER" then put " - " name @+(-1) "=" value "[" type= @+(-1) ", " includeSubFolders= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   else if TYPE = "FILE" then put " - " name @+(-1) "=" value "[" type= @+(-1) ", " fileversion= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   else put " - " name @+(-1) "=" value "[" type= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   run;
Notice:(SUBMIT_JOB): Updated Job parameters:
 - gadam_path=/clinical/argx-117/mmn/argx-117-2003/biostat/staging/generic_adam [type=FOLDER, includeSubFolders=0]
 - sdtm_last_path=/clinical/argx-117/mmn/argx-117-2003/biostat/staging/data_received/sdtm_last [type=FOLDER, includeSubFolders=0]
 - study_adam_path=  [type=FOLDER, includeSubFolders=0]
 - gadam_files_source=/general/biostat/gadam [type=FOLDER, includeSubFolders=1]
 - job_instance=Ngos117Prod_4_x0_13 [type=CHARACTER]
 - _PARENTJOB_WS_=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15 [type=CHARACTER]
 - _PARENTJOB_WRK_=/saswork/sas_tmp/SAS_work4CFB0019563E_xar08auv.vsp.sas.com/SAS_work5B910019563E_xar08auv.vsp.sas.com [type=CHARACTER]
 - USE_SAS_WORKSPACE_MACROS=  [type=CHARACTER]
NOTE: There were 8 observations read from the data set WORK.JOB_PARAMETERS.
NOTE: The data set WORK.LSAF_JOB_PARAMS has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

N_PARAMS=8
MPRINT(SUBMIT_JOB):   data lsaf_job_params(index=(name));
MPRINT(SUBMIT_JOB):   set lsaf_job_params;
MPRINT(SUBMIT_JOB):   by name;
MPRINT(SUBMIT_JOB):   if (not first.name) or (not last.name) then do;
MPRINT(SUBMIT_JOB):   if last.name then action = "(kept)   ";
MPRINT(SUBMIT_JOB):   else action = "(dropped)";
MPRINT(SUBMIT_JOB):   drop action;
MPRINT(SUBMIT_JOB):   put "Not" "ice:(SUBMIT_JOB): duplicate parameter " name " = " value @+(3) action;
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   if last.name;
MPRINT(SUBMIT_JOB):   run;
NOTE: There were 8 observations read from the data set WORK.LSAF_JOB_PARAMS.
NOTE: The data set WORK.LSAF_JOB_PARAMS has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SUBMIT_JOB):   data _null_;
MPRINT(SUBMIT_JOB):   file print;
MPRINT(SUBMIT_JOB):   set lsaf_job_params(where=(prxmatch('/^(FOLDER|FILE)$/', trim(type))) in=a) lsaf_job_params(where=(prxmatch('/^(FOLDER|FILE)$/', trim(type))=0 and value ^= ' ')) end=last;
MPRINT(SUBMIT_JOB):   if _n_=1 then putlog "=== 2023-02-15T02:13:20 - Submit job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job (with parameters: " @;
MPRINT(SUBMIT_JOB):   _n_a+a;
MPRINT(SUBMIT_JOB):   if _n_-1 = _n_a then do;
MPRINT(SUBMIT_JOB):   putlog / @8 @;
MPRINT(SUBMIT_JOB):   put / @8 @;
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   if a then putlog / @8 name @+(-1) "=" value ' (' type= includeSubFolders= @+(-1) ')   ' @;
MPRINT(SUBMIT_JOB):   else putlog name @+(-1) "=" value "  " @ ;
MPRINT(SUBMIT_JOB):   if last then putlog @+8 ") ===";
MPRINT(SUBMIT_JOB):   if _n_=1 then put "=== 2023-02-15T02:13:20 - Submit job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job (with parameters: " @;
MPRINT(SUBMIT_JOB):   if a then put / @8 name @+(-1) "=" value ' (' type= includeSubFolders= @+(-1) ')   ' @;
MPRINT(SUBMIT_JOB):   else put name @+(-1) "=" value "  " @ ;
MPRINT(SUBMIT_JOB):   if last then put @+8 ") ===";
MPRINT(SUBMIT_JOB):   run;
=== 2023-02-15T02:13:20 - Submit job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job (with parameters: 
       gadam_files_source=/general/biostat/gadam  (type=FOLDER includeSubFolders=1)   
       gadam_path=/clinical/argx-117/mmn/argx-117-2003/biostat/staging/generic_adam  (type=FOLDER includeSubFolders=0)   
       sdtm_last_path=/clinical/argx-117/mmn/argx-117-2003/biostat/staging/data_received/sdtm_last  (type=FOLDER includeSubFolders=0)   
       study_adam_path=   (type=FOLDER includeSubFolders=0)   
       _PARENTJOB_WRK_=/saswork/sas_tmp/SAS_work4CFB0019563E_xar08auv.vsp.sas.com/SAS_work5B910019563E_xar08auv.vsp.sas.com   _PARENTJOB_WS_=
/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15   job_instance=Ngos117Prod_4_x0_13           ) ===
NOTE: 7 lines were written to file PRINT.
NOTE: There were 4 observations read from the data set WORK.LSAF_JOB_PARAMS.
      WHERE PRXMATCH('/^(FOLDER|FILE)$/', TRIM(type));
NOTE: There were 3 observations read from the data set WORK.LSAF_JOB_PARAMS.
      WHERE (PRXMATCH('/^(FOLDER|FILE)$/', TRIM(type))=0) and (value not = ' ');
NOTE: The DATA step printed page 25.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(LSAF_SUBMITJOB):  ;
NOTE: lsaf_submitjob: Validating dataset lsaf_job_params
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   options nonotes;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   proc datasets library=work nolist;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   delete __SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   quit;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   options nonotes;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   data _null_;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   length message $45 libName $8 dsName $300;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   providedDatasetName=kstrip("lsaf_job_params");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsName="INVALID";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsNameIsValid=0;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dotCount=countc(providedDatasetName,".");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dotPosition=kindexc(providedDatasetName,".");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   *put dotPosition=;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (dotPosition=1 or dotPosition=length(providedDatasetName)) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message=" Missing either LIBNAME or data set.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   select (dotCount);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   when (0) dsName=providedDatasetName;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   when (1) do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (dotPosition le 9) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   libName = (ksubstr(providedDatasetName, 1, dotPosition-1));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   *put libName=;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsName = (ksubstr(providedDatasetName, dotPosition+1));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   else do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Libname longer than 8 characters.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   otherwise do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Invalid data set name structure.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   firstchar=ksubstr(kleft(dsName), 1, 1);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (anydigit(firstchar)) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Data set name must start with a character.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (length(dsName) > 32) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Data set name longer than 32 characters.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsNameIsValid=1;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   SETVARS: call symput("_lsafvaliddsn_", strip(put(dsNameIsValid, best.)));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   call symput("dsnMsg", message);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   call symput("specifiedLib", strip(libName));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   run;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   options NONOTES;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   * CHECK EXISTS: Also getting errors for data set name.;
MPRINT(LSAF_VALIDATE_SASDATASET):  ;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):  ;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   proc sort data=lsaf_job_params out=__SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   by name;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   data _null_;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   set __SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   by name;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   if (first.name AND NOT(last.name)) then do;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   call symput("_lsafMsg_", "Input data set has duplicate values for parameter name " || name || ".");
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   STOP;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   end;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   call symput("_lsafRC_", "0");
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   option notes;
MPRINT(LSAF_SUBMITJOB):  ;
MPRINT(LSAF_SUBMITJOB):   option notes;
MPRINT(LSAF_SUBMITJOB):   data _null_;
MPRINT(LSAF_SUBMITJOB):   attrib returnCode length=8 message length=$200 jobSubmissionId length=$525 logMsgPrefix length=$70 logMsgPrimary length=$70 logMsg length=$300 ;
MPRINT(LSAF_SUBMITJOB):   set lsaf_job_params end=eof;
MPRINT(LSAF_SUBMITJOB):   if (_n_ = 1) then do;
MPRINT(LSAF_SUBMITJOB):   declare javaobj params("com/sas/lsaf/macro/execution/job/SasParameterValues");
MPRINT(LSAF_SUBMITJOB):   declare javaobj srv("com/sas/lsaf/macro/execution/jobsubmission/JobSubmissionService");
MPRINT(LSAF_SUBMITJOB):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   params.callVoidMethod("addValue", kstrip(name), kstrip(value), kstrip(type), kstrip(fileVersion), includeSubFolders);
MPRINT(LSAF_SUBMITJOB):   if (eof);
MPRINT(LSAF_SUBMITJOB):   declare javaobj job("com/sas/lsaf/macro/execution/jobsubmission/SasSubmittableJob", "/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job", "", 
params);
MPRINT(LSAF_SUBMITJOB):   srv.callStaticStringMethod("submitRepositoryJob", job, results, jobSubmissionId);
MPRINT(LSAF_SUBMITJOB):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_SUBMITJOB):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_SUBMITJOB):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_SUBMITJOB):   if (returnCode ne 0) then do;
MPRINT(LSAF_SUBMITJOB):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_SUBMITJOB):   logMsg=" Cannot submit job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job";
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   else do;
MPRINT(LSAF_SUBMITJOB):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_SUBMITJOB):   logMsg=" Submitted job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job";
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   put;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " " "lsaf_submitjob";
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(LSAF_SUBMITJOB):   if "lsaf_job_params" = "" then put logMsgPrefix "No job parameters were supplied.";
MPRINT(LSAF_SUBMITJOB):   else put logMsgPrefix "sas_dsname = lsaf_job_params";
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix "_lsafJobSubmissionId_= " jobSubmissionId;
MPRINT(LSAF_SUBMITJOB):   put;
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafJobSubmissionId_", strip(jobSubmissionId));
MPRINT(LSAF_SUBMITJOB):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  Submitted job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_submitjob
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: * sas_dsname = lsaf_job_params
NOTE: SAS Life Science Analytics Framework Macro: * _lsafJobSubmissionId_= 32f81a23-74db-4f7d-b699-75f2061e5d1f
NOTE: There were 8 observations read from the data set WORK.LSAF_JOB_PARAMS.
NOTE: DATA statement used (Total process time):
      real time           1.34 seconds
      cpu time            0.01 seconds
      

MPRINT(LSAF_SUBMITJOB):   options NONOTES;
MPRINT(SUBMIT_JOB):  ;
MPRINT(SUBMIT_JOB):   *- Job submission succeeded -*;
MPRINT(SUBMIT_JOB):   option nomprint nonotes
Calling %lsaf_getitemid(lsaf_path=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job) ...
_LSAFMSG_=Success.  _LSAFRC_=0  _LSAFITEMID_=090a95d3-6059-474f-a1bd-61c6768ba993
Calling %step_lsaf_getjobsubmissioninfos(job_subm_id=32f81a23-74db-4f7d-b699-75f2061e5d1f) ...
Notice: SYSDATASTEPPHASE=EXECUTION IN_DATA_STEP=N
Ignoring record: submissionId=30678109-1661-4a87-858f-1bc1b0d581fa jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job jobVersion=0.1
jobId=abcfa448-6829-4513-8bef-3d8418207d45
Ignoring record: submissionId=c4fb4991-9137-4374-8d55-32ed9002f3d8 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_ongoing_studies.job jobVersion=0.1
jobId=c762f385-9376-49c8-8cec-d19326e7e18e
Ignoring record: submissionId=f00d2b52-d9f1-4ef1-8922-181d934626e0 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_ongoing_studies.job jobVersion=0.1
jobId=c762f385-9376-49c8-8cec-d19326e7e18e
Ignoring record: submissionId=05e0665e-78cd-4a3c-9aa3-9ddb53288cad jobPath=/clinical/argx-113/hv/argx-113-1702/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job jobVersion=52.0
jobId=bd48e139-ba53-466d-a613-fa25b86270cc
Ignoring record: submissionId=feed1f0f-2d9a-42b9-8060-8fddd1e47337 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job jobVersion=0.1
jobId=abcfa448-6829-4513-8bef-3d8418207d45
Ignoring record: submissionId=9038420c-8b24-4f39-a7a9-aa0ac7852c4b jobPath=/general/biostat/jobs/dashboard/dev/jobs/pp.job jobVersion=1.2 jobId=030fd944-90dd-464a-8101-6d0ab92dae81
Ignoring record: submissionId=0e426e98-1f39-407e-a152-2a4b08808841 jobPath=/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job jobVersion= 
jobId=02b06e4d-7777-4a59-b2f9-2fc165603216
Notice: _LSAFJOBSUBMISSIONID_=32f81a23-74db-4f7d-b699-75f2061e5d1f SESSIONID=4603b233-42f5-4981-8e7f-20acb06cfeec JOB=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job 
JOBID=090a95d3-6059-474f-a1bd-61c6768ba993
(SUBMIT_JOB): 2023-02-15T02:13:21 - Submitted REPOSITORY Job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job          with Submission ID: 
32f81a23-74db-4f7d-b699-75f2061e5d1f, Status: STARTED
(SUBMIT_JOB): 02:13:21.41 Elapsed: 00:00:02.20 Job Submission Status: STARTED
(SUBMIT_JOB): 02:13:23.96 Elapsed: 00:00:04.74 Job Submission Status: STARTED
(SUBMIT_JOB): 02:13:26.49 Elapsed: 00:00:07.27 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:13:29.02 Elapsed: 00:00:09.80 Job Submission Status: POST_EXECUTION_PUBLISHING
(SUBMIT_JOB): 02:13:31.55 Elapsed: 00:00:12.33 Job Submission Status: COMPLETED_SUCCESSFUL
(SUBMIT_JOB): 2023-02-15T02:13:34 - Submitted REPOSITORY job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job has completed with status: COMPLETED_SUCCESSFUL
MPRINT(SUBMIT_JOB):  ;
job_gadam_studysetup.job: get job status: 0: Success.:       Elapsed: 00:00:14.83       REPOSITORY Job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job with Submission 
ID: 32f81a23-74db-4f7d-b699-75f2061e5d1f, Status: COMPLETED_SUCCESSFUL
MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   option NOMPRINT;
%rebuild_generic_adam(gadam_study_path=/clinical/argx-117/mmn/argx-117-2003/biostat/staging/generic_adam, sdtm_last_path=/clinical/argx-117/mmn/argx-117-2003/biostat/staging/data_received/sdtm_last)
MPRINT(REBUILD_GENERIC_ADAM):   notes;
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/mmn/argx-117-2003/biostat/staging/generic_adam", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/mmn/argx-117-2003/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/mmn/argx-117-2003/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/mmn/argx-117-2003/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/mmn/argx-117-2003/biostat/staging/generic_adam
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(REBUILD_GENERIC_ADAM):  ;
Notice: Rebuilding adam datasets in generic_adam reporting event in /clinical/argx-117/mmn/argx-117-2003/biostat/staging/generic_adam ...
NUM_JOBS_SPAWNED=14
MACROAPIVER=2.6
MPRINT(SUBMIT_JOB):   proc sql noprint;
MPRINT(SUBMIT_JOB):   drop table work.job_Parameters;
NOTE: Table WORK.JOB_PARAMETERS has been dropped.
MPRINT(SUBMIT_JOB):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

DEBUG:(GEN_JOB_ENV): PRX=182
DEBUG:(GEN_JOB_ENV): prxmatch(182, /general/biostat/jobs/gadam_rebuild_adam/dev/jobs/job_gadam_rebuild_adam.job) = 1
DEBUG:(GEN_JOB_ENV): (0) REFPATH=
DEBUG:(GEN_JOB_ENV): (0) REPEVPATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (0) RELREPEVPATH=/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (0) _SASFILEPATH_=/general/biostat/jobs/gadam_ongoing_studies/prod/programs/lsaf_get_last_sdtm.sas
DEBUG:(GEN_JOB_ENV): (0) PROGPATH=/general/biostat/jobs/gadam_ongoing_studies/prod/programs/
DEBUG:(GEN_JOB_ENV): (0) PATH=/general/biostat/jobs/gadam_rebuild_adam/dev/jobs/job_gadam_rebuild_adam.job
Setting refpath = &repevpath
DEBUG:(GEN_JOB_ENV): (1) REFPATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (2) REFENV=prod
DEBUG:(GEN_JOB_ENV): (3) REFENV=prod
DEBUG:(F_LSAF_EXISTS) - 2023-02-15T02:13:34 - Iteration: 1: slept = 0, exists = 1
DEBUG:(F_LSAF_EXISTS) - 2023-02-15T02:13:34 - Iteration: 1: slept = 0, exists = 1
DEBUG:(F_LSAF_EXISTS) - 2023-02-15T02:13:34 - Iteration: 1: slept = 0, exists = 1
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(SUBMIT_JOB):  ;
Notice:(SUBMIT_JOB): LSAF Job Path exists: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job.
MPRINT(SUBMIT_JOB):   proc format;
MPRINT(SUBMIT_JOB):   value $jobabbr "job_gadam_ongoing_studies.job"= "gos" "job_studies_status.job"= "ss" "job_gadam_sdtm_key_core_vars.job"= "gskcv" "job_unzip_sdtm_sources.job"= "uss" 
"job_zip_extract_files.job"= "zef" "job_lsaf_get_last_sdtm.job"= "lgls" "setup_reporting_event_folder.job"= "sref" "job_gadam_refresh_sdtm_last.job"= "grsl" "job_gadam_update_refresh_info.job"= 
"guri" "convert_definetosas.job"= "cdts" "job_gadam_studysetup.job"= "gss" "job_gadam_rebuild_adam.job"= "gra" "job_adAAA" - "job_adzzz"= "adx" "job_qcstudyadams.job"= "qcsa" 
"job_qc_gadam_vs_study.job"= "qcgvs" "job_qc_gadam_vs_study-overview.job"= "qcgvso" "job_check_and_load.job"= "cal" "job_tAAA" - "job_tzzz"= "txx" "job_gadam_qc_overviews.job"= "gqco" 
"job_make_sdtm_pool_jobs.job"= "mspj" "job_lsaf_pool_last_sdtm.job"= "lpls" "sdtm_pool-AAA" - "sdtm_pool-zzz"= "pci" "job_gadam_refresh_sdtm_overview.job"= "grso" "getdata.job"= "gd" OTHER = "***" ;
NOTE: Format $JOBABBR is already on the library WORK.FORMATS.
NOTE: Format $JOBABBR has been output.
MPRINT(SUBMIT_JOB):   run;
NOTE: PROCEDURE FORMAT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SUBMIT_JOB):   quit;
job_instance=>Ngos117Prod_4_x0_14<
MPRINT(LSAF_GETJOBPARAMETERS):  ;
MPRINT(LSAF_GETJOBPARAMETERS):   data work.job_Parameters (label="Created by LSAF_GETJOBPARAMETERS" KEEP=jobPath jobVersion name label type defaultValue fileVersion includeSubFolders );
MPRINT(LSAF_GETJOBPARAMETERS):   attrib returnCode length=8 message length=$200 logMsgPrefix length=$70 logMsgPrimary length=$70 logMsg length=$300 rowCount length=8 jobPath length=$2048 label="Job 
Path" jobVersion length=$32 label="Job Version" name length=$256 label="Parameter Name" label length=$256 label="Parameter Label" type length=$32 label="Parameter Type" defaultValue length=$2048 
label="Parameter Default Value" fileVersion length=$32 label="File Version if File Type" includeSubFolders length=8 label="Include Container SubFolders" includesSubFolders length=$5 label="FOR 
INTERNAL PROCESSING ONLY.  WILL BE DROPPED." ;
MPRINT(LSAF_GETJOBPARAMETERS):   rowCount=0;
MPRINT(LSAF_GETJOBPARAMETERS):   declare javaobj srv("com/sas/lsaf/macro/execution/job/JobService") ;
MPRINT(LSAF_GETJOBPARAMETERS):   declare javaobj results("com/sas/lsaf/macro/execution/job/SasJobParametersResult");
MPRINT(LSAF_GETJOBPARAMETERS):   srv.callStaticVoidMethod("getRepositoryJobParameters", "/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job", "", results) ;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_GETJOBPARAMETERS):   if (returnCode ne 0) then do;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_GETJOBPARAMETERS):   if "" NE "" then logMsg=" Cannot retrieve parameters for job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job, version " ;
MPRINT(LSAF_GETJOBPARAMETERS):   else logMsg=" Cannot retrieve parameters for job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job" ;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   else do;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsg=" Parameters were returned for job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job" ;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getJobPath", jobPath);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getJobVersion", jobVersion);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callIntMethod("getSize", rowCount);
MPRINT(LSAF_GETJOBPARAMETERS):   do row=0 to rowCount - 1;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getName", row, name);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getLabel", row, label);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getType", row, type);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getDefaultValue", row, defaultValue);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getFileVersion", row, fileVersion);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getContainerIncludeSubfolders", row, includesSubFolders);
MPRINT(LSAF_GETJOBPARAMETERS):   includeSubFolders=input(includesSubFolders,best.);
MPRINT(LSAF_GETJOBPARAMETERS):   output;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   put;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " " "lsaf_getjobparameters";
MPRINT(LSAF_GETJOBPARAMETERS):   if (rowCount=0) then put logMsgPrefix " No parameters were found.";
MPRINT(LSAF_GETJOBPARAMETERS):   else put logMsgPrefix " " rowCount " records written to data set work.job_Parameters";
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(LSAF_GETJOBPARAMETERS):   put;
MPRINT(LSAF_GETJOBPARAMETERS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_GETJOBPARAMETERS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_GETJOBPARAMETERS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  Parameters were returned for job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_getjobparameters
NOTE: SAS Life Science Analytics Framework Macro: *  12  records written to data set work.job_Parameters
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: The data set WORK.JOB_PARAMETERS has 12 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
      

MPRINT(SUBMIT_JOB):  ;
NOTE: The dataset WORK.JOB_PARAMETERS has 12 observations and 8 variables.
MPRINT(SUBMIT_JOB):   ;
MPRINT(SUBMIT_JOB):   *- dataset to specify job parameters (from macro parameters values) -*;
MPRINT(SUBMIT_JOB):   data lsaf_job_params(index=(name));
MPRINT(SUBMIT_JOB):   set work.job_Parameters(rename=(defaultValue = value));
MPRINT(SUBMIT_JOB):   if upcase(name) = "_PARENTJOB_WS_" then do;
MPRINT(SUBMIT_JOB):   if symexist("_SASWS_") and type = "CHARACTER" then value = symget("_SASWS_");
MPRINT(SUBMIT_JOB):   else value = " ";
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   else if upcase(name) = "_PARENTJOB_WRK_" then do;
MPRINT(SUBMIT_JOB):   value = pathname("WORK", "L");
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   else if symexist(name) then do;
MPRINT(SUBMIT_JOB):   if symget(name) ^= ' ' then value = symget(name);
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   new_value = translate(value, ' ', ',;()"''&%');
MPRINT(SUBMIT_JOB):   if new_value ne value then put "NOTE:(SUBMIT_JOB): Special characters may be removed from parameter value:" / @2 "parameter: " name /@2 "old value: " value /@2 "new value: " 
new_value;
MPRINT(SUBMIT_JOB):   if _n_=1 then put "Not" "ice:(SUBMIT_JOB): Updated Job parameters:";
MPRINT(SUBMIT_JOB):   if type = "FOLDER" then put " - " name @+(-1) "=" value "[" type= @+(-1) ", " includeSubFolders= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   else if TYPE = "FILE" then put " - " name @+(-1) "=" value "[" type= @+(-1) ", " fileversion= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   else put " - " name @+(-1) "=" value "[" type= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   run;
Notice:(SUBMIT_JOB): Updated Job parameters:
 - gadam_study_path=/clinical/argx-117/mmn/argx-117-2003/biostat/staging/generic_adam [type=FOLDER, includeSubFolders=0]
 - sdtm_last_path=/clinical/argx-117/mmn/argx-117-2003/biostat/staging/data_received/sdtm_last [type=FOLDER, includeSubFolders=0]
 - qc_gadam_vs_study=Y [type=CHARACTER]
 - check_and_load_gadam=Y [type=CHARACTER]
 - run_gadam_tables=Y [type=CHARACTER]
 - wait=Y [type=CHARACTER]
 - force=N [type=CHARACTER]
 - mock=N [type=CHARACTER]
 - job_instance=Ngos117Prod_4_x0_14 [type=CHARACTER]
 - _PARENTJOB_WS_=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15 [type=CHARACTER]
 - _PARENTJOB_WRK_=/saswork/sas_tmp/SAS_work4CFB0019563E_xar08auv.vsp.sas.com/SAS_work5B910019563E_xar08auv.vsp.sas.com [type=CHARACTER]
 - USE_SAS_WORKSPACE_MACROS=  [type=CHARACTER]
NOTE: There were 12 observations read from the data set WORK.JOB_PARAMETERS.
NOTE: The data set WORK.LSAF_JOB_PARAMS has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

N_PARAMS=12
MPRINT(SUBMIT_JOB):   data lsaf_job_params(index=(name));
MPRINT(SUBMIT_JOB):   set lsaf_job_params;
MPRINT(SUBMIT_JOB):   by name;
MPRINT(SUBMIT_JOB):   if (not first.name) or (not last.name) then do;
MPRINT(SUBMIT_JOB):   if last.name then action = "(kept)   ";
MPRINT(SUBMIT_JOB):   else action = "(dropped)";
MPRINT(SUBMIT_JOB):   drop action;
MPRINT(SUBMIT_JOB):   put "Not" "ice:(SUBMIT_JOB): duplicate parameter " name " = " value @+(3) action;
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   if last.name;
MPRINT(SUBMIT_JOB):   run;
NOTE: There were 12 observations read from the data set WORK.LSAF_JOB_PARAMS.
NOTE: The data set WORK.LSAF_JOB_PARAMS has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SUBMIT_JOB):   data _null_;
MPRINT(SUBMIT_JOB):   file print;
MPRINT(SUBMIT_JOB):   set lsaf_job_params(where=(prxmatch('/^(FOLDER|FILE)$/', trim(type))) in=a) lsaf_job_params(where=(prxmatch('/^(FOLDER|FILE)$/', trim(type))=0 and value ^= ' ')) end=last;
MPRINT(SUBMIT_JOB):   if _n_=1 then putlog "=== 2023-02-15T02:13:34 - Submit job: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job (with parameters: " @;
MPRINT(SUBMIT_JOB):   _n_a+a;
MPRINT(SUBMIT_JOB):   if _n_-1 = _n_a then do;
MPRINT(SUBMIT_JOB):   putlog / @8 @;
MPRINT(SUBMIT_JOB):   put / @8 @;
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   if a then putlog / @8 name @+(-1) "=" value ' (' type= includeSubFolders= @+(-1) ')   ' @;
MPRINT(SUBMIT_JOB):   else putlog name @+(-1) "=" value "  " @ ;
MPRINT(SUBMIT_JOB):   if last then putlog @+8 ") ===";
MPRINT(SUBMIT_JOB):   if _n_=1 then put "=== 2023-02-15T02:13:34 - Submit job: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job (with parameters: " @;
MPRINT(SUBMIT_JOB):   if a then put / @8 name @+(-1) "=" value ' (' type= includeSubFolders= @+(-1) ')   ' @;
MPRINT(SUBMIT_JOB):   else put name @+(-1) "=" value "  " @ ;
MPRINT(SUBMIT_JOB):   if last then put @+8 ") ===";
MPRINT(SUBMIT_JOB):   run;
=== 2023-02-15T02:13:34 - Submit job: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job (with parameters: 
       gadam_study_path=/clinical/argx-117/mmn/argx-117-2003/biostat/staging/generic_adam  (type=FOLDER includeSubFolders=0)   
       sdtm_last_path=/clinical/argx-117/mmn/argx-117-2003/biostat/staging/data_received/sdtm_last  (type=FOLDER includeSubFolders=0)   
       _PARENTJOB_WRK_=/saswork/sas_tmp/SAS_work4CFB0019563E_xar08auv.vsp.sas.com/SAS_work5B910019563E_xar08auv.vsp.sas.com   _PARENTJOB_WS_=
/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15   check_and_load_gadam=Y   force=N   job_instance=Ngos117Prod_4_x0_14   mock=N   qc_gadam_vs_study=
Y   run_gadam_tables=Y   wait=Y           ) ===
NOTE: 6 lines were written to file PRINT.
NOTE: There were 2 observations read from the data set WORK.LSAF_JOB_PARAMS.
      WHERE PRXMATCH('/^(FOLDER|FILE)$/', TRIM(type));
NOTE: There were 9 observations read from the data set WORK.LSAF_JOB_PARAMS.
      WHERE (PRXMATCH('/^(FOLDER|FILE)$/', TRIM(type))=0) and (value not = ' ');
NOTE: The DATA step printed page 27.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LSAF_SUBMITJOB):  ;
NOTE: lsaf_submitjob: Validating dataset lsaf_job_params
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   options nonotes;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   proc datasets library=work nolist;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   delete __SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   quit;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   options nonotes;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   data _null_;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   length message $45 libName $8 dsName $300;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   providedDatasetName=kstrip("lsaf_job_params");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsName="INVALID";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsNameIsValid=0;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dotCount=countc(providedDatasetName,".");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dotPosition=kindexc(providedDatasetName,".");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   *put dotPosition=;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (dotPosition=1 or dotPosition=length(providedDatasetName)) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message=" Missing either LIBNAME or data set.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   select (dotCount);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   when (0) dsName=providedDatasetName;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   when (1) do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (dotPosition le 9) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   libName = (ksubstr(providedDatasetName, 1, dotPosition-1));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   *put libName=;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsName = (ksubstr(providedDatasetName, dotPosition+1));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   else do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Libname longer than 8 characters.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   otherwise do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Invalid data set name structure.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   firstchar=ksubstr(kleft(dsName), 1, 1);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (anydigit(firstchar)) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Data set name must start with a character.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (length(dsName) > 32) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Data set name longer than 32 characters.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsNameIsValid=1;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   SETVARS: call symput("_lsafvaliddsn_", strip(put(dsNameIsValid, best.)));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   call symput("dsnMsg", message);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   call symput("specifiedLib", strip(libName));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   run;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   options NONOTES;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   * CHECK EXISTS: Also getting errors for data set name.;
MPRINT(LSAF_VALIDATE_SASDATASET):  ;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):  ;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   proc sort data=lsaf_job_params out=__SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   by name;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   data _null_;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   set __SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   by name;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   if (first.name AND NOT(last.name)) then do;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   call symput("_lsafMsg_", "Input data set has duplicate values for parameter name " || name || ".");
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   STOP;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   end;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   call symput("_lsafRC_", "0");
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   option notes;
MPRINT(LSAF_SUBMITJOB):  ;
MPRINT(LSAF_SUBMITJOB):   option notes;
MPRINT(LSAF_SUBMITJOB):   data _null_;
MPRINT(LSAF_SUBMITJOB):   attrib returnCode length=8 message length=$200 jobSubmissionId length=$525 logMsgPrefix length=$70 logMsgPrimary length=$70 logMsg length=$300 ;
MPRINT(LSAF_SUBMITJOB):   set lsaf_job_params end=eof;
MPRINT(LSAF_SUBMITJOB):   if (_n_ = 1) then do;
MPRINT(LSAF_SUBMITJOB):   declare javaobj params("com/sas/lsaf/macro/execution/job/SasParameterValues");
MPRINT(LSAF_SUBMITJOB):   declare javaobj srv("com/sas/lsaf/macro/execution/jobsubmission/JobSubmissionService");
MPRINT(LSAF_SUBMITJOB):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   params.callVoidMethod("addValue", kstrip(name), kstrip(value), kstrip(type), kstrip(fileVersion), includeSubFolders);
MPRINT(LSAF_SUBMITJOB):   if (eof);
MPRINT(LSAF_SUBMITJOB):   declare javaobj job("com/sas/lsaf/macro/execution/jobsubmission/SasSubmittableJob", "/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job", "", 
params);
MPRINT(LSAF_SUBMITJOB):   srv.callStaticStringMethod("submitRepositoryJob", job, results, jobSubmissionId);
MPRINT(LSAF_SUBMITJOB):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_SUBMITJOB):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_SUBMITJOB):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_SUBMITJOB):   if (returnCode ne 0) then do;
MPRINT(LSAF_SUBMITJOB):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_SUBMITJOB):   logMsg=" Cannot submit job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job";
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   else do;
MPRINT(LSAF_SUBMITJOB):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_SUBMITJOB):   logMsg=" Submitted job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job";
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   put;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " " "lsaf_submitjob";
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(LSAF_SUBMITJOB):   if "lsaf_job_params" = "" then put logMsgPrefix "No job parameters were supplied.";
MPRINT(LSAF_SUBMITJOB):   else put logMsgPrefix "sas_dsname = lsaf_job_params";
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix "_lsafJobSubmissionId_= " jobSubmissionId;
MPRINT(LSAF_SUBMITJOB):   put;
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafJobSubmissionId_", strip(jobSubmissionId));
MPRINT(LSAF_SUBMITJOB):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  Submitted job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_submitjob
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: * sas_dsname = lsaf_job_params
NOTE: SAS Life Science Analytics Framework Macro: * _lsafJobSubmissionId_= aa13d299-42d3-470f-ba99-37c53027e580
NOTE: There were 12 observations read from the data set WORK.LSAF_JOB_PARAMS.
NOTE: DATA statement used (Total process time):
      real time           1.55 seconds
      cpu time            0.01 seconds
      

MPRINT(LSAF_SUBMITJOB):   options NONOTES;
MPRINT(SUBMIT_JOB):  ;
MPRINT(SUBMIT_JOB):   *- Job submission succeeded -*;
MPRINT(SUBMIT_JOB):   option nomprint nonotes
Calling %lsaf_getitemid(lsaf_path=/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job) ...
_LSAFMSG_=Success.  _LSAFRC_=0  _LSAFITEMID_=02b06e4d-7777-4a59-b2f9-2fc165603216
Calling %step_lsaf_getjobsubmissioninfos(job_subm_id=aa13d299-42d3-470f-ba99-37c53027e580) ...
Notice: SYSDATASTEPPHASE=EXECUTION IN_DATA_STEP=N
Ignoring record: submissionId=30678109-1661-4a87-858f-1bc1b0d581fa jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job jobVersion=0.1
jobId=abcfa448-6829-4513-8bef-3d8418207d45
Ignoring record: submissionId=c4fb4991-9137-4374-8d55-32ed9002f3d8 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_ongoing_studies.job jobVersion=0.1
jobId=c762f385-9376-49c8-8cec-d19326e7e18e
Ignoring record: submissionId=f00d2b52-d9f1-4ef1-8922-181d934626e0 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_ongoing_studies.job jobVersion=0.1
jobId=c762f385-9376-49c8-8cec-d19326e7e18e
Ignoring record: submissionId=05e0665e-78cd-4a3c-9aa3-9ddb53288cad jobPath=/clinical/argx-113/hv/argx-113-1702/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job jobVersion=52.0
jobId=bd48e139-ba53-466d-a613-fa25b86270cc
Ignoring record: submissionId=feed1f0f-2d9a-42b9-8060-8fddd1e47337 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job jobVersion=0.1
jobId=abcfa448-6829-4513-8bef-3d8418207d45
Ignoring record: submissionId=9038420c-8b24-4f39-a7a9-aa0ac7852c4b jobPath=/general/biostat/jobs/dashboard/dev/jobs/pp.job jobVersion=1.2 jobId=030fd944-90dd-464a-8101-6d0ab92dae81
Ignoring record: submissionId=0e426e98-1f39-407e-a152-2a4b08808841 jobPath=/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job jobVersion= 
jobId=02b06e4d-7777-4a59-b2f9-2fc165603216
Notice: _LSAFJOBSUBMISSIONID_=aa13d299-42d3-470f-ba99-37c53027e580 SESSIONID=b2c8f24c-dc51-48b5-b898-edd26e432c05 JOB=/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job 
JOBID=02b06e4d-7777-4a59-b2f9-2fc165603216
(SUBMIT_JOB): 2023-02-15T02:13:36 - Submitted REPOSITORY Job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job          with Submission ID: 
aa13d299-42d3-470f-ba99-37c53027e580, Status: STARTED
(SUBMIT_JOB): 02:13:36.53 Elapsed: 00:00:02.43 Job Submission Status: STARTED
(SUBMIT_JOB): 02:13:39.06 Elapsed: 00:00:04.97 Job Submission Status: STARTED
  Create generic_adam_path=/clinical/argx-117/mmn/argx-117-2003/biostat/staging/generic_adam  (force=N): create_result=skip_create_generic_adam_folder - already exists: 0: Success.
  Setup generic_adam_path=/clinical/argx-117/mmn/argx-117-2003/biostat/staging/generic_adam : setup_result=setup_generic_adam: 0: Success.
  /clinical/argx-117/mmn/argx-117-2003/biostat/staging/generic_adam : setup_result=skipped since &setup_gadam_folder = N
(SUBMIT_JOB): 02:13:41.60 Elapsed: 00:00:07.50 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:13:44.13 Elapsed: 00:00:10.04 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:13:46.66 Elapsed: 00:00:12.57 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:13:49.19 Elapsed: 00:00:15.10 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:13:51.73 Elapsed: 00:00:17.63 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:13:54.26 Elapsed: 00:00:20.16 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:13:56.79 Elapsed: 00:00:22.70 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:13:59.32 Elapsed: 00:00:25.23 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:14:01.85 Elapsed: 00:00:27.76 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:14:04.39 Elapsed: 00:00:30.30 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:14:11.92 Elapsed: 00:00:37.83 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:14:19.46 Elapsed: 00:00:45.36 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:14:26.99 Elapsed: 00:00:52.90 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:14:34.52 Elapsed: 00:01:00.43 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:14:57.06 Elapsed: 00:01:22.97 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:15:19.60 Elapsed: 00:01:45.50 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:15:49.67 Elapsed: 00:02:15.58 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:16:19.70 Elapsed: 00:02:45.61 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:16:49.74 Elapsed: 00:03:15.65 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:17:19.78 Elapsed: 00:03:45.69 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:17:49.82 Elapsed: 00:04:15.72 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:18:19.85 Elapsed: 00:04:45.76 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:18:49.89 Elapsed: 00:05:15.80 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:19:19.94 Elapsed: 00:05:45.84 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:19:49.97 Elapsed: 00:06:15.88 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:20:20.00 Elapsed: 00:06:45.91 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:20:50.06 Elapsed: 00:07:15.96 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:21:20.09 Elapsed: 00:07:46.00 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:21:50.12 Elapsed: 00:08:16.02 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:22:20.15 Elapsed: 00:08:46.06 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:22:50.19 Elapsed: 00:09:16.09 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:23:20.22 Elapsed: 00:09:46.13 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:23:50.26 Elapsed: 00:10:16.16 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:24:20.29 Elapsed: 00:10:46.20 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:24:50.36 Elapsed: 00:11:16.27 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:25:20.42 Elapsed: 00:11:46.32 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:25:50.46 Elapsed: 00:12:16.37 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:26:20.50 Elapsed: 00:12:46.41 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:26:50.53 Elapsed: 00:13:16.44 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:27:20.57 Elapsed: 00:13:46.48 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:27:50.60 Elapsed: 00:14:16.51 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:28:20.65 Elapsed: 00:14:46.55 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:28:50.68 Elapsed: 00:15:16.58 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:29:20.71 Elapsed: 00:15:46.62 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:29:50.75 Elapsed: 00:16:16.65 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:30:20.78 Elapsed: 00:16:46.69 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:30:50.81 Elapsed: 00:17:16.72 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:31:20.85 Elapsed: 00:17:46.75 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:31:50.88 Elapsed: 00:18:16.79 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:32:20.91 Elapsed: 00:18:46.82 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:32:50.95 Elapsed: 00:19:16.85 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:33:20.99 Elapsed: 00:19:46.89 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:33:51.02 Elapsed: 00:20:16.93 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:34:21.06 Elapsed: 00:20:46.96 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:34:51.09 Elapsed: 00:21:16.99 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:35:21.13 Elapsed: 00:21:47.03 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:35:51.16 Elapsed: 00:22:17.07 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:36:21.21 Elapsed: 00:22:47.12 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:36:51.25 Elapsed: 00:23:17.15 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:37:21.28 Elapsed: 00:23:47.18 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:37:51.33 Elapsed: 00:24:17.24 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:38:21.36 Elapsed: 00:24:47.27 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:38:51.40 Elapsed: 00:25:17.30 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:39:21.43 Elapsed: 00:25:47.34 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:39:51.47 Elapsed: 00:26:17.38 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:40:21.50 Elapsed: 00:26:47.41 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:40:51.54 Elapsed: 00:27:17.45 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:41:21.59 Elapsed: 00:27:47.50 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:41:51.62 Elapsed: 00:28:17.53 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:42:21.66 Elapsed: 00:28:47.56 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:42:51.70 Elapsed: 00:29:17.61 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:43:21.73 Elapsed: 00:29:47.64 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:43:51.77 Elapsed: 00:30:17.67 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:44:21.81 Elapsed: 00:30:47.71 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:44:51.84 Elapsed: 00:31:17.75 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:45:21.87 Elapsed: 00:31:47.78 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:45:51.91 Elapsed: 00:32:17.81 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:46:21.94 Elapsed: 00:32:47.85 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:46:52.00 Elapsed: 00:33:17.90 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:47:22.03 Elapsed: 00:33:47.94 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:47:52.07 Elapsed: 00:34:17.97 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:48:22.11 Elapsed: 00:34:48.01 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:48:52.14 Elapsed: 00:35:18.05 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:49:22.18 Elapsed: 00:35:48.09 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:49:52.24 Elapsed: 00:36:18.14 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:50:22.27 Elapsed: 00:36:48.18 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:50:52.30 Elapsed: 00:37:18.21 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:51:22.34 Elapsed: 00:37:48.24 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:51:52.37 Elapsed: 00:38:18.28 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:52:22.41 Elapsed: 00:38:48.32 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:52:52.45 Elapsed: 00:39:18.35 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:53:22.48 Elapsed: 00:39:48.39 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:53:52.52 Elapsed: 00:40:18.42 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:54:22.57 Elapsed: 00:40:48.47 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:54:52.60 Elapsed: 00:41:18.51 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:55:22.64 Elapsed: 00:41:48.54 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:55:52.67 Elapsed: 00:42:18.58 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:56:22.71 Elapsed: 00:42:48.62 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:56:52.75 Elapsed: 00:43:18.65 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:57:22.80 Elapsed: 00:43:48.70 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:57:52.85 Elapsed: 00:44:18.75 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:58:22.88 Elapsed: 00:44:48.79 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:58:52.92 Elapsed: 00:45:18.82 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:59:22.96 Elapsed: 00:45:48.87 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 02:59:53.00 Elapsed: 00:46:18.90 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 03:00:23.04 Elapsed: 00:46:48.95 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 03:00:53.08 Elapsed: 00:47:18.98 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 03:01:23.14 Elapsed: 00:47:49.05 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 03:01:53.17 Elapsed: 00:48:19.08 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 03:02:23.21 Elapsed: 00:48:49.11 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 03:02:53.24 Elapsed: 00:49:19.15 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 03:03:23.28 Elapsed: 00:49:49.18 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 03:03:53.31 Elapsed: 00:50:19.22 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 03:04:23.35 Elapsed: 00:50:49.26 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 03:04:53.39 Elapsed: 00:51:19.29 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 03:05:23.42 Elapsed: 00:51:49.33 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 03:05:53.65 Elapsed: 00:52:19.56 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 03:06:23.69 Elapsed: 00:52:49.59 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 03:06:53.72 Elapsed: 00:53:19.63 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 03:07:23.76 Elapsed: 00:53:49.67 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 03:07:53.79 Elapsed: 00:54:19.70 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 03:08:23.84 Elapsed: 00:54:49.74 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 03:08:53.87 Elapsed: 00:55:19.78 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 03:09:23.90 Elapsed: 00:55:49.81 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 03:09:53.94 Elapsed: 00:56:19.84 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 03:10:23.97 Elapsed: 00:56:49.88 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 03:10:54.00 Elapsed: 00:57:19.91 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 03:11:24.04 Elapsed: 00:57:49.94 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 03:11:54.07 Elapsed: 00:58:19.98 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 03:12:24.11 Elapsed: 00:58:50.02 Job Submission Status: RUNNING_TASKS
WARNING:(GET_LSAF_JOB_SUBMISSION_STATUS): job has status: COMPLETED_WARNINGS
(SUBMIT_JOB): 03:12:54.15 Elapsed: 00:59:20.05 Job Submission Status: COMPLETED_WARNINGS
(SUBMIT_JOB): 2023-02-15T03:13:24 - Submitted REPOSITORY job: /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job has completed with status: COMPLETED_WARNINGS
WARNING:(SUBMIT_JOB): REPOSITORY job job_gadam_rebuild_adam.job has status: COMPLETED_WARNINGS
MPRINT(SUBMIT_JOB):  ;
job_gadam_rebuild_adam.job: get job status: 0: Success.:       Elapsed: 00:59:50.06       REPOSITORY Job /general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job with Submission 
ID: aa13d299-42d3-470f-ba99-37c53027e580, Status: COMPLETED_WARNINGS
MPRINT(REBUILD_GENERIC_ADAM):  ;
MPRINT(REBUILD_GENERIC_ADAM):   option NOMPRINT;
%create_generic_adam_path(/clinical/argx-117/x-ind/argx-117-0000/biostat/staging/generic_adam, force=N)
MPRINT(CREATE_GENERIC_ADAM_PATH):   notes;
  Rebuild generic_adam_path=/clinical/argx-117/mmn/argx-117-2003/biostat/staging/generic_adam : adam_rebuild_result=rebuild_generic_adam: 0: Success.
  /clinical/argx-117/mmn/argx-117-2003/biostat/staging/generic_adam : adam_rebuild_result=rebuild_generic_adam: 0: Success.  === 
     
Notice: === study=argx-117-0000 match_pool=0 match_stdm_ind_pool=1
LOCATION_PARAMETERS=/clinical/argx-117/x-ind/argx-117-0000
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/x-ind/argx-117-0000/biostat/staging/generic_adam", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/x-ind/argx-117-0000/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/x-ind/argx-117-0000/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/x-ind/argx-117-0000/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/x-ind/argx-117-0000/biostat/staging/generic_adam
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(CREATE_GENERIC_ADAM_PATH):  ;
MPRINT(CREATE_GENERIC_ADAM_PATH):   option NOMPRINT;
%setup_generic_adam(gadam_path=/clinical/argx-117/x-ind/argx-117-0000/biostat/staging/generic_adam, sdtm_last_path=/clinical/argx-117/x-ind/argx-117-0000/biostat/staging/data_received/sdtm_last, 
study_adam_path=)
MPRINT(SETUP_GENERIC_ADAM):   notes;
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/x-ind/argx-117-0000/biostat/staging/generic_adam", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/x-ind/argx-117-0000/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/x-ind/argx-117-0000/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/x-ind/argx-117-0000/biostat/staging/generic_adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-117/x-ind/argx-117-0000/biostat/staging/generic_adam
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   *-2023-01-13 - jbodart - Perform gadam study setup only if target is not up-to-date -*;
MPRINT(SETUP_GENERIC_ADAM):   *- Use parameter gadam_files_source as &source_path for the template files to be used for study setup -*;
SOURCE_REL_PATH=/general/biostat/gadam SOURCE_PATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/gadam
STUDY=argx-117-0000 studyno=->0000<-
Notice: Checking whether generic_adam reporting event is already setup in /clinical/argx-117/x-ind/argx-117-0000/biostat/staging/generic_adam ...
MPRINT(SETUP_GENERIC_ADAM):   data source_files(where=( scan(name, -1, ".") in ("xlsx" "sas" "job") and name ^= 'job_finalchecks.job' ) index=(_idx0_=(dir name)));
MPRINT(STEP_LSAF_GETCHILDREN):   *- Determine LSAF Macro API version -*;
MPRINT(STEP_LSAF_GETCHILDREN):   *- Declare the java items -*;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __srv431 ("com/sas/lsaf/macro/content/repository/RepositoryService") ;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __results431 ("com/sas/lsaf/macro/content/repository/SasRepositoryItemsResult");
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj _i_results431("com/sas/lsaf/macro/common/result/Result");
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   do __lsaf_path = "/general/biostat/gadam/documents" ,"/general/biostat/gadam/metadata/studyprograms" ,"/general/biostat/gadam/metadata/studyjobs" 
,"/general/biostat/gadam/metadata/studymacros";
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize numeric variables with default length (8) -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   rowCount=0;
MPRINT(STEP_LSAF_GETCHILDREN):   *- format numeric datetime variables -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize character variables with appropriate lengths -*;
MPRINT(STEP_LSAF_GETCHILDREN):   message = put(' ', $200.);
MPRINT(STEP_LSAF_GETCHILDREN):   path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   name = put(' ', $256.);
MPRINT(STEP_LSAF_GETCHILDREN):   description = put(' ', $512.);
MPRINT(STEP_LSAF_GETCHILDREN):   version = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   signatureStatus = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   createdBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   created = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   state = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   __createdTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   itemType = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   formattedsize = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   __lastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   *- check if container -*;
MPRINT(STEP_LSAF_GETCHILDREN):   isContainer = 1;
MPRINT(STEP_LSAF_GETCHILDREN):   *- if __lsaf_path is not a container, replace with parent folder path -*;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path ^= ' ' then __srv431.callStaticBooleanMethod("isContainer", trim(__lsaf_path), _i_results431, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   if isContainer = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_file_path = __lsaf_path;
MPRINT(STEP_LSAF_GETCHILDREN):   *- keep the original file path specified -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = resolve('%dirname('||__lsaf_path||')');
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path^='' then do;
MPRINT(STEP_LSAF_GETCHILDREN):   *- call the method -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __srv431.callStaticVoidMethod("getChildren", trim(__lsaf_path), cats(1), __results431);
MPRINT(STEP_LSAF_GETCHILDREN):   *- Retrieve the results -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __results431.callIntMethod("getReturnCode", returnCode);
MPRINT(STEP_LSAF_GETCHILDREN):   __results431.callStringMethod("getReturnMessage", message);
MPRINT(STEP_LSAF_GETCHILDREN):   if (returnCode = -1) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "WARNING:" "(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "NO" "TE-";
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else if (returnCode ^= 0) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "ER" "ROR:(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   __results431.callIntMethod("getSize", rowCount);
MPRINT(STEP_LSAF_GETCHILDREN):   if rowcount = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   message = catx(' ', message, "No observations returned.");
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   do row=0 to rowCount - 1;
MPRINT(STEP_LSAF_GETCHILDREN):   __results431.callStringMethod("getPath", row, path);
MPRINT(STEP_LSAF_GETCHILDREN):   __results431.callStringMethod("getName", row, name);
MPRINT(STEP_LSAF_GETCHILDREN):   __results431.callStringMethod("getDescription", row, description);
MPRINT(STEP_LSAF_GETCHILDREN):   __results431.callStringMethod("getVersion", row, version);
MPRINT(STEP_LSAF_GETCHILDREN):   __results431.callIntMethod("isContainer", row, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   __results431.callIntMethod("isVersioned", row, isVersioned);
MPRINT(STEP_LSAF_GETCHILDREN):   __results431.callIntMethod("isCheckedOut", row, isCheckedOut);
MPRINT(STEP_LSAF_GETCHILDREN):   __results431.callIntMethod("isLocked", row, isLocked);
MPRINT(STEP_LSAF_GETCHILDREN):   __results431.callStringMethod("getSignatureStatus", row, signatureStatus);
MPRINT(STEP_LSAF_GETCHILDREN):   __results431.callLongMethod("getFileSize", row, size);
MPRINT(STEP_LSAF_GETCHILDREN):   __results431.callStringMethod("getFormattedFileSize", row, formattedsize);
MPRINT(STEP_LSAF_GETCHILDREN):   if formattedsize = ' ' then formattedsize = ifc(size<0, " ", cats(size)||" Bytes");
MPRINT(STEP_LSAF_GETCHILDREN):   if size < 0 then size=.;
MPRINT(STEP_LSAF_GETCHILDREN):   __results431.callStringMethod("getItemType", row, itemType);
MPRINT(STEP_LSAF_GETCHILDREN):   __results431.callStringMethod("getLastModified", row, lastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results431.callStringMethod("getLastModifiedSasFormat", row, __lastModifiedTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   __results431.callStringMethod("getCreated", row, created);
MPRINT(STEP_LSAF_GETCHILDREN):   __results431.callStringMethod("getCreatedBy", row, createdBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results431.callStringMethod("getLastModifiedBy", row, lastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results431.callStringMethod("getPropertiesLastModified", row, propertiesLastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results431.callStringMethod("getPropertiesLastModifiedBy", row, propertiesLastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results431.callStringMethod("getPropertiesLastModifiedSasFormat", row, propertiesLastModifiedTempSAS);
MPRINT(STEP_LSAF_GETCHILDREN):   __results431.callStringMethod("getState", row, state);
MPRINT(STEP_LSAF_GETCHILDREN):   __results431.callStringMethod("getCreatedSasFormat", row, __createdTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   dateCreated=input(__createdTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   dateLastModified=input(__lastModifiedTempSas, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   datePropertiesLastModified=input(propertiesLastModifiedTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   pathLevel = countw(path, '/');
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_file_path = ' ' or __lsaf_file_path = path then do;
MPRINT(STEP_LSAF_GETCHILDREN):   dir=put(left(tranwrd(scan(path, -2, "/"), "study", "")), $20.);
MPRINT(STEP_LSAF_GETCHILDREN):  output;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   drop row __lastModifiedTempSAS __lsaf_file_path __createdTempSAS propertiesLastModifiedTempSAS
MPRINT(VARLIST):   itemType isContainer description version isVersioned isCheckedOut isLocked signatureStatus size formattedsize createdBy created dateCreated lastModifiedBy dateLastModified 
propertiesLastModifiedBy propertiesLastModified datePropertiesLastModified state pathLevel __lsaf_path returnCode message rowCount
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   run;
NOTE: The data set WORK.SOURCE_FILES has 60 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           1.14 seconds
      cpu time            0.42 seconds
      

MPRINT(SETUP_GENERIC_ADAM):   data target_files(where=( scan(name, -1, ".") in ("xlsx" "sas" "job") ) index=(_idx0_=(dir name)));
MPRINT(STEP_LSAF_GETCHILDREN):   *- Determine LSAF Macro API version -*;
MPRINT(STEP_LSAF_GETCHILDREN):   *- Declare the java items -*;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __srv437 ("com/sas/lsaf/macro/content/repository/RepositoryService") ;
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj __results437 ("com/sas/lsaf/macro/content/repository/SasRepositoryItemsResult");
MPRINT(STEP_LSAF_GETCHILDREN):   declare javaobj _i_results437("com/sas/lsaf/macro/common/result/Result");
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   do __lsaf_path = "/clinical/argx-117/x-ind/argx-117-0000/biostat/staging/generic_adam/documents" 
,"/clinical/argx-117/x-ind/argx-117-0000/biostat/staging/generic_adam/programs" ,"/clinical/argx-117/x-ind/argx-117-0000/biostat/staging/generic_adam/jobs" 
,"/clinical/argx-117/x-ind/argx-117-0000/biostat/staging/generic_adam/macros";
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize numeric variables with default length (8) -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   rowCount=0;
MPRINT(STEP_LSAF_GETCHILDREN):   *- format numeric datetime variables -*;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   *- initialize character variables with appropriate lengths -*;
MPRINT(STEP_LSAF_GETCHILDREN):   message = put(' ', $200.);
MPRINT(STEP_LSAF_GETCHILDREN):   path = put(' ', $2048.);
MPRINT(STEP_LSAF_GETCHILDREN):   name = put(' ', $256.);
MPRINT(STEP_LSAF_GETCHILDREN):   description = put(' ', $512.);
MPRINT(STEP_LSAF_GETCHILDREN):   version = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   signatureStatus = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   createdBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   created = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedBy = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   state = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   __createdTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   lastModified = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   itemType = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   formattedsize = put(' ', $32.);
MPRINT(STEP_LSAF_GETCHILDREN):   __lastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   propertiesLastModifiedTempSAS = put(' ', $64.);
MPRINT(STEP_LSAF_GETCHILDREN):   *- check if container -*;
MPRINT(STEP_LSAF_GETCHILDREN):   isContainer = 1;
MPRINT(STEP_LSAF_GETCHILDREN):   *- if __lsaf_path is not a container, replace with parent folder path -*;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path ^= ' ' then __srv437.callStaticBooleanMethod("isContainer", trim(__lsaf_path), _i_results437, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   if isContainer = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_file_path = __lsaf_path;
MPRINT(STEP_LSAF_GETCHILDREN):   *- keep the original file path specified -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __lsaf_path = resolve('%dirname('||__lsaf_path||')');
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_path^='' then do;
MPRINT(STEP_LSAF_GETCHILDREN):   *- call the method -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __srv437.callStaticVoidMethod("getChildren", trim(__lsaf_path), cats(1), __results437);
MPRINT(STEP_LSAF_GETCHILDREN):   *- Retrieve the results -*;
MPRINT(STEP_LSAF_GETCHILDREN):   __results437.callIntMethod("getReturnCode", returnCode);
MPRINT(STEP_LSAF_GETCHILDREN):   __results437.callStringMethod("getReturnMessage", message);
MPRINT(STEP_LSAF_GETCHILDREN):   if (returnCode = -1) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "NOTE:" "(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "NO" "TE-";
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else if (returnCode ^= 0) then do;
MPRINT(STEP_LSAF_GETCHILDREN):   putlog "ER" "ROR:(STEP_LSAF_GETCHILDREN): " returnCode= ": " message;
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   __results437.callIntMethod("getSize", rowCount);
MPRINT(STEP_LSAF_GETCHILDREN):   if rowcount = 0 then do;
MPRINT(STEP_LSAF_GETCHILDREN):   message = catx(' ', message, "No observations returned.");
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   else do;
MPRINT(STEP_LSAF_GETCHILDREN):   do row=0 to rowCount - 1;
MPRINT(STEP_LSAF_GETCHILDREN):   __results437.callStringMethod("getPath", row, path);
MPRINT(STEP_LSAF_GETCHILDREN):   __results437.callStringMethod("getName", row, name);
MPRINT(STEP_LSAF_GETCHILDREN):   __results437.callStringMethod("getDescription", row, description);
MPRINT(STEP_LSAF_GETCHILDREN):   __results437.callStringMethod("getVersion", row, version);
MPRINT(STEP_LSAF_GETCHILDREN):   __results437.callIntMethod("isContainer", row, isContainer);
MPRINT(STEP_LSAF_GETCHILDREN):   __results437.callIntMethod("isVersioned", row, isVersioned);
MPRINT(STEP_LSAF_GETCHILDREN):   __results437.callIntMethod("isCheckedOut", row, isCheckedOut);
MPRINT(STEP_LSAF_GETCHILDREN):   __results437.callIntMethod("isLocked", row, isLocked);
MPRINT(STEP_LSAF_GETCHILDREN):   __results437.callStringMethod("getSignatureStatus", row, signatureStatus);
MPRINT(STEP_LSAF_GETCHILDREN):   __results437.callLongMethod("getFileSize", row, size);
MPRINT(STEP_LSAF_GETCHILDREN):   __results437.callStringMethod("getFormattedFileSize", row, formattedsize);
MPRINT(STEP_LSAF_GETCHILDREN):   if formattedsize = ' ' then formattedsize = ifc(size<0, " ", cats(size)||" Bytes");
MPRINT(STEP_LSAF_GETCHILDREN):   if size < 0 then size=.;
MPRINT(STEP_LSAF_GETCHILDREN):   __results437.callStringMethod("getItemType", row, itemType);
MPRINT(STEP_LSAF_GETCHILDREN):   __results437.callStringMethod("getLastModified", row, lastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results437.callStringMethod("getLastModifiedSasFormat", row, __lastModifiedTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   __results437.callStringMethod("getCreated", row, created);
MPRINT(STEP_LSAF_GETCHILDREN):   __results437.callStringMethod("getCreatedBy", row, createdBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results437.callStringMethod("getLastModifiedBy", row, lastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results437.callStringMethod("getPropertiesLastModified", row, propertiesLastModified);
MPRINT(STEP_LSAF_GETCHILDREN):   __results437.callStringMethod("getPropertiesLastModifiedBy", row, propertiesLastModifiedBy);
MPRINT(STEP_LSAF_GETCHILDREN):   __results437.callStringMethod("getPropertiesLastModifiedSasFormat", row, propertiesLastModifiedTempSAS);
MPRINT(STEP_LSAF_GETCHILDREN):   __results437.callStringMethod("getState", row, state);
MPRINT(STEP_LSAF_GETCHILDREN):   __results437.callStringMethod("getCreatedSasFormat", row, __createdTempSas);
MPRINT(STEP_LSAF_GETCHILDREN):   dateCreated=input(__createdTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   dateLastModified=input(__lastModifiedTempSas, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   datePropertiesLastModified=input(propertiesLastModifiedTempSAS, datetime.);
MPRINT(STEP_LSAF_GETCHILDREN):   pathLevel = countw(path, '/');
MPRINT(STEP_LSAF_GETCHILDREN):   if __lsaf_file_path = ' ' or __lsaf_file_path = path then do;
MPRINT(STEP_LSAF_GETCHILDREN):   dir=put(scan(path, -2, "/"), $20.);
MPRINT(STEP_LSAF_GETCHILDREN):   name=prxchange("s/^0000/_studyno_/", 1, trim(name));
MPRINT(STEP_LSAF_GETCHILDREN):   output;
MPRINT(STEP_LSAF_GETCHILDREN):  ;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   end;
MPRINT(STEP_LSAF_GETCHILDREN):   drop row __lastModifiedTempSAS __lsaf_file_path __createdTempSAS propertiesLastModifiedTempSAS
MPRINT(VARLIST):   itemType isContainer description version isVersioned isCheckedOut isLocked signatureStatus size formattedsize createdBy created dateCreated lastModifiedBy dateLastModified 
propertiesLastModifiedBy propertiesLastModified datePropertiesLastModified state pathLevel __lsaf_path returnCode message rowCount
MPRINT(STEP_LSAF_GETCHILDREN):   ;
MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   run;
NOTE: The data set WORK.TARGET_FILES has 60 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           1.00 seconds
      cpu time            0.40 seconds
      

MPRINT(SETUP_GENERIC_ADAM):   data source_target_files;
MPRINT(SETUP_GENERIC_ADAM):   merge source_files(in=a drop=path rename=(lastmodified=sourcelastmodified)) target_files(in=b drop=path rename=(lastmodified=targetlastmodified)) end=last ;
MPRINT(SETUP_GENERIC_ADAM):   by dir name;
MPRINT(SETUP_GENERIC_ADAM):   __prx = prxparse('s/((Mon|Tue|Wed|Thu|Fri|Sat|Sun)(\w*day)? )?(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]* (\d\d?) (\d?\d:\d\d:\d\d) GMT (\d{4})/\5\4\7:\6/i');
MPRINT(SETUP_GENERIC_ADAM):   if a then do;
MPRINT(SETUP_GENERIC_ADAM):   sourcemodte = input(prxchange(__prx, 1, sourcelastmodified), anydtdtm.);
MPRINT(SETUP_GENERIC_ADAM):   targetmodte = input(prxchange(__prx, 1, targetlastmodified), anydtdtm.);
MPRINT(SETUP_GENERIC_ADAM):   format sourcemodte targetmodte E8601DT.;
MPRINT(SETUP_GENERIC_ADAM):   need_update = (sourcemodte > targetmodte);
MPRINT(SETUP_GENERIC_ADAM):   tot_need_update=+need_update;
MPRINT(SETUP_GENERIC_ADAM):   tot_files=+a;
MPRINT(SETUP_GENERIC_ADAM):   output;
MPRINT(SETUP_GENERIC_ADAM):   end;
MPRINT(SETUP_GENERIC_ADAM):   if last then do;
MPRINT(SETUP_GENERIC_ADAM):   put "Target files needing update: " tot_need_update " out of " tot_files;
MPRINT(SETUP_GENERIC_ADAM):   call symputx("tot_need_update", tot_need_update);
MPRINT(SETUP_GENERIC_ADAM):   end;
MPRINT(SETUP_GENERIC_ADAM):   run;
NOTE: Invalid argument to function INPUT at line 0 column 119.
a=1 b=0 last=0 name=job_gnarrv2-orig.job sourcelastmodified=Tue Feb 14 08:25:35 GMT 2023 dir=jobs targetlastmodified=  FIRST.dir=0 LAST.dir=0 FIRST.name=1 LAST.name=1 __prx=1
sourcemodte=2023-02-14T08:25:35 targetmodte=. need_update=1 tot_need_update=1 tot_files=1 _ERROR_=1 _N_=18
Target files needing update: 1  out of 1
NOTE: Mathematical operations could not be performed at the following places. The results of the operations have been set to missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      1 at 0:119   
NOTE: There were 60 observations read from the data set WORK.SOURCE_FILES.
NOTE: There were 60 observations read from the data set WORK.TARGET_FILES.
NOTE: The data set WORK.SOURCE_TARGET_FILES has 60 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

TOT_NEED_UPDATE=1
Notice: Setting up generic_adam reporting event in /clinical/argx-117/x-ind/argx-117-0000/biostat/staging/generic_adam ...
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-117/x-ind/argx-117-0000/biostat/staging/data_received/adam", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-117/x-ind/argx-117-0000/biostat/staging/data_received/adam" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-117/x-ind/argx-117-0000/biostat/staging/data_received/adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-117/x-ind/argx-117-0000/biostat/staging/data_received/adam" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item does not exist: /clinical/argx-117/x-ind/argx-117-0000/biostat/staging/data_received/adam
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 0
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(SETUP_GENERIC_ADAM):  ;
Notice:(SETUP_GENERIC_ADAM): study_adam_path not found, set to null: /clinical/argx-117/x-ind/argx-117-0000/biostat/staging/data_received/adam
NUM_JOBS_SPAWNED=15
MACROAPIVER=2.6
MPRINT(SUBMIT_JOB):   proc sql noprint;
MPRINT(SUBMIT_JOB):   drop table work.job_Parameters;
NOTE: Table WORK.JOB_PARAMETERS has been dropped.
MPRINT(SUBMIT_JOB):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

DEBUG:(GEN_JOB_ENV): PRX=199
DEBUG:(GEN_JOB_ENV): prxmatch(199, /general/biostat/jobs/gadam_ongoing_studies/dev/jobs/job_gadam_studysetup.job) = 1
DEBUG:(GEN_JOB_ENV): (0) REFPATH=
DEBUG:(GEN_JOB_ENV): (0) REPEVPATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (0) RELREPEVPATH=/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (0) _SASFILEPATH_=/general/biostat/jobs/gadam_ongoing_studies/prod/programs/lsaf_get_last_sdtm.sas
DEBUG:(GEN_JOB_ENV): (0) PROGPATH=/general/biostat/jobs/gadam_ongoing_studies/prod/programs/
DEBUG:(GEN_JOB_ENV): (0) PATH=/general/biostat/jobs/gadam_ongoing_studies/dev/jobs/job_gadam_studysetup.job
Setting refpath = &repevpath
DEBUG:(GEN_JOB_ENV): (1) REFPATH=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/
DEBUG:(GEN_JOB_ENV): (2) REFENV=prod
DEBUG:(GEN_JOB_ENV): (3) REFENV=prod
DEBUG:(F_LSAF_EXISTS) - 2023-02-15T03:13:26 - Iteration: 1: slept = 0, exists = 1
DEBUG:(F_LSAF_EXISTS) - 2023-02-15T03:13:26 - Iteration: 1: slept = 0, exists = 1
DEBUG:(F_LSAF_EXISTS) - 2023-02-15T03:13:27 - Iteration: 1: slept = 0, exists = 1
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(SUBMIT_JOB):  ;
Notice:(SUBMIT_JOB): LSAF Job Path exists: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job.
MPRINT(SUBMIT_JOB):   proc format;
MPRINT(SUBMIT_JOB):   value $jobabbr "job_gadam_ongoing_studies.job"= "gos" "job_studies_status.job"= "ss" "job_gadam_sdtm_key_core_vars.job"= "gskcv" "job_unzip_sdtm_sources.job"= "uss" 
"job_zip_extract_files.job"= "zef" "job_lsaf_get_last_sdtm.job"= "lgls" "setup_reporting_event_folder.job"= "sref" "job_gadam_refresh_sdtm_last.job"= "grsl" "job_gadam_update_refresh_info.job"= 
"guri" "convert_definetosas.job"= "cdts" "job_gadam_studysetup.job"= "gss" "job_gadam_rebuild_adam.job"= "gra" "job_adAAA" - "job_adzzz"= "adx" "job_qcstudyadams.job"= "qcsa" 
"job_qc_gadam_vs_study.job"= "qcgvs" "job_qc_gadam_vs_study-overview.job"= "qcgvso" "job_check_and_load.job"= "cal" "job_tAAA" - "job_tzzz"= "txx" "job_gadam_qc_overviews.job"= "gqco" 
"job_make_sdtm_pool_jobs.job"= "mspj" "job_lsaf_pool_last_sdtm.job"= "lpls" "sdtm_pool-AAA" - "sdtm_pool-zzz"= "pci" "job_gadam_refresh_sdtm_overview.job"= "grso" "getdata.job"= "gd" OTHER = "***" ;
NOTE: Format $JOBABBR is already on the library WORK.FORMATS.
NOTE: Format $JOBABBR has been output.
MPRINT(SUBMIT_JOB):   run;
NOTE: PROCEDURE FORMAT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SUBMIT_JOB):   quit;
job_instance=>Ngos117Prod_4_x0_15<
MPRINT(LSAF_GETJOBPARAMETERS):  ;
MPRINT(LSAF_GETJOBPARAMETERS):   data work.job_Parameters (label="Created by LSAF_GETJOBPARAMETERS" KEEP=jobPath jobVersion name label type defaultValue fileVersion includeSubFolders );
MPRINT(LSAF_GETJOBPARAMETERS):   attrib returnCode length=8 message length=$200 logMsgPrefix length=$70 logMsgPrimary length=$70 logMsg length=$300 rowCount length=8 jobPath length=$2048 label="Job 
Path" jobVersion length=$32 label="Job Version" name length=$256 label="Parameter Name" label length=$256 label="Parameter Label" type length=$32 label="Parameter Type" defaultValue length=$2048 
label="Parameter Default Value" fileVersion length=$32 label="File Version if File Type" includeSubFolders length=8 label="Include Container SubFolders" includesSubFolders length=$5 label="FOR 
INTERNAL PROCESSING ONLY.  WILL BE DROPPED." ;
MPRINT(LSAF_GETJOBPARAMETERS):   rowCount=0;
MPRINT(LSAF_GETJOBPARAMETERS):   declare javaobj srv("com/sas/lsaf/macro/execution/job/JobService") ;
MPRINT(LSAF_GETJOBPARAMETERS):   declare javaobj results("com/sas/lsaf/macro/execution/job/SasJobParametersResult");
MPRINT(LSAF_GETJOBPARAMETERS):   srv.callStaticVoidMethod("getRepositoryJobParameters", "/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job", "", results) ;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_GETJOBPARAMETERS):   if (returnCode ne 0) then do;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_GETJOBPARAMETERS):   if "" NE "" then logMsg=" Cannot retrieve parameters for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job, version " ;
MPRINT(LSAF_GETJOBPARAMETERS):   else logMsg=" Cannot retrieve parameters for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   else do;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsg=" Parameters were returned for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job" ;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getJobPath", jobPath);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getJobVersion", jobVersion);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callIntMethod("getSize", rowCount);
MPRINT(LSAF_GETJOBPARAMETERS):   do row=0 to rowCount - 1;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getName", row, name);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getLabel", row, label);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getType", row, type);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getDefaultValue", row, defaultValue);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getFileVersion", row, fileVersion);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getContainerIncludeSubfolders", row, includesSubFolders);
MPRINT(LSAF_GETJOBPARAMETERS):   includeSubFolders=input(includesSubFolders,best.);
MPRINT(LSAF_GETJOBPARAMETERS):   output;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   put;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " " "lsaf_getjobparameters";
MPRINT(LSAF_GETJOBPARAMETERS):   if (rowCount=0) then put logMsgPrefix " No parameters were found.";
MPRINT(LSAF_GETJOBPARAMETERS):   else put logMsgPrefix " " rowCount " records written to data set work.job_Parameters";
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(LSAF_GETJOBPARAMETERS):   put;
MPRINT(LSAF_GETJOBPARAMETERS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_GETJOBPARAMETERS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_GETJOBPARAMETERS):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  Parameters were returned for job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_getjobparameters
NOTE: SAS Life Science Analytics Framework Macro: *  8  records written to data set work.job_Parameters
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: The data set WORK.JOB_PARAMETERS has 8 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.02 seconds
      

MPRINT(SUBMIT_JOB):  ;
NOTE: The dataset WORK.JOB_PARAMETERS has 8 observations and 8 variables.
MPRINT(SUBMIT_JOB):   ;
MPRINT(SUBMIT_JOB):   *- dataset to specify job parameters (from macro parameters values) -*;
MPRINT(SUBMIT_JOB):   data lsaf_job_params(index=(name));
MPRINT(SUBMIT_JOB):   set work.job_Parameters(rename=(defaultValue = value));
MPRINT(SUBMIT_JOB):   if upcase(name) = "_PARENTJOB_WS_" then do;
MPRINT(SUBMIT_JOB):   if symexist("_SASWS_") and type = "CHARACTER" then value = symget("_SASWS_");
MPRINT(SUBMIT_JOB):   else value = " ";
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   else if upcase(name) = "_PARENTJOB_WRK_" then do;
MPRINT(SUBMIT_JOB):   value = pathname("WORK", "L");
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   else if symexist(name) then do;
MPRINT(SUBMIT_JOB):   if symget(name) ^= ' ' then value = symget(name);
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   new_value = translate(value, ' ', ',;()"''&%');
MPRINT(SUBMIT_JOB):   if new_value ne value then put "NOTE:(SUBMIT_JOB): Special characters may be removed from parameter value:" / @2 "parameter: " name /@2 "old value: " value /@2 "new value: " 
new_value;
MPRINT(SUBMIT_JOB):   if _n_=1 then put "Not" "ice:(SUBMIT_JOB): Updated Job parameters:";
MPRINT(SUBMIT_JOB):   if type = "FOLDER" then put " - " name @+(-1) "=" value "[" type= @+(-1) ", " includeSubFolders= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   else if TYPE = "FILE" then put " - " name @+(-1) "=" value "[" type= @+(-1) ", " fileversion= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   else put " - " name @+(-1) "=" value "[" type= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   run;
Notice:(SUBMIT_JOB): Updated Job parameters:
 - gadam_path=/clinical/argx-117/x-ind/argx-117-0000/biostat/staging/generic_adam [type=FOLDER, includeSubFolders=0]
 - sdtm_last_path=/clinical/argx-117/x-ind/argx-117-0000/biostat/staging/data_received/sdtm_last [type=FOLDER, includeSubFolders=0]
 - study_adam_path=  [type=FOLDER, includeSubFolders=0]
 - gadam_files_source=/general/biostat/gadam [type=FOLDER, includeSubFolders=1]
 - job_instance=Ngos117Prod_4_x0_15 [type=CHARACTER]
 - _PARENTJOB_WS_=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15 [type=CHARACTER]
 - _PARENTJOB_WRK_=/saswork/sas_tmp/SAS_work4CFB0019563E_xar08auv.vsp.sas.com/SAS_work5B910019563E_xar08auv.vsp.sas.com [type=CHARACTER]
 - USE_SAS_WORKSPACE_MACROS=  [type=CHARACTER]
NOTE: There were 8 observations read from the data set WORK.JOB_PARAMETERS.
NOTE: The data set WORK.LSAF_JOB_PARAMS has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

N_PARAMS=8
MPRINT(SUBMIT_JOB):   data lsaf_job_params(index=(name));
MPRINT(SUBMIT_JOB):   set lsaf_job_params;
MPRINT(SUBMIT_JOB):   by name;
MPRINT(SUBMIT_JOB):   if (not first.name) or (not last.name) then do;
MPRINT(SUBMIT_JOB):   if last.name then action = "(kept)   ";
MPRINT(SUBMIT_JOB):   else action = "(dropped)";
MPRINT(SUBMIT_JOB):   drop action;
MPRINT(SUBMIT_JOB):   put "Not" "ice:(SUBMIT_JOB): duplicate parameter " name " = " value @+(3) action;
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   if last.name;
MPRINT(SUBMIT_JOB):   run;
NOTE: There were 8 observations read from the data set WORK.LSAF_JOB_PARAMS.
NOTE: The data set WORK.LSAF_JOB_PARAMS has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SUBMIT_JOB):   data _null_;
MPRINT(SUBMIT_JOB):   file print;
MPRINT(SUBMIT_JOB):   set lsaf_job_params(where=(prxmatch('/^(FOLDER|FILE)$/', trim(type))) in=a) lsaf_job_params(where=(prxmatch('/^(FOLDER|FILE)$/', trim(type))=0 and value ^= ' ')) end=last;
MPRINT(SUBMIT_JOB):   if _n_=1 then putlog "=== 2023-02-15T03:13:27 - Submit job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job (with parameters: " @;
MPRINT(SUBMIT_JOB):   _n_a+a;
MPRINT(SUBMIT_JOB):   if _n_-1 = _n_a then do;
MPRINT(SUBMIT_JOB):   putlog / @8 @;
MPRINT(SUBMIT_JOB):   put / @8 @;
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   if a then putlog / @8 name @+(-1) "=" value ' (' type= includeSubFolders= @+(-1) ')   ' @;
MPRINT(SUBMIT_JOB):   else putlog name @+(-1) "=" value "  " @ ;
MPRINT(SUBMIT_JOB):   if last then putlog @+8 ") ===";
MPRINT(SUBMIT_JOB):   if _n_=1 then put "=== 2023-02-15T03:13:27 - Submit job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job (with parameters: " @;
MPRINT(SUBMIT_JOB):   if a then put / @8 name @+(-1) "=" value ' (' type= includeSubFolders= @+(-1) ')   ' @;
MPRINT(SUBMIT_JOB):   else put name @+(-1) "=" value "  " @ ;
MPRINT(SUBMIT_JOB):   if last then put @+8 ") ===";
MPRINT(SUBMIT_JOB):   run;
=== 2023-02-15T03:13:27 - Submit job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job (with parameters: 
       gadam_files_source=/general/biostat/gadam  (type=FOLDER includeSubFolders=1)   
       gadam_path=/clinical/argx-117/x-ind/argx-117-0000/biostat/staging/generic_adam  (type=FOLDER includeSubFolders=0)   
       sdtm_last_path=/clinical/argx-117/x-ind/argx-117-0000/biostat/staging/data_received/sdtm_last  (type=FOLDER includeSubFolders=0)   
       study_adam_path=   (type=FOLDER includeSubFolders=0)   
       _PARENTJOB_WRK_=/saswork/sas_tmp/SAS_work4CFB0019563E_xar08auv.vsp.sas.com/SAS_work5B910019563E_xar08auv.vsp.sas.com   _PARENTJOB_WS_=
/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15   job_instance=Ngos117Prod_4_x0_15           ) ===
NOTE: 7 lines were written to file PRINT.
NOTE: There were 4 observations read from the data set WORK.LSAF_JOB_PARAMS.
      WHERE PRXMATCH('/^(FOLDER|FILE)$/', TRIM(type));
NOTE: There were 3 observations read from the data set WORK.LSAF_JOB_PARAMS.
      WHERE (PRXMATCH('/^(FOLDER|FILE)$/', TRIM(type))=0) and (value not = ' ');
NOTE: The DATA step printed page 29.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(LSAF_SUBMITJOB):  ;
NOTE: lsaf_submitjob: Validating dataset lsaf_job_params
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   options nonotes;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   proc datasets library=work nolist;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   delete __SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   quit;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   options nonotes;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   data _null_;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   length message $45 libName $8 dsName $300;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   providedDatasetName=kstrip("lsaf_job_params");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsName="INVALID";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsNameIsValid=0;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dotCount=countc(providedDatasetName,".");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dotPosition=kindexc(providedDatasetName,".");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   *put dotPosition=;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (dotPosition=1 or dotPosition=length(providedDatasetName)) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message=" Missing either LIBNAME or data set.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   select (dotCount);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   when (0) dsName=providedDatasetName;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   when (1) do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (dotPosition le 9) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   libName = (ksubstr(providedDatasetName, 1, dotPosition-1));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   *put libName=;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsName = (ksubstr(providedDatasetName, dotPosition+1));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   else do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Libname longer than 8 characters.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   otherwise do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Invalid data set name structure.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   firstchar=ksubstr(kleft(dsName), 1, 1);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (anydigit(firstchar)) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Data set name must start with a character.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (length(dsName) > 32) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Data set name longer than 32 characters.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsNameIsValid=1;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   SETVARS: call symput("_lsafvaliddsn_", strip(put(dsNameIsValid, best.)));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   call symput("dsnMsg", message);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   call symput("specifiedLib", strip(libName));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   run;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   options NONOTES;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   * CHECK EXISTS: Also getting errors for data set name.;
MPRINT(LSAF_VALIDATE_SASDATASET):  ;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):  ;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   proc sort data=lsaf_job_params out=__SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   by name;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   data _null_;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   set __SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   by name;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   if (first.name AND NOT(last.name)) then do;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   call symput("_lsafMsg_", "Input data set has duplicate values for parameter name " || name || ".");
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   STOP;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   end;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   call symput("_lsafRC_", "0");
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   option notes;
MPRINT(LSAF_SUBMITJOB):  ;
MPRINT(LSAF_SUBMITJOB):   option notes;
MPRINT(LSAF_SUBMITJOB):   data _null_;
MPRINT(LSAF_SUBMITJOB):   attrib returnCode length=8 message length=$200 jobSubmissionId length=$525 logMsgPrefix length=$70 logMsgPrimary length=$70 logMsg length=$300 ;
MPRINT(LSAF_SUBMITJOB):   set lsaf_job_params end=eof;
MPRINT(LSAF_SUBMITJOB):   if (_n_ = 1) then do;
MPRINT(LSAF_SUBMITJOB):   declare javaobj params("com/sas/lsaf/macro/execution/job/SasParameterValues");
MPRINT(LSAF_SUBMITJOB):   declare javaobj srv("com/sas/lsaf/macro/execution/jobsubmission/JobSubmissionService");
MPRINT(LSAF_SUBMITJOB):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   params.callVoidMethod("addValue", kstrip(name), kstrip(value), kstrip(type), kstrip(fileVersion), includeSubFolders);
MPRINT(LSAF_SUBMITJOB):   if (eof);
MPRINT(LSAF_SUBMITJOB):   declare javaobj job("com/sas/lsaf/macro/execution/jobsubmission/SasSubmittableJob", "/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job", "", 
params);
MPRINT(LSAF_SUBMITJOB):   srv.callStaticStringMethod("submitRepositoryJob", job, results, jobSubmissionId);
MPRINT(LSAF_SUBMITJOB):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_SUBMITJOB):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_SUBMITJOB):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_SUBMITJOB):   if (returnCode ne 0) then do;
MPRINT(LSAF_SUBMITJOB):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_SUBMITJOB):   logMsg=" Cannot submit job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job";
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   else do;
MPRINT(LSAF_SUBMITJOB):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_SUBMITJOB):   logMsg=" Submitted job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job";
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   put;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " " "lsaf_submitjob";
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(LSAF_SUBMITJOB):   if "lsaf_job_params" = "" then put logMsgPrefix "No job parameters were supplied.";
MPRINT(LSAF_SUBMITJOB):   else put logMsgPrefix "sas_dsname = lsaf_job_params";
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix "_lsafJobSubmissionId_= " jobSubmissionId;
MPRINT(LSAF_SUBMITJOB):   put;
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafJobSubmissionId_", strip(jobSubmissionId));
MPRINT(LSAF_SUBMITJOB):   run;

NOTE: SAS Life Science Analytics Framework Macro: *  Submitted job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_submitjob
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: * sas_dsname = lsaf_job_params
NOTE: SAS Life Science Analytics Framework Macro: * _lsafJobSubmissionId_= f82a4677-b3a0-4f83-9aa6-0655e100cacc
NOTE: There were 8 observations read from the data set WORK.LSAF_JOB_PARAMS.
NOTE: DATA statement used (Total process time):
      real time           1.33 seconds
      cpu time            0.01 seconds
      

MPRINT(LSAF_SUBMITJOB):   options NONOTES;
MPRINT(SUBMIT_JOB):  ;
MPRINT(SUBMIT_JOB):   *- Job submission succeeded -*;
MPRINT(SUBMIT_JOB):   option nomprint nonotes
Calling %lsaf_getitemid(lsaf_path=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job) ...
_LSAFMSG_=Success.  _LSAFRC_=0  _LSAFITEMID_=090a95d3-6059-474f-a1bd-61c6768ba993
Calling %step_lsaf_getjobsubmissioninfos(job_subm_id=f82a4677-b3a0-4f83-9aa6-0655e100cacc) ...
Notice: SYSDATASTEPPHASE=EXECUTION IN_DATA_STEP=N
Ignoring record: submissionId=30678109-1661-4a87-858f-1bc1b0d581fa jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job jobVersion=0.1
jobId=abcfa448-6829-4513-8bef-3d8418207d45
Ignoring record: submissionId=c4fb4991-9137-4374-8d55-32ed9002f3d8 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_ongoing_studies.job jobVersion=0.1
jobId=c762f385-9376-49c8-8cec-d19326e7e18e
Ignoring record: submissionId=fd655b6e-9a18-4d48-96ad-60edca349c3d jobPath=/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job jobVersion= 
jobId=02b06e4d-7777-4a59-b2f9-2fc165603216
Ignoring record: submissionId=f00d2b52-d9f1-4ef1-8922-181d934626e0 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_ongoing_studies.job jobVersion=0.1
jobId=c762f385-9376-49c8-8cec-d19326e7e18e
Ignoring record: submissionId=feed1f0f-2d9a-42b9-8060-8fddd1e47337 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job jobVersion=0.1
jobId=abcfa448-6829-4513-8bef-3d8418207d45
Ignoring record: submissionId=ff89ee33-52c3-4658-8107-f03231e35ef7 jobPath=/clinical/argx-113/hv/argx-113-1901/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job jobVersion= 
jobId=5593d879-35b7-4dc2-82f8-999c46a500a1
Ignoring record: submissionId=dcd3068a-96fd-44a5-9769-060bd8a1318b jobPath=/general/biostat/jobs/dashboard/dev/jobs/pp.job jobVersion=1.2 jobId=030fd944-90dd-464a-8101-6d0ab92dae81
Ignoring record: submissionId=cef490a2-a484-4b8b-8216-d96b1720e8b1 jobPath=/clinical/argx-113/hv/argx-113-1901/biostat/staging/generic_adam/jobs/job_ttrtdur.job jobVersion= 
jobId=c4cc5642-554f-49fc-bb37-6cf40aa09c3e
Notice: _LSAFJOBSUBMISSIONID_=f82a4677-b3a0-4f83-9aa6-0655e100cacc SESSIONID=ce1cb1dd-fe21-4135-b11c-0003beef0873 JOB=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job 
JOBID=090a95d3-6059-474f-a1bd-61c6768ba993
(SUBMIT_JOB): 2023-02-15T03:13:28 - Submitted REPOSITORY Job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job          with Submission ID: 
f82a4677-b3a0-4f83-9aa6-0655e100cacc, Status: STARTED
(SUBMIT_JOB): 03:13:28.51 Elapsed: 00:00:02.10 Job Submission Status: STARTED
(SUBMIT_JOB): 03:13:31.05 Elapsed: 00:00:04.63 Job Submission Status: STARTED
(SUBMIT_JOB): 03:13:33.58 Elapsed: 00:00:07.16 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 03:13:36.11 Elapsed: 00:00:09.69 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 03:13:38.64 Elapsed: 00:00:12.23 Job Submission Status: COMPLETED_SUCCESSFUL
(SUBMIT_JOB): 2023-02-15T03:13:41 - Submitted REPOSITORY job: /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job has completed with status: COMPLETED_SUCCESSFUL
MPRINT(SUBMIT_JOB):  ;
job_gadam_studysetup.job: get job status: 0: Success.:       Elapsed: 00:00:14.73       REPOSITORY Job /general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job with Submission 
ID: f82a4677-b3a0-4f83-9aa6-0655e100cacc, Status: COMPLETED_SUCCESSFUL
MPRINT(SETUP_GENERIC_ADAM):  ;
MPRINT(SETUP_GENERIC_ADAM):   option NOMPRINT;
NOTE: DATA statement used (Total process time):
      real time           3:21:16.09
      cpu time            18.81 seconds
      
  Create generic_adam_path=/clinical/argx-117/x-ind/argx-117-0000/biostat/staging/generic_adam  (force=N): create_result=skip_create_generic_adam_folder - already exists: 0: Success.
  Setup generic_adam_path=/clinical/argx-117/x-ind/argx-117-0000/biostat/staging/generic_adam : setup_result=setup_generic_adam: 0: Success.
  /clinical/argx-117/x-ind/argx-117-0000/biostat/staging/generic_adam : setup_result=skipped since &setup_gadam_folder = N
  /clinical/argx-117/x-ind/argx-117-0000/biostat/staging/generic_adam : adam_rebuild_result=skipped since sdtm pools within/across indication are not yet refreshed at this point  === 
NOTE: 55 lines were written to file PRINT.
NOTE: There were 10 observations read from the data set WORK.LSAF_SDTM_LAST.
NOTE: There were 10 observations read from the data set WORK.LSAF_GENERIC_ADAM.
NOTE: The data set WORK.GENERIC_ADAM_NEW has 10 observations and 16 variables.
NOTE: The data set OUT.GENERIC_ADAM has 10 observations and 17 variables.
NOTE: Compressing data set OUT.GENERIC_ADAM increased size by 100.00 percent. 
      Compressed is 2 pages; un-compressed would require 1 pages.
NOTE: The DATA step printed page 18.

MPRINT(LSAF_GET_LAST_SDTM):   *- JMB 2022-03-15 - create / update job to pool generic_adam QC overviews -*;
MPRINT(LSAF_GET_LAST_SDTM):   data lsaf_gadam_studies;
MPRINT(LSAF_GET_LAST_SDTM):   length generic_adam_path $1000;
MPRINT(LSAF_GET_LAST_SDTM):   set lsaf_studies (keep=path itemType );
MPRINT(LSAF_GET_LAST_SDTM):   where prxmatch('/[-_]9\d\d\d$/', strip(path))=0;
MPRINT(LSAF_GET_LAST_SDTM):   *- exclude ADaM poolings -*;
MPRINT(LSAF_GET_LAST_SDTM):   studypath=path;
MPRINT(LSAF_GET_LAST_SDTM):   generic_adam_path=cats(path, "/biostat/staging/generic_adam");
MPRINT(LSAF_GET_LAST_SDTM):   exists_path=put(runmacro('%test_if_exists('||strip(generic_adam_path)||');'), $400.);
MPRINT(LSAF_GET_LAST_SDTM):   if exists_path ^= "1" then do;
MPRINT(LSAF_GET_LAST_SDTM):   if exists_path = "0" then put "War" "ning: LSAF path does not exist (yet): " generic_adam_path;
MPRINT(LSAF_GET_LAST_SDTM):   else put "WAR" "NING: Check if LSAF path exists: " generic_adam_path " returned: " exists_path;
MPRINT(LSAF_GET_LAST_SDTM):   delete;
MPRINT(LSAF_GET_LAST_SDTM):   end;
MPRINT(LSAF_GET_LAST_SDTM):   drop exists_path;
MPRINT(LSAF_GET_LAST_SDTM):   itemType=put(runmacro('%get_itemType('||strip(generic_adam_path)||');'), $200.);
MPRINT(LSAF_GET_LAST_SDTM):   if itemType ^= "sas:folder" then do;
MPRINT(LSAF_GET_LAST_SDTM):   put "War" "ning: Unexpected: " itemType= " for " generic_adam_path=;
MPRINT(LSAF_GET_LAST_SDTM):   end;
MPRINT(LSAF_GET_LAST_SDTM):   run;

The SAS System

MPRINT(RUN_MACRO):   option nomprint;
NOTE: DATA statement used (Total process time):
      real time           8.88 seconds
      cpu time            1.01 seconds
      
Warning: LSAF path does not exist (yet): /clinical/argx-113/paa/argx-113-0000/biostat/staging/generic_adam
Warning: LSAF path does not exist (yet): /clinical/test/gsdtm-tests/test-0000/biostat/staging/generic_adam
Warning: LSAF path does not exist (yet): /clinical/test/restore_indic/test-0000/biostat/staging/generic_adam
Warning: LSAF path does not exist (yet): /clinical/test/smoke_indic/test-0000/biostat/staging/generic_adam
Warning: LSAF path does not exist (yet): /clinical/test/x-ind/test-0000/biostat/staging/generic_adam
NOTE: There were 77 observations read from the data set WORK.LSAF_STUDIES.
      WHERE PRXMATCH('/[-_]9\d\d\d$/', STRIP(path))=0;
NOTE: The data set WORK.LSAF_GADAM_STUDIES has 72 observations and 4 variables.

MPRINT(LSAF_GET_LAST_SDTM):   data out.gadam_qc_overviews;
MPRINT(LSAF_GET_LAST_SDTM):   set lsaf_gadam_studies (keep=generic_adam_path where=(generic_adam_path ^= " "));
MPRINT(LSAF_GET_LAST_SDTM):   length generic_adam_qc_path param_path param_outpath $400;
MPRINT(LSAF_GET_LAST_SDTM):   jobpath = '&_SASWS_/general/biostat/jobs/gadam_rebuild_adam/dev/jobs/job_gadam_qc_overviews.job';
MPRINT(LSAF_GET_LAST_SDTM):   *- Needs &_SASWS_ as we are actually writing to this path now -*;
MPRINT(LSAF_GET_LAST_SDTM):   outpath = "/general/biostat/jobs/gadam_rebuild_adam/dev/output/qc";
MPRINT(LSAF_GET_LAST_SDTM):   *- Does not need &_SASWS_ as this path will be specified in the job file itself -*;
MPRINT(LSAF_GET_LAST_SDTM):   generic_adam_qc_path = catx('/', generic_adam_path, "qc");
MPRINT(LSAF_GET_LAST_SDTM):   pathnum+1;
MPRINT(LSAF_GET_LAST_SDTM):   param_path = cats('path', pathnum)||' = '|| quote(strip(generic_adam_qc_path));
MPRINT(LSAF_GET_LAST_SDTM):   param_outpath = 'outpath = '|| quote(strip(outpath));
MPRINT(LSAF_GET_LAST_SDTM):   run;

NOTE: There were 72 observations read from the data set WORK.LSAF_GADAM_STUDIES.
      WHERE generic_adam_path not = ' ';
NOTE: The data set OUT.GADAM_QC_OVERVIEWS has 72 observations and 7 variables.
NOTE: Compressing data set OUT.GADAM_QC_OVERVIEWS decreased size by 0.00 percent. 
      Compressed is 2 pages; un-compressed would require 2 pages.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MAUTOCOMPLOC:  The autocall macro BUILD_JOB is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/macros/_library/build_job.sas.
NOTE: The macro BUILD_JOB completed compilation without errors.
      217 instructions 15232 bytes.
OPTIONS=BOMFILE
MPRINT(BUILD_JOB):   option nobomfile;
MPRINT(BUILD_JOB):   data __job(compress=Y);
MPRINT(BUILD_JOB):   length __jobfile $400;
MPRINT(BUILD_JOB):   set out.gadam_qc_overviews;
MPRINT(BUILD_JOB):   __jobfile = resolve(jobpath);
MPRINT(BUILD_JOB):   run;

NOTE: There were 72 observations read from the data set OUT.GADAM_QC_OVERVIEWS.
NOTE: The data set WORK.__JOB has 72 observations and 8 variables.
NOTE: Compressing data set WORK.__JOB decreased size by 0.00 percent. 
      Compressed is 2 pages; un-compressed would require 2 pages.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILD_JOB):   data __job(compress=Y);
MPRINT(BUILD_JOB):   length __programs __programs __input_recursive __input_folders __input_files __output_recursive __output_folders __output_files __param_recursive __param_folders __param_files 
__param_character $32000 __job_description $1000 __p __pval $400 __pnam $40 __job_version $10;
MPRINT(BUILD_JOB):   retain __programs __input_recursive __input_folders __input_files __output_recursive __output_folders __output_files __param_recursive __param_folders __param_files 
__param_character ;
MPRINT(BUILD_JOB):   set __job;
MPRINT(BUILD_JOB):   by __jobfile notsorted;
MPRINT(BUILD_JOB):   file plholder encoding='utf-8' filevar=__jobfile notitle nofootnote;
MPRINT(BUILD_JOB):   drop __p i;
MPRINT(BUILD_JOB):   if first.__jobfile then call missing(of __programs __input_recursive __input_folders __input_files __output_recursive __output_folders __output_files __param_recursive 
__param_folders __param_files __param_character );
MAUTOCOMPLOC:  The autocall macro ENUMERATE is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/macros/_library/enumerate.sas.
NOTE: The macro ENUMERATE completed compilation without errors.
      127 instructions 3384 bytes.
MPRINT(BUILD_JOB):   do __p =
MPRINT(ENUMERATE):   "/general/biostat/jobs/utils/dev/programs/multi_path_pooldata.sas", "/general/biostat/jobs/gadam_rebuild_adam/dev/programs/gadam_consolidate_qc_overviews.sas"
MPRINT(BUILD_JOB):  ;
MPRINT(BUILD_JOB):   if index(__programs, quote(strip(__p))) eq 0 then __programs = catx(", ", __programs, quote(strip(__p)));
MPRINT(BUILD_JOB):   end;
MPRINT(BUILD_JOB):   do __p =
MPRINT(ENUMERATE):   "/general/biostat/macros/_library", outpath
MPRINT(BUILD_JOB):  ;
MPRINT(BUILD_JOB):   if index(__input_recursive, quote(strip(__p))) eq 0 then __input_recursive = catx(", ", __input_recursive, quote(strip(__p)));
MPRINT(BUILD_JOB):   end;
MPRINT(BUILD_JOB):   do __p =
MPRINT(ENUMERATE):   "/general/biostat/metadata/projects", generic_adam_qc_path
MPRINT(BUILD_JOB):  ;
MPRINT(BUILD_JOB):   if index(__input_folders, quote(strip(__p))) eq 0 then __input_folders = catx(", ", __input_folders, quote(strip(__p)));
MPRINT(BUILD_JOB):   end;
MPRINT(BUILD_JOB):   do __p =
MPRINT(ENUMERATE):   "../logs", "../macros", "../programs", "../output", outpath
MPRINT(BUILD_JOB):  ;
MPRINT(BUILD_JOB):   if index(__output_recursive, quote(strip(__p))) eq 0 then __output_recursive = catx(", ", __output_recursive, quote(strip(__p)));
MPRINT(BUILD_JOB):   end;
MPRINT(BUILD_JOB):   do __p =
MPRINT(ENUMERATE):   param_path , param_outpath , " ds_cond = upcase(memname) in ('OVERVIEW' 'DATAPATHS' 'GENERIC_VAR_ALL')"
MPRINT(BUILD_JOB):  ;
MPRINT(BUILD_JOB):   if index(__param_character, quote(strip(__p))) eq 0 then __param_character = catx(", ", __param_character, quote(strip(__p)));
MPRINT(BUILD_JOB):   end;
MPRINT(BUILD_JOB):   if last.__jobfile then do;
MPRINT(BUILD_JOB):   __job_version = symget('job_version');
MPRINT(BUILD_JOB):   __job_description = symget('job_description');
MPRINT(BUILD_JOB):   __job_description = prxchange('s/([''"''])$/&#xA;\1/', 1, strip(__job_description));
MPRINT(BUILD_JOB):   put '<?xml version="1.0" encoding="UTF-8"?>';
MPRINT(BUILD_JOB):   put '<!-- Job created: ' "2023-02-15T03:13:50" " By: BUILD_JOB User: jbodart  -->";
MPRINT(BUILD_JOB):   put '<job releaseVersion=' __job_version;
MPRINT(BUILD_JOB):   put '     description=' __job_description;
MPRINT(BUILD_JOB):   put '     log=' """../logs""" ' lst=' """../output""" ' mnf=' """../output""" '>';
MPRINT(BUILD_JOB):   put '  <tasks>';
MPRINT(BUILD_JOB):   do i = 1 to countw(__programs, ", ", "q");
MPRINT(BUILD_JOB):   __p = scan(__programs, i, ", ", "q");
MPRINT(BUILD_JOB):   put "     <task path=" __p " />";
MPRINT(BUILD_JOB):   end;
MPRINT(BUILD_JOB):   put '  </tasks>';
MPRINT(BUILD_JOB):   put '  <taskSpecs>';
MPRINT(BUILD_JOB):   do i = 1 to countw(__programs, ", ", "q");
MPRINT(BUILD_JOB):   __p = scan(__programs, i, ", ", "q");
MPRINT(BUILD_JOB):   put '     <inputSpec path=' __p ' type="FILE" version="*" includeSubFolders="false" />';
MPRINT(BUILD_JOB):   end;
MPRINT(BUILD_JOB):   put '  </taskSpecs>';
MPRINT(BUILD_JOB):   put '  <otherSpecs>';
MPRINT(BUILD_JOB):   do i = 1 to countw(__input_recursive, ", ", "q");
MPRINT(BUILD_JOB):   __p = scan(__input_recursive, i, ", ", "q");
MPRINT(BUILD_JOB):   put '     <inputSpec path=' __p ' type="CONTAINER" version="" includeSubFolders="true" />';
MPRINT(BUILD_JOB):   end;
MPRINT(BUILD_JOB):   do i = 1 to countw(__input_folders, ", ", "q");
MPRINT(BUILD_JOB):   __p = scan(__input_folders, i, ", ", "q");
MPRINT(BUILD_JOB):   put '     <inputSpec path=' __p ' type="CONTAINER" version="" includeSubFolders="false" />';
MPRINT(BUILD_JOB):   end;
MPRINT(BUILD_JOB):   do i = 1 to countw(__input_files, ", ", "q");
MPRINT(BUILD_JOB):   __p = scan(__input_files, i, ", ", "q");
MPRINT(BUILD_JOB):   put '     <inputSpec path=' __p ' type="FILE" version="*" />';
MPRINT(BUILD_JOB):   end;
MPRINT(BUILD_JOB):   put '  </otherSpecs>';
MPRINT(BUILD_JOB):   put '  <outputPaths>';
MPRINT(BUILD_JOB):   do i = 1 to countw(__output_recursive, ", ", "q");
MPRINT(BUILD_JOB):   __p = scan(__output_recursive, i, ", ", "q");
MPRINT(BUILD_JOB):   put '     <outputPath path=' __p ' type="CONTAINER" version="" includeSubFolders="true" />';
MPRINT(BUILD_JOB):   end;
MPRINT(BUILD_JOB):   do i = 1 to countw(__output_folders, ", ", "q");
MPRINT(BUILD_JOB):   __p = scan(__output_folders, i, ", ", "q");
MPRINT(BUILD_JOB):   put '     <outputPath path=' __p ' type="CONTAINER" version="" includeSubFolders="false" />';
MPRINT(BUILD_JOB):   end;
MPRINT(BUILD_JOB):   do i = 1 to countw(__output_files, ", ", "q");
MPRINT(BUILD_JOB):   __p = scan(__output_files, i, ", ", "q");
MPRINT(BUILD_JOB):   put '     <outputPath path=' __p ' type="FILE" version="*" />';
MPRINT(BUILD_JOB):   end;
MPRINT(BUILD_JOB):   put '  </outputPaths>';
MPRINT(BUILD_JOB):   put '  <outputSpec enableVersioningForNewFiles="false">';
MPRINT(BUILD_JOB):   put '    <versionType type="MAJOR" />';
MPRINT(BUILD_JOB):   put '  </outputSpec>';
MPRINT(BUILD_JOB):   put '  <parameters>';
MPRINT(BUILD_JOB):   do i = 1 to countw(__param_recursive, ", ", "q");
MPRINT(BUILD_JOB):   __p = scan(__param_recursive, i, ", ", "qr");
MPRINT(BUILD_JOB):   __pnam = scan(__p, 1, "=", "qr");
MPRINT(BUILD_JOB):   __pval = scan(__p, 2, "=", "qr");
MPRINT(BUILD_JOB):   if __pnam ^= " " and __pnam = dequote(__pnam) then __pnam = quote(strip(__pnam));
MPRINT(BUILD_JOB):   if __pval ^= " " and __pval = dequote(__pval) then __pval = quote(strip(__pval));
MPRINT(BUILD_JOB):   if __pval ^= " " then put '     <parameter name=' __pnam ' defaultValue=' __pval ' type="CONTAINER" version="" includeSubFolders="false" />';
MPRINT(BUILD_JOB):   else put '     <parameter name=' __pnam ' type="CONTAINER" version="" includeSubFolders="false" />';
MPRINT(BUILD_JOB):   end;
MPRINT(BUILD_JOB):   do i = 1 to countw(__param_folders, ", ", "q");
MPRINT(BUILD_JOB):   __p = scan(__param_folders, i, ", ", "qr");
MPRINT(BUILD_JOB):   __pnam = scan(__p, 1, "=", "qr");
MPRINT(BUILD_JOB):   __pval = scan(__p, 2, "=", "qr");
MPRINT(BUILD_JOB):   if __pnam ^= " " and __pnam = dequote(__pnam) then __pnam = quote(strip(__pnam));
MPRINT(BUILD_JOB):   if __pval ^= " " and __pval = dequote(__pval) then __pval = quote(strip(__pval));
MPRINT(BUILD_JOB):   if __pval ^= " " then put '     <parameter name=' __pnam ' label=' __pnam ' defaultValue=' __pval ' type="CONTAINER" version="" includeSubFolders="false" />';
MPRINT(BUILD_JOB):   else put '     <parameter name=' __pnam ' label=' __pnam ' type="CONTAINER" version="" includeSubFolders="false" />';
MPRINT(BUILD_JOB):   end;
MPRINT(BUILD_JOB):   do i = 1 to countw(__param_files, ", ", "q");
MPRINT(BUILD_JOB):   __p = scan(__param_files, i, ", ", "qr");
MPRINT(BUILD_JOB):   __pnam = scan(__p, 1, "=", "qr");
MPRINT(BUILD_JOB):   __pval = scan(__p, 2, "=", "qr");
MPRINT(BUILD_JOB):   if __pnam ^= " " and __pnam = dequote(__pnam) then __pnam = quote(strip(__pnam));
MPRINT(BUILD_JOB):   if __pval ^= " " and __pval = dequote(__pval) then __pval = quote(strip(__pval));
MPRINT(BUILD_JOB):   if __pval ^= " " then put '     <parameter name=' __pnam ' label=' __pnam ' defaultValue=' __pval ' type="CONTAINER" version="" includeSubFolders="false" />';
MPRINT(BUILD_JOB):   else put '     <parameter name=' __pnam ' label=' __pnam ' type="CONTAINER" version="" includeSubFolders="false" />';
MPRINT(BUILD_JOB):   end;
MPRINT(BUILD_JOB):   do i = 1 to countw(__param_character, ", ", "q");
MPRINT(BUILD_JOB):   __p = scan(__param_character, i, ", ", "qr");
MPRINT(BUILD_JOB):   __pnam = scan(__p, 1, "=", "qr");
MPRINT(BUILD_JOB):   __pval = scan(__p, 2, "=", "qr");
MPRINT(BUILD_JOB):   if __pnam ^= " " and __pnam = dequote(__pnam) then __pnam = quote(strip(__pnam));
MPRINT(BUILD_JOB):   if __pval ^= " " and __pval = dequote(__pval) then __pval = quote(strip(__pval));
MPRINT(BUILD_JOB):   if __pval ^= " " then put '     <parameter name=' __pnam ' label=' __pnam ' defaultValue=' __pval ' type="CHARACTER" />';
MPRINT(BUILD_JOB):   else put '     <parameter name=' __pnam ' label=' __pnam ' type="CHARACTER" />';
MPRINT(BUILD_JOB):   end;
MPRINT(BUILD_JOB):   put '  </parameters>';
MPRINT(BUILD_JOB):   put '</job>';
MPRINT(BUILD_JOB):   end;
MPRINT(BUILD_JOB):   run;

NOTE: The variable __jobfile exists on an input data set, but was also specified in an I/O statement option.  The variable will not be included on any output data set.
NOTE: The file PLHOLDER is:
      Filename=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_rebuild_adam/dev/jobs/job_gadam_qc_overviews.job,
      Owner Name=webtrust,Group Name=webtrust,
      Access Permission=-rw-rw-rw-,
      Last Modified=15Feb2023:03:13:50

NOTE: 177 records were written to the file PLHOLDER.
      The minimum record length was 6.
      The maximum record length was 165.
NOTE: There were 72 observations read from the data set WORK.__JOB.
NOTE: The data set WORK.__JOB has 72 observations and 22 variables.
NOTE: Compressing data set WORK.__JOB decreased size by 95.83 percent. 
      Compressed is 3 pages; un-compressed would require 72 pages.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.08 seconds
      

MPRINT(BUILD_JOB):   option BOMFILE;
MPRINT(LSAF_GET_LAST_SDTM):  ;
runenvironment=repository
MPRINT(LSAF_GET_LAST_SDTM):   proc sql noprint;
MPRINT(LSAF_GET_LAST_SDTM):   create table jobs as select distinct jobpath from out.gadam_qc_overviews ;
NOTE: Table WORK.JOBS created, with 1 rows and 1 columns.

MPRINT(LSAF_GET_LAST_SDTM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LSAF_GET_LAST_SDTM):   data jobs2;
MPRINT(LSAF_GET_LAST_SDTM):   set jobs;
MPRINT(LSAF_GET_LAST_SDTM):   length copy_result submit_result $200;
MPRINT(LSAF_GET_LAST_SDTM):   file print;
MPRINT(LSAF_GET_LAST_SDTM):   if symget('runenvironment') = 'local' then do;
MPRINT(LSAF_GET_LAST_SDTM):   *- copy job file to LSAF repository -*;
MPRINT(LSAF_GET_LAST_SDTM):   copy_result = runmacro('%copy_to_lsaf('||resolve(strip(jobpath))||', interactive=N); %let result = &_lsafRC_ : &_lsafMsg_;');
MPRINT(LSAF_GET_LAST_SDTM):   put / "Copy job file to lSAF repository: " / @3 jobpath= / @3 copy_result=;
MPRINT(LSAF_GET_LAST_SDTM):   *- submit job to LSAF repository without letting the user edit the parameters (params=N) -*;
MPRINT(LSAF_GET_LAST_SDTM):   submit_result = runmacro('%submit_lsaf_job('||resolve(strip(jobpath))||', wait=Y, params=N); %let result = &_lsafRC_ : &_lsafMsg_;');
MPRINT(LSAF_GET_LAST_SDTM):   put "Submit job file: " / @3 jobpath= / @3 submit_result=;
MPRINT(LSAF_GET_LAST_SDTM):   end;
MPRINT(LSAF_GET_LAST_SDTM):   else do;
MPRINT(LSAF_GET_LAST_SDTM):   copy_result = "Copy (i.e. upload) not performed in runenvironment: "||symget("runenvironment");
MPRINT(LSAF_GET_LAST_SDTM):   submit_result = "In runenvironment: "||symget("runenvironment")||', a job cannot be executed in the session where it was created.';
MPRINT(LSAF_GET_LAST_SDTM):   end;
MPRINT(LSAF_GET_LAST_SDTM):   run;

NOTE: 0 lines were written to file PRINT.
NOTE: There were 1 observations read from the data set WORK.JOBS.
NOTE: The data set WORK.JOBS2 has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MAUTOCOMPLOC:  The autocall macro SCAN_CUR_LOG is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/macros/global_macros/scan_cur_log.sas.
NOTE: The macro SCAN_CUR_LOG completed compilation without errors.
      953 instructions 38400 bytes.
MPRINT(SCAN_CUR_LOG):   ;
MAUTOCOMPLOC:  The autocall macro GET_CUR_PGM is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/macros/global_macros/get_cur_pgm.sas.
NOTE: The macro GET_CUR_PGM completed compilation without errors.
      334 instructions 9032 bytes.
MPRINT(SCAN_CUR_LOG):  ;
MPRINT(SCAN_CUR_LOG):   proc sql noprint;
MPRINT(SCAN_CUR_LOG):   create table extfl as select *, abs(datetime() - modate) as diffdate format=time12.3 from dictionary.extfiles where prxmatch('/\w+\.log$/i', trim(left(xpath)))>0 and 
abs(datetime() - modate) < 1000 order by diffdate, xpath ;
NOTE: Table WORK.EXTFL created, with 0 rows and 10 columns.

MPRINT(SCAN_CUR_LOG):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SCAN_CUR_LOG):   data _null_;
MPRINT(SCAN_CUR_LOG):   set extfl(obs=1);
MPRINT(SCAN_CUR_LOG):   put fileref= xpath= modate= filesize= diffdate= time.;
MPRINT(SCAN_CUR_LOG):   call symput('log', cats(xpath));
MPRINT(SCAN_CUR_LOG):   run;

NOTE: There were 0 observations read from the data set WORK.EXTFL.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Warning:(SCAN_CUR_LOG): Could not identify SAS Log, aborting.
MPRINT(LSAF_GET_LAST_SDTM):  ;
MPRINT(LSAF_GET_LAST_SDTM):   ods graphics off;
MPRINT(LSAF_GET_LAST_SDTM):   ods html5(htmplot) close;
MPRINT(LSAF_GET_LAST_SDTM):   ods listing;
2483       
2484       
2485       %*--------------------------------------------------------------------------------------------*;
2486       
2487       
2488       %if %superq(runenvironment) = repository or &debug=0 %then %do;
2489          %*- scan redirected log -*;
2490          %scan_cur_log;
MPRINT(SCAN_CUR_LOG):   ;
MPRINT(SCAN_CUR_LOG):  ;
MPRINT(SCAN_CUR_LOG):   proc sql noprint;
MPRINT(SCAN_CUR_LOG):   create table extfl as select *, abs(datetime() - modate) as diffdate format=time12.3 from dictionary.extfiles where prxmatch('/\w+\.log$/i', trim(left(xpath)))>0 and 
abs(datetime() - modate) < 1000 order by diffdate, xpath ;
NOTE: Table WORK.EXTFL created, with 0 rows and 10 columns.

MPRINT(SCAN_CUR_LOG):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SCAN_CUR_LOG):   data _null_;
MPRINT(SCAN_CUR_LOG):   set extfl(obs=1);
MPRINT(SCAN_CUR_LOG):   put fileref= xpath= modate= filesize= diffdate= time.;
MPRINT(SCAN_CUR_LOG):   call symput('log', cats(xpath));
MPRINT(SCAN_CUR_LOG):   run;

NOTE: There were 0 observations read from the data set WORK.EXTFL.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Warning:(SCAN_CUR_LOG): Could not identify SAS Log, aborting.
2491       
2492          proc printto log=log;
2493          run;

NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2494       %end;
2495       
2496       
2497       %*- scan current log -*;
2498       %scan_cur_log;
MPRINT(SCAN_CUR_LOG):   ;
MPRINT(SCAN_CUR_LOG):  ;
MPRINT(SCAN_CUR_LOG):   proc sql noprint;
MPRINT(SCAN_CUR_LOG):   create table extfl as select *, abs(datetime() - modate) as diffdate format=time12.3 from dictionary.extfiles where prxmatch('/\w+\.log$/i', trim(left(xpath)))>0 and 
abs(datetime() - modate) < 1000 order by diffdate, xpath ;
NOTE: Table WORK.EXTFL created, with 0 rows and 10 columns.

MPRINT(SCAN_CUR_LOG):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SCAN_CUR_LOG):   data _null_;
MPRINT(SCAN_CUR_LOG):   set extfl(obs=1);
MPRINT(SCAN_CUR_LOG):   put fileref= xpath= modate= filesize= diffdate= time.;
MPRINT(SCAN_CUR_LOG):   call symput('log', cats(xpath));
MPRINT(SCAN_CUR_LOG):   run;

NOTE: There were 0 observations read from the data set WORK.EXTFL.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Warning:(SCAN_CUR_LOG): Could not identify SAS Log, aborting.
2499       
2500       
2501       option mprintnest MAUTOLOCDISPLAY;
2502       %programend;
MAUTOCOMPLOC:  The autocall macro PROGRAMEND is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/macros/_library/programend.sas.
NOTE: The macro PROGRAMEND completed compilation without errors.
      1073 instructions 60592 bytes.
MAUTOLOCDISPLAY(PROGRAMEND):  This macro was compiled from the autocall file 
                              /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/macros/_library/programend.sas
MPRINT(PROGRAMEND):   ;
MPRINT(PROGRAMEND):  *';
MPRINT(PROGRAMEND):  *";
MPRINT(PROGRAMEND):  */;
MPRINT(PROGRAMEND):  *);
MPRINT(PROGRAMEND):  run;
MPRINT(PROGRAMEND):  quit;
MPRINT(PROGRAMEND):  ;
MPRINT(PROGRAMEND):   option nosyntaxcheck obs=max;
MPRINT(PROGRAMEND):   option LS=180 PS=60;
The SAS System

MPRINT(PROGRAMEND):   option VALIDVARNAME=V7;
MAUTOLOCDISPLAY(DIREXIST):  This macro was compiled from the autocall file 
                            /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/macros/_library/direxist.sas
Attempting to assign LIBNAME __parwrk to /saswork/sas_tmp/SAS_work89DD00193DB6_xar08auv.vsp.sas.com/SAS_work944F00193DB6_xar08auv.vsp.sas.com: RC=0
_PARENTJOB_WRK_=/saswork/sas_tmp/SAS_work89DD00193DB6_xar08auv.vsp.sas.com/SAS_work944F00193DB6_xar08auv.vsp.sas.com PARWRK_LIBREF_ASSIGNED=1

Notice: === (PROGRAMEND): Starting, 2023-02-15T03:13:50.20 - SYSMEXECDEPTH: 1 - DEBUG: 1 ===
Notice: === (PROGRAMEND): OUTPUTFILENAME=none ===
MAUTOCOMPLOC:  The autocall macro ODSDEST is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/macros/global_macro
            s/odsdest.sas.
NOTE: The macro ODSDEST completed compilation without errors.
      853 instructions 25184 bytes.
MAUTOLOCDISPLAY(ODSDEST):  This macro was compiled from the autocall file 
                           /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/macr
                           os/global_macros/odsdest.sas
Notice: === (PROGRAMEND): ODS LISTING is now OPEN. ===
Notice: === (PROGRAMEND): SYSPRINTTOLIST= ===
Notice: === (PROGRAMEND): SYSPRINTTOLOG= ===
MPRINT(PROGRAMEND):   ods listing;
MAUTOLOCDISPLAY(ODSDEST):  This macro was compiled from the autocall file 
                           /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/macr
                           os/global_macros/odsdest.sas
Notice: === (PROGRAMEND): ODS LISTING is now OPEN. ===
MAUTOLOCDISPLAY(ODSDEST):  This macro was compiled from the autocall file 
                           /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-100da6dd-ea9e-45d3-9dc8-1560978c2d15/general/biostat/jobs/gadam_ongoing_studies/prod/macr
                           os/global_macros/odsdest.sas
Current LISTING select list is set to default value (ALL).
Current OVERALL select list is: ALL
MPRINT(PROGRAMEND.ODSDEST):   ODS LISTING show ;
MPRINT(PROGRAMEND):   ;
MPRINT(PROGRAMEND):   ods rtf close;
MPRINT(PROGRAMEND):   ods pdf close;
MPRINT(PROGRAMEND):   proc printto print=print;
MPRINT(PROGRAMEND):   run;
NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(PROGRAMEND):   footnote;
MPRINT(PROGRAMEND):   *- resetting the footnotes so they do not appear in the Synopsis of Program Execution -*;
MPRINT(PROGRAMEND):   *- For Tables and Listings, systematically generate a TXT and a PDF file -*;
MPRINT(PROGRAMEND):   option nomautolocdisplay;
MPRINT(PROGRAMEND):   option nosyntaxcheck obs=max;
DEBUG=1 RUNENVIRONMENT=repository
MPRINT(PROGRAMEND):   proc printto log=log;
MPRINT(PROGRAMEND):   run;

NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

DEBUG=1 RUNENVIRONMENT=repository
fileref(logf) = 20004
(PROGRAMEND): SYSMEXECDEPTH =1
_PARENTJOB_WRK_=/saswork/sas_tmp/SAS_work89DD00193DB6_xar08auv.vsp.sas.com/SAS_work944F00193DB6_xar08auv.vsp.sas.com PARWRK_LIBREF_ASSIGNED=1
The SAS System

MPRINT(PROGRAMEND):   *- Process Job Messages Tracker data from child jobs (if any) -*;
MPRINT(PROGRAMEND):   *- Save Job Messages Tracker data to Library OUT if defined -*;
WEEKDAY=4
TRACKER=out.jobtrackfa6f8cf6_d4 NEW_TRACKER=1 OUT_LIBREF_ASSIGNED=1
MPRINT(PROGRAMEND):   *- close active ods HTML destinations -*;
MPRINT(PROGRAMEND):   ;
MPRINT(PROGRAMEND):   *- launch dashboard job -*;
RELREPEVPATH=/general/biostat/jobs/gadam_ongoing_studies/prod
MPRINT(PROGRAMEND):   data _null_;
MPRINT(PROGRAMEND):   runinclinical = max(index("/general/biostat/jobs/gadam_ongoing_studies/prod", "/clinical/"), index("/general/biostat/jobs/gadam_ongoing_studies/prod", 
"\clinical\"));
MPRINT(PROGRAMEND):   call symputx("_runinclinical", strip(put(runinclinical, 8.)));
MPRINT(PROGRAMEND):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

_RUNINCLINICAL=0

Notice: === (PROGRAMEND): Done, 2023-02-15T03:13:50.22 - SYSMEXECDEPTH: 1 - DEBUG: 1 ===
2503       option nomprintnest noMAUTOLOCDISPLAY;
2504       
2505       
2506       
2507       
2508       ;*';*";*/;*); run; quit;
2509       proc scaproc; write; run;

NOTE: PROCEDURE SCAPROC used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2510       options nonotes;
2511       

/**********************************************************************************************************************
 * Submission End: lsaf_get_last_sdtm.sas
 * Feb 15, 2023 03:13:50 GMT
 *********************************************************************************************************************/
