1                                                          The SAS System                   Wednesday, February 15, 2023 06:22:00 AM

NOTE: Copyright (c) 2016 by SAS Institute Inc., Cary, NC, USA. 
NOTE: SAS (r) Proprietary Software 9.4 (TS1M7 MBCS3170) 
      Licensed to ARGENX VIA OCS CONSULTING_SAS LSAF_SAAS, Site 70265777.
NOTE: This session is executing on the Linux 4.18.0-305.19.1.el8_4.x86_64 (LIN X64) platform.



NOTE: Analytical products:
      
      SAS/STAT 15.2
      SAS/IML 15.2

NOTE: Additional host information:

 Linux LIN X64 4.18.0-305.19.1.el8_4.x86_64 #1 SMP Tue Sep 7 07:07:31 EDT 2021 x86_64 Red Hat Enterprise Linux release 8.4 (Ootpa) 

You are running SAS 9. Some SAS 8 files will be automatically converted 
by the V9 engine; others are incompatible.  Please see 
http://support.sas.com/rnd/migration/planning/platform/64bit.html

PROC MIGRATE will preserve current SAS file attributes and is 
recommended for converting all your SAS libraries from any 
SAS 8 release to SAS 9.  For details and examples, please see
http://support.sas.com/rnd/migration/index.html


This message is contained in the SAS news file, and is presented upon
initialization.  Edit the file "news" in the "misc/base" directory to
display site-specific news and information in the program log.
The command line option "-nonews" will prevent this display.




NOTE: SAS Initialization used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      
NOTE: The autoexec file, /sso/biconfig/940/Lev1/LSAFApp/WorkspaceServer/autoexec.sas, was executed at server initialization.
1          options nofmterr;
2          options dtreset;
3          options locale=EN_US;
4          %let _SDDUSR_=%bquote(jbodart);
5          %let _SASWS_ =
5        ! %nrstr("/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222");
6          %let _SASWS_ = %qsubstr(&_SASWS_, 2, %length(&_SASWS_) - 2);
7          %let _SASUSRWS_ =
7        ! %nrstr("/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/Users/jbodar
7        ! t");
8          %let _SASUSRWS_ = %qsubstr(&_SASUSRWS_, 2, %length(&_SASUSRWS_) - 2);
9          %let _SASINSTANCE_ = %nrstr("xarprod.ondemand.sas.com");
10         %let _SASINSTANCE_ = %qsubstr(&_SASINSTANCE_, 2, %length(&_SASINSTANCE_) - 2);
11         options nosource;

NOTE: DATA statement used (Total process time):
      real time           1.02 seconds
      cpu time            0.01 seconds
      
2                                                          The SAS System                   Wednesday, February 15, 2023 06:22:30 AM


18         

/**********************************************************************************************************************
 * Submission Start: gadam_rebuild_adam.sas
 * Feb 15, 2023 06:22:33 GMT by jbodart
 *********************************************************************************************************************/
3                                                          The SAS System                   Wednesday, February 15, 2023 06:22:33 AM

19         options nosyntaxcheck errorcheck=strict notes;
20         ;*';*";*/;*); run; quit;
21         
22         %let _SASFILELOCATION_ = %nrstr("/general/biostat/jobs/gadam_rebuild_adam/prod/programs");
23         %let _SASFILELOCATION_ = %qsubstr(&_SASFILELOCATION_, 2, %length(&_SASFILELOCATION_) - 2);
24         %let _SASFILEPATH_ = %nrstr("/general/biostat/jobs/gadam_rebuild_adam/prod/programs/gadam_rebuild_adam.sas");
25         %let _SASFILEPATH_ = %qsubstr(&_SASFILEPATH_, 2, %length(&_SASFILEPATH_) - 2);
26         
27         /********************************************************************************************************************/
28         proc scaproc; record "&_SASWS_/.sessions/3/sca_787ad76f-9915-4352-a350-df4a5e6867c8.txt" EXPANDMACROS; run;

NOTE: PROCEDURE SCAPROC used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

29         
30         options nomprint;
31         /********************************************************************************************************************/
32         /* Macro Variables for Job Parameters */
33         %let gadam_study_path=&_SASWS_/clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam;
34         %let sdtm_last_path=&_SASWS_/clinical/argx-113/hv/argx-113-z005/biostat/staging/data_received/sdtm_last;
35         %let qc_gadam_vs_study=Y;
36         %let check_and_load_gadam=Y;
37         %let run_gadam_tables=Y;
38         %let wait=Y;
39         %let force=N;
40         %let mock=N;
41         %let job_instance=Ngos113Prod_4_x0_55;
42         %let _PARENTJOB_WS_=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-d0b7cbe4-ac49-43bf-889b-90a3d8853c70;
43         %let _PARENTJOB_WRK_=/saswork/sas_tmp/SAS_work60810017E407_xar08auv.vsp.sas.com/SAS_work41A00017E407_xar08auv.vsp.sas.com
43       ! ;
44         %let USE_SAS_WORKSPACE_MACROS=;
45         
46         /********************************************************************************************************************/
47         
48         /************************************************************************************************************************
48       ! *******************
49         @file
50         @brief      Generate ADaM datasets and tables
51         @details    In a given study generic_adam folder, run all adam-creating jobs, first adsl.job
52                     then all other ad*.job
53                     then optionally check and load the adam datasets from ../adam/tmp to ../adam
54                     then optionally run all table-creating jobs
55         
56         @author     jbodart
57         @date       2022-01-06
58         @note       Project : generic_adam
59         
60         #### Update History ####
61         
62             Date             Name                        Description
63             ------------     --------------------------
63       ! -------------------------------------------------------------------------------------------
64             2022-01-10       jbodart                     Add option to check and load the new datasets
65             2022-01-21       jbodart                     Add parameters FORCE and MOCK
66                                                          Only run jobs with missing or out-of-date outputs, unless FORCE=Y
67                                                          If MOCK='Y' only record the commands that would have been executed.
4                                                          The SAS System                   Wednesday, February 15, 2023 06:22:33 AM

68             2022-01-26       jbodart                     Refactor to avoid repeated code
69                                                          Also check job dates to determine if output is up-to-date
70                                                          Implement condition &run_gadam_tables = Y
71             2022-02-02       pschrauben                  Add sdtm_last_modate and adamtmp_last_modate variables in
71       ! out.run_ad_jobs
72                                                          If job_adsl does not exist then out.run_ad_jobs created with 1 record
72       ! and result='Skipped
73                                                          as no job_adsl
74                                                          If run_gadam_tables ne Y then out.run_table_jobs created with
74       ! result='Skipped Table Job'
75                                                          since &run_gadam_tables=...' when need_update variable=1
76             2022-02-12       jbodart                     Allow to force table update even if no adam needed update.
77             2022-02-27       jbodart                     Write ER-ROR or WAR-NING message to the log when a child job has
77       ! corresponding status.
78             2022-03-07       jbodart                     Optionally qc generic_adam vs study datasets (if job parameter
78       ! qc_gadam_vs_study = Y).
79             2022-04-22       jbodart                     Need to run ADAPER prior to ADAE.
80             2022-05-13       jbodart                     Make sure paths (&gadam_study_path and &sdtm_last_path) start with
80       ! &_SASWS_.
81             2022-06-02       jbodart                     In macro %get_lsaf_children, check LSAF Parent Path exists before
81       ! attempting to
82                                                          retrieve children.
83             2022-07-01       jbodart                     Variable formattedSize added to %lsaf_getchildren output dataset must be
83       !  added
84                                                          to BASE dataset for proc append to work.
85             2022-07-04       jbodart                     Report issues from child job submission status based on either LSAF 5.2
85       ! or LSAF 5.4 format.
86                                                          Avoid issues with empty dataset (and REPEMETA.TYPE of numeric type)
87             2022-07-06       jbodart                     Submit separate Study-level job if available, in order to keep
87       ! individual study logs.
88                                                          This requires re-defining &sdtm_last_path (to remove the leading
88       ! &_SASWS_ part).
89             2022-07-22       pschrauben                  correct &need_update
90             2022-08-23       jbodart                     Enable versioning of job_gadam_rebuild_adam.job log and manifest, for
90       ! subsequent review
91                                                          & investigations
92                                                          Enable versioning only if item is not yet versioned.
93             2022-08-25       jbodart                     Replace proc append with data step to avoid issues with variables not in
93       !  common.
94             2022-09-07       jbodart                     Rename main macro 'test' as 'gadam_rebuild_adam'.
95             2022-09-08       jbodart                     Use %submit_job with parent_job_instance = &job_instance.
96             2022-09-16       jbodart                     Add final %programend statement.
97             2022-11-16       jbodart                     Submit separate Study-level job if found in LSAF repository (even if not
97       !  available in transient folder),
98                                                          in order to keep individual study logs.
99             2022-12-01       jbodart                     Add global macro-variable for parameter WAIT.
100        @cond
101        *************************************************************************************************************************
101      ! ******************/
102        
103        %setenv(ini=0);
MPRINT(SETENV):   source source2 nofmterr notes spool nodate nonumber MAUTOCOMPLOC NOMAUTOLOCDISPLAY;
MPRINT(SETENV):   * in case run in batch;
(SETENV): _SASFILEPATH_ = /general/biostat/jobs/gadam_rebuild_adam/prod/programs/gadam_rebuild_adam.sas
(SETENV): path1 = /general/biostat/jobs/gadam_rebuild_adam/prod/programs/gadam_rebuild_adam.sas
(SETENV): _sasws_ = /lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222
(SETENV): runenvironment = repository
MPRINT(SETENV):   *libname projmeta "&projectsmetapath" access=readonly;
                                                           The SAS System

MPRINT(SETENV):   data gen_setenv(keep=fname ver maxver);
MPRINT(SETENV):   length fref $8 dirname fname $400;
MPRINT(SETENV):   direxists = 0;
MPRINT(SETENV):   found = 0;
MPRINT(SETENV):   maxver = .;
MPRINT(SETENV):   
dirname="/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros
/_library";
MPRINT(SETENV):   rc=filename(fref, dirname);
MPRINT(SETENV):   did=dopen(fref);
MPRINT(SETENV):   if did > 0 then do;
MPRINT(SETENV):   direxists=1;
MPRINT(SETENV):   memcount=dnum(did);
MPRINT(SETENV):   do i = 1 to memcount;
MPRINT(SETENV):   fname=dread(did, i);
MPRINT(SETENV):   if prxmatch('/^setenv\d+\.sas$/', cats(fname)) then do;
MPRINT(SETENV):   found+1;
MPRINT(SETENV):   ver = input(prxchange('s/^setenv(\d+)\.sas$/\1/', 1, cats(fname)), best32.);
MPRINT(SETENV):   if ver > maxver then maxver = ver;
MPRINT(SETENV):   put "(SETENV):" found= fname= ver= rc= did= fref= dirname=;
MPRINT(SETENV):   output;
MPRINT(SETENV):   end;
MPRINT(SETENV):   *put "(&sysmacroname):" found= fname= ver= rc= did= fref= dirname=;
MPRINT(SETENV):   end;
MPRINT(SETENV):   rc=dclose(did);
MPRINT(SETENV):   end;
MPRINT(SETENV):   else do;
MPRINT(SETENV):   msg = put(sysmsg(), $400.);
MPRINT(SETENV):   put "Failed to open directory: " rc= did= fref= dirname= "sysmsg=" msg;
MPRINT(SETENV):   end;
MPRINT(SETENV):   rc=filename(fref);
MPRINT(SETENV):   run;

(SETENV):found=1 fname=setenv01.sas ver=1 rc=0 did=1 fref=#LN00016
dirname=/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/
_library
(SETENV):found=2 fname=setenv02.sas ver=2 rc=0 did=1 fref=#LN00016
dirname=/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/
_library
NOTE: The data set WORK.GEN_SETENV has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.02 seconds
      

MPRINT(SETENV):   proc sql noprint;
MPRINT(SETENV):   select fname into :gen_setenv trimmed from gen_setenv having ver = max(ver) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(SETENV):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

gen_setenv = setenv02.sas
MPRINT(SETENV):   data repev_setenv(keep=fname ver maxver);
MPRINT(SETENV):   length fref frefsrc $8 setenv $32 d dirname fname msg $400;
MPRINT(SETENV):   direxists = 0;
                                                           The SAS System

MPRINT(SETENV):   found = 0;
MPRINT(SETENV):   maxver = .;
MPRINT(SETENV):   do 
d="/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/jobs/gadam_r
ebuild_adam/prod/macros/global_macros", 
"/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/jobs/gadam_reb
uild_adam/prod/macros/global-macros" while(direxists=0);
MPRINT(SETENV):   put d=;
MPRINT(SETENV):   rc=filename(fref, d);
MPRINT(SETENV):   did=dopen(fref);
MPRINT(SETENV):   if did > 0 then do;
MPRINT(SETENV):   direxists=1;
MPRINT(SETENV):   dirname=d;
MPRINT(SETENV):   memcount=dnum(did);
MPRINT(SETENV):   do i = 1 to memcount;
MPRINT(SETENV):   fname=dread(did, i);
MPRINT(SETENV):   if prxmatch('/^setenv\d+\.sas$/', cats(fname)) then do;
MPRINT(SETENV):   found+1;
MPRINT(SETENV):   ver = input(prxchange('s/^setenv(\d+)\.sas$/\1/', 1, cats(fname)), best32.);
MPRINT(SETENV):   if ver > maxver then do;
MPRINT(SETENV):   maxver = ver;
MPRINT(SETENV):   setenv = fname;
MPRINT(SETENV):   end;
MPRINT(SETENV):   put "(SETENV):" found= fname= ver= rc= did= fref= dirname=;
MPRINT(SETENV):   output;
MPRINT(SETENV):   end;
MPRINT(SETENV):   *put "(&sysmacroname):" found= fname= ver= rc= did= fref= dirname=;
MPRINT(SETENV):   end;
MPRINT(SETENV):   rc=dclose(did);
MPRINT(SETENV):   end;
MPRINT(SETENV):   else do;
MPRINT(SETENV):   put "Failed to open directory: " rc= did= fref= dirname=;
MPRINT(SETENV):   end;
MPRINT(SETENV):   rc=filename(fref);
MPRINT(SETENV):   end;
MPRINT(SETENV):   if direxists=0 then do;
MPRINT(SETENV):   *- JMBodart 2021-10-13 - create macros folder if it does not exist (START) -*;
MPRINT(SETENV):   rc=filename(fref, 
"/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/jobs/gadam_reb
uild_adam/prod/macros");
MPRINT(SETENV):   did=dopen(fref);
MPRINT(SETENV):   if did > 0 then do;
MPRINT(SETENV):   rc=dclose(did);
MPRINT(SETENV):   end;
MPRINT(SETENV):   else do;
MPRINT(SETENV):   dirname = dcreate("macros", 
"/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/jobs/gadam_reb
uild_adam/prod/");
MPRINT(SETENV):   dirname = ' ';
MPRINT(SETENV):   end;
MPRINT(SETENV):   rc=filename(fref);
MPRINT(SETENV):   *- JMBodart 2021-10-13 - create macros folder if it does not exist (END) -*;
MPRINT(SETENV):   dirname=dcreate("global_macros", 
"/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/jobs/gadam_reb
uild_adam/prod/macros");
MPRINT(SETENV):   if dirname ^= ' ' then do;
MPRINT(SETENV):   rc=filename(fref, dirname);
MPRINT(SETENV):   did=dopen(fref);
                                                           The SAS System

MPRINT(SETENV):   if did > 0 then do;
MPRINT(SETENV):   direxists=1;
MPRINT(SETENV):   rc=dclose(did);
MPRINT(SETENV):   end;
MPRINT(SETENV):   rc=filename(fref);
MPRINT(SETENV):   end;
MPRINT(SETENV):   end;
MPRINT(SETENV):   put dirname= direxists=;
MPRINT(SETENV):   if direxists then do;
MPRINT(SETENV):   call execute("option insert=(sasautos="||quote(cats(dirname))||");");
MPRINT(SETENV):   if found = 0 then do;
MPRINT(SETENV):   cumrc = 0;
MPRINT(SETENV):   rc=filename(frefsrc, 
"/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_librar
y/setenv02.sas");
MPRINT(SETENV):   if rc ne 0 then do;
MPRINT(SETENV):   msg = sysmsg();
MPRINT(SETENV):   put msg;
MPRINT(SETENV):   cumrc=rc;
MPRINT(SETENV):   end;
MPRINT(SETENV):   rc=filename(fref, cats(dirname, "/setenv02.sas"));
MPRINT(SETENV):   if rc ne 0 then do;
MPRINT(SETENV):   msg = sysmsg();
MPRINT(SETENV):   put msg;
MPRINT(SETENV):   cumrc=rc;
MPRINT(SETENV):   end;
MPRINT(SETENV):   if cumrc = 0 then do;
MPRINT(SETENV):   put "Copying  
""/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_libra
ry/setenv02.sas"" to" dirname $quote. ;
MPRINT(SETENV):   rc = fcopy(frefsrc, fref);
MPRINT(SETENV):   if rc ne 0 then do;
MPRINT(SETENV):   put "Failed.";
MPRINT(SETENV):   msg = sysmsg();
MPRINT(SETENV):   put msg;
MPRINT(SETENV):   cumrc=rc;
MPRINT(SETENV):   end;
MPRINT(SETENV):   else put "Success.";
MPRINT(SETENV):   end;
MPRINT(SETENV):   rc=filename(frefsrc);
MPRINT(SETENV):   rc=filename(fref);
MPRINT(SETENV):   if cumrc = 0 then setenv = "setenv02.sas";
MPRINT(SETENV):   end;
MPRINT(SETENV):   end;
MPRINT(SETENV):   call symput("setenv", cats(setenv));
MPRINT(SETENV):   put setenv=;
MPRINT(SETENV):   run;

d=/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/jobs/gadam_re
build_adam/prod/macros/global_macros
(SETENV):found=1 fname=setenv02.sas ver=2 rc=0 did=1 fref=#LN00017
dirname=/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/jobs/ga
dam_rebuild_adam/prod/macros/global_macros
dirname=/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/jobs/ga
dam_rebuild_adam/prod/macros/global_macros direxists=1
MPRINT(SETENV):   option 
insert=(sasautos="/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biost
at/jobs/gadam_rebuild_adam/prod/macros/global_macros");
                                                           The SAS System

setenv=setenv02.sas
NOTE: The data set WORK.REPEV_SETENV has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: CALL EXECUTE generated line.
1         + option 
insert=(sasautos="/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biost
at/jobs/gadam_rebuild_adam/prod/macros/global_macros");
setenv=setenv02.sas
(SETENV): Calling %setenv02(ini=0, tabno=, default_debug=1)
MAUTOCOMPLOC:  The autocall macro SETENV02 is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/job
            s/gadam_rebuild_adam/prod/macros/global_macros/setenv02.sas.
MPRINT(SETENV.SETENV02):   options mprint nofmterr spool nodate nonumber MAUTOCOMPLOC NOMAUTOLOCDISPLAY;
MPRINT(SETENV.SETENV02):   *- Clean previously compiled macros from WORK.SASMAC* -*;
MPRINT(SETENV.SETENV02):   data _NULL_;
MPRINT(SETENV.SETENV02):   length save $500;
MPRINT(SETENV.SETENV02):   retain save;
MPRINT(SETENV.SETENV02):   set sashelp.vcatalg(where=(libname="WORK" and memname=:'SASMAC' and objtype="MACRO")) end=last;
MPRINT(SETENV.SETENV02):   by memname notsorted;
MPRINT(SETENV.SETENV02):   if first.memname then do;
MPRINT(SETENV.SETENV02):   if index(" "||save, " "||strip(memname)||".") eq 0 then save = catx(" ", save, 
strip(memname)||"."||objname);
MPRINT(SETENV.SETENV02):   end;
MPRINT(SETENV.SETENV02):   if last;
MPRINT(SETENV.SETENV02):   call symputx('save_macr', save);
MPRINT(SETENV.SETENV02):   run;

NOTE: There were 2 observations read from the data set SASHELP.VCATALG.
      WHERE (libname='WORK') and (memname=:'SASMAC') and (objtype='MACRO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

save_macr = SASMAC1.SETENV
MPRINT(SETENV.SETENV02):   proc catalog catalog=work.SASMAC1 force;
MPRINT(SETENV.SETENV02):   *save &sysmacroname /et=macro;
MPRINT(SETENV.SETENV02):   save SETENV SETENV02 /et=macro;
MPRINT(SETENV.SETENV02):   run;

NOTE: Saving entry SETENV.MACRO in catalog WORK.SASMAC1.
NOTE: Saving entry SETENV02.MACRO in catalog WORK.SASMAC1.
MPRINT(SETENV.SETENV02):   quit;

NOTE: PROCEDURE CATALOG used (Total process time):
      real time           0.01 seconds
      cpu time            0.02 seconds
      

MPRINT(SETENV.SETENV02):   *- Clear filenames and delete previous scaprocrecord.txt (J-M Bodart 2021-03-25) -*;
MPRINT(SETENV.SETENV02):   filename _all_ clear;
MPRINT(SETENV.SETENV02):   * in case run in batch;
(SETENV02): _SASFILEPATH_ = /general/biostat/jobs/gadam_rebuild_adam/prod/programs/gadam_rebuild_adam.sas
(SETENV02): path1 = /general/biostat/jobs/gadam_rebuild_adam/prod/programs/gadam_rebuild_adam.sas
                                                           The SAS System

(SETENV02): _sasws_ = /lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222
(SETENV02): runenvironment = repository
MPRINT(SETENV.SETENV02):   libname projmeta 
"/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/metadata/proje
cts/" access=readonly;
NOTE: Libref PROJMETA was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: 
      /lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/metadata/
      projects
runenvironment=repository
progpath=/general/biostat/jobs/gadam_rebuild_adam/prod/programs/
repevpath=/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/jobs/
gadam_rebuild_adam/prod/
relrepevpath=/general/biostat/jobs/gadam_rebuild_adam/prod/
progname=gadam_rebuild_adam.sas
pgmname=gadam_rebuild_adam
general=/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/
debug=1
compound=biostat
indication=jobs
study=gadam_rebuild_adam
revent=
NOTE: %INCLUDE (level 1) file 
      /lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_l
      ibrary/setsasautos.sas is file 
      /lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_l
      ibrary/setsasautos.sas.
104       +/**
105       +@file
106       +@author     Martijn Busselen
107       +@date       2020-11-23
108       +@brief      set the macro sasautos so it uses first the maros defined on reporting event level and secondly those from
108      !+the global level
109       +
110       +@pre        Need to run %setenv
111       +
112       +#### Update History ####
113       +
114       +      Date           Name                       Description
115       +      ------------   ------------------------
115      !+-----------------------------------------------------------------------------
116       +      2021-07-21     S Shipp                    Update for global_macros folder.
117       +      2022-02-27     J-M Bodart                 Include /general/gadam/_library when last level of &repevpath =
117      !+generic_adam.
118       +      2022-03-01     J-M Bodart                 Add \ as delimiter in %scan(&repevpath, -1, /\) as it is not part of
118      !+default delimiters
119       +                                                (needed when run locally on Windows).
120       +      2022-06-30     J-M Bodart                 Add gsdtm/_library.
121       +      2022-12-07     J-M Bodart                 Add user workspace macros to SASAUTOS for development purposes, if
121      !+applicable.
122       +      2022-12-08     J-M Bodart                 Increase l3 size to avoid truncations.
123       +                                                Only add workspace macros to SASAUTOS if environment variable
123      !+USE_SAS_WORKSPACE_MACROS
124       +                                                is defined as Y, or global macro-variable &USE_SAS_WORKSPACE_MACROS=Y.
125       +      2022-12-11     J-M Bodart                 Fix regex !^/general/biostat/jobs/(gadam|gsdtm)_\w+/dev(/|$)!.
126       +      2023-02-09     J-M Bodart                 Issue a Notice: (instead of War-ning:) message when adding WORKSPACE
126      !+paths to SASAUTOS
                                                           The SAS System

127       +                                                for development purposes.
128       +
129       +
130       +#### Examples ####
131       +@code
132       +   option mautosource mcompilenote=all;
133       +   %setSasAutos();
134       +@endcode
135       +**/
136       +
137       +%macro setSasAutos();
138       +   %local firstset last3 nb_dirs user_workspace_macros;
139       +   %let firstset = 1;
140       +   %if %symexist(runenvironment)=0 %then %local runenvironment;
141       +
142       +   %*- Determine if WORKSPACE macros should be used (in case available) -*;
143       +   %if %symexist(USE_SAS_WORKSPACE_MACROS)=0 %then %do;
144       +      %global USE_SAS_WORKSPACE_MACROS;
145       +   %end;
146       +   %if %sysfunc(sysexist(USE_SAS_WORKSPACE_MACROS)) %then %do;
147       +      %let USE_SAS_WORKSPACE_MACROS = %sysget(USE_SAS_WORKSPACE_MACROS);
148       +   %end;
149       +   %if %sysfunc(sysexist(USE_SAS_WORKSPACE_MACROS))=0 and %qsysfunc(upcase(%superq(USE_SAS_WORKSPACE_MACROS)), $1.)=Y
149      !+%then %do;
150       +      *- Set environment variable -*;
151       +      option set=USE_SAS_WORKSPACE_MACROS "Y";  /*- to unset environment variable use: option
151      !+set=USE_SAS_WORKSPACE_MACROS ""; -*/
152       +   %end;
153       +   %put &=USE_SAS_WORKSPACE_MACROS;
154       +   %put %str(Not)ice: Environment variable USE_SAS_WORKSPACE_MACROS is
154      !+%sysfunc(ifc(%sysfunc(sysexist(USE_SAS_WORKSPACE_MACROS)), DEFINED, NOT DEFINED)).;
155       +
156       +   /*in LSAF there are 3 default directories in sasautos and these need to be kept*/
157       +   %if &runenvironment=repository or &runenvironment=workspace %then %do;
158       +      data _null_;
159       +         length a b c dirs l3 $4000;  /*- jbodart - 2022-12-08 - increase l3 size to avoid truncations -*/
160       +         a= strip(getoption("sasautos"));
161       +         put a=;
162       +         len = length(a);
163       +         nobrack = substr(a,2,len-2);
164       +         b = tranwrd(nobrack,'"',"");
165       +         c = compbl(strip(tranwrd(b,"'","")));
166       +         e = countw(c," ");
167       +         call symputx("nb_dirs",strip(put(e,8.)));
168       +         do i = 1 to e;
169       +            last3 = (e-i<3);
170       +            dirs = scan(c,i," ");
171       +            output;
172       +            if last3 then l3 = strip(l3)||' "'||strip(dirs)||'"';
173       +            if e then call symputx ('last3',strip(l3));
174       +         end;
175       +      run;
176       +      %put nb sasautos dirs = &nb_dirs;
177       +      %put last3 = &last3;
178       +   %end;
179       +   %if ( %sysfunc(fileexist(&general.macros&sepchar._library&sepchar)) or %sysfunc(fileexist(&repevpath.macros&sepchar))
179      !+) %then %do;
180       +      %if %sysfunc(fileexist(&repevpath.macros&sepchar)) %then %do;
                                                           The SAS System

181       +
182       +         %let gmdfolder=%sysfunc(fileexist(&repevpath.macros&sepchar.global-macros));
183       +         %let gmufolder=%sysfunc(fileexist(&repevpath.macros&sepchar.global_macros));
184       +
185       +         %put &=gmdfolder;
186       +         %put &=gmufolder;
187       +
188       +         options dlcreatedir;
189       +         %if &gmdfolder=1 %then %do;
190       +            libname globmac ("&repevpath.macros&sepchar.global-macros");
191       +         %end;
192       +         %else %do;
193       +            libname globmac ("&repevpath.macros&sepchar.global_macros");
194       +         %end;
195       +      %end;
196       +
197       +      %*- 2022-12-07 - jbodart - Add user workspace macros to SASAUTOS for development purposes, if applicable -*;
198       +      %let user_workspace_macros = ;
199       +
200       +      %if &runenvironment=repository and %symexist(_SDDUSR_) %then %do;
201       +
202       +         %if ("&revent"="generic_adam" or "%scan(&repevpath, -1, /\)"="generic_adam")
203       +            and %sysfunc(prxmatch(!^/clinical/test/gadam-tests/!, %superq(relrepevpath)))
204       +            and %sysfunc(fileexist(/lsafshared/SASWorkspaces/&_SDDUSR_/general/biostat/gadam/_library/%str(*).sas))
205       +            and %qsysfunc(upcase(%superq(USE_SAS_WORKSPACE_MACROS)), $1.)=Y
206       +            %then %let user_workspace_macros = &user_workspace_macros
206      !+"/lsafshared/SASWorkspaces/&_SDDUSR_/general/biostat/gadam/_library";
207       +
208       +         %else %if ("&revent"="generic_sdtm" or "%scan(&repevpath, -1, /\)"="generic_sdtm")
209       +            and %sysfunc(prxmatch(!^/clinical/test/gsdtm-tests/!, %superq(relrepevpath)))
210       +            and %sysfunc(fileexist(/lsafshared/SASWorkspaces/&_SDDUSR_/general/biostat/gsdtm/_library/%str(*).sas))
211       +            and %qsysfunc(upcase(%superq(USE_SAS_WORKSPACE_MACROS)), $1.)=Y
212       +            %then %let user_workspace_macros = &user_workspace_macros
212      !+"/lsafshared/SASWorkspaces/&_SDDUSR_/general/biostat/gsdtm/_library";
213       +
214       +         %if (    "&revent"="generic_adam" or "%scan(&repevpath, -1, /\)"="generic_adam"
215       +               or "&revent"="generic_sdtm" or "%scan(&repevpath, -1, /\)"="generic_sdtm"
216       +               or %sysfunc(prxmatch(!^/general/biostat/jobs/(gadam|gsdtm)_\w+/dev(/|$)!, %superq(relrepevpath)))
217       +               )
218       +            and %sysfunc(fileexist(/lsafshared/SASWorkspaces/&_SDDUSR_/general/biostat/macros/_library/%str(*).sas))
219       +            and %qsysfunc(upcase(%superq(USE_SAS_WORKSPACE_MACROS)), $1.)=Y
220       +            %then %let user_workspace_macros = &user_workspace_macros
220      !+"/lsafshared/SASWorkspaces/&_SDDUSR_/general/biostat/macros/_library";
221       +
222       +         %if %length(%superq(user_workspace_macros)) %then %do;
223       +            %put %str(Not)ice: === Adding WORKSPACE paths to SASAUTOS for development purposes, please check macros
223      !+versions in your workspace: === ;
224       +            %put %str(   )&user_workspace_macros;
225       +            %put;
226       +         %end;
227       +
228       +         %put &=runenvironment &=_SDDUSR_ &=relrepevpath &=user_workspace_macros;
229       +
230       +      %end;
231       +
232       +      %*- Use autocall to compile any macro in Macros subfolder on demand -*;
233       +      options mautosource sasautos = (
234       +            %if %sysfunc(fileexist(&repevpath.macros&sepchar))                         %then "&repevpath.macros";
                                                           The SAS System

235       +                                                                                             &user_workspace_macros
236       +            %if "&revent"="generic_adam" or "%scan(&repevpath, -1, /\)"="generic_adam" %then
236      !+"&general.gadam&sepchar._library";
237       +            %if "&revent"="generic_sdtm" or "%scan(&repevpath, -1, /\)"="generic_sdtm" %then
237      !+"&general.gsdtm&sepchar._library";  /*- jbodart 2022-06-30 -*/
238       +            %if %sysfunc(fileexist(&repevpath.macros&sepchar.global-macros))           %then
238      !+"&repevpath.macros&sepchar.global-macros";
239       +            %if %sysfunc(fileexist(&repevpath.macros&sepchar.global_macros))           %then
239      !+"&repevpath.macros&sepchar.global_macros";
240       +            %if %sysfunc(fileexist(&general.macros&sepchar._library&sepchar))          %then
240      !+"&general.macros&sepchar._library" ;
241       +            %if &runenvironment=local or &runenvironment=batch or %length(%superq(runenvironment))=0
242       +                                                                                       %then sasautos;
243       +                                                                                       %else &last3;
244       +            ) MRECALL=YES;
245       +   %end;
246       +   %let sa = %sysfunc(getoption(sasautos));
247       +   %put sa=&sa;
248       +%mend setSasAutos;
NOTE: %INCLUDE (level 1) ending.
USE_SAS_WORKSPACE_MACROS=
Notice: Environment variable USE_SAS_WORKSPACE_MACROS is NOT DEFINED.
MPRINT(SETENV.SETENV02.SETSASAUTOS):   data _null_;
MPRINT(SETENV.SETENV02.SETSASAUTOS):   length a b c dirs l3 $4000;
MPRINT(SETENV.SETENV02.SETSASAUTOS):   a= strip(getoption("sasautos"));
MPRINT(SETENV.SETENV02.SETSASAUTOS):   put a=;
MPRINT(SETENV.SETENV02.SETSASAUTOS):   len = length(a);
MPRINT(SETENV.SETENV02.SETSASAUTOS):   nobrack = substr(a,2,len-2);
MPRINT(SETENV.SETENV02.SETSASAUTOS):   b = tranwrd(nobrack,'"',"");
MPRINT(SETENV.SETENV02.SETSASAUTOS):   c = compbl(strip(tranwrd(b,"'","")));
MPRINT(SETENV.SETENV02.SETSASAUTOS):   e = countw(c," ");
MPRINT(SETENV.SETENV02.SETSASAUTOS):   call symputx("nb_dirs",strip(put(e,8.)));
MPRINT(SETENV.SETENV02.SETSASAUTOS):   do i = 1 to e;
MPRINT(SETENV.SETENV02.SETSASAUTOS):   last3 = (e-i<3);
MPRINT(SETENV.SETENV02.SETSASAUTOS):   dirs = scan(c,i," ");
MPRINT(SETENV.SETENV02.SETSASAUTOS):   output;
MPRINT(SETENV.SETENV02.SETSASAUTOS):   if last3 then l3 = strip(l3)||' "'||strip(dirs)||'"';
MPRINT(SETENV.SETENV02.SETSASAUTOS):   if e then call symputx ('last3',strip(l3));
MPRINT(SETENV.SETENV02.SETSASAUTOS):   end;
MPRINT(SETENV.SETENV02.SETSASAUTOS):   run;

a=('/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/jobs/gadam_
rebuild_adam/prod/macros/global_macros' "SASEnvironment/SASMacro" '!SASROOT/sasautos' "/sso/sfw/sas/940/SASFoundation/9.4/lsafapi/ls
af-sas-macro-2.6.1/sasmacros" "/lsafshared/SASWorkspaces/global_macros")
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

nb sasautos dirs = 5
last3 = "!SASROOT/sasautos" "/sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.6.1/sasmacros" 
"/lsafshared/SASWorkspaces/global_macros"
GMDFOLDER=0
GMUFOLDER=1
MPRINT(SETENV.SETENV02.SETSASAUTOS):   options dlcreatedir;
MPRINT(SETENV.SETENV02.SETSASAUTOS):   libname globmac 
("/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/jobs/gadam_re
build_adam/prod/macros/global_macros");
                                                           The SAS System

NOTE: Libref GLOBMAC was successfully assigned as follows: 
      Levels:           1
      Engine(1):        V9 
      Physical Name(1): 
      /lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/jobs/gada
      m_rebuild_adam/prod/macros/global_macros
RUNENVIRONMENT=repository _SDDUSR_=jbodart RELREPEVPATH=/general/biostat/jobs/gadam_rebuild_adam/prod/ USER_WORKSPACE_MACROS=
MPRINT(SETENV.SETENV02.SETSASAUTOS):   options mautosource sasautos = ( 
"/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/jobs/gadam_reb
uild_adam/prod/macros" 
"/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/jobs/gadam_reb
uild_adam/prod/macros/global_macros" 
"/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_librar
y" "!SASROOT/sasautos" "/sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.6.1/sasmacros" 
"/lsafshared/SASWorkspaces/global_macros" ) MRECALL=YES;
sa=("/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/jobs/gadam
_rebuild_adam/prod/macros"                                                                                               
"/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/jobs/gadam_reb
uild_adam/prod/macros/global_macros" 
"/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_librar
y" "!SASROOT/sasautos" "/sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.6.1/sasmacros" 
"/lsafshared/SASWorkspaces/global_macros")
MPRINT(SETENV.SETENV02):  ;
MPRINT(SETENV.SETENV02):  ;
MPRINT(SETENV.SETENV02):  ;
MAUTOCOMPLOC:  The autocall macro GET_JOB_PROG_INFO is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/mac
            ros/_library/get_job_prog_info.sas.
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   data _null_;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   infile 
"/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/jobs/gadam_reb
uild_adam/prod/jobs/job_gadam_rebuild_adam.job";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   input;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   *put _infile_;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   length progversion $32;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   if prxmatch("/^.*<inputSpec 
path=[""'][^<>""']*\/programs\/gadam_rebuild_adam.sas[""'][^<>]* version=[""'][\*\d\.]+[""'][^<>]*\/>.*$/", _infile_) then do;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   progversion = prxchange("s/^.*<inputSpec 
path=[""'][^<>""']*\/programs\/gadam_rebuild_adam.sas[""'][^<>]* version=[""']([\*\d\.]+)[""'][^<>]*\/>.*$/\1/", 1, _infile_);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   put progversion=;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   call symputx('jobprogversion', progversion);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   end;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   run;

NOTE: The infile 
      "/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/jobs/gad
      am_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job" is:
      
      Filename=/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/
      jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job,
      Owner Name=webtrust,Group Name=webtrust,
      Access Permission=-rw-rw-rw-,
      Last Modified=17Jan2023:15:03:55,
      File Size (bytes)=4356

progversion=*
NOTE: 50 records were read from the infile 
      "/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/jobs/gad
                                                           The SAS System

      am_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job".
      The minimum record length was 6.
      The maximum record length was 156.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MAUTOCOMPLOC:  The autocall macro LSAF_GET_VERSION is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/mac
            ros/_library/lsaf_get_version.sas.
MAUTOCOMPLOC:  The autocall macro LOCAL_LSAF is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/mac
            ros/_library/local_lsaf.sas.
MAUTOCOMPLOC:  The autocall macro LSAF_GETPROPERTIES is compiling using the autocall source file 
            /sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.6.1/sasmacros/lsaf_getproperties.sas.
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   *;
MAUTOCOMPLOC:  The autocall macro LSAF_GETPRODUCTNAME is compiling using the autocall source file 
            /sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.6.1/sasmacros/lsaf_getproductname.sas.
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):  ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   data work.lsafGetProperties (label="Created by 
LSAF_GETPROPERTIES" KEEP=path name displayName value type isReadonly isExtended);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   attrib returnCode length=8 message length=$200 
logMsgPrefix length=$70 logMsgPrimary length=$70 logMsg length=$300 rowCount length=8 path length=$2048 label="Item Path" name 
length=$256 label="Property Name" displayName length=$256 label="Property Display Name" value length=$2048 label="Property Value" 
type length=$32 label="Property Type" isReadonly length=8 label="Property value is not modifiable." isExtended length=8 
label="Property is an Extended Attribute" ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   rowCount=0;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   declare javaobj 
srv("com/sas/lsaf/macro/content/repository/RepositoryService") ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   declare javaobj 
results("com/sas/lsaf/macro/content/repository/SasRepositoryItemPropertiesResult");
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   srv.callStaticVoidMethod("getProperties", 
"/general/biostat/jobs/gadam_rebuild_adam/prod/programs/gadam_rebuild_adam.sas", "", results);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   results.callStringMethod("getReturnMessage", 
message);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   logMsgPrefix="NOTE: SAS Life Science Analytics 
Framework Macro: * ";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   if (returnCode ne 0) then do;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   logMsgPrimary="ERROR: SAS Life Science Analytics 
Framework Macro:";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   logMsg=" Cannot retrieve list of properties for 
/general/biostat/jobs/gadam_rebuild_adam/prod/programs/gadam_rebuild_adam.sas" ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   end;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   else do;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   logMsgPrimary=logMsgPrefix;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   logMsg=" List of properties were returned for 
/general/biostat/jobs/gadam_rebuild_adam/prod/programs/gadam_rebuild_adam.sas" ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   results.callIntMethod("getSize", rowCount);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   do row=0 to rowCount - 1;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   
path="/general/biostat/jobs/gadam_rebuild_adam/prod/programs/gadam_rebuild_adam.sas";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   results.callStringMethod("getPropertyName", row, 
name);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   results.callStringMethod("getPropertyValue", row, 
value);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   results.callStringMethod("getPropertyDisplayName", 
                                                           The SAS System

row, displayName);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   
results.callStringMethod("getPropertyAttributeType", row, type);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   results.callBooleanMethod("getPropertyIsReadOnly", 
row, isReadonly);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   results.callBooleanMethod("getPropertyIsExtended", 
row, isExtended);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   output;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   end;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   end;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   put;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   put logMsgPrimary " " logMsg;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   put logMsgPrefix " " "lsaf_getproperties";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   if (rowCount=0) then put logMsgPrefix " No 
properties were retrieved.";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   else put logMsgPrefix " " rowCount " records 
written to data set work.lsafGetProperties";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   put;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   call symputx("_lsafRC_", returnCode);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   call symputx("_lsafMsg_", message);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   call symputx("_lsafRowCount_", rowCount);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   run;


NOTE: SAS Life Science Analytics Framework Macro: *  
List of properties were returned for /general/biostat/jobs/gadam_rebuild_adam/prod/programs/gadam_rebuild_adam.sas
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_getproperties
NOTE: SAS Life Science Analytics Framework Macro: *  21  records written to data set work.lsafGetProperties
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: The data set WORK.LSAFGETPROPERTIES has 21 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           1.32 seconds
      cpu time            0.01 seconds
      

MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   options nonotes;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   proc sort data=work.lsafGetProperties 
sortseq=linguistic(strength=primary);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   by name;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   run;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   options NOTES;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION):  ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION):   data _null_;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION):   set lsafGetProperties(where=(name='version'));
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION):   call symputx(symget('into'), coalescec(cats(value), '-'), 'G');
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION):   run;

NOTE: There were 1 observations read from the data set WORK.LSAFGETPROPERTIES.
      WHERE name='version';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):  ;
                                                           The SAS System

MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   *-2023-01-24 - jbodart - retrieve dateSubmitted lsafJobSubmissionId sessionId location 
jobPath jobVersion from &_PARENTJOB_WRK_/submitted_jobs.txt (if available) -*;
MAUTOCOMPLOC:  The autocall macro SHELLCOMMAND is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/mac
            ros/_library/shellcommand.sas.
%SHELLCOMMAND(cat  submitted_jobs.txt, 
path=/saswork/sas_tmp/SAS_work60810017E407_xar08auv.vsp.sas.com/SAS_work41A00017E407_xar08auv.vsp.sas.com, resultvar=result, dsin=, 
dsout=submitted_jobs(drop=result), print=Y, linenum=N, cond=1, for_each_do=line = __line ; output  ;, otherwise_do=, into=);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):   *- The following 3 macros definitions are adpated from SAS Support / 
Samples and Notes: Sample 38518: Dynamically setting the CLASSPATH for use in a DATA step that uses the Java object component 
available at https://support.sas.com/kb/38/518.html 
--------------------------------------------------------------------------------------------------------------*;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.INIT_CLASSPATH_UPDATE):   DATA _null_;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.INIT_CLASSPATH_UPDATE):   LENGTH path_separator $ 2 orig_classpath $ 500;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.INIT_CLASSPATH_UPDATE):   DECLARE JavaObj f("java.io.File", "");
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.INIT_CLASSPATH_UPDATE):   f.getStaticStringField("pathSeparator", 
path_separator);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.INIT_CLASSPATH_UPDATE):   orig_classpath = STRIP(SYSGET("CLASSPATH"));
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.INIT_CLASSPATH_UPDATE):   IF _ERROR_ = 1 OR LENGTH(orig_classpath) = 0 THEN 
DO;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.INIT_CLASSPATH_UPDATE):   PUT "NOTE: Ignore any messages from the next 
statement(s)";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.INIT_CLASSPATH_UPDATE):   orig_classpath = "";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.INIT_CLASSPATH_UPDATE):   END;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.INIT_CLASSPATH_UPDATE):   if orig_classpath = "" then CALL 
SYMPUT('CP_orig_classpath', SYSGET("CLASSPATH"));
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.INIT_CLASSPATH_UPDATE):   else CALL SYMPUT('CP_orig_classpath', 
STRIP(orig_classpath));
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.INIT_CLASSPATH_UPDATE):   CALL SYMPUT('CP_path_separator', 
COMPRESS(path_separator));
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.INIT_CLASSPATH_UPDATE):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):  ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.ADD_TO_CLASSPATH):   DATA _null_;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.ADD_TO_CLASSPATH):   LENGTH current_classpath $ 500 new_classpath $ 500;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.ADD_TO_CLASSPATH):   current_classpath = STRIP(SYSGET("CLASSPATH"));
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.ADD_TO_CLASSPATH):   IF _ERROR_ = 1 OR LENGTH(current_classpath) = 0 THEN DO;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.ADD_TO_CLASSPATH):   PUT "NOTE: Ignore any messages from the nearby 
statement(s)";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.ADD_TO_CLASSPATH):   new_classpath = 
"/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_librar
y/shellcommand.0.0.1.jar";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.ADD_TO_CLASSPATH):   END;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.ADD_TO_CLASSPATH):   ELSE DO;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.ADD_TO_CLASSPATH):   new_classpath = COMPRESS(current_classpath) || ":" || 
"/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_librar
y/shellcommand.0.0.1.jar";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.ADD_TO_CLASSPATH):   END;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.ADD_TO_CLASSPATH):   CALL SYMPUT('CP_new_classpath', STRIP(new_classpath));
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.ADD_TO_CLASSPATH):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
                                                           The SAS System

      cpu time            0.00 seconds
      

NOTE: Setting Java classpath to 
!CLASSPATH:/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macr
os/_library/shellcommand.0.0.1.jar
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.ADD_TO_CLASSPATH):   OPTIONS SET=CLASSPATH 
"!CLASSPATH:/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/mac
ros/_library/shellcommand.0.0.1.jar";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):  ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):   data submitted_jobs(drop=result);
MAUTOCOMPLOC:  The autocall macro DIREXIST is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/mac
            ros/_library/direxist.sas.
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):   declare javaobj shellcommand("shellCommand/ShellCommand");
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):   result = put(" ", $32000.);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):   if 1 then do;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):   shellcommand.callStaticStringMethod("commandStr", strip('cat  
submitted_jobs.txt'), cats("/saswork/sas_tmp/SAS_work60810017E407_xar08auv.vsp.sas.com/SAS_work41A00017E407_xar08auv.vsp.sas.com"), 
result);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):   do __i = 1 to countw(result, "0A0D"x);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):   __line = put(scan(result, __i, "0A0D"x), $char500.);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):   __linelen = length(__line);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):   line = __line ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):   output ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):  ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):   putlog __line $varying. __linelen;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):   end;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):   drop __i __line __linelen;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):   end;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):   run;

dateSubmitted             | lsafJobSubmissionId                  | sessionId                            | location   | jobPath [ job
Version ]
2023-02-14T23:01:33+00:00 | 34cdc416-ee9d-4653-a254-4717ec594d32 | ffc296ff-228f-46bb-ba59-351b354c44e7 | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_refresh_sdtm_last.job [  ]
2023-02-14T23:01:58+00:00 | 7b3e2a4d-d9de-4e7c-a4eb-01757db69324 | ed837542-0a95-4b12-b150-3d2157a0bd74 | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_refresh_sdtm_last.job [  ]
2023-02-14T23:02:20+00:00 | 9f5c86f4-5c49-479a-9296-4715eddeac57 | 17aee1aa-01aa-41dd-ae87-5146691da30f | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_refresh_sdtm_last.job [  ]
2023-02-14T23:02:43+00:00 | 103411a5-ab34-40c7-8b99-6b1146573f5b | 0dcb3454-83c5-4e7d-9c50-0fdeb0925f2f | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_refresh_sdtm_last.job [  ]
2023-02-14T23:04:11+00:00 | b55cbe57-d6e9-4355-9f8b-723527017c3d | 3933637c-b48b-4448-983e-0673953a81d4 | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_refresh_sdtm_last.job [  ]
2023-02-14T23:04:41+00:00 | 200b2a9c-4630-42d5-8047-4a03daed75ea | b141eae2-ed67-4524-81f2-f9191c59fce8 | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_refresh_sdtm_last.job [  ]
2023-02-14T23:05:06+00:00 | 6539879f-1492-45a5-b4b3-02e5973354ad | 4973f607-6b25-4f5d-a370-f3b0eb4e8412 | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_refresh_sdtm_last.job [  ]
2023-02-14T23:05:26+00:00 | a741382c-6871-416b-9e14-82bd4a257823 | cf876d29-05af-405b-9547-7e8ed8baf7e0 | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_refresh_sdtm_last.job [  ]
2023-02-14T23:05:43+00:00 | ccb9db49-8fbf-48c0-b503-c25b0fde944b | 4e2d18a3-213c-4ea4-a228-163662358cfc | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_refresh_sdtm_last.job [  ]
2023-02-14T23:06:03+00:00 | 14a3bb6e-eb7e-4f33-a1be-a002f0947741 | fe46e479-9491-464c-b1e1-abf5e4eb0ffa | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_refresh_sdtm_last.job [  ]
2023-02-14T23:07:31+00:00 | 0dd7fe38-3de1-4263-aecf-37eefd6ecd4f | 722499c1-2203-4ded-a726-89609bcdad8b | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_refresh_sdtm_last.job [  ]
2023-02-14T23:08:29+00:00 | 4fc50a80-039e-42e1-a93e-9ea356c2372f | 0526e34e-ebfe-4381-848d-924e0287a302 | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_refresh_sdtm_last.job [  ]
                                                           The SAS System

2023-02-14T23:09:34+00:00 | 2c0cadea-0dc8-43bc-903a-3228886b0615 | b6a39186-622e-4add-978c-acbfda91a4cd | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_refresh_sdtm_last.job [  ]
2023-02-14T23:09:57+00:00 | 64efd6a9-0bb0-487b-aab6-1c1c6c1bbfb2 | 59b96a62-ea02-41c4-8018-c85152bb622b | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_refresh_sdtm_last.job [  ]
2023-02-14T23:10:16+00:00 | 227dfae6-5d45-4fd9-a512-a042959cb377 | 943b5b5f-252b-444e-9ad4-0d8549a412ed | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_refresh_sdtm_last.job [  ]
2023-02-14T23:10:36+00:00 | 50187a4e-6ac4-485a-8245-6aca370ef6b4 | 92bb4f7c-9b75-4b3b-9479-273ed3ee102e | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_refresh_sdtm_last.job [  ]
2023-02-14T23:11:42+00:00 | 6b4feb5b-b4ab-4a4f-a9e0-abfbd2306ed0 | d6428719-be95-428f-a379-a918799498c3 | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_refresh_sdtm_last.job [  ]
2023-02-14T23:12:15+00:00 | a262ae8f-1a9f-49d3-95e6-a09faed71475 | 49b9ddd2-8153-42b5-982e-58cb7f488b50 | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_refresh_sdtm_last.job [  ]
2023-02-14T23:12:46+00:00 | 64daf331-1835-4b91-97e9-bddf49c4ee3c | 334a7c66-fd69-4a45-b2d0-179f658e77d4 | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_refresh_sdtm_last.job [  ]
2023-02-14T23:13:08+00:00 | fdecc767-2102-4b11-9cc6-33366c3781c0 | cf64f34d-aebb-477c-b788-13ac70592520 | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_refresh_sdtm_last.job [  ]
2023-02-14T23:13:28+00:00 | d7450cf4-cc04-4f47-a434-232e355c3094 | 69ff5f23-2333-4e91-b391-0ae3e0c1cc6e | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_refresh_sdtm_last.job [  ]
2023-02-14T23:14:56+00:00 | 5157ad9f-63fc-4da1-ac3a-af94d227c1b6 | 6d75572e-46d7-47a5-99ac-21f948c2d2cb | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_refresh_sdtm_last.job [  ]
2023-02-14T23:15:22+00:00 | 17487aea-4e48-498c-bcf1-80cc7167e326 | ad28ea42-de1b-48b3-80aa-414bd9ef7d4e | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_refresh_sdtm_last.job [  ]
2023-02-14T23:15:47+00:00 | df61056b-0fe0-451e-bba3-ff03fca48b93 | aba60878-3970-4edc-aea1-d1964c4ed27d | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_refresh_sdtm_last.job [  ]
2023-02-14T23:16:06+00:00 | 4d8db4c3-e76e-4312-a845-8bd11de56e77 | 7decc9b6-b43d-4951-a37a-56dffe8813ca | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_refresh_sdtm_last.job [  ]
2023-02-14T23:16:24+00:00 | a8de04f3-1670-4c8e-86db-b1e9986a835a | bb03ec59-6196-4ba4-a209-1f0d327a0055 | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_refresh_sdtm_last.job [  ]
2023-02-14T23:17:22+00:00 | 2fa36eb4-4249-4b35-bb5d-d0b004eba088 | e4256722-e481-4b08-a44c-8645d063c2f8 | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_refresh_sdtm_last.job [  ]
2023-02-14T23:17:50+00:00 | d50cab54-63c1-47c2-b8bf-d01fab590ce6 | a74635a7-06a2-469c-8ffd-d54794315ef9 | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_refresh_sdtm_last.job [  ]
2023-02-14T23:18:20+00:00 | 37cf69a5-d6e4-473a-a409-6dc4cf1bd4d0 | d8ac9865-0e1a-47df-8815-3881c4799346 | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_refresh_sdtm_last.job [  ]
2023-02-14T23:18:43+00:00 | a7741acb-ebe0-4e08-bf43-98dd400dcfcc | 08e46253-eee6-4d63-90f2-4515b5d82d39 | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_refresh_sdtm_last.job [  ]
2023-02-14T23:19:05+00:00 | 708f7018-ce29-49ac-b295-3e8f5e989b51 | ffe76ec5-bc1f-4cd4-b074-d3b80c9934cd | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_refresh_sdtm_last.job [  ]
2023-02-14T23:20:33+00:00 | 547d32d1-bb24-40a9-bfdb-82a53e398a72 | 230d0180-f970-48d6-a73d-608d0945b509 | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_refresh_sdtm_last.job [  ]
2023-02-14T23:21:02+00:00 | e0b378db-3ca1-4ddd-a8af-c1ac00202daa | 56194557-9622-4e74-a2b0-1e737e338c11 | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_update_refresh_info.job [  ]
2023-02-14T23:21:20+00:00 | a5318759-50c1-4af3-b508-3049626eba26 | aa0827a7-face-4bf2-8a6c-5260addb850d | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_update_refresh_info.job [  ]
2023-02-14T23:21:34+00:00 | 4afb3a96-6ae2-4c02-acb9-fdaedcdaedb8 | 61ab36ff-cbc0-4f18-8758-ddb1c07dfe28 | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_update_refresh_info.job [  ]
2023-02-14T23:21:47+00:00 | 6dafb095-7d73-4e7a-a394-8b129c3950cc | 4ee5a28b-9ecc-494c-86be-3edbb3fdf5b7 | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_update_refresh_info.job [  ]
2023-02-14T23:21:59+00:00 | d854ef36-477c-495d-9321-7a84e670492e | 4f7ca3cc-2ed9-4cce-8316-de1847f57e12 | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_update_refresh_info.job [  ]
2023-02-14T23:22:12+00:00 | ce1c5b89-4d2e-4069-a3d9-bdbfd076bf31 | fe818ae8-3b42-47b0-859b-7bd619eb5bf0 | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_update_refresh_info.job [  ]
2023-02-14T23:22:24+00:00 | 30f8d3a6-9612-483d-bca5-ce37a332a954 | 5b587228-6aee-4a8c-8a6b-691e26f6f045 | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_update_refresh_info.job [  ]
2023-02-14T23:22:36+00:00 | fadc27f3-1c94-4e55-a882-d68b7811f962 | c2616c54-ff52-4ceb-acca-64bd7b96953e | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_update_refresh_info.job [  ]
2023-02-14T23:22:46+00:00 | c9ad90c3-9495-4a97-b432-2cb2cee123cd | 107c8e3b-9979-4f05-8255-0d01d2556fbd | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_update_refresh_info.job [  ]
                                                           The SAS System

2023-02-14T23:22:59+00:00 | 61f383d7-4b17-420b-81f7-393c656ea884 | bcb93af0-5797-43fb-9338-8a38f38c8763 | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_update_refresh_info.job [  ]
2023-02-14T23:23:11+00:00 | d66c1b2c-18df-42f2-9aea-852cd5532f89 | 8c4a21a7-bd34-4e0e-b7f3-60a4b45ffee3 | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_update_refresh_info.job [  ]
2023-02-14T23:23:24+00:00 | bb6b9aff-2dc0-4ebc-bd8d-9c05a02dee48 | 4ff38a29-76a9-4f77-bfb2-4026b9c9b58f | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_update_refresh_info.job [  ]
2023-02-14T23:23:36+00:00 | 2e68bd56-f22c-4b94-9a35-85de494be465 | 0b7b66bb-2efb-4861-8662-26eb2f93af5c | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_update_refresh_info.job [  ]
2023-02-14T23:23:48+00:00 | b30a94be-b413-43e0-85d7-b6202ba4fa00 | 90987368-b1d6-4a82-953c-571d32ed82ed | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_update_refresh_info.job [  ]
2023-02-14T23:24:01+00:00 | 0b3bfb98-75f6-4f23-a1b7-37338a5e6a2f | 0e6250ac-c92c-4aaf-99ca-729f5141844f | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_update_refresh_info.job [  ]
2023-02-14T23:24:13+00:00 | 7845d84c-7d5b-4f51-8165-e8f717114db8 | a257aca1-6e6b-4f50-9b9b-be47f26b662c | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_update_refresh_info.job [  ]
2023-02-14T23:24:23+00:00 | 6c775b43-ea73-49e3-959e-e0a906e75ac2 | a5c952fb-5d56-4c55-95b1-d769229e6dc0 | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_update_refresh_info.job [  ]
2023-02-14T23:24:35+00:00 | 4f77226f-8ce8-4b37-8039-5962751a3c7c | 99dde047-5c31-4aa2-9e8a-c36928b187f7 | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_update_refresh_info.job [  ]
2023-02-14T23:24:45+00:00 | e002f124-9b7d-4f28-91cb-5cd0e29f03d7 | dd1e2406-b3ce-421c-8698-81b8885cf4a5 | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_update_refresh_info.job [  ]
2023-02-14T23:24:55+00:00 | 8c71f116-e48d-4735-97cc-6c802f830613 | 0050c833-5bab-4938-8d6b-162d013f4f36 | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_update_refresh_info.job [  ]
2023-02-14T23:25:05+00:00 | abdceda2-929f-49fa-ae32-ab53add40373 | ed43d9e8-72c0-462e-aa8b-9bb8ccec307e | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_update_refresh_info.job [  ]
2023-02-14T23:25:17+00:00 | 8be7b0e7-3d4f-4bcb-b1c0-8b1219465ecc | e089709d-80b8-4416-8c43-3195d5ce40db | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_update_refresh_info.job [  ]
2023-02-14T23:25:27+00:00 | fc4cad35-b239-451d-902f-82e905e8c118 | c05fc21d-1822-4f93-8aed-83c44d739fcf | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_update_refresh_info.job [  ]
2023-02-14T23:25:37+00:00 | e03808da-1a0e-494c-851c-401af2f6207e | c577827a-0816-4664-b421-80580d8f2444 | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_update_refresh_info.job [  ]
2023-02-14T23:25:47+00:00 | 59f1b744-bd49-4263-9900-4e8d18560700 | 6ffe0751-e863-418d-b2bb-8de94418d790 | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_update_refresh_info.job [  ]
2023-02-14T23:25:59+00:00 | 289a6d4e-9374-4ce9-b21e-b08f2da70fc9 | c9f0a061-600a-4377-9459-5e1aba848a62 | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_update_refresh_info.job [  ]
2023-02-14T23:26:11+00:00 | 0d6e1f38-1041-4a5d-bd29-ce02924b7d04 | e5290d45-9a33-4c05-bd3b-38bec7dd8e0d | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_update_refresh_info.job [  ]
2023-02-14T23:26:24+00:00 | 8724a7e4-7c55-48a6-b3fe-e320536e9ba2 | 39fa3e27-c1b3-4d6e-8233-8526d57cdf22 | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_update_refresh_info.job [  ]
2023-02-14T23:26:36+00:00 | b3613865-6727-465b-b746-d24b7bf64ded | ba4cf3c6-add7-440f-8b02-ad5418969bd9 | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_update_refresh_info.job [  ]
2023-02-14T23:26:46+00:00 | 1c206bba-edaf-4cfa-9fd0-2fd18db5e351 | 50d2dbb1-cfe4-46d8-88f1-91809e778831 | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_update_refresh_info.job [  ]
2023-02-14T23:26:56+00:00 | c0d0c70a-1c3f-46cd-b7f8-0e541ec7b760 | 65aa8426-547c-489c-a63b-0557b99d778d | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_update_refresh_info.job [  ]
2023-02-14T23:27:06+00:00 | 11f69aaf-fccf-46df-9134-060d6b785d5b | 97858fee-990b-4f03-9483-423137dc91c7 | REPOSITORY | /general/bios
tat/jobs/gadam_refresh_sdtm_last/prod/jobs/job_gadam_update_refresh_info.job [  ]
2023-02-14T23:27:16+00:00 | 72da1232-67be-4167-a19a-a984260abcab | e6253763-501d-46a1-bc43-58846b3d16eb | REPOSITORY | /general/bios
tat/jobs/convert_define2sas/dev/jobs/convert_definetosas.job [  ]
2023-02-14T23:27:44+00:00 | 510cadf5-7a68-44b0-8d8d-9b41f47ee631 | a31e806e-c61f-4efd-96e6-2c5cdbbc3da5 | REPOSITORY | /general/bios
tat/jobs/convert_define2sas/dev/jobs/convert_definetosas.job [  ]
2023-02-14T23:28:06+00:00 | cfa13f1a-650e-4b35-a660-4a999c3748bd | 4e14ebd4-ad09-40ca-a2e1-2307a23eeaf0 | REPOSITORY | /general/bios
tat/jobs/convert_define2sas/dev/jobs/convert_definetosas.job [  ]
2023-02-14T23:28:30+00:00 | 8bfb1f66-b7c0-4ea5-83e0-8b733ce4adc6 | 272c42b7-a0dc-4cbb-8c26-9ebb8d443ccb | REPOSITORY | /general/bios
tat/jobs/convert_define2sas/dev/jobs/convert_definetosas.job [  ]
2023-02-14T23:28:52+00:00 | bbaa58d7-c52f-4470-af39-233b63ff2753 | 08a98c04-43f8-4b0e-89f6-ff6abf2b2f77 | REPOSITORY | /general/bios
tat/jobs/convert_define2sas/dev/jobs/convert_definetosas.job [  ]
2023-02-14T23:29:26+00:00 | 62c6d28e-2ac1-4c3b-ac79-606af014c7b0 | cc37d5ac-7e6d-4de8-bff8-9e5cffe40f28 | REPOSITORY | /general/bios
tat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job [  ]
                                                           The SAS System

2023-02-14T23:29:48+00:00 | dcb78808-5ad4-41d0-80cb-4bbb96800a05 | d89f7193-4ce4-4c27-ad77-29d7d1544272 | REPOSITORY | /general/bios
tat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job [  ]
2023-02-14T23:30:16+00:00 | 5d8365c8-c67a-422e-87b1-ce697338b440 | 7f638963-49ee-4b44-ac73-92fadd984cc1 | REPOSITORY | /general/bios
tat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job [  ]
2023-02-14T23:44:04+00:00 | 21aedaa8-20f8-400f-8cd7-eaf5dcfce477 | 981748bc-2051-4c63-a27c-3bf1a691e8d1 | REPOSITORY | /general/bios
tat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job [  ]
2023-02-14T23:44:26+00:00 | e9dd1e05-7e26-46e4-bca4-4be30eda6505 | 12880b3c-d9ed-4d5f-b445-7a8a6fa56b15 | REPOSITORY | /general/bios
tat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job [  ]
2023-02-14T23:44:54+00:00 | e10042a4-6280-4c02-92e6-fbbdbb000293 | 74acd903-0820-46df-9eca-9bf1871cc8d1 | REPOSITORY | /general/bios
tat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job [  ]
2023-02-15T00:03:43+00:00 | c0fbe56b-3c94-4a44-a0a1-dcba01e0547a | 0188e691-89f8-4f26-af18-f7fb19508a5c | REPOSITORY | /general/bios
tat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job [  ]
2023-02-15T00:04:02+00:00 | 148321f5-b885-4551-8067-3918a98f9576 | eb786597-123e-48a5-9ac0-2eac90d5b35b | REPOSITORY | /general/bios
tat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job [  ]
2023-02-15T00:09:52+00:00 | 1136b3a2-6863-445c-8af3-a80ffc2287c9 | f7ac38e1-5e6e-4c4f-9078-71a94ca32a7b | REPOSITORY | /general/bios
tat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job [  ]
2023-02-15T00:10:14+00:00 | 3a6e334a-aec6-427f-b3d1-2d35cdc37545 | b933ae39-de6a-4197-b68c-e8934907e6fc | REPOSITORY | /general/bios
tat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job [  ]
2023-02-15T00:10:32+00:00 | 771f920f-4235-4216-8e58-d3d5fc4f2ebe | b25bdfe3-dca5-4c08-ba14-6a327420fd24 | REPOSITORY | /general/bios
tat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job [  ]
2023-02-15T01:14:26+00:00 | e50dcedc-790c-4f2c-8e28-4747fc32cc97 | a35d7514-d6f2-45c9-953a-28136fd25d31 | REPOSITORY | /general/bios
tat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job [  ]
2023-02-15T01:14:44+00:00 | 0e426e98-1f39-407e-a152-2a4b08808841 | 71634010-3358-4917-b8e7-d591ceb0e9c0 | REPOSITORY | /general/bios
tat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job [  ]
2023-02-15T02:16:06+00:00 | 99eb785a-29dc-4006-bdb9-784d38a2075b | 317183e1-2fe8-43a5-a303-6f7719350e85 | REPOSITORY | /general/bios
tat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job [  ]
2023-02-15T02:16:21+00:00 | fd655b6e-9a18-4d48-96ad-60edca349c3d | fbf47a94-e3b3-42df-9452-5e56cf775368 | REPOSITORY | /general/bios
tat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job [  ]
2023-02-15T03:17:44+00:00 | b3075acb-e602-45f1-bf65-56bb41f0bb8d | 5808a2ad-0604-4992-bfed-ecf9b6867653 | REPOSITORY | /general/bios
tat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job [  ]
2023-02-15T03:18:01+00:00 | 41a2d679-1518-4419-989f-80abf8612c52 | e8614c76-0fbf-4e68-8e58-8a49bd797961 | REPOSITORY | /general/bios
tat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job [  ]
2023-02-15T04:19:23+00:00 | 0d01a0c0-6f33-4180-8cf2-ea14221163cc | 39f9ca7b-5518-4c00-9e25-1d1d70395938 | REPOSITORY | /general/bios
tat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job [  ]
2023-02-15T04:19:41+00:00 | c66dc690-753c-4f88-88c6-58c5c0e0c83d | de442103-ff72-41a3-806c-67b07c577fd6 | REPOSITORY | /general/bios
tat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job [  ]
2023-02-15T05:21:33+00:00 | b0d2b10a-0222-455d-858a-27a8aa8567e5 | 9fb50455-d04f-4a53-809d-e1b0b9743adf | REPOSITORY | /general/bios
tat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job [  ]
2023-02-15T05:21:51+00:00 | 3350e1cf-e27b-423e-9a21-7a01fd85bb26 | 15b43421-e326-4ca4-a03f-72cf35ccd349 | REPOSITORY | /general/bios
tat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job [  ]
2023-02-15T06:22:13+00:00 | f93e2a9b-a0a2-4fa7-ae4d-2dca198a2c5d | eda31b31-7eb1-45f7-84ef-610a128bd860 | REPOSITORY | /general/bios
tat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_studysetup.job [  ]
2023-02-15T06:22:31+00:00 | e83aa330-29e5-465d-946a-453b15f3d82a | 48f56e45-69c0-4fbd-8e77-66d06e878ef3 | REPOSITORY | /general/bios
tat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job [  ]
path: /saswork/sas_tmp/SAS_work60810017E407_xar08auv.vsp.sas.com/SAS_work41A00017E407_xar08auv.vsp.sas.com
command: [sh, -c, cat  submitted_jobs.txt]
NOTE: The data set WORK.SUBMITTED_JOBS has 94 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

NOTE: Setting Java classpath back to its original state: !CLASSPATH
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND.RESET_CLASSPATH):   OPTIONS SET=CLASSPATH "!CLASSPATH";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.SHELLCOMMAND):  ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):  ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   data submitted_jobs;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   set submitted_jobs;
                                                           The SAS System

MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   if _n_=1 then do;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   call symputx('submJobVars', compbl(translate(line, " ", "|[]")));
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   delete;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   end;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   if line ^= ' ';
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   run;

NOTE: There were 94 observations read from the data set WORK.SUBMITTED_JOBS.
NOTE: The data set WORK.SUBMITTED_JOBS has 92 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

Read SUBMJOBVARS=dateSubmitted lsafJobSubmissionId sessionId location jobPath jobVersion
MAUTOCOMPLOC:  The autocall macro VARLIST is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/mac
            ros/_library/varlist.sas.
Keeping only expected vars: EXPECTED_SUBMJOBVARS=dateSubmitted lsafJobSubmissionId sessionId location jobPath jobVersion
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   data submitted_jobs;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   set submitted_jobs end=last;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   length dateSubmitted $32 lsafJobSubmissionId sessionId $64 location $32 jobPath 
$1024 jobVersion $20;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   DATESUBMITTED = strip(scan(line, 1, "|[]"));
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   LSAFJOBSUBMISSIONID = strip(scan(line, 2, "|[]"));
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   SESSIONID = strip(scan(line, 3, "|[]"));
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   LOCATION = strip(scan(line, 4, "|[]"));
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   JOBPATH = strip(scan(line, 5, "|[]"));
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   JOBVERSION = strip(scan(line, 6, "|[]"));
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   if scan(jobpath, -1, "/\") = "job_gadam_rebuild_adam.job";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   jobVersion = coalescec(jobVersion, '-');
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   put (dateSubmitted lsafJobSubmissionId sessionId location jobPath jobVersion) (=);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   array _jobinfo $ dateSubmitted lsafJobSubmissionId sessionId location jobPath 
jobVersion;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   drop i;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   if lsafJobSubmissionId ^= ' ' then do;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   do i = 1 to dim(_jobinfo);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   call symputx(vname(_jobinfo[i]), trim(_jobinfo[i]), "G");
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   end;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   end;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.L):   run;

dateSubmitted=2023-02-14T23:30:16+00:00 lsafJobSubmissionId=5d8365c8-c67a-422e-87b1-ce697338b440
sessionId=7f638963-49ee-4b44-ac73-92fadd984cc1 location=REPOSITORY
jobPath=/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job jobVersion=-
dateSubmitted=2023-02-14T23:44:54+00:00 lsafJobSubmissionId=e10042a4-6280-4c02-92e6-fbbdbb000293
sessionId=74acd903-0820-46df-9eca-9bf1871cc8d1 location=REPOSITORY
jobPath=/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job jobVersion=-
dateSubmitted=2023-02-15T00:04:02+00:00 lsafJobSubmissionId=148321f5-b885-4551-8067-3918a98f9576
sessionId=eb786597-123e-48a5-9ac0-2eac90d5b35b location=REPOSITORY
jobPath=/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job jobVersion=-
dateSubmitted=2023-02-15T00:10:32+00:00 lsafJobSubmissionId=771f920f-4235-4216-8e58-d3d5fc4f2ebe
sessionId=b25bdfe3-dca5-4c08-ba14-6a327420fd24 location=REPOSITORY
jobPath=/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job jobVersion=-
dateSubmitted=2023-02-15T01:14:44+00:00 lsafJobSubmissionId=0e426e98-1f39-407e-a152-2a4b08808841
sessionId=71634010-3358-4917-b8e7-d591ceb0e9c0 location=REPOSITORY
jobPath=/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job jobVersion=-
dateSubmitted=2023-02-15T02:16:21+00:00 lsafJobSubmissionId=fd655b6e-9a18-4d48-96ad-60edca349c3d
                                                           The SAS System

sessionId=fbf47a94-e3b3-42df-9452-5e56cf775368 location=REPOSITORY
jobPath=/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job jobVersion=-
dateSubmitted=2023-02-15T03:18:01+00:00 lsafJobSubmissionId=41a2d679-1518-4419-989f-80abf8612c52
sessionId=e8614c76-0fbf-4e68-8e58-8a49bd797961 location=REPOSITORY
jobPath=/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job jobVersion=-
dateSubmitted=2023-02-15T04:19:41+00:00 lsafJobSubmissionId=c66dc690-753c-4f88-88c6-58c5c0e0c83d
sessionId=de442103-ff72-41a3-806c-67b07c577fd6 location=REPOSITORY
jobPath=/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job jobVersion=-
dateSubmitted=2023-02-15T05:21:51+00:00 lsafJobSubmissionId=3350e1cf-e27b-423e-9a21-7a01fd85bb26
sessionId=15b43421-e326-4ca4-a03f-72cf35ccd349 location=REPOSITORY
jobPath=/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job jobVersion=-
dateSubmitted=2023-02-15T06:22:31+00:00 lsafJobSubmissionId=e83aa330-29e5-465d-946a-453b15f3d82a
sessionId=48f56e45-69c0-4fbd-8e77-66d06e878ef3 location=REPOSITORY
jobPath=/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job jobVersion=-
NOTE: There were 92 observations read from the data set WORK.SUBMITTED_JOBS.
NOTE: The data set WORK.SUBMITTED_JOBS has 10 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):  ;
DATESUBMITTED=2023-02-15T06:22:31+00:00  LSAFJOBSUBMISSIONID=e83aa330-29e5-465d-946a-453b15f3d82a   
SESSIONID=48f56e45-69c0-4fbd-8e77-66d06e878ef3  LOCATION=REPOSITORY 
JOBPATH=/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job JOBVERSION=-
MPRINT(SETENV.SETENV02):  ;
progversion = 1.0
MPRINT(SETENV):  ;
MPRINT(SETENV):   options nomprintnest;
(SETENV): Done.
249        option mprint nomlogic nosymbolgen MAUTOCOMPLOC NOMAUTOLOCDISPLAY mrecall ls=180;
250        
251        
252        *- Define new SAS functions with PROC FCMP -*;
253        %del_fcmp;  %*- clean up previous fcmp definitions -*;
MAUTOCOMPLOC:  The autocall macro DEL_FCMP is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/del_fcmp.sas.
fcmpoutlib=work.functions
254        %include "&REPEVPATH.programs/fcmp_run.sas";  *- defines function runmacro() that allows executing code wrapped in a macro "on the side" from within a running data step
254      ! -*;
NOTE: %INCLUDE (level 1) file 
      /lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/jobs/gadam_rebuild_adam/prod/programs/fcmp_run.sas is 
      file /lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/jobs/gadam_rebuild_adam/prod/programs/fcmp_run.sas.
255       +/*******************************************************************************************************************************************
256       +@file
257       +@brief      Define (a package of) user-written SAS function(s)/ call routine(s) to be compiled by PROC FCMP: Package of Fcmp functions to
258       +            deal with running SAS Code within a FCMP function computations.
259       +@author     Jean-Michel Bodart
260       +@note       this program is meant to be called from a SAS project environment initialization program
261       +
262       +#### Update History ####
263       +
264       +    Date             Name                        Description
265       +    ------------     --------------------------  -------------------------------------------------------------------------------------------
266       +@cond
267       +*******************************************************************************************************************************************/
268       +
269       +%*- Determine <libname>.<dataset> where to store FCMP functions/routines -*;
                                                                                   The SAS System

270       +%*------------------------------------------------------------------------*;
271       +%*- retrieve first location specified in CMPLIB option (if any) -*;
272       +%let fcmpoutlib=%scan(%qsysfunc(prxchange(s/(_NO)?_DISPLAYLOC_//i, -1, %qsysfunc(getoption(cmplib)))), 1, ( -));
273       +%*- if empty, replace by 'fcmp.functions' -*;
274       +%let fcmpoutlib=%sysfunc(ifc(%length(%superq(fcmpoutlib))=0, fcmp.functions, %superq(fcmpoutlib)));
275       +%*- if <libname> is not assigned to a path, replace by 'work.functions' -*;
276       +%let fcmpoutlib=%sysfunc(ifc(%length(%qsysfunc(pathname(%scan(%superq(fcmpoutlib), 1, .), L)))=0, work.functions, %superq(fcmpoutlib)));
277       +%put fcmpoutlib=&fcmpoutlib;
fcmpoutlib=work.functions
278       +
279       +%*- assign a package name -*;
280       +%let package = run;
281       +
282       +%macro del_existing;
283       +   %if %sysfunc(exist(&fcmpoutlib., data)) %then %do;
284       +      %*- get list of existing functions in selected package -*;
285       +      %let func_list = ;
286       +      proc sql noprint;
287       +         select distinct scan(_KEY_, -1, ".") into :func_list separated by ' '
288       +            from &fcmpoutlib. where type="Prototype" and scan(_key_, 1, ".") = "F" and scan(_key_, 2, ".") = %sysfunc(quote(%qupcase(%superq(package))))
289       +            ;
290       +      quit;
291       +      %put Existing FCMP functions in &fcmpoutlib.&package: &func_list..;
292       +
293       +      proc fcmp outlib=&fcmpoutlib..&package.; /* outlib = <library>.<dataset>.<package> */
294       +
295       +         %if %index(%str( &func_list ), %str( RUNMACRO )) %then %do;
296       +            deletefunc RUNMACRO; /* delete pre-existing instance of this function to avoid war-ning about re-defining it. */
297       +         %end;
298       +
299       +      quit;
300       +   %end;
301       +%mend del_existing;
302       +%del_existing;
303       +
304       +proc fcmp outlib=&fcmpoutlib..&package.; /* outlib = <library>.<dataset>.<package> */
305       +
306       +   *- Function that runs SAS Code passed quoted as macro-variable ARGS to macro %run_macro,
307       +      which is expected to have been already compiled or to be found among the autocall macros.
308       +      The %run_macro has no parameters but retrieves the contents of ARGS from macro-variable &ARGS,
309       +      de-quote them and executes them.  The code executed is expected to assign a value to macro-variable &RESULT
310       +      which is passed back to the FCMP function and becomes the value returned by that FCMP function.
311       +   -*;
312       +   function RUNMACRO(args $) $;*$32000;
313       +      length result $32000;
314       +      result="";
315       +      rc = run_macro('run_macro', args, result);
316       +     *if rc = 0 then return(quote(trimn(result)));
317       +      if rc = 0 then return(trimn(result));
318       +      else return('ER'||'ROR attempting to call macro run_macro');
319       +   endsub;
320       +
321       +   /* *- test -*;
322       +
323       +   res = RUNMACRO('%lib_datasets(lib=maps);');
324       +   put res=;
325       +
326       +   res = RUNMACRO('%non_existing_macro(lib=maps);');
                                                                                   The SAS System

327       +   put res=;
328       +
329       +   */
330       +run;

NOTE: Function RUNMACRO saved to work.functions.run.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

331       +quit;
332       +
333       +%*- Set OPTION CMPLIB so as to allow SAS to find and access the fcmp functions -*;
334       +%*------------------------------------------------------------------------------*;
335       +%*- prepencd &fcmpoutlib. to OPTION CMPLIB value, unless it is already part of this option value -*;
336       +options %sysfunc(ifc( %sysfunc(exist(&fcmpoutlib., data)) and %sysfunc(findw(%qsysfunc(getoption(cmplib)), &fcmpoutlib., ( -), ei))=0 , insert=(cmplib=&fcmpoutlib.),
336      !+%str( )));
337       +%put option cmplib=%sysfunc(getoption(cmplib));
option cmplib=work.functions
338       +
339       +/* *- example usage -*;
340       +
341       +
342       +data test;
343       +   length args result $32000;
344       +   args = '%lib_datasets(lib=maps);';
345       +   result = runmacro(args);
346       +run;
347       +
348       +%let list = - ;
349       +%let list = %sysfunc(runmacro(  %qsysfunc(dequote('%lib_datasets(lib=sashelp);'))  ));
350       +%put list = ->&list<-;
351       +
352       +data test;
353       +   length args result $32000;
354       +   args = '%non_existing_macro(lib=maps);';
355       +   result = runmacro(args);
356       +run;
357       +
358       +%let list = - ;
359       +%let code = %qsysfunc(dequote('%non_existing_macro(lib=sashelp);'));
360       +%put code = &code;
361       +%put ...;
362       +%let list = %sysfunc(runmacro(  &code  ));
363       +%put list = ->&list<-;
364       +
365       +%put >>>%sysfunc(runmacro('proc sql; select distinct quote(strip(sex)) into :result separated by ", " from adam.adsl; quit;'))<<<;  %*- this includes lots of (unwanted)
365      !+trailing spaces -*;
366       +
367       +%put %sysfunc(trim(%qsysfunc(runmacro('proc sql; select distinct quote(strip(sex)) into :result separated by ", " from adam.adsl; quit;'))));
368       +%put %sysfunc(trim(%qsysfunc(runmacro('proc sql; select distinct quote(strip(sex)) into :result separated by '', '' from adam.adsl; quit;'))));
369       +
370       +
371       +*- this gives expected results - without extra spaces in the log -*;
372       +data test;
373       +   do Sex = %sysfunc(runmacro('proc sql; select distinct quote(strip(sex)) into :result separated by '', '' from adam.adsl; quit;'));
374       +      put Sex=;
                                                                                   The SAS System

375       +      output;
376       +   end;
377       +run;
378       +
379       +data test;
380       +   do age = %sysfunc(runmacro('proc sql; select distinct age into :result separated by '', '' from adam.adsl; quit;'));
381       +      put age=;
382       +      output;
383       +   end;
384       +run;
385       +
386       +
387       +*- this gives expected results too -*;
388       +data test;
389       +   do Sex = %sysfunc(trim(%qsysfunc(runmacro('proc sql; select distinct quote(strip(sex)) into :result separated by '', '' from adam.adsl; quit;'))));
390       +      put Sex=;
391       +      output;
392       +   end;
393       +run;
394       +
395       +data test;
396       +   do age = %sysfunc(trim(%qsysfunc(runmacro('proc sql; select distinct age into :result separated by '', '' from adam.adsl; quit;'))));
397       +      put age=;
398       +      output;
399       +   end;
400       +run;
401       +
402       +*/
NOTE: %INCLUDE (level 1) ending.
403        
404        *- Expected LSAF job parameters are passed as global macro-variables -*;
405        %global gadam_study_path sdtm_last_path qc_gadam_vs_study check_and_load_gadam run_gadam_tables force mock job_instance wait;
406        /* e.g. */
407        /*
408        %let gadam_study_path = &_SASWS_/clinical/argx-113/mg/argx-113-1704/biostat/staging/generic_adam;
409        %let sdtm_last_path   = &_SASWS_/clinical/argx-113/mg/argx-113-1704/biostat/staging/data_received/sdtm_last;
410        %let qc_gadam_vs_study = Y;
411        %let check_and_load_gadam = Y; %* set to Y to to check and load gADaM datasets from '../adam/tmp/'  to '../adam/' folder and optionally, to create/refresh gADaM tables;
412        %let run_gadam_tables = Y;     %* set to Y to create/refresh gADaM tables (if &check_and_load_gadam=Y);
413        %let force = N;
414        %let mock = N;
415        
416        %let gadam_study_path = &_SASWS_/clinical/argx-113/mg/argx-113-0000/biostat/staging/generic_adam;
417        %let sdtm_last_path   = &_SASWS_/clinical/argx-113/mg/argx-113-0000/biostat/staging/data_received/sdtm_last;
418        */
419        ;
420        
421        
422        %macro gadam_rebuild_adam;
423        
424        %put &=gadam_study_path; %put &=sdtm_last_path; %put &=qc_gadam_vs_study; %put &=check_and_load_gadam; %put &=run_gadam_tables; %put &=force; %put &=mock;
425        
426        %local gadam_study_relpath;
427        %let gadam_study_relpath = %sysfunc(prxchange(s!^%prxescape(%superq(_SASWS_))!!, 1, %superq(gadam_study_path)));
428        
429        %put Checking if Study-level job exists in Repository: &gadam_study_relpath./jobs/job_gadam_rebuild_adam.job;
430        %lsaf_exists(lsaf_path=&gadam_study_relpath./jobs/job_gadam_rebuild_adam.job);
431        %let study_job_exists = &_lsafExists_;
                                                                                   The SAS System

432        
433        *- Check disk usage and concomitant sessions -*;
434        %get_sessions_infos();
435        
436        
437        *- jbodart - 2022-11-16 - Submit separate Study-level job if found in LSAF repository (even if not available in transient folder),
438                                  in order to keep individual study logs -*;
439        %if &study_job_exists %then %do;
440           %let sdtm_last_path = %sysfunc(prxchange(s!^%prxescape(%superq(_SASWS_))!!, 1, %superq(sdtm_last_path)));
441           %put %str(Not)ice:(&sysmacroname): Submitting separate Study-level job: &gadam_study_relpath./jobs/job_gadam_rebuild_adam.job;
442           %put %str(Not)ice:(&sysmacroname): with &=sdtm_last_path;
443        
444           %*- Submit study-level job -*;
445           %submit_job(&gadam_study_relpath./jobs/job_gadam_rebuild_adam.job                        /*- Lsaf Job Path - expected to start with /general/... or /clinical/... -*/
446                         ,wait = Y                   /*- If Y, waits until job completes and print refershed job status to the log at regular intervals -*/
447                         ,include_subfolders = Y     /*- If a job parameter is a folder path, whether to include subfolders -*/
448                         ,poll_interval = 2.5        /*- Poll interval, i.e. number of seconds to wait before printing refreshed status to the log -*/
449                         ,poll_intv_incr_every = 30  /*- Number of seconds after which poll interval will be increased -*/
450                         ,poll_intv_incr_factor = 3  /*- Factor by which poll interval will be increased -*/
451                         ,poll_intv_max = 30         /*- Maximum number of seconds to which the poll interval can be increased -*/
452                         ,warn = Y
453                         ,parent_job_instance = &job_instance
454                         );
455        
456           %*- enable versioning of job log (if it exists) - jbodart - 2022-08-23 -*;
457           %lsaf_exists(lsaf_path=&gadam_study_relpath./log/job_gadam_rebuild_adam.log);
458           %if &_lsafExists_ %then %do;
459              %lsaf_getproperties(lsaf_path=&gadam_study_relpath./log/job_gadam_rebuild_adam.log);
460              %let version=;
461              proc sql noprint; select value into :version trimmed from work.lsafGetProperties where name = "version"; quit;
462              %if %length(%superq(version))=0 %then %do;
463                 %lsaf_enableversioning(lsaf_path=&gadam_study_relpath./log/job_gadam_rebuild_adam.log);
464              %end;
465           %end; %else %do;
466              %put %str(WAR)NING:(&sysmacroname): lsaf_path does not exist: &gadam_study_relpath./log/job_gadam_rebuild_adam.log;
467           %end;
468        
469           %*- enable versioning of manifest (if it exists) - jbodart - 2022-08-23 -*;
470           %lsaf_exists(lsaf_path=&gadam_study_relpath./manifest/job_gadam_rebuild_adam.mnf);
471           %if &_lsafExists_ %then %do;
472              %lsaf_getproperties(lsaf_path=&gadam_study_relpath./manifest/job_gadam_rebuild_adam.mnf);
473              %let version=;
474              proc sql noprint; select value into :version trimmed from work.lsafGetProperties where name = "version"; quit;
475              %if %length(%superq(version))=0 %then %do;
476                 %lsaf_enableversioning(lsaf_path=&gadam_study_relpath./manifest/job_gadam_rebuild_adam.mnf);
477              %end;
478           %end; %else %do;
479              %put %str(WAR)NING:(&sysmacroname): lsaf_path does not exist: &gadam_study_relpath./manifest/job_gadam_rebuild_adam.mnf;
480           %end;
481        
482           %return;
483        %end; %else %do;
484           %put %str(WAR)NING: Study-level job file not found in current environment, not submitted: &_SASWS_.&gadam_study_relpath./jobs/job_gadam_rebuild_adam.job;
485        %end;
486        
487        %if %index(%superq(gadam_study_path), &_SASWS_) = 0 %then %do;
488           %let gadam_study_path = &_SASWS_.&gadam_study_path;
489        %end;
                                                                                   The SAS System

490        
491        %if %index(%superq(sdtm_last_path), &_SASWS_) = 0 %then %do;
492           %let sdtm_last_path = &_SASWS_.&sdtm_last_path;
493        %end;
494        
495        %if %direxist(&gadam_study_path./output/data, create=Y) %then %do;
496           libname out "&gadam_study_path./output/data" compress=YES;
497        %end;
498        
499        
500        *-----------------------------------------------------------------------------*;
501        *---- gADaM datasets creation/refresh if requested in '../adam/tmp/'      ----*;
502        *---- and, optionally, compare vs study datasets (if qc_gadam_vs_study=Y) ----*;
503        *---- and, optionally, loaded in '../adam/' (if check_and_load_gadam=Y)   ----*;
504        *-----------------------------------------------------------------------------*;
505        
506        %put &=gadam_study_path;
507        
508        %let gadam_rel_path = %sysfunc(prxchange(s!^%prxescape(%superq(_SASWS_))!!, 1, %superq(gadam_study_path)));
509        %put &=gadam_rel_path;
510        
511        libname gadam    %sysfunc(quote(%superq(gadam_study_path)/adam)) access=readonly;
512        libname gadamtmp %sysfunc(quote(%superq(gadam_study_path)/adam/tmp)) access=readonly;
513        libname gadamdoc %sysfunc(quote(%superq(gadam_study_path)/documents)) access=readonly;
514        *libname gadamout %sysfunc(quote(%superq(gadam_study_path)/output/data)) access=readonly; %*PSC commented as same as 'out' library 2022-02-02;
515        
516        %let sdtm_last_rel_path = %sysfunc(prxchange(s!^%prxescape(%superq(_SASWS_))!!, 1, %superq(sdtm_last_path)));
517        %put &=sdtm_last_rel_path;
518        
519        libname sdtmlast %sysfunc(quote(%superq(sdtm_last_path))) access=readonly;
520        
521        *- get last modification date / time of latest sdtm dataset -*;
522        %let sdtm_last_modate = 0;
523        proc sql noprint;
524           select put(max(modate), best12.) into :sdtm_last_modate trimmed
525              from DICTIONARY.TABLES where libname = "SDTMLAST"
526                 ;
527        quit;
528        %put sdtm_last_modate = &sdtm_last_modate (%sysfunc(putn(&sdtm_last_modate, E8601DT.)));
529        
530        *- get generic_adam adam/tmp datasets and their last modification date / time -*;
531        *- get generic_adam adam     datasets and their last modification date / time -*;
532        proc sql noprint;
533           create table adam as
534              select distinct memname, modate
535                 from DICTIONARY.TABLES where libname = "GADAM" /*"ADAM"*/
536                    ;
537           create table adamtmp as
538              select distinct memname, modate as tmpmodate format=datetime.
539                 from DICTIONARY.TABLES where libname = "GADAMTMP" /*"ADAMTMP"*/
540                    ;
541        quit;
542        
543        *- PSC: added: 2022-02-02: for out.run_ad_jobs (could also have used each last modif date but need more program change) *;
544        *- get lastest modification of all generic_adam adam/tmp datasets -*;
545        %let adamtmp_last_modate = 0;
546        proc sql noprint;
547           select put(max(tmpmodate), best12.) into :adamtmp_last_modate trimmed
                                                                                   The SAS System

548             from adamtmp;
549        quit;
550        %put adamtmp_last_modate = &adamtmp_last_modate %sysfunc(putn(&adamtmp_last_modate, datetime16.));
551        
552        
553         %macro get_lsaf_children(path, depth, out=work.lsafGetChildren);
554             %*- macro to retrieve contents of LSAF path -*;
555             %global _lsafRC_ _lsafExists_;
556             %let _lsafRC_ = -1;
557             %put %qsubstr('%',2,1)get_lsaf_children(%superq(path), %superq(depth), out=%superq(out))%qsubstr(';',2,1);
558             proc sql noprint;
559                create table &out.0
560                      (
561                       path char(2048) label='Item Path',
562                       name char(256) label='Item Name',
563                       itemType char(32) label='Item Type',
564                       isContainer num label='Is Item A Container?',
565                       description char(512) label='Description',
566                       version char(32) label='Version Number',
567                       isVersioned num label='Is File Versioned',
568                       isCheckedOut num label='Is File Checked out',
569                       isLocked num label='Is File Locked',
570                       signatureStatus char(32) label='Is File Signed',
571                       size num label='Size In Bytes',
572                       formattedsize char(20) label="Size (Formatted)",  /*- jbodart - 2022-07-01 - variable added in LSAF 5.3; without it, proc append fails. -*/
573                       createdBy char(64) label='Userid that created the item',
574                       created char(64) label='Item Creation Date',
575                       dateCreated num format=DATETIME. label='Date the item was created (SAS DateTime Format)',
576                       lastModifiedBy char(64) label='Userid that last modified the item content',
577                       lastModified char(64) label='Last Content Modification Date',
578                       dateLastModified num format=DATETIME. label='Date the item''s content was last modified (SAS DateTime Format)',
579                       propertiesLastModifiedBy char(64) label='Userid that last modified the item properties',
580                       propertiesLastModified char(64) label='Last Properties Modification Date',
581                       datePropertiesLastModified num format=DATETIME. label='Date the item''s properties were last modified (SAS DateTime Format)',
582                       state char(64) label='State of an Analysis or Project'
583                      );
584                 %if %sysfunc(exist(&out, data)) = 0 %then %do;
585                     create table &out like &out.0;
586                 %end;
587             quit;
588        
589             %local options;
590             %let options = %sysfunc(getoption(mprint));
591             option nomprint;
592             %let action = lsaf_exists;
593             %let _lsafExists_ = 0;
594             %lsaf_exists(lsaf_path=%superq(path));
595             %if %superq(_lsafExists_) = 1 %then %do;
596                %let action = lsaf_getchildren;
597                %lsaf_getchildren(lsaf_path=%superq(path), sas_dsname=&out.0, lsaf_recursive=&depth);
598                option &options;
599                %if %superq(_lsafRC_) = 0 %then %do;
600                   %put (1) syslast = &syslast;
601                   /*proc append base=&out. data=&out.0; run;*/
602                   %uni_vlength(data=&out. &out.0);
603                   data &out;
604                      set
605                          &out
                                                                                   The SAS System

606                          &out.0
607                          ;
608                   run;
609                   %put (2) syslast = &syslast;
610                %end;
611             %end;
612             %let result = %superq(_lsafRC_): &action - %superq(_lsafMsg_);
613        
614         %mend get_lsaf_children;
615        
616        
617        %if %sysfunc(exist(work.jobs, data)) %then %do;
618            proc sql; drop table work.jobs; quit;
619        %end;
620        
621        
622        %if &runenvironment = local %then %do;
623           %lsaf_logout;
624           %login_to_lsaf;
625           %put _SASWS_=&_SASWS_;
626        %end;
627        
628        %get_lsaf_children(&gadam_rel_path/jobs, 1, out=work.jobs)
629        
630        *- get generic_adam dataset job names and derive corresponding dataset name -*;
631        data jobs(drop=iscontainer);
632           set jobs0(keep= name iscontainer datelastmodified);
633           where iscontainer = 0;
634        run;
635        
636        data adamjobs(index=(memname));
637           set jobs(rename=(name=adamjob dateLastModified=jobmodate)) ;
638           where prxmatch('/^job_(ad\w+)\.job$/', cats(adamjob));
639           memname = upcase(prxchange('s/^job_(ad\w+)\.job$/\1/i', 1, cats(adamjob)));
640        run;
641        
642        /*
643        data adamjobs(index=(memname));
644           length adamjob $200 memname $32;
645           do adamjob = %filelist(&_SASWS_.&gadam_rel_path/jobs/job_ad%str(*).job
646                                ,pattern="%~nxi"    %*- return filename + extension, without path, double-quoted -*;
647                                ,pad=N, sep=#cs#, none=" "); %*- separated by comma + space -*;
648              memname = upcase(prxchange('s/^job_(ad\w+)\.job$/\1/i', 1, cats(adamjob)));
649              output;
650           end;
651        run;
652        */
653        
654        %uni_vlength(data=adam adamtmp adamjobs);
655        
656        %let need_update=0;
657        %let need_load=0;
658        data adamtmpjobs;
659           merge
660              adam /*- PSC added 2022-01-25: -*/ (where=(memname ne "ADAMCHECK"))
661              adamtmp
662              adamjobs(in=a)
663              end=last
                                                                                   The SAS System

664              ;
665           by memname;
666           if a; /*- JMB added 2022-01-25 -*/
667           if modate > tmpmodate > %sysfunc(quote(%sysfunc(putn(&sdtm_last_modate, datetime22.))))dt
668              then uptodate = 1;
669              else uptodate = 0;
670           if tmpmodate > %sysfunc(quote(%sysfunc(putn(&sdtm_last_modate, datetime22.))))dt
671           and tmpmodate > jobmodate
672              then tmpuptodate = 1;
673              else tmpuptodate = 0;
674           need_load+(uptodate=0);
675           need_update+(tmpuptodate=0);
676        run;
677        
678        data _null_;
679           set adamtmpjobs end=last;
680           if last then call symput("need_update", cats(put(need_update,best.)));
681           if last then call symput("need_load", cats(need_load));
682        run;
683        %put &=need_update;
684        %put &=need_load;
685        
686        %if &runenvironment = local %then %do;
687           %lsaf_logout;
688           %login_to_lsaf;
689           %put _SASWS_=&_SASWS_;
690        %end;
691        
692        %let outputfilename = none;  %*- macro-variable refrred to by %programend -*;
693        
694        %put debug = %superq(debug);
695        %put runenvironment = %superq(runenvironment);
696        
697        %let start_dtc = %sysfunc(datetime(), E8601DT.);
698        
699        %*- macro to repeatedly check LSAF job status until completion -*;
700        %macro check_job_status;
701            %global _lsafRC_ _lsafJobSubmissionId_ _lsafJobSubmissionStatus_ result;
702            %local start_time prev_status options;
703            %let options=%sysfunc(getoption(ls, keyword))
704                         %sysfunc(getoption(mprint))
705                         %sysfunc(getoption(notes))
706                         ;
707            %let start_time = %sysfunc(time());
708            %if &_lsafRC_ = 0 %then %do;
709                option %if &debug=0 %then %do; nomprint nonotes %end; ls=180;
710                %put (&sysmacroname): Submitted Job with Submission ID: &_lsafJobSubmissionId_;
711                %do %until(%sysfunc(prxmatch(/COMPLETED/, %superq(_lsafJobSubmissionStatus_ ))));
712                   %get_lsaf_job_submission_status(lsaf_jobsubmission_id=&_lsafJobSubmissionId_, verbose=N);
713                   %if %superq(prev_status) ^= %superq(_lsafJobSubmissionStatus_)
714                      %then %put (&sysmacroname): %sysfunc(time(), tod11.2) Elapsed: %sysfunc(putn(%sysevalf(%sysfunc(time())-&start_time), tod11.2)) Job Submission Status:
714      ! %superq(_lsafJobSubmissionStatus_ );
715                   %let rc=%sysfunc(sleep(2.5, 1));
716                   %if &_lsafRC_ ^= 0 %then %put (Elapsed: %sysfunc(putn(%sysevalf(%sysfunc(time())-&start_time), tod11.2)) Job Submission Status:
716      ! %superq(_lsafJobSubmissionStatus_ ): &_lsafRC_: &_lsafMsg_;
717                   %let prev_status = %superq(_lsafJobSubmissionStatus_);
718                %end;
719                %put (&sysmacroname): &_lsafRC_: &_lsafMsg_;
                                                                                   The SAS System

720            %end; %else %do;
721                %put (&sysmacroname): &_lsafRC_: &_lsafMsg_;
722            %end;
723            %let result = Job Submission Status: %superq(_lsafJobSubmissionStatus_ ): &_lsafRC_: &_lsafMsg_;
724            %*- 2022-07-04 - jbodart - Report issues from child job submission status based on either LSAF 5.2 or LSAF 5.4 format. -*;
725            %if       %sysfunc(prxmatch(/COMPLETED_(SAS)?ER%str(ROR)/, %superq(_lsafJobSubmissionStatus_)))     %then %put %str(ER)ROR:(&sysmacroname): job has status:
725      ! %superq(_lsafJobSubmissionStatus_);
726            %else %if %sysfunc(prxmatch(/COMPLETED.*_CHECKIN_ER%str(ROR)/, %superq(_lsafJobSubmissionStatus_))) %then %put %str(ER)ROR:(&sysmacroname): job has status:
726      ! %superq(_lsafJobSubmissionStatus_);
727            %else %if %sysfunc(prxmatch(/COMPLETED_%str(FAI)LED/i, %superq(_lsafJobSubmissionStatus_)))         %then %put %str(ER)ROR:(&sysmacroname): job has status:
727      ! %superq(_lsafJobSubmissionStatus_);
728            %else %if %sysfunc(prxmatch(/COMPLETED_(SAS)?WAR%str(NING)/, %superq(_lsafJobSubmissionStatus_)))   %then %put %str(WAR)NING:(&sysmacroname): job has status:
728      ! %superq(_lsafJobSubmissionStatus_);
729            options &options;
730        %mend check_job_status;
731        
732        %*- macro to submit generic adam creation job and wait for its completion -*;
733        %macro run_gadam_job(lsaf_path=&_SASWS_/clinical/argx-113/mg/argx-113-1704/biostat/staging/generic_adam/jobs/job_adsl.job);
734           %put; %put %nrstr(%run_gadam_job)(lsaf_path=%superq(lsaf_path))%qsubstr(';',2,1);
735           %local options;
736           %let options=%sysfunc(getoption(ls, keyword))
737                        %sysfunc(getoption(mprint))
738                        %sysfunc(getoption(notes))
739                        ;
740        
741                option %if &debug=0 %then %do; nomprint nonotes %end; ls=180;
742           %global _lsafRC_ _lsafJobSubmissionId_ _lsafJobSubmissionStatus_ result;
743           %let _lsafRC_=;
744           %let _lsafJobSubmissionId_=;
745           %let _lsafJobSubmissionStatus_=;
746           %let result=;
747           %lsaf_submitjob(lsaf_path=&lsaf_path, lsaf_version=, sas_dsname=/*work.job_Parameters*/);
748           %check_job_status;
749            options &options;
750        %mend;
751        
752        
753        /*
754        %put &_SASWS_.&gadam_rel_path/jobs/job_ad%str(*).job;
755        %put %filelist(&_SASWS_.&gadam_rel_path/jobs/job_ad%str(*).job
756                       , pattern="%~nxi"
757                       , pad=N, sep=#cs#, none=" ");
758        */
759        
760        *- Submit adam jobs to LSAF -*;
761        %macro run_ad_jobs;
762           data run_ad_jobs
763             %if %sysfunc(libref(out))=0 %then %do;
764                out.run_ad_jobs
765             %end;
766             ;
767              format sdtm_last_modate adamtmp_last_modate datetime.;
768              length file $200 lsaf_path $400;
769              sdtm_last_modate = %sysfunc(quote(%sysfunc(putn(&sdtm_last_modate, datetime22.))))dt; %* PSC added: 2022-02-02;
770              adamtmp_last_modate = %sysfunc(quote(%sysfunc(putn(&adamtmp_last_modate, datetime22.))))dt; %* PSC added: 2022-02-02;
771              *- first run adsl.job if it exists -*;
772              if "job_adsl.job" in (%filelist(&_SASWS_.&gadam_rel_path/jobs/job_ad%str(*).job
773                                   ,pattern="%~nxi"    /*- return filename + extension, without path, double-quoted -*/
                                                                                   The SAS System

774                                   ,pad=N, sep=#cs#, none=" ")) /*- separated by comma + space -*/
775              then do;
776                    file = "job_adsl.job";
777                    rundate = datetime();
778                    lsaf_path = "&gadam_rel_path/jobs/"||cats(file);
779                    %if &need_update > 0 or %qsysfunc(upcase(%superq(force)), $1.)=Y %then %do;
780                       %if %qsysfunc(upcase(%superq(mock)), $1.)=Y %then %do;
781                          result = '%run_gadam_job(lsaf_path='||cats(lsaf_path)||');';
782                          n_adam_updated+0;
783                       %end; %else %do;
784                          result = runmacro('%run_gadam_job(lsaf_path='||cats(lsaf_path)||');');
785                          n_adam_updated+1;
786                       %end;
787                    %end; %else %do;
788                       result = 'Skipped as &need_update = '||symget('need_update');
789                       n_adam_updated+0;
790                    %end;
791                    output;
792                    putlog "Not" "ice: === Job run: " file= result= " ===";
793              *end; %* PSC: 2022-02-02: put it after as if no adsl job then no job should be submitted;
794                *x = sleep(3, 1);
795                *- then run other ad jobs -*;
796                f = 0;
797                do file = %if %sysfunc(fileexist(&_SASWS_.&gadam_rel_path/jobs/job_adaper.job)) %then %do;  /*- JMB 2022-04-22 - need to run ADAPER prior to ADAE -*/
798                          "job_adaper.job",
799                          %end;
800                          %filelist(&_SASWS_.&gadam_rel_path/jobs/job_ad%str(*).job
801                                   ,pattern="%~nxi"    /*- return filename + extension, without path, double-quoted -*/
802                                   ,pad=N, sep=#cs#, none=" ")  /*- separated by comma + space -*/
803                          ;
804                   f + 1;
805                   if      file not in (" ", "job_adsl.job")
806                      and (file not in ("job_adaper.job") or f eq 1)
807                   then do;
808                      rundate = datetime();
809                      lsaf_path = "&gadam_rel_path/jobs/"||cats(file);
810                      %if &need_update > 0 or %qsysfunc(upcase(%superq(force)), $1.)=Y %then %do;
811                         %if %qsysfunc(upcase(%superq(mock)), $1.)=Y %then %do;
812                            result = '%run_gadam_job(lsaf_path='||cats(lsaf_path)||');';
813                            n_adam_updated+0;
814                         %end; %else %do;
815                            result = runmacro('%run_gadam_job(lsaf_path='||cats(lsaf_path)||');');
816                            n_adam_updated+1;
817                         %end;
818                      %end; %else %do;
819                         result = 'Skipped as &need_update = '||symget('need_update');
820                         n_adam_updated+0;
821                      %end;
822                      output;
823                      putlog "Not" "ice: === Job run: " file= result= " ===";
824                   end;
825                end;
826                %put %str(Not)ice: &=qc_gadam_vs_study;
827                %if %qsysfunc(upcase(%superq(qc_gadam_vs_study)), $1.)=Y %then %do;
828                      *- JMB 2022-03-07 - QC generic ADaM datasets vs Study ADaMs -*;
829                      rundate = datetime();
830                      file = "job_qcstudyadams.job";
831                      lsaf_path = "&gadam_rel_path/jobs/"||cats(file);
                                                                                   The SAS System

832                      %if &need_update > 0 or %qsysfunc(upcase(%superq(force)), $1.)=Y %then %do;
833                         %if %qsysfunc(upcase(%superq(mock)), $1.)=Y %then %do;
834                            result = '%run_gadam_job(lsaf_path='||cats(lsaf_path)||');';
835                         %end; %else %do;
836                            result = runmacro('%run_gadam_job(lsaf_path='||cats(lsaf_path)||');');
837                         %end;
838                      %end; %else %do;
839                         result = 'Skipped as &need_update = '||symget('need_update');
840                      %end;
841                      output;
842                      putlog "Not" "ice: === Job run: " file= result= " ===";
843                %end;
844                %put %str(Not)ice: &=check_and_load_gadam;
845                %if %qsysfunc(upcase(%superq(check_and_load_gadam)), $1.)=Y %then %do;
846                      rundate = datetime();
847                      file = "job_check_and_load.job";
848                      lsaf_path = "&gadam_rel_path/jobs/"||cats(file);
849                      %if &need_update > 0 or %qsysfunc(upcase(%superq(force)), $1.)=Y %then %do;
850                         %if %qsysfunc(upcase(%superq(mock)), $1.)=Y %then %do;
851                            result = '%run_gadam_job(lsaf_path='||cats(lsaf_path)||');';
852                         %end; %else %do;
853                            result = runmacro('%run_gadam_job(lsaf_path='||cats(lsaf_path)||');');
854                         %end;
855                      %end; %else %do;
856                         result = 'Skipped as &need_update = '||symget('need_update');
857                      %end;
858                      output;
859                      putlog "Not" "ice: === Job run: " file= result= " ===";
860                %end;
861             end; %* PSC: end of job_adsl.job*;
862             else do; %* PSC: added info if no job_adsl.job*;
863                file = "job_adsl.job";
864                rundate = .;
865                lsaf_path = "NO job_adsl.job";
866                result = 'Skipped as no job_adsl';
867                n_adam_updated=0;
868                output;
869                putlog "Not" "ice: === No ADxx Job runs as no job_adsl ===";
870             end;
871            %put %str(Not)ice: &=run_gadam_tables;
872            format rundate E8601DT.;
873           run;
874        %mend run_ad_jobs;
875        %run_ad_jobs;
876        
877        
878        *----------------------------------------------------------------------------*;
879        *----   gADaM tables creation/refresh if requested (run_gadam_tables=Y)  ----*;
880        *----------------------------------------------------------------------------*;
881        
882        *- get generic_adam table job names and derive corresponding sas program name -*;
883        *------------------------------------------------------------------------------*;
884        data tablejobs(index=(sas_program));
885           set jobs(rename=(name=tablejob dateLastModified=jobmodate)) ;
886           where prxmatch('/^job_(t\w+)\.job$/', cats(tablejob));
887           sas_program = prxchange('s/^job_(t\w+)\.job$/\1/i', 1, cats(tablejob));
888        run;
889        /*
                                                                                   The SAS System

890        data tablejobs(index=(sas_program));
891           length tablejob $200 sas_program $32;
892           do tablejob = %filelist(&_SASWS_.&gadam_rel_path/jobs/job_t%str(*).job
893                                ,pattern="%~nxi"    %*- return filename + extension, without path, double-quoted -*;
894                                ,pad=N, sep=#cs#, none=" "); %*- separated by comma + space -*;
895              sas_program = prxchange('s/^job_(t\w+)\.job$/\1/i', 1, cats(tablejob));
896              output;
897           end;
898        run;
899        */
900        
901        *- planned gADam tables -;
902        *------------------------*;
903        
904          %if %sysfunc(exist(gadamdoc.repemeta, data))
905              and %dsattr(dsn=gadamdoc.repemeta, attr=nobs)>0 /*- jbodart 2022-07-04 - avoid issues with empty dataset -*/
906          %then %do;
907             data tables_toc(keep= Section Type Num No_ Title Analysis_Set SAS_Program /*dataset*/ tabno outputfilename output_dataset
908                             index=(_idx0_=(sas_program output_dataset)));
909                set gadamdoc.repemeta;
910                where type = "Table";
911                output_dataset = translate(outputfilename, "_", ".");
912                sas_program = prxchange('s/^t_[\d_]+_(t\w+)$/\1/', 1, cats(output_dataset));
913             run;
914          %end; %else %do;
915             proc sql noprint;
916                *describe table tables_toc;
917                create table WORK.TABLES_TOC
918                  (
919                   Section char(3) format=$3. informat=$3. label='Section',
920                   Type char(5) format=$5. informat=$5. label='Type',
921                   Num char(3) format=$3. informat=$3. label='Num',
922                   No_ char(9) format=$9. informat=$9. label='No.',
923                   Title char(35) format=$35. informat=$35. label='Title',
924                   Analysis_Set char(6) format=$6. informat=$6. label='Analysis Set',
925                   SAS_Program char(7) format=$7. informat=$7. label='SAS Program',
926                   tabno char(50),
927                   outputfilename char(100),
928                   output_dataset char(100)
929                  );
930             quit;
931          %end;
932        
933        
934        *- actual gADam tables created -;
935        *-------------------------------*;
936        
937        %if &runenvironment = local %then %do;
938           %lsaf_logout;
939           %login_to_lsaf;
940           %put _SASWS_=&_SASWS_;
941        %end;
942        
943        %if %sysfunc(exist(work.lsafGetChildren, data)) %then %do;
944           proc sql; drop table work.lsafGetChildren; quit;
945        %end;
946        
947        *- Get the 'children' paths below /clinical/<compound>/<indic>/<study>/biostat/staging/generic_adam/output/data/
                                                                                   The SAS System

948           (1 level) into dataset WORK.lsafGetChildren -*;
949        data lsaf_tables0;
950          cmd = '%get_lsaf_children('||"&gadam_rel_path/output/data"||', 1);';
951          result = runmacro(cmd); *- runmacro: see note in program header -*;
952        run;
953        %dsattr(data=lsafGetChildren, pattern=#pct#put #pct#str(NOT)E: The dataset #lib#.#mem# has #nobs# observations and #nvars# variables.#scs#);
954        proc print data=lsafGetChildren(obs=10) width=min; title "lsafGetChildren"; run; title;
955        
956        data lsaf_tables0(keep= sas_program path name /*itemType isContainer description version isVersioned isCheckedOut isLocked signatureStatus size createdBy created
956      ! dateCreated lastModifiedBy*/
957                               lastModified dateLastModified /*propertiesLastModifiedBy propertiesLastModified datePropertiesLastModified state*/ output_dataset
958        
959                         index=(_idx0_=(sas_program output_dataset)));
960          length sas_program $32;
961          set lsafGetChildren;
962          where itemType = 'sas:sasdataset' and prxmatch('/^t_[\d_]+_(t\w+)\.sas7bdat$/', cats(name));
963          sas_program = prxchange('s/^t_[\d_]+_(t\w+)\.sas7bdat$/\1/', 1, cats(name));
964          output_dataset = prxchange('s/^(t_[\d_]+_t\w+)\.sas7bdat$/\1/', 1, cats(name));
965        run;
966        
967        
968        *- Merge info of Planned and actual generic_adam tables and corresponding job -*;
969        *------------------------------------------------------------------------------*;
970        proc sql noprint;
971            create table lsaf_tables1 as
972               select distinct
973                        coalesce(a.sas_program, b.sas_program, c.sas_program) as sas_program
974                       ,coalesce(a.output_dataset, b.output_dataset) as output_dataset
975                       ,c.tablejob
976                       ,a.tabno
977                       ,b.dateLastModified
978                  from  tables_toc as a
979                     full join
980                        lsaf_tables0 as b
981                        on a.sas_program = b.sas_program and a.output_dataset = b.output_dataset
982                     full join
983                        tablejobs as c
984                        on coalesce(a.sas_program, b.sas_program) = c.sas_program
985                        ;
986         quit;
987        
988        
989        /***************************************************************************/
990        /*** Get Latest Modification Date/Time of "loaded" generic_adam datasets ***/
991        /***************************************************************************/
992        
993         %if %sysfunc(exist(work.lsafGetChildren2, data)) %then %do;
994             proc sql; drop table work.lsafGetChildren2; quit;
995         %end;
996        
997          *- Get the 'children' paths below /clinical/<compound>/<indic>/<study>/biostat/staging/generic_adam/adam/
998             (1 level) into dataset WORK.lsafGetChildren -*;
999         /*- %get_lsaf_children(&gadam_rel_path/adam, 1); -*/
1000        data lsaf_generic_adams0;
1001           cmd = '%get_lsaf_children('||"&gadam_rel_path/adam"||', 1, out=WORK.lsafGetChildren2);';
1002           result = runmacro(cmd); *- runmacro: see note in program header -*;
1003        run;
1004        %dsattr(data=lsafGetChildren2, pattern=#pct#put #pct#str(NOT)E: The dataset #lib#.#mem# has #nobs# observations and #nvars# variables.#scs#);
                                                                                   The SAS System

1005        proc print data=lsafGetChildren2(obs=10) width=min; title "lsafGetChildren"; run; title;
1006       
1007        *- Retrieve lastest lastModifiedDate -*;
1008        %let gadamlastmodate = -1;
1009        data lsaf_generic_adams;
1010           set lsafGetChildren2 end=last;
1011           where itemType = 'sas:sasdataset';
1012           drop gadamlastmodate;
1013           retain gadamlastmodate;
1014           gadamlastmodate = max(gadamlastmodate, datelastmodified);
1015           if last then call symput('gadamlastmodate', cats(putn(gadamlastmodate, 'best12.')));
1016        run;
1017        %put gadamlastmodate = &gadamlastmodate %sysfunc(putn(&gadamlastmodate, E8601DT.));
1018       
1019       
1020       *- determine if a table is up-to-date -*;
1021       data lsaf_tables2(index=(_idx0_=(tablejob need_update)));
1022         set lsaf_tables1;
1023         format gadamLastModate datetime.;
1024         gadamLastModate = "%sysfunc(putn(&gadamlastmodate, datetime22.))"dt;
1025         if dateLastModified < gadamLastModate /* "%sysfunc(putn(&gadamlastmodate, datetime22.))"dt */
1026            then need_update = 1;
1027            else need_update = 0;
1028         *format gadamLastModate datetime.; %*PSC deleted: 2022-02-02: as already defined above;
1029       run;
1030       
1031       %let need_update_table=0;
1032       proc sql noprint;
1033         select distinct strip(put(max(need_update),3.)) into :need_update_table from lsaf_tables2;
1034       quit;
1035       %put &=need_update_table;
1036       
1037       
1038       %if &runenvironment = local %then %do;
1039          %lsaf_logout;
1040          %login_to_lsaf;
1041          %put _SASWS_=&_SASWS_;
1042       %end;
1043       
1044        *- submit table jobs when not all tables are up-to-date -*;
1045        %macro run_table_jobs;
1046       
1047            data run_table_jobs
1048              %if %sysfunc(libref(out))=0 %then %do;
1049                 out.run_table_jobs
1050              %end;
1051              ;
1052              set lsaf_tables2;
1053              by tablejob need_update;
1054              length lsaf_path result $200;
1055              %if %qsysfunc(upcase(%superq(run_gadam_tables)), $1.) ne Y %then %do; %*PSC added to have info in output: 2022-02-02;
1056               if need_update and tablejob ^= ' ' then do;
1057                 lsaf_path = "";
1058                 result = 'Skipped Table Job since &run_gadam_tables = '||symget('run_gadam_tables');
1059               end;
1060              %end; %else %do;
1061                 if last.tablejob and ( need_update or %eval(%qsysfunc(upcase(%superq(force)), $1.)=Y) ) and tablejob ^= ' ' then do;
1062                    lsaf_path = "&gadam_rel_path/jobs/"||cats(tablejob);
                                                                                   The SAS System

1063                    %if %qsysfunc(upcase(%superq(check_and_load_gadam)), $1.)=Y
1064                        and (   &need_load > 0
1065                             or %eval(%qsysfunc(upcase(%superq(force)), $1.)=Y) /*- JMB 2022-02-12 - allow to force table update even if no adam needed update -*/
1066                            )
1067                    %then %do;
1068                       *- run table jobs -*;
1069                       rundate = datetime();
1070                       format rundate E8601DT.;
1071                       %if %qsysfunc(upcase(%superq(mock)), $1.)=Y %then %do;
1072                          result = '%run_gadam_job(lsaf_path='||cats(lsaf_path)||');';
1073                       %end; %else %do;
1074                          result = runmacro('%run_gadam_job(lsaf_path='||cats(lsaf_path)||');');
1075                       %end;
1076                    %end; %else %do;
1077                       result = 'Skipped Table Job since &check_and_load_gadam = '||symget('check_and_load_gadam')||' and &need_load = '||symget('need_load');
1078                    %end;
1079                    putlog "Not" "ice: === Job: " tablejob= result= " ===";
1080                 end;
1081              %end;
1082            run;
1083       
1084        %mend run_table_jobs;
1085        %run_table_jobs;
1086       
1087       %mend gadam_rebuild_adam;
1088       %gadam_rebuild_adam;
GADAM_STUDY_PATH=/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_ada
m
SDTM_LAST_PATH=/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/clinical/argx-113/hv/argx-113-z005/biostat/staging/data_received
/sdtm_last
QC_GADAM_VS_STUDY=Y
CHECK_AND_LOAD_GADAM=Y
RUN_GADAM_TABLES=Y
FORCE=N
MOCK=N
MAUTOCOMPLOC:  The autocall macro PRXESCAPE is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/prxescape.sas.
Checking if Study-level job exists in Repository: /clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job
MAUTOCOMPLOC:  The autocall macro LSAF_EXISTS is compiling using the autocall source file /sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.6.1/sasmacros/lsaf_exists.sas.
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
                                                                                   The SAS System

MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;


NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.00 seconds
      

MPRINT(GADAM_REBUILD_ADAM):  ;
MPRINT(GADAM_REBUILD_ADAM):   *- Check disk usage and concomitant sessions -*;
MAUTOCOMPLOC:  The autocall macro GET_SESSIONS_INFOS is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/get_sessions_infos.sas.
MPRINT(GET_SESSIONS_INFOS):   *- Current date/time -*;

Notice: [ 2023-02-15T06:22:35+00:00] GET_SESSIONS_INFOS starting...

MPRINT(GET_SESSIONS_INFOS):   *- LSAF sessions -*;

Notice: [ 2023-02-15T06:22:35+00:00] Getting LSAF Sessions infos...

MPRINT(GET_SESSIONS_INFOS):   option ls = 180;
NOTE: %INCLUDE (level 1) file /lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/fcmp/fcmp_*.sas 
      is file /lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/fcmp/fcmp_run.sas.
1089      +/********************************************************************************************************************************/
1090      +/* Purpose              : Define (a package of) user-written SAS function(s)/ call routine(s) to be compiled by PROC FCMP:      */
1091      +/*                          - Package of Fcmp functions to deal with running SAS Code within a FCMP function computations.      */
1092      +/*                                                                                                                              */
1093      +/* Programmer           : Jean-Michel Bodart                                                                                    */
1094      +/* Program Name         : fcmp_run.sas                                                                                         */
1095      +/* Note                 : this program is meant to be called from a SAS project environment initialization program              */
1096      +/********************************************************************************************************************************/
1097      +
1098      +%*- Determine <libname>.<dataset> where to store FCMP functions/routines -*;
1099      +%*------------------------------------------------------------------------*;
                                                                                   The SAS System

1100      +%*- retrieve first location specified in CMPLIB option (if any) -*;
1101      +%let fcmpoutlib=%scan(%qsysfunc(prxchange(s/(_NO)?_DISPLAYLOC_//i, -1, %qsysfunc(getoption(cmplib)))), 1, ( -));
1102      +%*- if empty, replace by 'fcmp.functions' -*;
1103      +%let fcmpoutlib=%sysfunc(ifc(%length(%superq(fcmpoutlib))=0, fcmp.functions, %superq(fcmpoutlib)));
1104      +%*- if <libname> is not assigned to a path, replace by 'work.functions' -*;
1105      +%let fcmpoutlib=%sysfunc(ifc(%length(%qsysfunc(pathname(%scan(%superq(fcmpoutlib), 1, .), L)))=0, work.functions, %superq(fcmpoutlib)));
1106      +%put fcmpoutlib=&fcmpoutlib;
fcmpoutlib=work.functions
1107      +
1108      +%*- assign a package name -*;
1109      +%let package = run;
1110      +
1111      +%macro del_existing;
1112      +   %if %sysfunc(exist(&fcmpoutlib., data)) %then %do;
1113      +      %*- get list of existing functions in selected package -*;
1114      +      %let func_list = ;
1115      +      proc sql noprint;
1116      +         select distinct scan(_KEY_, -1, ".") into :func_list separated by ' '
1117      +            from &fcmpoutlib. where type="Prototype" and scan(_key_, 1, ".") = "F" and scan(_key_, 2, ".") = %sysfunc(quote(%qupcase(%superq(package))))
1118      +            ;
1119      +      quit;
1120      +      %put Existing FCMP functions in &fcmpoutlib.&package: &func_list..;
1121      +
1122      +      proc fcmp outlib=&fcmpoutlib..&package.; /* outlib = <library>.<dataset>.<package> */
1123      +
1124      +         %if %index(%str( &func_list ), %str( RUNMACRO )) %then %do;
1125      +            deletefunc RUNMACRO; /* delete pre-existing instance of this function to avoid war-ning about re-defining it. */
1126      +         %end;
1127      +
1128      +      quit;
1129      +   %end;
1130      +%mend del_existing;
1131      +%del_existing;
MPRINT(DEL_EXISTING):   proc sql noprint;
MPRINT(DEL_EXISTING):   select distinct scan(_KEY_, -1, ".") into :func_list separated by ' ' from work.functions where type="Prototype" and scan(_key_, 1, ".") = "F" and 
scan(_key_, 2, ".") = "RUN" ;
MPRINT(DEL_EXISTING):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Existing FCMP functions in work.functionsrun: RUNMACRO.
MPRINT(DEL_EXISTING):   proc fcmp outlib=work.functions.run;
MPRINT(DEL_EXISTING):   deletefunc RUNMACRO;
MPRINT(DEL_EXISTING):   quit;

NOTE: Function RUNMACRO deleted from work.functions.run.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(GET_SESSIONS_INFOS):  ;
1132      +
1133      +proc fcmp outlib=&fcmpoutlib..&package.; /* outlib = <library>.<dataset>.<package> */
NOTE: No CMP or C functions found in library work.functions.
MPRINT(GET_SESSIONS_INFOS):   proc fcmp outlib=work.functions.run;
                                                                                   The SAS System

1134      +
1135      +   *- Function that runs SAS Code passed quoted as macro-variable ARGS to macro %run_macro,
1136      +      which is expected to have been already compiled or to be found among the autocall macros.
1137      +      The %run_macro has no parameters but retrieves the contents of ARGS from macro-variable &ARGS,
1138      +      de-quote them and executes them.  The code executed is expected to assign a value to macro-variable &RESULT
1139      +      which is passed back to the FCMP function and becomes the value returned by that FCMP function.
1140      +   -*;
MPRINT(GET_SESSIONS_INFOS):   /* outlib = <library>.<dataset>.<package> */ *- Function that runs SAS Code passed quoted as macro-variable ARGS to macro %run_macro, which is 
expected to have been already compiled or to be found among the autocall macros. The %run_macro has no parameters but retrieves the contents of ARGS from macro-variable &ARGS, 
de-quote them and executes them. The code executed is expected to assign a value to macro-variable &RESULT which is passed back to the FCMP function and becomes the value returned 
by that FCMP function. -*;
1141      +   function RUNMACRO(args $) $;*$32000;
MPRINT(GET_SESSIONS_INFOS):   function RUNMACRO(args $) $;
MPRINT(GET_SESSIONS_INFOS):  *$32000;
1142      +      length result $32000;
MPRINT(GET_SESSIONS_INFOS):   length result $32000;
1143      +      result="";
MPRINT(GET_SESSIONS_INFOS):   result="";
1144      +      rc = run_macro('run_macro', args, result);
MPRINT(GET_SESSIONS_INFOS):   rc = run_macro('run_macro', args, result);
1145      +     *if rc = 0 then return(quote(trimn(result)));
MPRINT(GET_SESSIONS_INFOS):   *if rc = 0 then return(quote(trimn(result)));
1146      +      if rc = 0 then return(trimn(result));
MPRINT(GET_SESSIONS_INFOS):   if rc = 0 then return(trimn(result));
1147      +      else return('ER'||'ROR attempting to call macro run_macro');
MPRINT(GET_SESSIONS_INFOS):   else return('ER'||'ROR attempting to call macro run_macro');
1148      +   endsub;
MPRINT(GET_SESSIONS_INFOS):   endsub;
1149      +
1150      +   /* *- test -*;
MPRINT(GET_SESSIONS_INFOS):   /* *- test -*;
1151      +
1152      +   res = RUNMACRO('%lib_datasets(lib=maps);');
MPRINT(GET_SESSIONS_INFOS):   res = RUNMACRO('%lib_datasets(lib=maps);
MPRINT(GET_SESSIONS_INFOS):  ');
1153      +   put res=;
MPRINT(GET_SESSIONS_INFOS):   put res=;
1154      +
1155      +   res = RUNMACRO('%non_existing_macro(lib=maps);');
MPRINT(GET_SESSIONS_INFOS):   res = RUNMACRO('%non_existing_macro(lib=maps);
MPRINT(GET_SESSIONS_INFOS):  ');
1156      +   put res=;
MPRINT(GET_SESSIONS_INFOS):   put res=;
1157      +
1158      +   */
1159      +run;
MPRINT(GET_SESSIONS_INFOS):   */ run;

NOTE: Function RUNMACRO saved to work.functions.run.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(GET_SESSIONS_INFOS):   quit;
1160      +quit;
1161      +
1162      +%*- Set OPTION CMPLIB so as to allow SAS to find and access the fcmp functions -*;
                                                                                   The SAS System

1163      +%*------------------------------------------------------------------------------*;
1164      +%*- prepencd &fcmpoutlib. to OPTION CMPLIB value, unless it is already part of this option value -*;
1165      +options %sysfunc(ifc( %sysfunc(exist(&fcmpoutlib., data)) and %sysfunc(findw(%qsysfunc(getoption(cmplib)), &fcmpoutlib., ( -), ei))=0 , insert=(cmplib=&fcmpoutlib.),
1165     !+%str( )));
MPRINT(GET_SESSIONS_INFOS):   options ;
1166      +%put option cmplib=%sysfunc(getoption(cmplib));
option cmplib=work.functions
1167      +
1168      +/* *- example usage -*;
1169      +
1170      +
1171      +data test;
1172      +   length args result $32000;
1173      +   args = '%lib_datasets(lib=maps);';
1174      +   result = runmacro(args);
1175      +run;
1176      +
1177      +%let list = - ;
1178      +%let list = %sysfunc(runmacro(  %qsysfunc(dequote('%lib_datasets(lib=sashelp);'))  ));
1179      +%put list = ->&list<-;
1180      +
1181      +data test;
1182      +   length args result $32000;
1183      +   args = '%non_existing_macro(lib=maps);';
1184      +   result = runmacro(args);
1185      +run;
1186      +
1187      +%let list = - ;
1188      +%let code = %qsysfunc(dequote('%non_existing_macro(lib=sashelp);'));
1189      +%put code = &code;
1190      +%put ...;
1191      +%let list = %sysfunc(runmacro(  &code  ));
1192      +%put list = ->&list<-;
1193      +
1194      +%put >>>%sysfunc(runmacro('proc sql; select distinct quote(strip(sex)) into :result separated by ", " from adam.adsl; quit;'))<<<;  %*- this includes lots of (unwanted)
1194     !+trailing spaces -*;
1195      +
1196      +%put %sysfunc(trim(%qsysfunc(runmacro('proc sql; select distinct quote(strip(sex)) into :result separated by ", " from adam.adsl; quit;'))));
1197      +%put %sysfunc(trim(%qsysfunc(runmacro('proc sql; select distinct quote(strip(sex)) into :result separated by '', '' from adam.adsl; quit;'))));
1198      +
1199      +
1200      +*- this gives expected results - without extra spaces in the log -*;
1201      +data test;
1202      +   do Sex = %sysfunc(runmacro('proc sql; select distinct quote(strip(sex)) into :result separated by '', '' from adam.adsl; quit;'));
1203      +      put Sex=;
1204      +      output;
1205      +   end;
1206      +run;
1207      +
1208      +data test;
1209      +   do age = %sysfunc(runmacro('proc sql; select distinct age into :result separated by '', '' from adam.adsl; quit;'));
1210      +      put age=;
1211      +      output;
1212      +   end;
1213      +run;
1214      +
1215      +
1216      +*- this gives expected results too -*;
                                                                                   The SAS System

1217      +data test;
1218      +   do Sex = %sysfunc(trim(%qsysfunc(runmacro('proc sql; select distinct quote(strip(sex)) into :result separated by '', '' from adam.adsl; quit;'))));
1219      +      put Sex=;
1220      +      output;
1221      +   end;
1222      +run;
1223      +
1224      +data test;
1225      +   do age = %sysfunc(trim(%qsysfunc(runmacro('proc sql; select distinct age into :result separated by '', '' from adam.adsl; quit;'))));
1226      +      put age=;
1227      +      output;
1228      +   end;
1229      +run;
1230      +
1231      +*/
1232      +/********************************************************************************************************************************/
1233      +/* Purpose              : Define (a package of) user-written SAS function(s)/ call routine(s) to be compiled by PROC FCMP:      */
1234      +/*                          - Package of Fcmp functions to deal with running SAS Code within a FCMP function computations.      */
1235      +/*                                                                                                                              */
1236      +/* Programmer           : Jean-Michel Bodart                                                                                    */
1237      +/* Program Name         : fcmp_validname.sas                                                                                    */
1238      +/* Note                 : this program is meant to be called from a SAS project environment initialization program              */
1239      +/********************************************************************************************************************************/
1240      +
1241      +%*- Determine <libname>.<dataset> where to store FCMP functions/routines -*;
1242      +%*------------------------------------------------------------------------*;
1243      +%*- retrieve first location specified in CMPLIB option (if any) -*;
1244      +%let fcmpoutlib=%scan(%qsysfunc(prxchange(s/(_NO)?_DISPLAYLOC_//i, -1, %qsysfunc(getoption(cmplib)))), 1, ( -));
1245      +%*- if empty, replace by 'fcmp.functions' -*;
1246      +%let fcmpoutlib=%sysfunc(ifc(%length(%superq(fcmpoutlib))=0, fcmp.functions, %superq(fcmpoutlib)));
1247      +%*- if <libname> is not assigned to a path, replace by 'work.functions' -*;
1248      +%let fcmpoutlib=%sysfunc(ifc(%length(%qsysfunc(pathname(%scan(%superq(fcmpoutlib), 1, .), L)))=0, work.functions, %superq(fcmpoutlib)));
1249      +%put fcmpoutlib=&fcmpoutlib;
fcmpoutlib=work.functions
1250      +
1251      +%*- assign a package name -*;
1252      +%let package = run;
1253      +
1254      +%macro del_existing;
1255      +   %if %sysfunc(exist(&fcmpoutlib., data)) %then %do;
1256      +      %*- get list of existing functions in selected package -*;
1257      +      %let func_list = ;
1258      +      proc sql noprint;
1259      +         select distinct scan(_KEY_, -1, ".") into :func_list separated by ' '
1260      +            from &fcmpoutlib. where type="Prototype" and scan(_key_, 1, ".") = "F" and scan(_key_, 2, ".") = %sysfunc(quote(%qupcase(%superq(package))))
1261      +            ;
1262      +      quit;
1263      +      %put Existing FCMP functions in &fcmpoutlib.&package: &func_list..;
1264      +
1265      +      proc fcmp outlib=&fcmpoutlib..&package.; /* outlib = <library>.<dataset>.<package> */
1266      +
1267      +         %if %index(%str( &func_list ), %str( VALIDNAME )) %then %do;
1268      +            deletefunc VALIDNAME; /* delete pre-existing instance of this function to avoid war-ning about re-defining it. */
1269      +         %end;
1270      +
1271      +      quit;
1272      +   %end;
1273      +%mend del_existing;
                                                                                   The SAS System

1274      +%del_existing;
MPRINT(DEL_EXISTING):   proc sql noprint;
MPRINT(DEL_EXISTING):   select distinct scan(_KEY_, -1, ".") into :func_list separated by ' ' from work.functions where type="Prototype" and scan(_key_, 1, ".") = "F" and 
scan(_key_, 2, ".") = "RUN" ;
MPRINT(DEL_EXISTING):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Existing FCMP functions in work.functionsrun: RUNMACRO.
MPRINT(DEL_EXISTING):   proc fcmp outlib=work.functions.run;
MPRINT(DEL_EXISTING):   quit;

NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(GET_SESSIONS_INFOS):  ;
1275      +
1276      +proc fcmp outlib=&fcmpoutlib..&package.; /* outlib = <library>.<dataset>.<package> */
MPRINT(GET_SESSIONS_INFOS):   proc fcmp outlib=work.functions.run;
1277      +
1278      +   *- Function that runs SAS Code passed quoted as macro-variable ARGS to macro %run_macro,
1279      +      which is expected to have been already compiled or to be found among the autocall macros.
1280      +      The %run_macro has no parameters but retrieves the contents of ARGS from macro-variable &ARGS,
1281      +      de-quote them and executes them.  The code executed is expected to assign a value to macro-variable &RESULT
1282      +      which is passed back to the FCMP function and becomes the value returned by that FCMP function.
1283      +   -*;
MPRINT(GET_SESSIONS_INFOS):   /* outlib = <library>.<dataset>.<package> */ *- Function that runs SAS Code passed quoted as macro-variable ARGS to macro %run_macro, which is 
expected to have been already compiled or to be found among the autocall macros. The %run_macro has no parameters but retrieves the contents of ARGS from macro-variable &ARGS, 
de-quote them and executes them. The code executed is expected to assign a value to macro-variable &RESULT which is passed back to the FCMP function and becomes the value returned 
by that FCMP function. -*;
1284      +   function VALIDNAME(string $) $;
MPRINT(GET_SESSIONS_INFOS):   function VALIDNAME(string $) $;
1285      +      length result $32;
MPRINT(GET_SESSIONS_INFOS):   length result $32;
1286      +      result=ktrim(putc(prxchange(  's/^(\d|$)/_\1/'
1287      +                                 ,  1
1288      +                                 ,  prxchange( 's/[^a-z_\d]/_/i', -1, kstrip(basechar(putc(kstrip(string), '$ascii32.'))) )
1289      +                                 ), '$32.'));
MPRINT(GET_SESSIONS_INFOS):   result=ktrim(putc(prxchange( 's/^(\d|$)/_\1/' , 1 , prxchange( 's/[^a-z_\d]/_/i', -1, kstrip(basechar(putc(kstrip(string), '$ascii32.'))) ) ), 
'$32.'));
1290      +      return(trimn(result));
MPRINT(GET_SESSIONS_INFOS):   return(trimn(result));
1291      +   endsub;
MPRINT(GET_SESSIONS_INFOS):   endsub;
1292      +
1293      +   /* *- test -*;
MPRINT(GET_SESSIONS_INFOS):   /* *- test -*;
1294      +
1295      +   res = validname(' ');
MPRINT(GET_SESSIONS_INFOS):   res = validname(' ');
1296      +   put res=;
MPRINT(GET_SESSIONS_INFOS):   put res=;
1297      +
1298      +   res = validname('a "1:1" relationship');
                                                                                   The SAS System

MPRINT(GET_SESSIONS_INFOS):   res = validname('a "1:1" relationship');
1299      +   put res=;
MPRINT(GET_SESSIONS_INFOS):   put res=;
1300      +
1301      +   */
1302      +run;
MPRINT(GET_SESSIONS_INFOS):   */ run;

NOTE: Function VALIDNAME saved to work.functions.run.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(GET_SESSIONS_INFOS):   quit;
1303      +quit;
1304      +
1305      +%*- Set OPTION CMPLIB so as to allow SAS to find and access the fcmp functions -*;
1306      +%*------------------------------------------------------------------------------*;
1307      +%*- prepencd &fcmpoutlib. to OPTION CMPLIB value, unless it is already part of this option value -*;
1308      +options %sysfunc(ifc( %sysfunc(exist(&fcmpoutlib., data)) and %sysfunc(findw(%qsysfunc(getoption(cmplib)), &fcmpoutlib., ( -), ei))=0 , insert=(cmplib=&fcmpoutlib.),
1308     !+%str( )));
MPRINT(GET_SESSIONS_INFOS):   options ;
1309      +%put option cmplib=%sysfunc(getoption(cmplib));
option cmplib=work.functions
1310      +
1311      +/* *- example usage -*;
1312      +%put >%sysfunc(validname(%str( )))<;
1313      +%put >%sysfunc(validname(.))<;
1314      +%put >%sysfunc(validname(0))<;
1315      +%put >%sysfunc(validname(1))<;
1316      +%put >%sysfunc(validname(123))<;
1317      +%put >%sysfunc(validname(1abc))<;
1318      +%put >%sysfunc(validname(a1))<;
1319      +%put >%sysfunc(validname(A very VERY long string with spaces))<;
1320      +%put >%sysfunc(validname(a "1:1" relationship))<;
1321      +%put >%sysfunc(validname(a 2$ bill or a 5£ note))<;
1322      +%put >%sysfunc(validname("un garçon à  l'école"))<;
1323      +%put >%sysfunc(validname(a {2µL} sample))<;
1324      +%put >%sysfunc(validname(t_2.3_aes_summary))<;
1325      +%put >%sysfunc(validname(où es-tu?))<;
1326      +%put %qsysfunc(unicode(\u0020\u0020\u8404\u8404\u8404\u0020\u0020));
1327      +%put >%sysfunc(validname(%qsysfunc(unicode(\u0020\u0020\u8404\u8404\u8404\u0020\u0020))))<;
1328      +
1329      +data test;
1330      +   res = validname(' '); put '>' res= '<'; output;
1331      +   res = validname('.'); put '>' res= '<'; output;
1332      +   res = validname('0'); put '>' res= '<'; output;
1333      +   res = validname('1'); put '>' res= '<'; output;
1334      +   res = validname('12.3'); put '>' res= '<'; output;
1335      +   res = validname('12,300'); put '>' res= '<'; output;
1336      +   res = validname('12 300'); put '>' res= '<'; output;
1337      +   res = validname('1abc'); put '>' res= '<'; output;
1338      +   res = validname('a1'); put '>' res= '<'; output;
1339      +   res = validname('A very VERY long string with spaces'); put '>' res= '<'; output;
1340      +   res = validname('a "1:1" relationship'); put '>' res= '<'; output;
1341      +   res = validname('a 2$ bill or a 5£ note'); put '>' res= '<'; output;
1342      +   res = validname("un garçon à  l'école"); put '>' res= '<'; output;
                                                                                   The SAS System

1343      +   res = validname('a {2µL} sample'); put '>' res= '<'; output;
1344      +   res = validname('t_2.3_aes_summary'); put '>' res= '<'; output;
1345      +   res = validname('où es-tu?'); put '>' res= '<'; output;
1346      +   test = unicode('\u0020\u0020\u8404\u8404\u8404\u0020\u0020'); put test=;
1347      +   res = validname(test); put '>' res= '<'; output;
1348      +run;
1349      +*/
NOTE: %INCLUDE (level 1) ending.
MAUTOCOMPLOC:  The autocall macro LSAF_GETMYSESSIONS is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/lsaf_getmysessions.sas.
MAUTOCOMPLOC:  The autocall macro LSAF_GETSESSIONSBYQUERY is compiling using the autocall source file 
            /sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.6.1/sasmacros/lsaf_getsessionsbyquery.sas.
MPRINT(LSAF_GETSESSIONSBYQUERY):  ;
MPRINT(LSAF_GETSESSIONSBYQUERY):   data my_sessions (label="Created by LSAF_GETSESSIONSBYQUERY" KEEP= sessionId dateStarted dateStartedSASFormat dateEnded dateEndedSASFormat 
sessionType sessionState sessionOwner submissionLabel clientId );
MPRINT(LSAF_GETSESSIONSBYQUERY):   attrib returnCode length=8;
MPRINT(LSAF_GETSESSIONSBYQUERY):   attrib message length=$200;
MPRINT(LSAF_GETSESSIONSBYQUERY):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_GETSESSIONSBYQUERY):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_GETSESSIONSBYQUERY):   attrib logMsg length=$300;
MPRINT(LSAF_GETSESSIONSBYQUERY):   attrib rowCount length=8;
MPRINT(LSAF_GETSESSIONSBYQUERY):   attrib sessionOwner length=$32 label="Session Owner";
MPRINT(LSAF_GETSESSIONSBYQUERY):   attrib dateStartedSASFormat label="Date Session Started (SAS DateTime Format)";
MPRINT(LSAF_GETSESSIONSBYQUERY):   attrib dateStarted length=$64 label="Date Session Started";
MPRINT(LSAF_GETSESSIONSBYQUERY):   attrib dateEndedSASFormat label="Date Session Ended (SAS DateTime Format)";
MPRINT(LSAF_GETSESSIONSBYQUERY):   attrib dateEnded length=$64 label="Date Session Ended";
MPRINT(LSAF_GETSESSIONSBYQUERY):   attrib sessionId length=$64 label="Session ID";
MPRINT(LSAF_GETSESSIONSBYQUERY):   attrib sessionType length=$32 label="Session Type";
MPRINT(LSAF_GETSESSIONSBYQUERY):   attrib sessionState length=$32 label="Session State";
MPRINT(LSAF_GETSESSIONSBYQUERY):   attrib submissionLabel length=$1024 label="Submission Label";
MPRINT(LSAF_GETSESSIONSBYQUERY):   attrib clientId length=8 label="Incremental Number Assigned to Session";
MPRINT(LSAF_GETSESSIONSBYQUERY):   attrib limitReached length=3;
MPRINT(LSAF_GETSESSIONSBYQUERY):   ;
MPRINT(LSAF_GETSESSIONSBYQUERY):   attrib dateStartedSasFormatTmp length=$64 label="SAS Format: USED FOR FORMATTING - will be dropped";
MPRINT(LSAF_GETSESSIONSBYQUERY):   attrib dateEndedSasFormatTmp length=$64 label="SAS Format: USED FOR FORMATTING - will be dropped";
MPRINT(LSAF_GETSESSIONSBYQUERY):   format dateStartedSASFormat dateEndedSASFormat datetime.;
MPRINT(LSAF_GETSESSIONSBYQUERY):   rowCount=0;
MPRINT(LSAF_GETSESSIONSBYQUERY):   limitReached=0;
MPRINT(LSAF_GETSESSIONSBYQUERY):   declare javaobj srv("com/sas/lsaf/macro/execution/session/SessionService") ;
MPRINT(LSAF_GETSESSIONSBYQUERY):   declare javaobj results("com/sas/lsaf/macro/execution/session/SasSessionsResult");
MPRINT(LSAF_GETSESSIONSBYQUERY):   srv.callStaticBooleanMethod("search", "jbodart", "", "", "", "", "", "", "", "", "", results, limitReached);
MPRINT(LSAF_GETSESSIONSBYQUERY):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_GETSESSIONSBYQUERY):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_GETSESSIONSBYQUERY):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_GETSESSIONSBYQUERY):   if (returnCode ne 0) then do;
MPRINT(LSAF_GETSESSIONSBYQUERY):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_GETSESSIONSBYQUERY):   logMsg=" Cannot retrieve list of queried sessions.";
MPRINT(LSAF_GETSESSIONSBYQUERY):   end;
MPRINT(LSAF_GETSESSIONSBYQUERY):   else do;
MPRINT(LSAF_GETSESSIONSBYQUERY):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_GETSESSIONSBYQUERY):   logMsg=" List of all the queried sessions was returned.";
MPRINT(LSAF_GETSESSIONSBYQUERY):   results.callIntMethod("getSize", rowCount);
MPRINT(LSAF_GETSESSIONSBYQUERY):   do row=0 to rowCount - 1;
MPRINT(LSAF_GETSESSIONSBYQUERY):   results.callStringMethod("getId", row, sessionId);
MPRINT(LSAF_GETSESSIONSBYQUERY):   results.callStringMethod("getDateStarted", row, dateStarted);
MPRINT(LSAF_GETSESSIONSBYQUERY):   results.callStringMethod("getDateStartedSasFormat", row, dateStartedSasFormatTmp);
MPRINT(LSAF_GETSESSIONSBYQUERY):   results.callStringMethod("getDateEnded", row, dateEnded);
MPRINT(LSAF_GETSESSIONSBYQUERY):   results.callStringMethod("getDateEndedSasFormat", row, dateEndedSasFormatTmp);
                                                                                   The SAS System

MPRINT(LSAF_GETSESSIONSBYQUERY):   results.callStringMethod("getType", row, sessionType);
MPRINT(LSAF_GETSESSIONSBYQUERY):   results.callStringMethod("getState", row, sessionState);
MPRINT(LSAF_GETSESSIONSBYQUERY):   results.callStringMethod("getOwner", row, sessionOwner);
MPRINT(LSAF_GETSESSIONSBYQUERY):   results.callStringMethod("getSubmissionLabel", row, submissionLabel);
MPRINT(LSAF_GETSESSIONSBYQUERY):   results.callIntMethod("getClientId", row, clientId);
MPRINT(LSAF_GETSESSIONSBYQUERY):   dateStartedSasFormat = input(dateStartedSasFormatTmp, datetime.);
MPRINT(LSAF_GETSESSIONSBYQUERY):   dateEndedSasFormat = input(dateEndedSasFormatTmp, datetime.);
MPRINT(LSAF_GETSESSIONSBYQUERY):   output;
MPRINT(LSAF_GETSESSIONSBYQUERY):   end;
MPRINT(LSAF_GETSESSIONSBYQUERY):   end;
MPRINT(LSAF_GETSESSIONSBYQUERY):   put;
MPRINT(LSAF_GETSESSIONSBYQUERY):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_GETSESSIONSBYQUERY):   put logMsgPrefix " " "lsaf_getsessionsbyquery";
MPRINT(LSAF_GETSESSIONSBYQUERY):   if (rowCount=0) then put logMsgPrefix " No queried sessions were found.";
MPRINT(LSAF_GETSESSIONSBYQUERY):   else put logMsgPrefix " " rowCount " records written to data set my_sessions";
MPRINT(LSAF_GETSESSIONSBYQUERY):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(LSAF_GETSESSIONSBYQUERY):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(LSAF_GETSESSIONSBYQUERY):   put logMsgPrefix " Session Limit Reached= " limitReached;
MPRINT(LSAF_GETSESSIONSBYQUERY):   put;
MPRINT(LSAF_GETSESSIONSBYQUERY):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_GETSESSIONSBYQUERY):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_GETSESSIONSBYQUERY):   call symputx("_lsafRowCount_", rowCount);
MPRINT(LSAF_GETSESSIONSBYQUERY):   run;


NOTE: SAS Life Science Analytics Framework Macro: *  List of all the queried sessions was returned.
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_getsessionsbyquery
NOTE: SAS Life Science Analytics Framework Macro: *  3  records written to data set my_sessions
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  Session Limit Reached= 0
NOTE: The data set WORK.MY_SESSIONS has 3 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.11 seconds
      cpu time            0.01 seconds
      

MPRINT(LSAF_GETSESSIONSBYQUERY):   options nonotes;
MPRINT(LSAF_GETSESSIONSBYQUERY):   proc sort data=my_sessions sortseq=linguistic(strength=primary);
MPRINT(LSAF_GETSESSIONSBYQUERY):   by sessionOwner dateStartedSasFormat dateEndedSasFormat;
MPRINT(LSAF_GETSESSIONSBYQUERY):   run;
MPRINT(LSAF_GETSESSIONSBYQUERY):   options NOTES;
MPRINT(LSAF_GETMYSESSIONS):  ;
MPRINT(GET_SESSIONS_INFOS):  ;
MPRINT(GET_SESSIONS_INFOS):   data my_sessions;
MPRINT(GET_SESSIONS_INFOS):   set my_sessions;
MPRINT(GET_SESSIONS_INFOS):   put / sessionId= (sessionOwner dateStartedSASFormat dateEndedSASFormat sessionType sessionState submissionLabel clientId ) (=/ @8);
MPRINT(GET_SESSIONS_INFOS):   *label sessionListSize = 'session list file size (bytes)' sessionListSizeFormatted = 'session list file size' sessionLogSize = 'session log file size 
(bytes)' sessionLogSizeFormatted = 'session log file size' sessionState = "session state" ;
MPRINT(GET_SESSIONS_INFOS):   run;


sessionId=63bb51f4-db12-4931-8e8e-dbac5feb4aba
       sessionOwner=jbodart
       dateStartedSASFormat=14FEB23:22:57:00
       dateEndedSASFormat=.
       sessionType=PUBLISHED_JOB
       sessionState=ACTIVE
                                                                                   The SAS System

       submissionLabel=job_gadam_ongoing_studies.job - gadam_ongoing_studies.sas (1/1)
       clientId=1

sessionId=cf324cb4-4c80-417b-99e7-13550cb02809
       sessionOwner=jbodart
       dateStartedSASFormat=14FEB23:22:59:45
       dateEndedSASFormat=.
       sessionType=PUBLISHED_JOB
       sessionState=ACTIVE
       submissionLabel=job_lsaf_get_last_sdtm.job - lsaf_get_last_sdtm.sas (1/1)
       clientId=2

sessionId=48f56e45-69c0-4fbd-8e77-66d06e878ef3
       sessionOwner=jbodart
       dateStartedSASFormat=15FEB23:06:22:29
       dateEndedSASFormat=.
       sessionType=PUBLISHED_JOB
       sessionState=ACTIVE
       submissionLabel=job_gadam_rebuild_adam.job - gadam_rebuild_adam.sas (1/1)
       clientId=3
NOTE: There were 3 observations read from the data set WORK.MY_SESSIONS.
NOTE: The data set WORK.MY_SESSIONS has 3 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(GET_SESSIONS_INFOS):   proc print data=my_sessions;
MPRINT(GET_SESSIONS_INFOS):   title "jbodart: User's sessions as of  2023-02-15T06:22:35+00:00";
MPRINT(GET_SESSIONS_INFOS):   title2 
"-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-";
MPRINT(GET_SESSIONS_INFOS):   
footnote"---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------";
MPRINT(GET_SESSIONS_INFOS):   var sessionOwner dateStartedSASFormat dateEndedSASFormat sessionId sessionType sessionState submissionLabel clientId ;
MPRINT(GET_SESSIONS_INFOS):   *sessionListSize sessionListSizeFormatted sessionLogSize sessionLogSizeFormatted sessionState;
MPRINT(GET_SESSIONS_INFOS):   run;

NOTE: There were 3 observations read from the data set WORK.MY_SESSIONS.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(GET_SESSIONS_INFOS):   title;
MPRINT(GET_SESSIONS_INFOS):   footnote;
RUNENVIRONMENT=repository
MPRINT(GET_SESSIONS_INFOS):   *- CPU -*;
%SHELLCOMMAND(cat /proc/cpuinfo | grep processor | wc -l 2>&1, path=., resultvar=__cmdout, dsin=, dsout=_null_, print=Y, linenum=Y, cond=1, for_each_do=, otherwise_do=, 
into=nb_cpu_cores);
MPRINT(SHELLCOMMAND):   *- The following 3 macros definitions are adpated from SAS Support / Samples and Notes: Sample 38518: Dynamically setting the CLASSPATH for use in a DATA 
step that uses the Java object component available at https://support.sas.com/kb/38/518.html 
--------------------------------------------------------------------------------------------------------------*;
MPRINT(INIT_CLASSPATH_UPDATE):   DATA _null_;
MPRINT(INIT_CLASSPATH_UPDATE):   LENGTH path_separator $ 2 orig_classpath $ 500;
MPRINT(INIT_CLASSPATH_UPDATE):   DECLARE JavaObj f("java.io.File", "");
                                                                                   The SAS System

MPRINT(INIT_CLASSPATH_UPDATE):   f.getStaticStringField("pathSeparator", path_separator);
MPRINT(INIT_CLASSPATH_UPDATE):   orig_classpath = STRIP(SYSGET("CLASSPATH"));
MPRINT(INIT_CLASSPATH_UPDATE):   IF _ERROR_ = 1 OR LENGTH(orig_classpath) = 0 THEN DO;
MPRINT(INIT_CLASSPATH_UPDATE):   PUT "NOTE: Ignore any messages from the next statement(s)";
MPRINT(INIT_CLASSPATH_UPDATE):   orig_classpath = "";
MPRINT(INIT_CLASSPATH_UPDATE):   END;
MPRINT(INIT_CLASSPATH_UPDATE):   if orig_classpath = "" then CALL SYMPUT('CP_orig_classpath', SYSGET("CLASSPATH"));
MPRINT(INIT_CLASSPATH_UPDATE):   else CALL SYMPUT('CP_orig_classpath', STRIP(orig_classpath));
MPRINT(INIT_CLASSPATH_UPDATE):   CALL SYMPUT('CP_path_separator', COMPRESS(path_separator));
MPRINT(INIT_CLASSPATH_UPDATE):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SHELLCOMMAND):  ;
MPRINT(ADD_TO_CLASSPATH):   DATA _null_;
MPRINT(ADD_TO_CLASSPATH):   LENGTH current_classpath $ 500 new_classpath $ 500;
MPRINT(ADD_TO_CLASSPATH):   current_classpath = STRIP(SYSGET("CLASSPATH"));
MPRINT(ADD_TO_CLASSPATH):   IF _ERROR_ = 1 OR LENGTH(current_classpath) = 0 THEN DO;
MPRINT(ADD_TO_CLASSPATH):   PUT "NOTE: Ignore any messages from the nearby statement(s)";
MPRINT(ADD_TO_CLASSPATH):   new_classpath = 
"/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar";
MPRINT(ADD_TO_CLASSPATH):   END;
MPRINT(ADD_TO_CLASSPATH):   ELSE DO;
MPRINT(ADD_TO_CLASSPATH):   new_classpath = COMPRESS(current_classpath) || ":" || 
"/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar";
MPRINT(ADD_TO_CLASSPATH):   END;
MPRINT(ADD_TO_CLASSPATH):   CALL SYMPUT('CP_new_classpath', STRIP(new_classpath));
MPRINT(ADD_TO_CLASSPATH):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: Setting Java classpath to 
!CLASSPATH:/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar
MPRINT(ADD_TO_CLASSPATH):   OPTIONS SET=CLASSPATH 
"!CLASSPATH:/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar";
MPRINT(SHELLCOMMAND):  ;
MPRINT(SHELLCOMMAND):   data _null_;
MPRINT(SHELLCOMMAND):   declare javaobj shellcommand("shellCommand/ShellCommand");
MPRINT(SHELLCOMMAND):   __cmdout = put(" ", $32000.);
MPRINT(SHELLCOMMAND):   if 1 then do;
MPRINT(SHELLCOMMAND):   shellcommand.callStaticStringMethod("commandStr", strip('cat /proc/cpuinfo | grep processor | wc -l 2>&1'), cats("."), __cmdout);
MPRINT(SHELLCOMMAND):   call symputx("nb_cpu_cores", __cmdout);
MPRINT(SHELLCOMMAND):   do __i = 1 to countw(__cmdout, "0A0D"x);
MPRINT(SHELLCOMMAND):   __line = put(scan(__cmdout, __i, "0A0D"x), $char500.);
MPRINT(SHELLCOMMAND):   __linelen = length(__line);
MPRINT(SHELLCOMMAND):   drop __linenum;
MPRINT(SHELLCOMMAND):   __linenum+1;
MPRINT(SHELLCOMMAND):   putlog __linenum Z3. ' ' __line $varying. __linelen;
MPRINT(SHELLCOMMAND):   end;
MPRINT(SHELLCOMMAND):   drop __i __line __linelen;
MPRINT(SHELLCOMMAND):   end;
MPRINT(SHELLCOMMAND):   run;
                                                                                   The SAS System


001 32
002  
path: /lsafshared/SASWorkspaces/jbodart/.
command: [sh, -c, cat /proc/cpuinfo | grep processor | wc -l 2>&1]
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.02 seconds
      

NOTE: Setting Java classpath back to its original state: !CLASSPATH
MPRINT(RESET_CLASSPATH):   OPTIONS SET=CLASSPATH "!CLASSPATH";
MPRINT(SHELLCOMMAND):  ;
MPRINT(GET_SESSIONS_INFOS):  ;
NB_CPU_CORES=32
%SHELLCOMMAND(lscpu 2>&1, path=., resultvar=__cmdout, dsin=, dsout=cpu_details, print=Y, linenum=Y, cond=1, for_each_do=, otherwise_do=, into=);
MPRINT(SHELLCOMMAND):   *- The following 3 macros definitions are adpated from SAS Support / Samples and Notes: Sample 38518: Dynamically setting the CLASSPATH for use in a DATA 
step that uses the Java object component available at https://support.sas.com/kb/38/518.html 
--------------------------------------------------------------------------------------------------------------*;
MPRINT(INIT_CLASSPATH_UPDATE):   DATA _null_;
MPRINT(INIT_CLASSPATH_UPDATE):   LENGTH path_separator $ 2 orig_classpath $ 500;
MPRINT(INIT_CLASSPATH_UPDATE):   DECLARE JavaObj f("java.io.File", "");
MPRINT(INIT_CLASSPATH_UPDATE):   f.getStaticStringField("pathSeparator", path_separator);
MPRINT(INIT_CLASSPATH_UPDATE):   orig_classpath = STRIP(SYSGET("CLASSPATH"));
MPRINT(INIT_CLASSPATH_UPDATE):   IF _ERROR_ = 1 OR LENGTH(orig_classpath) = 0 THEN DO;
MPRINT(INIT_CLASSPATH_UPDATE):   PUT "NOTE: Ignore any messages from the next statement(s)";
MPRINT(INIT_CLASSPATH_UPDATE):   orig_classpath = "";
MPRINT(INIT_CLASSPATH_UPDATE):   END;
MPRINT(INIT_CLASSPATH_UPDATE):   if orig_classpath = "" then CALL SYMPUT('CP_orig_classpath', SYSGET("CLASSPATH"));
MPRINT(INIT_CLASSPATH_UPDATE):   else CALL SYMPUT('CP_orig_classpath', STRIP(orig_classpath));
MPRINT(INIT_CLASSPATH_UPDATE):   CALL SYMPUT('CP_path_separator', COMPRESS(path_separator));
MPRINT(INIT_CLASSPATH_UPDATE):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SHELLCOMMAND):  ;
MPRINT(ADD_TO_CLASSPATH):   DATA _null_;
MPRINT(ADD_TO_CLASSPATH):   LENGTH current_classpath $ 500 new_classpath $ 500;
MPRINT(ADD_TO_CLASSPATH):   current_classpath = STRIP(SYSGET("CLASSPATH"));
MPRINT(ADD_TO_CLASSPATH):   IF _ERROR_ = 1 OR LENGTH(current_classpath) = 0 THEN DO;
MPRINT(ADD_TO_CLASSPATH):   PUT "NOTE: Ignore any messages from the nearby statement(s)";
MPRINT(ADD_TO_CLASSPATH):   new_classpath = 
"/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar";
MPRINT(ADD_TO_CLASSPATH):   END;
MPRINT(ADD_TO_CLASSPATH):   ELSE DO;
MPRINT(ADD_TO_CLASSPATH):   new_classpath = COMPRESS(current_classpath) || ":" || 
"/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar";
MPRINT(ADD_TO_CLASSPATH):   END;
MPRINT(ADD_TO_CLASSPATH):   CALL SYMPUT('CP_new_classpath', STRIP(new_classpath));
MPRINT(ADD_TO_CLASSPATH):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      
                                                                                   The SAS System


NOTE: Setting Java classpath to 
!CLASSPATH:/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar
MPRINT(ADD_TO_CLASSPATH):   OPTIONS SET=CLASSPATH 
"!CLASSPATH:/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar";
MPRINT(SHELLCOMMAND):  ;
MPRINT(SHELLCOMMAND):   data cpu_details;
MPRINT(SHELLCOMMAND):   declare javaobj shellcommand("shellCommand/ShellCommand");
MPRINT(SHELLCOMMAND):   __cmdout = put(" ", $32000.);
MPRINT(SHELLCOMMAND):   if 1 then do;
MPRINT(SHELLCOMMAND):   shellcommand.callStaticStringMethod("commandStr", strip('lscpu 2>&1'), cats("."), __cmdout);
MPRINT(SHELLCOMMAND):   do __i = 1 to countw(__cmdout, "0A0D"x);
MPRINT(SHELLCOMMAND):   __line = put(scan(__cmdout, __i, "0A0D"x), $char500.);
MPRINT(SHELLCOMMAND):   __linelen = length(__line);
MPRINT(SHELLCOMMAND):   drop __linenum;
MPRINT(SHELLCOMMAND):   __linenum+1;
MPRINT(SHELLCOMMAND):   putlog __linenum Z3. ' ' __line $varying. __linelen;
MPRINT(SHELLCOMMAND):   end;
MPRINT(SHELLCOMMAND):   drop __i __line __linelen;
MPRINT(SHELLCOMMAND):   end;
MPRINT(SHELLCOMMAND):   run;

001 Architecture:        x86_64
002 CPU op-mode(s):      32-bit, 64-bit
003 Byte Order:          Little Endian
004 CPU(s):              32
005 On-line CPU(s) list: 0-31
006 Thread(s) per core:  2
007 Core(s) per socket:  16
008 Socket(s):           1
009 NUMA node(s):        1
010 Vendor ID:           GenuineIntel
011 CPU family:          6
012 Model:               85
013 Model name:          Intel(R) Xeon(R) Platinum 8272CL CPU @ 2.60GHz
014 Stepping:            7
015 CPU MHz:             2593.904
016 BogoMIPS:            5187.80
017 Virtualization:      VT-x
018 Hypervisor vendor:   Microsoft
019 Virtualization type: full
020 L1d cache:           32K
021 L1i cache:           32K
022 L2 cache:            1024K
023 L3 cache:            36608K
024 NUMA node0 CPU(s):   0-31
025 
Flags:               fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc rep_good nopl
 xtopology cpuid pni pclmulqdq vmx ssse3 fma cx16 pcid sse4_1 sse4_2 movbe popcnt aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch invpcid_single tpr_shadow vnmi ept 
vpid ept_ad fsgsbase bmi1 hle avx2 smep bmi2 erms invpcid rtm avx512f avx512dq rdseed adx smap clflushopt clwb avx512cd avx512bw avx512vl xs
026  
path: /lsafshared/SASWorkspaces/jbodart/.
command: [sh, -c, lscpu 2>&1]
NOTE: The data set WORK.CPU_DETAILS has 1 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      
                                                                                   The SAS System


NOTE: Setting Java classpath back to its original state: !CLASSPATH
MPRINT(RESET_CLASSPATH):   OPTIONS SET=CLASSPATH "!CLASSPATH";
MPRINT(SHELLCOMMAND):  ;
MPRINT(GET_SESSIONS_INFOS):  ;
%SHELLCOMMAND(top -bn2| grep "Cpu(s)"| tail -1| sed "s/.*, *\([0-9.]*\)%\? id.*/\1/", path=., resultvar=__cmdout, dsin=, dsout=_null_, print=Y, linenum=Y, cond=1, for_each_do=, 
otherwise_do=, into=cpu_pct_idle);
MPRINT(SHELLCOMMAND):   *- The following 3 macros definitions are adpated from SAS Support / Samples and Notes: Sample 38518: Dynamically setting the CLASSPATH for use in a DATA 
step that uses the Java object component available at https://support.sas.com/kb/38/518.html 
--------------------------------------------------------------------------------------------------------------*;
MPRINT(INIT_CLASSPATH_UPDATE):   DATA _null_;
MPRINT(INIT_CLASSPATH_UPDATE):   LENGTH path_separator $ 2 orig_classpath $ 500;
MPRINT(INIT_CLASSPATH_UPDATE):   DECLARE JavaObj f("java.io.File", "");
MPRINT(INIT_CLASSPATH_UPDATE):   f.getStaticStringField("pathSeparator", path_separator);
MPRINT(INIT_CLASSPATH_UPDATE):   orig_classpath = STRIP(SYSGET("CLASSPATH"));
MPRINT(INIT_CLASSPATH_UPDATE):   IF _ERROR_ = 1 OR LENGTH(orig_classpath) = 0 THEN DO;
MPRINT(INIT_CLASSPATH_UPDATE):   PUT "NOTE: Ignore any messages from the next statement(s)";
MPRINT(INIT_CLASSPATH_UPDATE):   orig_classpath = "";
MPRINT(INIT_CLASSPATH_UPDATE):   END;
MPRINT(INIT_CLASSPATH_UPDATE):   if orig_classpath = "" then CALL SYMPUT('CP_orig_classpath', SYSGET("CLASSPATH"));
MPRINT(INIT_CLASSPATH_UPDATE):   else CALL SYMPUT('CP_orig_classpath', STRIP(orig_classpath));
MPRINT(INIT_CLASSPATH_UPDATE):   CALL SYMPUT('CP_path_separator', COMPRESS(path_separator));
MPRINT(INIT_CLASSPATH_UPDATE):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SHELLCOMMAND):  ;
MPRINT(ADD_TO_CLASSPATH):   DATA _null_;
MPRINT(ADD_TO_CLASSPATH):   LENGTH current_classpath $ 500 new_classpath $ 500;
MPRINT(ADD_TO_CLASSPATH):   current_classpath = STRIP(SYSGET("CLASSPATH"));
MPRINT(ADD_TO_CLASSPATH):   IF _ERROR_ = 1 OR LENGTH(current_classpath) = 0 THEN DO;
MPRINT(ADD_TO_CLASSPATH):   PUT "NOTE: Ignore any messages from the nearby statement(s)";
MPRINT(ADD_TO_CLASSPATH):   new_classpath = 
"/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar";
MPRINT(ADD_TO_CLASSPATH):   END;
MPRINT(ADD_TO_CLASSPATH):   ELSE DO;
MPRINT(ADD_TO_CLASSPATH):   new_classpath = COMPRESS(current_classpath) || ":" || 
"/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar";
MPRINT(ADD_TO_CLASSPATH):   END;
MPRINT(ADD_TO_CLASSPATH):   CALL SYMPUT('CP_new_classpath', STRIP(new_classpath));
MPRINT(ADD_TO_CLASSPATH):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: Setting Java classpath to 
!CLASSPATH:/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar
MPRINT(ADD_TO_CLASSPATH):   OPTIONS SET=CLASSPATH 
"!CLASSPATH:/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar";
MPRINT(SHELLCOMMAND):  ;
MPRINT(SHELLCOMMAND):   data _null_;
MPRINT(SHELLCOMMAND):   declare javaobj shellcommand("shellCommand/ShellCommand");
MPRINT(SHELLCOMMAND):   __cmdout = put(" ", $32000.);
                                                                                   The SAS System

MPRINT(SHELLCOMMAND):   if 1 then do;
MPRINT(SHELLCOMMAND):   shellcommand.callStaticStringMethod("commandStr", strip('top -bn2| grep "Cpu(s)"| tail -1| sed "s/.*, *\([0-9.]*\)%\? id.*/\1/"'), cats("."), __cmdout);
MPRINT(SHELLCOMMAND):   call symputx("cpu_pct_idle", __cmdout);
MPRINT(SHELLCOMMAND):   do __i = 1 to countw(__cmdout, "0A0D"x);
MPRINT(SHELLCOMMAND):   __line = put(scan(__cmdout, __i, "0A0D"x), $char500.);
MPRINT(SHELLCOMMAND):   __linelen = length(__line);
MPRINT(SHELLCOMMAND):   drop __linenum;
MPRINT(SHELLCOMMAND):   __linenum+1;
MPRINT(SHELLCOMMAND):   putlog __linenum Z3. ' ' __line $varying. __linelen;
MPRINT(SHELLCOMMAND):   end;
MPRINT(SHELLCOMMAND):   drop __i __line __linelen;
MPRINT(SHELLCOMMAND):   end;
MPRINT(SHELLCOMMAND):   run;

001 96.4
002  
path: /lsafshared/SASWorkspaces/jbodart/.
command: [sh, -c, top -bn2| grep "Cpu(s)"| tail -1| sed "s/.*, *\([0-9.]*\)%\? id.*/\1/"]
NOTE: DATA statement used (Total process time):
      real time           3.21 seconds
      cpu time            0.01 seconds
      

NOTE: Setting Java classpath back to its original state: !CLASSPATH
MPRINT(RESET_CLASSPATH):   OPTIONS SET=CLASSPATH "!CLASSPATH";
MPRINT(SHELLCOMMAND):  ;
MPRINT(GET_SESSIONS_INFOS):  ;
MPRINT(GET_SESSIONS_INFOS):   data _null_;
MPRINT(GET_SESSIONS_INFOS):   file print;
MPRINT(GET_SESSIONS_INFOS):   put / "CPU % idle: 96.4
";
MPRINT(GET_SESSIONS_INFOS):   put "CPU Current Usage: 3.6%" / " ";
MPRINT(GET_SESSIONS_INFOS):   putlog "NO" "TE-" / "CPU % idle: 96.4
";
MPRINT(GET_SESSIONS_INFOS):   putlog "CPU Current Usage: 3.6%" / "NO" "TE-";
MPRINT(GET_SESSIONS_INFOS):   run;

     
CPU % idle: 96.4

CPU Current Usage: 3.6%
     
NOTE: 2 lines were written to file PRINT.
NOTE: The DATA step printed page 2.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(GET_SESSIONS_INFOS):   *- Memory (RAM & Swap) Usage -*;
%SHELLCOMMAND(free -m 2>&1, path=., resultvar=__cmdout, dsin=, dsout=mem_usage0, print=Y, linenum=Y, cond=1, for_each_do=, otherwise_do=, into=);
MPRINT(SHELLCOMMAND):   *- The following 3 macros definitions are adpated from SAS Support / Samples and Notes: Sample 38518: Dynamically setting the CLASSPATH for use in a DATA 
step that uses the Java object component available at https://support.sas.com/kb/38/518.html 
--------------------------------------------------------------------------------------------------------------*;
MPRINT(INIT_CLASSPATH_UPDATE):   DATA _null_;
MPRINT(INIT_CLASSPATH_UPDATE):   LENGTH path_separator $ 2 orig_classpath $ 500;
MPRINT(INIT_CLASSPATH_UPDATE):   DECLARE JavaObj f("java.io.File", "");
MPRINT(INIT_CLASSPATH_UPDATE):   f.getStaticStringField("pathSeparator", path_separator);
MPRINT(INIT_CLASSPATH_UPDATE):   orig_classpath = STRIP(SYSGET("CLASSPATH"));
MPRINT(INIT_CLASSPATH_UPDATE):   IF _ERROR_ = 1 OR LENGTH(orig_classpath) = 0 THEN DO;
MPRINT(INIT_CLASSPATH_UPDATE):   PUT "NOTE: Ignore any messages from the next statement(s)";
                                                                                   The SAS System

MPRINT(INIT_CLASSPATH_UPDATE):   orig_classpath = "";
MPRINT(INIT_CLASSPATH_UPDATE):   END;
MPRINT(INIT_CLASSPATH_UPDATE):   if orig_classpath = "" then CALL SYMPUT('CP_orig_classpath', SYSGET("CLASSPATH"));
MPRINT(INIT_CLASSPATH_UPDATE):   else CALL SYMPUT('CP_orig_classpath', STRIP(orig_classpath));
MPRINT(INIT_CLASSPATH_UPDATE):   CALL SYMPUT('CP_path_separator', COMPRESS(path_separator));
MPRINT(INIT_CLASSPATH_UPDATE):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SHELLCOMMAND):  ;
MPRINT(ADD_TO_CLASSPATH):   DATA _null_;
MPRINT(ADD_TO_CLASSPATH):   LENGTH current_classpath $ 500 new_classpath $ 500;
MPRINT(ADD_TO_CLASSPATH):   current_classpath = STRIP(SYSGET("CLASSPATH"));
MPRINT(ADD_TO_CLASSPATH):   IF _ERROR_ = 1 OR LENGTH(current_classpath) = 0 THEN DO;
MPRINT(ADD_TO_CLASSPATH):   PUT "NOTE: Ignore any messages from the nearby statement(s)";
MPRINT(ADD_TO_CLASSPATH):   new_classpath = 
"/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar";
MPRINT(ADD_TO_CLASSPATH):   END;
MPRINT(ADD_TO_CLASSPATH):   ELSE DO;
MPRINT(ADD_TO_CLASSPATH):   new_classpath = COMPRESS(current_classpath) || ":" || 
"/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar";
MPRINT(ADD_TO_CLASSPATH):   END;
MPRINT(ADD_TO_CLASSPATH):   CALL SYMPUT('CP_new_classpath', STRIP(new_classpath));
MPRINT(ADD_TO_CLASSPATH):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: Setting Java classpath to 
!CLASSPATH:/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar
MPRINT(ADD_TO_CLASSPATH):   OPTIONS SET=CLASSPATH 
"!CLASSPATH:/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar";
MPRINT(SHELLCOMMAND):  ;
MPRINT(SHELLCOMMAND):   data mem_usage0;
MPRINT(SHELLCOMMAND):   declare javaobj shellcommand("shellCommand/ShellCommand");
MPRINT(SHELLCOMMAND):   __cmdout = put(" ", $32000.);
MPRINT(SHELLCOMMAND):   if 1 then do;
MPRINT(SHELLCOMMAND):   shellcommand.callStaticStringMethod("commandStr", strip('free -m 2>&1'), cats("."), __cmdout);
MPRINT(SHELLCOMMAND):   do __i = 1 to countw(__cmdout, "0A0D"x);
MPRINT(SHELLCOMMAND):   __line = put(scan(__cmdout, __i, "0A0D"x), $char500.);
MPRINT(SHELLCOMMAND):   __linelen = length(__line);
MPRINT(SHELLCOMMAND):   drop __linenum;
MPRINT(SHELLCOMMAND):   __linenum+1;
MPRINT(SHELLCOMMAND):   putlog __linenum Z3. ' ' __line $varying. __linelen;
MPRINT(SHELLCOMMAND):   end;
MPRINT(SHELLCOMMAND):   drop __i __line __linelen;
MPRINT(SHELLCOMMAND):   end;
MPRINT(SHELLCOMMAND):   run;

001               total        used        free      shared  buff/cache   available
002 Mem:         257682       42446      172314           3       42921      213302
003 Swap:          2047        1157         890
004  
                                                                                   The SAS System

path: /lsafshared/SASWorkspaces/jbodart/.
command: [sh, -c, free -m 2>&1]
NOTE: The data set WORK.MEM_USAGE0 has 1 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

NOTE: Setting Java classpath back to its original state: !CLASSPATH
MPRINT(RESET_CLASSPATH):   OPTIONS SET=CLASSPATH "!CLASSPATH";
MPRINT(SHELLCOMMAND):  ;
MPRINT(GET_SESSIONS_INFOS):  ;
MPRINT(GET_SESSIONS_INFOS):   data mem_usage(drop=__:);
MPRINT(GET_SESSIONS_INFOS):   set mem_usage0;
MPRINT(GET_SESSIONS_INFOS):   array word (10) $40 w1-w10;
MPRINT(GET_SESSIONS_INFOS):   length __labels $1000 __cols $100;
MPRINT(GET_SESSIONS_INFOS):   do __i = 1 to countw(__cmdout, "0A0D"x);
MPRINT(GET_SESSIONS_INFOS):   __line = put(scan(__cmdout, __i, "0A0D"x), $char500.);
MPRINT(GET_SESSIONS_INFOS):   call missing(of w1-w10);
MPRINT(GET_SESSIONS_INFOS):   if __i eq 1 then w1 = "Type:";
MPRINT(GET_SESSIONS_INFOS):   do __j = 1 to countw(__line, " ");
MPRINT(GET_SESSIONS_INFOS):   word(__j + (__i eq 1)) = scan(__line, __j, " ");
MPRINT(GET_SESSIONS_INFOS):   if __i eq 1 then do;
MPRINT(GET_SESSIONS_INFOS):   __labels=catx(" ", __labels, vname(word(__j))||"="||quote(strip(word(__j))));
MPRINT(GET_SESSIONS_INFOS):   if word(__j) ^= " " then __cols = catx(" ", __cols, vname(word(__j)));
MPRINT(GET_SESSIONS_INFOS):   end;
MPRINT(GET_SESSIONS_INFOS):   end;
MPRINT(GET_SESSIONS_INFOS):   if __Line ^= ' ' then output;
MPRINT(GET_SESSIONS_INFOS):   if __i eq 1 then do;
MPRINT(GET_SESSIONS_INFOS):   call symput('__labels', trim(__labels));
MPRINT(GET_SESSIONS_INFOS):   call symput('__cols', trim(__cols));
MPRINT(GET_SESSIONS_INFOS):   end;
MPRINT(GET_SESSIONS_INFOS):   end;
MPRINT(GET_SESSIONS_INFOS):   run;

NOTE: There were 1 observations read from the data set WORK.MEM_USAGE0.
NOTE: The data set WORK.MEM_USAGE has 3 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(GET_SESSIONS_INFOS):   proc print data=mem_usage(firstobs=2) label noobs;
MPRINT(GET_SESSIONS_INFOS):   var w1 w2 w3 w4 w5 w6;
MPRINT(GET_SESSIONS_INFOS):   label w1= "Type:" w2= "total" w3= "used" w4= "free" w5= "shared" w6= "buff/cache";
MPRINT(GET_SESSIONS_INFOS):   title;
MPRINT(GET_SESSIONS_INFOS):   title2 "Memory Usage as of  2023-02-15T06:22:35+00:00";
MPRINT(GET_SESSIONS_INFOS):   run;
NOTE: There were 2 observations read from the data set WORK.MEM_USAGE.
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

%SHELLCOMMAND(cat /proc/swaps 2>&1, path=., resultvar=__cmdout, dsin=, dsout=swap_usage0, print=Y, linenum=Y, cond=1, for_each_do=, otherwise_do=, into=);
MPRINT(SHELLCOMMAND):   *- The following 3 macros definitions are adpated from SAS Support / Samples and Notes: Sample 38518: Dynamically setting the CLASSPATH for use in a DATA 
step that uses the Java object component available at https://support.sas.com/kb/38/518.html 
                                                                                   The SAS System

--------------------------------------------------------------------------------------------------------------*;
MPRINT(INIT_CLASSPATH_UPDATE):   DATA _null_;
MPRINT(INIT_CLASSPATH_UPDATE):   LENGTH path_separator $ 2 orig_classpath $ 500;
MPRINT(INIT_CLASSPATH_UPDATE):   DECLARE JavaObj f("java.io.File", "");
MPRINT(INIT_CLASSPATH_UPDATE):   f.getStaticStringField("pathSeparator", path_separator);
MPRINT(INIT_CLASSPATH_UPDATE):   orig_classpath = STRIP(SYSGET("CLASSPATH"));
MPRINT(INIT_CLASSPATH_UPDATE):   IF _ERROR_ = 1 OR LENGTH(orig_classpath) = 0 THEN DO;
MPRINT(INIT_CLASSPATH_UPDATE):   PUT "NOTE: Ignore any messages from the next statement(s)";
MPRINT(INIT_CLASSPATH_UPDATE):   orig_classpath = "";
MPRINT(INIT_CLASSPATH_UPDATE):   END;
MPRINT(INIT_CLASSPATH_UPDATE):   if orig_classpath = "" then CALL SYMPUT('CP_orig_classpath', SYSGET("CLASSPATH"));
MPRINT(INIT_CLASSPATH_UPDATE):   else CALL SYMPUT('CP_orig_classpath', STRIP(orig_classpath));
MPRINT(INIT_CLASSPATH_UPDATE):   CALL SYMPUT('CP_path_separator', COMPRESS(path_separator));
MPRINT(INIT_CLASSPATH_UPDATE):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SHELLCOMMAND):  ;
MPRINT(ADD_TO_CLASSPATH):   DATA _null_;
MPRINT(ADD_TO_CLASSPATH):   LENGTH current_classpath $ 500 new_classpath $ 500;
MPRINT(ADD_TO_CLASSPATH):   current_classpath = STRIP(SYSGET("CLASSPATH"));
MPRINT(ADD_TO_CLASSPATH):   IF _ERROR_ = 1 OR LENGTH(current_classpath) = 0 THEN DO;
MPRINT(ADD_TO_CLASSPATH):   PUT "NOTE: Ignore any messages from the nearby statement(s)";
MPRINT(ADD_TO_CLASSPATH):   new_classpath = 
"/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar";
MPRINT(ADD_TO_CLASSPATH):   END;
MPRINT(ADD_TO_CLASSPATH):   ELSE DO;
MPRINT(ADD_TO_CLASSPATH):   new_classpath = COMPRESS(current_classpath) || ":" || 
"/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar";
MPRINT(ADD_TO_CLASSPATH):   END;
MPRINT(ADD_TO_CLASSPATH):   CALL SYMPUT('CP_new_classpath', STRIP(new_classpath));
MPRINT(ADD_TO_CLASSPATH):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: Setting Java classpath to 
!CLASSPATH:/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar
MPRINT(ADD_TO_CLASSPATH):   OPTIONS SET=CLASSPATH 
"!CLASSPATH:/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar";
MPRINT(SHELLCOMMAND):  ;
MPRINT(SHELLCOMMAND):   data swap_usage0;
MPRINT(SHELLCOMMAND):   declare javaobj shellcommand("shellCommand/ShellCommand");
MPRINT(SHELLCOMMAND):   __cmdout = put(" ", $32000.);
MPRINT(SHELLCOMMAND):   if 1 then do;
MPRINT(SHELLCOMMAND):   shellcommand.callStaticStringMethod("commandStr", strip('cat /proc/swaps 2>&1'), cats("."), __cmdout);
MPRINT(SHELLCOMMAND):   do __i = 1 to countw(__cmdout, "0A0D"x);
MPRINT(SHELLCOMMAND):   __line = put(scan(__cmdout, __i, "0A0D"x), $char500.);
MPRINT(SHELLCOMMAND):   __linelen = length(__line);
MPRINT(SHELLCOMMAND):   drop __linenum;
MPRINT(SHELLCOMMAND):   __linenum+1;
MPRINT(SHELLCOMMAND):   putlog __linenum Z3. ' ' __line $varying. __linelen;
MPRINT(SHELLCOMMAND):   end;
                                                                                   The SAS System

MPRINT(SHELLCOMMAND):   drop __i __line __linelen;
MPRINT(SHELLCOMMAND):   end;
MPRINT(SHELLCOMMAND):   run;

001 Filename				Type		Size	Used	Priority
002 /saswork/swapfile                       file		2097148	1185092	-2
003  
path: /lsafshared/SASWorkspaces/jbodart/.
command: [sh, -c, cat /proc/swaps 2>&1]
NOTE: The data set WORK.SWAP_USAGE0 has 1 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: Setting Java classpath back to its original state: !CLASSPATH
MPRINT(RESET_CLASSPATH):   OPTIONS SET=CLASSPATH "!CLASSPATH";
MPRINT(SHELLCOMMAND):  ;
MPRINT(GET_SESSIONS_INFOS):  ;
MPRINT(GET_SESSIONS_INFOS):   data swap_usage(drop=__:);
MPRINT(GET_SESSIONS_INFOS):   set swap_usage0;
MPRINT(GET_SESSIONS_INFOS):   array word (10) $40 w1-w10;
MPRINT(GET_SESSIONS_INFOS):   length __labels $1000 __cols $100;
MPRINT(GET_SESSIONS_INFOS):   do __i = 1 to countw(__cmdout, "0A0D"x);
MPRINT(GET_SESSIONS_INFOS):   __line = put(scan(__cmdout, __i, "0A0D"x), $char500.);
MPRINT(GET_SESSIONS_INFOS):   put __line=;
MPRINT(GET_SESSIONS_INFOS):   call missing(of w1-w10);
MPRINT(GET_SESSIONS_INFOS):   do __j = 1 to countw(__line, "2009"x);
MPRINT(GET_SESSIONS_INFOS):   word(__j) = scan(__line, __j, "2009"x);
MPRINT(GET_SESSIONS_INFOS):   if __i eq 1 then do;
MPRINT(GET_SESSIONS_INFOS):   __labels=catx(" ", __labels, vname(word(__j))||"="||quote(strip(word(__j))));
MPRINT(GET_SESSIONS_INFOS):   if word(__j) ^= " " then __cols = catx(" ", __cols, vname(word(__j)));
MPRINT(GET_SESSIONS_INFOS):   end;
MPRINT(GET_SESSIONS_INFOS):   end;
MPRINT(GET_SESSIONS_INFOS):   if __Line ^= ' ' then output;
MPRINT(GET_SESSIONS_INFOS):   if __i eq 1 then do;
MPRINT(GET_SESSIONS_INFOS):   call symput('__labels', trim(__labels));
MPRINT(GET_SESSIONS_INFOS):   call symput('__cols', trim(__cols));
MPRINT(GET_SESSIONS_INFOS):   end;
MPRINT(GET_SESSIONS_INFOS):   end;
MPRINT(GET_SESSIONS_INFOS):   run;

__line=Filename				Type		Size	Used	Priority
__line=/saswork/swapfile                       file		2097148	1185092	-2
__line= 
NOTE: There were 1 observations read from the data set WORK.SWAP_USAGE0.
NOTE: The data set WORK.SWAP_USAGE has 2 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(GET_SESSIONS_INFOS):   proc print data=swap_usage(firstobs=2) label noobs;
MPRINT(GET_SESSIONS_INFOS):   var w1 w2 w3 w4 w5;
MPRINT(GET_SESSIONS_INFOS):   label w1= "Filename" w2= "Type" w3= "Size" w4= "Used" w5= "Priority";
MPRINT(GET_SESSIONS_INFOS):   title;
MPRINT(GET_SESSIONS_INFOS):   title2 "Swap Usage as of  2023-02-15T06:22:35+00:00";
MPRINT(GET_SESSIONS_INFOS):   run;
                                                                                   The SAS System

NOTE: There were 1 observations read from the data set WORK.SWAP_USAGE.
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(GET_SESSIONS_INFOS):   title;
MPRINT(GET_SESSIONS_INFOS):   *- Disk Free Space -*;
%SHELLCOMMAND(df -h 2>&1, path=., resultvar=__cmdout, dsin=, dsout=disks_free_space, print=Y, linenum=Y, cond=1, for_each_do=, otherwise_do=, into=);
MPRINT(SHELLCOMMAND):   *- The following 3 macros definitions are adpated from SAS Support / Samples and Notes: Sample 38518: Dynamically setting the CLASSPATH for use in a DATA 
step that uses the Java object component available at https://support.sas.com/kb/38/518.html 
--------------------------------------------------------------------------------------------------------------*;
MPRINT(INIT_CLASSPATH_UPDATE):   DATA _null_;
MPRINT(INIT_CLASSPATH_UPDATE):   LENGTH path_separator $ 2 orig_classpath $ 500;
MPRINT(INIT_CLASSPATH_UPDATE):   DECLARE JavaObj f("java.io.File", "");
MPRINT(INIT_CLASSPATH_UPDATE):   f.getStaticStringField("pathSeparator", path_separator);
MPRINT(INIT_CLASSPATH_UPDATE):   orig_classpath = STRIP(SYSGET("CLASSPATH"));
MPRINT(INIT_CLASSPATH_UPDATE):   IF _ERROR_ = 1 OR LENGTH(orig_classpath) = 0 THEN DO;
MPRINT(INIT_CLASSPATH_UPDATE):   PUT "NOTE: Ignore any messages from the next statement(s)";
MPRINT(INIT_CLASSPATH_UPDATE):   orig_classpath = "";
MPRINT(INIT_CLASSPATH_UPDATE):   END;
MPRINT(INIT_CLASSPATH_UPDATE):   if orig_classpath = "" then CALL SYMPUT('CP_orig_classpath', SYSGET("CLASSPATH"));
MPRINT(INIT_CLASSPATH_UPDATE):   else CALL SYMPUT('CP_orig_classpath', STRIP(orig_classpath));
MPRINT(INIT_CLASSPATH_UPDATE):   CALL SYMPUT('CP_path_separator', COMPRESS(path_separator));
MPRINT(INIT_CLASSPATH_UPDATE):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SHELLCOMMAND):  ;
MPRINT(ADD_TO_CLASSPATH):   DATA _null_;
MPRINT(ADD_TO_CLASSPATH):   LENGTH current_classpath $ 500 new_classpath $ 500;
MPRINT(ADD_TO_CLASSPATH):   current_classpath = STRIP(SYSGET("CLASSPATH"));
MPRINT(ADD_TO_CLASSPATH):   IF _ERROR_ = 1 OR LENGTH(current_classpath) = 0 THEN DO;
MPRINT(ADD_TO_CLASSPATH):   PUT "NOTE: Ignore any messages from the nearby statement(s)";
MPRINT(ADD_TO_CLASSPATH):   new_classpath = 
"/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar";
MPRINT(ADD_TO_CLASSPATH):   END;
MPRINT(ADD_TO_CLASSPATH):   ELSE DO;
MPRINT(ADD_TO_CLASSPATH):   new_classpath = COMPRESS(current_classpath) || ":" || 
"/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar";
MPRINT(ADD_TO_CLASSPATH):   END;
MPRINT(ADD_TO_CLASSPATH):   CALL SYMPUT('CP_new_classpath', STRIP(new_classpath));
MPRINT(ADD_TO_CLASSPATH):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: Setting Java classpath to 
!CLASSPATH:/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar
MPRINT(ADD_TO_CLASSPATH):   OPTIONS SET=CLASSPATH 
"!CLASSPATH:/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar";
MPRINT(SHELLCOMMAND):  ;
                                                                                   The SAS System

MPRINT(SHELLCOMMAND):   data disks_free_space;
MPRINT(SHELLCOMMAND):   declare javaobj shellcommand("shellCommand/ShellCommand");
MPRINT(SHELLCOMMAND):   __cmdout = put(" ", $32000.);
MPRINT(SHELLCOMMAND):   if 1 then do;
MPRINT(SHELLCOMMAND):   shellcommand.callStaticStringMethod("commandStr", strip('df -h 2>&1'), cats("."), __cmdout);
MPRINT(SHELLCOMMAND):   do __i = 1 to countw(__cmdout, "0A0D"x);
MPRINT(SHELLCOMMAND):   __line = put(scan(__cmdout, __i, "0A0D"x), $char500.);
MPRINT(SHELLCOMMAND):   __linelen = length(__line);
MPRINT(SHELLCOMMAND):   drop __linenum;
MPRINT(SHELLCOMMAND):   __linenum+1;
MPRINT(SHELLCOMMAND):   putlog __linenum Z3. ' ' __line $varying. __linelen;
MPRINT(SHELLCOMMAND):   end;
MPRINT(SHELLCOMMAND):   drop __i __line __linelen;
MPRINT(SHELLCOMMAND):   end;
MPRINT(SHELLCOMMAND):   run;

001 Filesystem                                                         Size  Used Avail Use% Mounted on
002 devtmpfs                                                           126G     0  126G   0% /dev
003 tmpfs                                                              126G     0  126G   0% /dev/shm
004 tmpfs                                                              126G  1.1M  126G   1% /run
005 tmpfs                                                              126G     0  126G   0% /sys/fs/cgroup
006 /dev/mapper/rootvg-rootlv                                           43G  651M   42G   2% /
007 /dev/mapper/rootvg-usrlv                                            10G  4.5G  5.6G  45% /usr
008 /dev/mapper/rootvg-varlv                                           8.0G  1.8G  6.3G  22% /var
009 /dev/mapper/vg_validated_mounts-xythosfs                           1.1T  636G  415G  61% /xythosfs
010 /dev/mapper/vg_standard-tmp                                         10G  122M  9.9G   2% /tmp
011 /dev/sda1                                                          496M  162M  335M  33% /boot
012 /dev/mapper/vg_standard-home                                       5.0G  1.3G  3.8G  26% /home
013 /dev/mapper/vg_standard-sso                                         80G   45G   36G  56% /sso
014 /dev/sda15                                                         495M  5.8M  489M   2% /boot/efi
015 /dev/mapper/vg_standard-opt                                         10G  2.9G  7.2G  29% /opt
016 /dev/mapper/vg_standard-vartmp                                     2.0G   55M  2.0G   3% /var/tmp
017 /dev/mapper/vg_standard-varcache                                    10G  108M  9.9G   2% /var/cache
018 /dev/mapper/vg_validated_mounts-lsafshared                         350G  226G  125G  65% /lsafshared
019 /dev/mapper/vg_standard-ssobiconfig                                100G  1.1G   99G   2% /sso/biconfig
020 /dev/mapper/vg_standard-ssosfw                                     200G   29G  172G  15% /sso/sfw
021 /dev/mapper/vg_validated_mounts-lsafsharedSASWorkspaces.transient  100G   11G   90G  11% /lsafshared/SASWorkspaces/.transient
022 /dev/mapper/vg_standard-ssomonitoring                               20G  176M   20G   1% /sso/monitoring
023 /dev/mapper/vg_standard-varlog                                      10G  358M  9.7G   4% /var/log
024 /dev/mapper/vg_standard-varlogjournal                               10G  1.3G  8.8G  13% /var/log/journal
025 /dev/mapper/vg_standard-varlogaudit                                 10G  139M  9.9G   2% /var/log/audit
026 /dev/sdb1                                                          1.2T  2.3G  1.1T   1% /saswork
027 tmpfs                                                               26G  4.0K   26G   1% /run/user/184620
028 tmpfs                                                               26G     0   26G   0% /run/user/551
029 tmpfs                                                               26G     0   26G   0% /run/user/0
030  
path: /lsafshared/SASWorkspaces/jbodart/.
command: [sh, -c, df -h 2>&1]
NOTE: The data set WORK.DISKS_FREE_SPACE has 1 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

NOTE: Setting Java classpath back to its original state: !CLASSPATH
MPRINT(RESET_CLASSPATH):   OPTIONS SET=CLASSPATH "!CLASSPATH";
MPRINT(SHELLCOMMAND):  ;
MPRINT(GET_SESSIONS_INFOS):  ;
                                                                                   The SAS System

MPRINT(GET_SESSIONS_INFOS):   data transient_free_space(keep=transient_total transient_used transient_avail transient_usedpct);
MPRINT(GET_SESSIONS_INFOS):   set disks_free_space;
MPRINT(GET_SESSIONS_INFOS):   length transient_total transient_used transient_avail transient_usedpct $20;
MPRINT(GET_SESSIONS_INFOS):   do __i = 1 to countw(__cmdout, "0A0D"x);
MPRINT(GET_SESSIONS_INFOS):   __line = put(scan(__cmdout, __i, "0A0D"x), $char500.);
MPRINT(GET_SESSIONS_INFOS):   if __i=1 then do;
MPRINT(GET_SESSIONS_INFOS):   putlog " " / "NOTE-";
MPRINT(GET_SESSIONS_INFOS):   putlog __line;
MPRINT(GET_SESSIONS_INFOS):   end;
MPRINT(GET_SESSIONS_INFOS):   if prxmatch('!/lsafshared/SASWorkspaces/.transient$!', strip(__line)) then do;
MPRINT(GET_SESSIONS_INFOS):   putlog __line;
MPRINT(GET_SESSIONS_INFOS):   transient_total = scan(__line, 2, ' ');
MPRINT(GET_SESSIONS_INFOS):   transient_used = scan(__line, 3, ' ');
MPRINT(GET_SESSIONS_INFOS):   transient_avail = scan(__line, 4, ' ');
MPRINT(GET_SESSIONS_INFOS):   transient_usedpct = scan(__line, 5, ' ');
MPRINT(GET_SESSIONS_INFOS):   output;
MPRINT(GET_SESSIONS_INFOS):   end;
MPRINT(GET_SESSIONS_INFOS):   end;
MPRINT(GET_SESSIONS_INFOS):   putlog " " / "NOTE-";
MPRINT(GET_SESSIONS_INFOS):   run;


     
Filesystem                                                         Size  Used Avail Use% Mounted on
/dev/mapper/vg_validated_mounts-lsafsharedSASWorkspaces.transient  100G   11G   90G  11% /lsafshared/SASWorkspaces/.transient

     
NOTE: There were 1 observations read from the data set WORK.DISKS_FREE_SPACE.
NOTE: The data set WORK.TRANSIENT_FREE_SPACE has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(GET_SESSIONS_INFOS):   *- Disk usage -*;
%SHELLCOMMAND(du -sh . 2>&1, path=/saswork/sas_tmp/SAS_work146C00284AA8_xar08auv.vsp.sas.com/SAS_work4E6C00284AA8_xar08auv.vsp.sas.com, resultvar=__cmdout, dsin=, dsout=_null_, 
print=Y, linenum=Y, cond=1, for_each_do=, otherwise_do=, into=SASWORK_usage);
MPRINT(SHELLCOMMAND):   *- The following 3 macros definitions are adpated from SAS Support / Samples and Notes: Sample 38518: Dynamically setting the CLASSPATH for use in a DATA 
step that uses the Java object component available at https://support.sas.com/kb/38/518.html 
--------------------------------------------------------------------------------------------------------------*;
MPRINT(INIT_CLASSPATH_UPDATE):   DATA _null_;
MPRINT(INIT_CLASSPATH_UPDATE):   LENGTH path_separator $ 2 orig_classpath $ 500;
MPRINT(INIT_CLASSPATH_UPDATE):   DECLARE JavaObj f("java.io.File", "");
MPRINT(INIT_CLASSPATH_UPDATE):   f.getStaticStringField("pathSeparator", path_separator);
MPRINT(INIT_CLASSPATH_UPDATE):   orig_classpath = STRIP(SYSGET("CLASSPATH"));
MPRINT(INIT_CLASSPATH_UPDATE):   IF _ERROR_ = 1 OR LENGTH(orig_classpath) = 0 THEN DO;
MPRINT(INIT_CLASSPATH_UPDATE):   PUT "NOTE: Ignore any messages from the next statement(s)";
MPRINT(INIT_CLASSPATH_UPDATE):   orig_classpath = "";
MPRINT(INIT_CLASSPATH_UPDATE):   END;
MPRINT(INIT_CLASSPATH_UPDATE):   if orig_classpath = "" then CALL SYMPUT('CP_orig_classpath', SYSGET("CLASSPATH"));
MPRINT(INIT_CLASSPATH_UPDATE):   else CALL SYMPUT('CP_orig_classpath', STRIP(orig_classpath));
MPRINT(INIT_CLASSPATH_UPDATE):   CALL SYMPUT('CP_path_separator', COMPRESS(path_separator));
MPRINT(INIT_CLASSPATH_UPDATE):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      
                                                                                   The SAS System


MPRINT(SHELLCOMMAND):  ;
MPRINT(ADD_TO_CLASSPATH):   DATA _null_;
MPRINT(ADD_TO_CLASSPATH):   LENGTH current_classpath $ 500 new_classpath $ 500;
MPRINT(ADD_TO_CLASSPATH):   current_classpath = STRIP(SYSGET("CLASSPATH"));
MPRINT(ADD_TO_CLASSPATH):   IF _ERROR_ = 1 OR LENGTH(current_classpath) = 0 THEN DO;
MPRINT(ADD_TO_CLASSPATH):   PUT "NOTE: Ignore any messages from the nearby statement(s)";
MPRINT(ADD_TO_CLASSPATH):   new_classpath = 
"/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar";
MPRINT(ADD_TO_CLASSPATH):   END;
MPRINT(ADD_TO_CLASSPATH):   ELSE DO;
MPRINT(ADD_TO_CLASSPATH):   new_classpath = COMPRESS(current_classpath) || ":" || 
"/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar";
MPRINT(ADD_TO_CLASSPATH):   END;
MPRINT(ADD_TO_CLASSPATH):   CALL SYMPUT('CP_new_classpath', STRIP(new_classpath));
MPRINT(ADD_TO_CLASSPATH):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: Setting Java classpath to 
!CLASSPATH:/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar
MPRINT(ADD_TO_CLASSPATH):   OPTIONS SET=CLASSPATH 
"!CLASSPATH:/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar";
MPRINT(SHELLCOMMAND):  ;
MPRINT(SHELLCOMMAND):   data _null_;
MPRINT(SHELLCOMMAND):   declare javaobj shellcommand("shellCommand/ShellCommand");
MPRINT(SHELLCOMMAND):   __cmdout = put(" ", $32000.);
MPRINT(SHELLCOMMAND):   if 1 then do;
MPRINT(SHELLCOMMAND):   shellcommand.callStaticStringMethod("commandStr", strip('du -sh . 2>&1'), 
cats("/saswork/sas_tmp/SAS_work146C00284AA8_xar08auv.vsp.sas.com/SAS_work4E6C00284AA8_xar08auv.vsp.sas.com"), __cmdout);
MPRINT(SHELLCOMMAND):   call symputx("SASWORK_usage", __cmdout);
MPRINT(SHELLCOMMAND):   do __i = 1 to countw(__cmdout, "0A0D"x);
MPRINT(SHELLCOMMAND):   __line = put(scan(__cmdout, __i, "0A0D"x), $char500.);
MPRINT(SHELLCOMMAND):   __linelen = length(__line);
MPRINT(SHELLCOMMAND):   drop __linenum;
MPRINT(SHELLCOMMAND):   __linenum+1;
MPRINT(SHELLCOMMAND):   putlog __linenum Z3. ' ' __line $varying. __linelen;
MPRINT(SHELLCOMMAND):   end;
MPRINT(SHELLCOMMAND):   drop __i __line __linelen;
MPRINT(SHELLCOMMAND):   end;
MPRINT(SHELLCOMMAND):   run;

001 5.3M	.
002  
path: /saswork/sas_tmp/SAS_work146C00284AA8_xar08auv.vsp.sas.com/SAS_work4E6C00284AA8_xar08auv.vsp.sas.com
command: [sh, -c, du -sh . 2>&1]
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: Setting Java classpath back to its original state: !CLASSPATH
MPRINT(RESET_CLASSPATH):   OPTIONS SET=CLASSPATH "!CLASSPATH";
MPRINT(SHELLCOMMAND):  ;
MPRINT(GET_SESSIONS_INFOS):  ;
                                                                                   The SAS System


Notice: [ 2023-02-15T06:22:38+00:00] Disk Usage of: 5.3M . for SAS WORK: /saswork/sas_tmp/SAS_work146C00284AA8_xar08auv.vsp.sas.com/SAS_work4E6C00284AA8_xar08auv.vsp.sas.com

%SHELLCOMMAND(du -sh . 2>&1, path=/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222, resultvar=__cmdout, dsin=, dsout=_null_, 
print=Y, linenum=Y, cond=1, for_each_do=, otherwise_do=, into=_SASWS_usage);
MPRINT(SHELLCOMMAND):   *- The following 3 macros definitions are adpated from SAS Support / Samples and Notes: Sample 38518: Dynamically setting the CLASSPATH for use in a DATA 
step that uses the Java object component available at https://support.sas.com/kb/38/518.html 
--------------------------------------------------------------------------------------------------------------*;
MPRINT(INIT_CLASSPATH_UPDATE):   DATA _null_;
MPRINT(INIT_CLASSPATH_UPDATE):   LENGTH path_separator $ 2 orig_classpath $ 500;
MPRINT(INIT_CLASSPATH_UPDATE):   DECLARE JavaObj f("java.io.File", "");
MPRINT(INIT_CLASSPATH_UPDATE):   f.getStaticStringField("pathSeparator", path_separator);
MPRINT(INIT_CLASSPATH_UPDATE):   orig_classpath = STRIP(SYSGET("CLASSPATH"));
MPRINT(INIT_CLASSPATH_UPDATE):   IF _ERROR_ = 1 OR LENGTH(orig_classpath) = 0 THEN DO;
MPRINT(INIT_CLASSPATH_UPDATE):   PUT "NOTE: Ignore any messages from the next statement(s)";
MPRINT(INIT_CLASSPATH_UPDATE):   orig_classpath = "";
MPRINT(INIT_CLASSPATH_UPDATE):   END;
MPRINT(INIT_CLASSPATH_UPDATE):   if orig_classpath = "" then CALL SYMPUT('CP_orig_classpath', SYSGET("CLASSPATH"));
MPRINT(INIT_CLASSPATH_UPDATE):   else CALL SYMPUT('CP_orig_classpath', STRIP(orig_classpath));
MPRINT(INIT_CLASSPATH_UPDATE):   CALL SYMPUT('CP_path_separator', COMPRESS(path_separator));
MPRINT(INIT_CLASSPATH_UPDATE):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SHELLCOMMAND):  ;
MPRINT(ADD_TO_CLASSPATH):   DATA _null_;
MPRINT(ADD_TO_CLASSPATH):   LENGTH current_classpath $ 500 new_classpath $ 500;
MPRINT(ADD_TO_CLASSPATH):   current_classpath = STRIP(SYSGET("CLASSPATH"));
MPRINT(ADD_TO_CLASSPATH):   IF _ERROR_ = 1 OR LENGTH(current_classpath) = 0 THEN DO;
MPRINT(ADD_TO_CLASSPATH):   PUT "NOTE: Ignore any messages from the nearby statement(s)";
MPRINT(ADD_TO_CLASSPATH):   new_classpath = 
"/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar";
MPRINT(ADD_TO_CLASSPATH):   END;
MPRINT(ADD_TO_CLASSPATH):   ELSE DO;
MPRINT(ADD_TO_CLASSPATH):   new_classpath = COMPRESS(current_classpath) || ":" || 
"/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar";
MPRINT(ADD_TO_CLASSPATH):   END;
MPRINT(ADD_TO_CLASSPATH):   CALL SYMPUT('CP_new_classpath', STRIP(new_classpath));
MPRINT(ADD_TO_CLASSPATH):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

NOTE: Setting Java classpath to 
!CLASSPATH:/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar
MPRINT(ADD_TO_CLASSPATH):   OPTIONS SET=CLASSPATH 
"!CLASSPATH:/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar";
MPRINT(SHELLCOMMAND):  ;
MPRINT(SHELLCOMMAND):   data _null_;
MPRINT(SHELLCOMMAND):   declare javaobj shellcommand("shellCommand/ShellCommand");
MPRINT(SHELLCOMMAND):   __cmdout = put(" ", $32000.);
MPRINT(SHELLCOMMAND):   if 1 then do;
MPRINT(SHELLCOMMAND):   shellcommand.callStaticStringMethod("commandStr", strip('du -sh . 2>&1'), 
                                                                                   The SAS System

cats("/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222"), __cmdout);
MPRINT(SHELLCOMMAND):   call symputx("_SASWS_usage", __cmdout);
MPRINT(SHELLCOMMAND):   do __i = 1 to countw(__cmdout, "0A0D"x);
MPRINT(SHELLCOMMAND):   __line = put(scan(__cmdout, __i, "0A0D"x), $char500.);
MPRINT(SHELLCOMMAND):   __linelen = length(__line);
MPRINT(SHELLCOMMAND):   drop __linenum;
MPRINT(SHELLCOMMAND):   __linenum+1;
MPRINT(SHELLCOMMAND):   putlog __linenum Z3. ' ' __line $varying. __linelen;
MPRINT(SHELLCOMMAND):   end;
MPRINT(SHELLCOMMAND):   drop __i __line __linelen;
MPRINT(SHELLCOMMAND):   end;
MPRINT(SHELLCOMMAND):   run;

001 46M	.
002  
path: /lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222
command: [sh, -c, du -sh . 2>&1]
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

NOTE: Setting Java classpath back to its original state: !CLASSPATH
MPRINT(RESET_CLASSPATH):   OPTIONS SET=CLASSPATH "!CLASSPATH";
MPRINT(SHELLCOMMAND):  ;
MPRINT(GET_SESSIONS_INFOS):  ;

Notice: [ 2023-02-15T06:22:38+00:00] Disk Usage of: 46M . for SAS WORKSPACE: /lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222

%SHELLCOMMAND(du -sBM . 2>&1, path=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-d0b7cbe4-ac49-43bf-889b-90a3d8853c70, resultvar=__cmdout, dsin=, dsout=_null_, 
print=Y, linenum=Y, cond=1, for_each_do=, otherwise_do=, into=_PARENTJOB_WS_usage);
MPRINT(SHELLCOMMAND):   *- The following 3 macros definitions are adpated from SAS Support / Samples and Notes: Sample 38518: Dynamically setting the CLASSPATH for use in a DATA 
step that uses the Java object component available at https://support.sas.com/kb/38/518.html 
--------------------------------------------------------------------------------------------------------------*;
MPRINT(INIT_CLASSPATH_UPDATE):   DATA _null_;
MPRINT(INIT_CLASSPATH_UPDATE):   LENGTH path_separator $ 2 orig_classpath $ 500;
MPRINT(INIT_CLASSPATH_UPDATE):   DECLARE JavaObj f("java.io.File", "");
MPRINT(INIT_CLASSPATH_UPDATE):   f.getStaticStringField("pathSeparator", path_separator);
MPRINT(INIT_CLASSPATH_UPDATE):   orig_classpath = STRIP(SYSGET("CLASSPATH"));
MPRINT(INIT_CLASSPATH_UPDATE):   IF _ERROR_ = 1 OR LENGTH(orig_classpath) = 0 THEN DO;
MPRINT(INIT_CLASSPATH_UPDATE):   PUT "NOTE: Ignore any messages from the next statement(s)";
MPRINT(INIT_CLASSPATH_UPDATE):   orig_classpath = "";
MPRINT(INIT_CLASSPATH_UPDATE):   END;
MPRINT(INIT_CLASSPATH_UPDATE):   if orig_classpath = "" then CALL SYMPUT('CP_orig_classpath', SYSGET("CLASSPATH"));
MPRINT(INIT_CLASSPATH_UPDATE):   else CALL SYMPUT('CP_orig_classpath', STRIP(orig_classpath));
MPRINT(INIT_CLASSPATH_UPDATE):   CALL SYMPUT('CP_path_separator', COMPRESS(path_separator));
MPRINT(INIT_CLASSPATH_UPDATE):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SHELLCOMMAND):  ;
MPRINT(ADD_TO_CLASSPATH):   DATA _null_;
MPRINT(ADD_TO_CLASSPATH):   LENGTH current_classpath $ 500 new_classpath $ 500;
MPRINT(ADD_TO_CLASSPATH):   current_classpath = STRIP(SYSGET("CLASSPATH"));
MPRINT(ADD_TO_CLASSPATH):   IF _ERROR_ = 1 OR LENGTH(current_classpath) = 0 THEN DO;
                                                                                   The SAS System

MPRINT(ADD_TO_CLASSPATH):   PUT "NOTE: Ignore any messages from the nearby statement(s)";
MPRINT(ADD_TO_CLASSPATH):   new_classpath = 
"/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar";
MPRINT(ADD_TO_CLASSPATH):   END;
MPRINT(ADD_TO_CLASSPATH):   ELSE DO;
MPRINT(ADD_TO_CLASSPATH):   new_classpath = COMPRESS(current_classpath) || ":" || 
"/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar";
MPRINT(ADD_TO_CLASSPATH):   END;
MPRINT(ADD_TO_CLASSPATH):   CALL SYMPUT('CP_new_classpath', STRIP(new_classpath));
MPRINT(ADD_TO_CLASSPATH):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: Setting Java classpath to 
!CLASSPATH:/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar
MPRINT(ADD_TO_CLASSPATH):   OPTIONS SET=CLASSPATH 
"!CLASSPATH:/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar";
MPRINT(SHELLCOMMAND):  ;
MPRINT(SHELLCOMMAND):   data _null_;
MPRINT(SHELLCOMMAND):   declare javaobj shellcommand("shellCommand/ShellCommand");
MPRINT(SHELLCOMMAND):   __cmdout = put(" ", $32000.);
MPRINT(SHELLCOMMAND):   if 1 then do;
MPRINT(SHELLCOMMAND):   shellcommand.callStaticStringMethod("commandStr", strip('du -sBM . 2>&1'), 
cats("/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-d0b7cbe4-ac49-43bf-889b-90a3d8853c70"), __cmdout);
MPRINT(SHELLCOMMAND):   call symputx("_PARENTJOB_WS_usage", __cmdout);
MPRINT(SHELLCOMMAND):   do __i = 1 to countw(__cmdout, "0A0D"x);
MPRINT(SHELLCOMMAND):   __line = put(scan(__cmdout, __i, "0A0D"x), $char500.);
MPRINT(SHELLCOMMAND):   __linelen = length(__line);
MPRINT(SHELLCOMMAND):   drop __linenum;
MPRINT(SHELLCOMMAND):   __linenum+1;
MPRINT(SHELLCOMMAND):   putlog __linenum Z3. ' ' __line $varying. __linelen;
MPRINT(SHELLCOMMAND):   end;
MPRINT(SHELLCOMMAND):   drop __i __line __linelen;
MPRINT(SHELLCOMMAND):   end;
MPRINT(SHELLCOMMAND):   run;

001 84M	.
002  
path: /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-d0b7cbe4-ac49-43bf-889b-90a3d8853c70
command: [sh, -c, du -sBM . 2>&1]
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: Setting Java classpath back to its original state: !CLASSPATH
MPRINT(RESET_CLASSPATH):   OPTIONS SET=CLASSPATH "!CLASSPATH";
MPRINT(SHELLCOMMAND):  ;
MPRINT(GET_SESSIONS_INFOS):  ;

Notice: [ 2023-02-15T06:22:38+00:00] Disk Usage of: 84M . for PARENT JOB WORKSPACE: 
/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-d0b7cbe4-ac49-43bf-889b-90a3d8853c70

%SHELLCOMMAND(du -sBM . 2>&1, path=/saswork/sas_tmp/SAS_work60810017E407_xar08auv.vsp.sas.com/SAS_work41A00017E407_xar08auv.vsp.sas.com, resultvar=__cmdout, dsin=, dsout=_null_, 
print=Y, linenum=Y, cond=1, for_each_do=, otherwise_do=, into=_PARENTJOB_WRK_usage);
                                                                                   The SAS System

MPRINT(SHELLCOMMAND):   *- The following 3 macros definitions are adpated from SAS Support / Samples and Notes: Sample 38518: Dynamically setting the CLASSPATH for use in a DATA 
step that uses the Java object component available at https://support.sas.com/kb/38/518.html 
--------------------------------------------------------------------------------------------------------------*;
MPRINT(INIT_CLASSPATH_UPDATE):   DATA _null_;
MPRINT(INIT_CLASSPATH_UPDATE):   LENGTH path_separator $ 2 orig_classpath $ 500;
MPRINT(INIT_CLASSPATH_UPDATE):   DECLARE JavaObj f("java.io.File", "");
MPRINT(INIT_CLASSPATH_UPDATE):   f.getStaticStringField("pathSeparator", path_separator);
MPRINT(INIT_CLASSPATH_UPDATE):   orig_classpath = STRIP(SYSGET("CLASSPATH"));
MPRINT(INIT_CLASSPATH_UPDATE):   IF _ERROR_ = 1 OR LENGTH(orig_classpath) = 0 THEN DO;
MPRINT(INIT_CLASSPATH_UPDATE):   PUT "NOTE: Ignore any messages from the next statement(s)";
MPRINT(INIT_CLASSPATH_UPDATE):   orig_classpath = "";
MPRINT(INIT_CLASSPATH_UPDATE):   END;
MPRINT(INIT_CLASSPATH_UPDATE):   if orig_classpath = "" then CALL SYMPUT('CP_orig_classpath', SYSGET("CLASSPATH"));
MPRINT(INIT_CLASSPATH_UPDATE):   else CALL SYMPUT('CP_orig_classpath', STRIP(orig_classpath));
MPRINT(INIT_CLASSPATH_UPDATE):   CALL SYMPUT('CP_path_separator', COMPRESS(path_separator));
MPRINT(INIT_CLASSPATH_UPDATE):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SHELLCOMMAND):  ;
MPRINT(ADD_TO_CLASSPATH):   DATA _null_;
MPRINT(ADD_TO_CLASSPATH):   LENGTH current_classpath $ 500 new_classpath $ 500;
MPRINT(ADD_TO_CLASSPATH):   current_classpath = STRIP(SYSGET("CLASSPATH"));
MPRINT(ADD_TO_CLASSPATH):   IF _ERROR_ = 1 OR LENGTH(current_classpath) = 0 THEN DO;
MPRINT(ADD_TO_CLASSPATH):   PUT "NOTE: Ignore any messages from the nearby statement(s)";
MPRINT(ADD_TO_CLASSPATH):   new_classpath = 
"/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar";
MPRINT(ADD_TO_CLASSPATH):   END;
MPRINT(ADD_TO_CLASSPATH):   ELSE DO;
MPRINT(ADD_TO_CLASSPATH):   new_classpath = COMPRESS(current_classpath) || ":" || 
"/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar";
MPRINT(ADD_TO_CLASSPATH):   END;
MPRINT(ADD_TO_CLASSPATH):   CALL SYMPUT('CP_new_classpath', STRIP(new_classpath));
MPRINT(ADD_TO_CLASSPATH):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: Setting Java classpath to 
!CLASSPATH:/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar
MPRINT(ADD_TO_CLASSPATH):   OPTIONS SET=CLASSPATH 
"!CLASSPATH:/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/shellcommand.0.0.1.jar";
MPRINT(SHELLCOMMAND):  ;
MPRINT(SHELLCOMMAND):   data _null_;
MPRINT(SHELLCOMMAND):   declare javaobj shellcommand("shellCommand/ShellCommand");
MPRINT(SHELLCOMMAND):   __cmdout = put(" ", $32000.);
MPRINT(SHELLCOMMAND):   if 1 then do;
MPRINT(SHELLCOMMAND):   shellcommand.callStaticStringMethod("commandStr", strip('du -sBM . 2>&1'), 
cats("/saswork/sas_tmp/SAS_work60810017E407_xar08auv.vsp.sas.com/SAS_work41A00017E407_xar08auv.vsp.sas.com"), __cmdout);
MPRINT(SHELLCOMMAND):   call symputx("_PARENTJOB_WRK_usage", __cmdout);
MPRINT(SHELLCOMMAND):   do __i = 1 to countw(__cmdout, "0A0D"x);
MPRINT(SHELLCOMMAND):   __line = put(scan(__cmdout, __i, "0A0D"x), $char500.);
MPRINT(SHELLCOMMAND):   __linelen = length(__line);
                                                                                   The SAS System

MPRINT(SHELLCOMMAND):   drop __linenum;
MPRINT(SHELLCOMMAND):   __linenum+1;
MPRINT(SHELLCOMMAND):   putlog __linenum Z3. ' ' __line $varying. __linelen;
MPRINT(SHELLCOMMAND):   end;
MPRINT(SHELLCOMMAND):   drop __i __line __linelen;
MPRINT(SHELLCOMMAND):   end;
MPRINT(SHELLCOMMAND):   run;

001 159M	.
002  
path: /saswork/sas_tmp/SAS_work60810017E407_xar08auv.vsp.sas.com/SAS_work41A00017E407_xar08auv.vsp.sas.com
command: [sh, -c, du -sBM . 2>&1]
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: Setting Java classpath back to its original state: !CLASSPATH
MPRINT(RESET_CLASSPATH):   OPTIONS SET=CLASSPATH "!CLASSPATH";
MPRINT(SHELLCOMMAND):  ;
MPRINT(GET_SESSIONS_INFOS):  ;

Notice: [ 2023-02-15T06:22:38+00:00] Disk Usage of: 159M .  for PARENT JOB WORK: 
/saswork/sas_tmp/SAS_work60810017E407_xar08auv.vsp.sas.com/SAS_work41A00017E407_xar08auv.vsp.sas.com

MPRINT(GET_SESSIONS_INFOS):   data transient_usage;
MPRINT(GET_SESSIONS_INFOS):   length path $2000;
MPRINT(GET_SESSIONS_INFOS):   drop prx;
MAUTOCOMPLOC:  The autocall macro FILELIST is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/filelist.sas.
MPRINT(GET_SESSIONS_INFOS):   do path =
MAUTOCOMPLOC:  The autocall macro GLOB2RX is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/glob2rx.sas.
MPRINT(FILELIST):   
"/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/../job_gadam_ongoing_studies.job-28c1dcac-3717-4b53-87d6-057480e8b068" , 
"/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/../job_lsaf_get_last_sdtm.job-d0b7cbe4-ac49-43bf-889b-90a3d8853c70" , 
"/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/../job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222"
MPRINT(GET_SESSIONS_INFOS):   ;
MPRINT(GET_SESSIONS_INFOS):   path = prxchange('s/([\\\/])[^\\\/]+[\\\/]..[\\\/]/\1/', -1, trim(path));
MPRINT(GET_SESSIONS_INFOS):   result=put(runmacro('%shellcommand(du -sBM . 2>&1, path='||trim(path)||', into=result);'), $200.);
MPRINT(GET_SESSIONS_INFOS):   prx = prxparse('s/^(\d+)M .$/\1/');
MPRINT(GET_SESSIONS_INFOS):   if prxmatch(prx, trim(result)) then disk_usage_MB = input(prxchange(prx, 1, trim(result)), best.);
MPRINT(GET_SESSIONS_INFOS):   output;
MPRINT(GET_SESSIONS_INFOS):   end;
MPRINT(GET_SESSIONS_INFOS):   run;

                                                                                   The SAS System

MPRINT(RUN_MACRO):   option nomprint;
%SHELLCOMMAND(du -sBM . 2>&1, path=/lsafshared/SASWorkspaces/.transient/job_gadam_ongoing_studies.job-28c1dcac-3717-4b53-87d6-057480e8b068, resultvar=__cmdout, dsin=, 
dsout=_null_, print=Y, linenum=Y, cond=1, for_each_do=, otherwise_do=, into=result);
001 27M	.
002  
path: /lsafshared/SASWorkspaces/.transient/job_gadam_ongoing_studies.job-28c1dcac-3717-4b53-87d6-057480e8b068
command: [sh, -c, du -sBM . 2>&1]
%SHELLCOMMAND(du -sBM . 2>&1, path=/lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-d0b7cbe4-ac49-43bf-889b-90a3d8853c70, resultvar=__cmdout, dsin=, dsout=_null_, 
print=Y, linenum=Y, cond=1, for_each_do=, otherwise_do=, into=result);
001 84M	.
002  
path: /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-d0b7cbe4-ac49-43bf-889b-90a3d8853c70
command: [sh, -c, du -sBM . 2>&1]
%SHELLCOMMAND(du -sBM . 2>&1, path=/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222, resultvar=__cmdout, dsin=, dsout=_null_, 
print=Y, linenum=Y, cond=1, for_each_do=, otherwise_do=, into=result);
001 46M	.
002  
path: /lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222
command: [sh, -c, du -sBM . 2>&1]
NOTE: The data set WORK.TRANSIENT_USAGE has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.12 seconds
      

MPRINT(GET_SESSIONS_INFOS):   proc sort data = transient_usage;
MPRINT(GET_SESSIONS_INFOS):   by disk_usage_MB path;
MPRINT(GET_SESSIONS_INFOS):   run;

NOTE: There were 3 observations read from the data set WORK.TRANSIENT_USAGE.
NOTE: The data set WORK.TRANSIENT_USAGE has 3 observations and 3 variables.
                                                                                   The SAS System

NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(GET_SESSIONS_INFOS):   data _null_;
MPRINT(GET_SESSIONS_INFOS):   set transient_usage end = last;
MPRINT(GET_SESSIONS_INFOS):   file print;
MPRINT(GET_SESSIONS_INFOS):   if _n_=1 then do;
MPRINT(GET_SESSIONS_INFOS):   put;
MPRINT(GET_SESSIONS_INFOS):   put "jbodart: User's Transient Folder Usage as of  2023-02-15T06:22:35+00:00";
MPRINT(GET_SESSIONS_INFOS):   put 180*"-";
MPRINT(GET_SESSIONS_INFOS):   put "Disk Usage (MB)" @20 "Path";
MPRINT(GET_SESSIONS_INFOS):   putlog "NOTE-";
MPRINT(GET_SESSIONS_INFOS):   putlog "jbodart: User's Transient Folder Usage as of  2023-02-15T06:22:35+00:00";
MPRINT(GET_SESSIONS_INFOS):   putlog 180*"-";
MPRINT(GET_SESSIONS_INFOS):   putlog "Disk Usage (MB)" @20 "Path";
MPRINT(GET_SESSIONS_INFOS):   end;
MPRINT(GET_SESSIONS_INFOS):   put @4 disk_usage_MB best12. @20 path;
MPRINT(GET_SESSIONS_INFOS):   putlog @4 disk_usage_MB best12. @20 path;
MPRINT(GET_SESSIONS_INFOS):   if last then do;
MPRINT(GET_SESSIONS_INFOS):   put 180*"-";
MPRINT(GET_SESSIONS_INFOS):   put " " / " ";
MPRINT(GET_SESSIONS_INFOS):   putlog 180*"-";
MPRINT(GET_SESSIONS_INFOS):   putlog " " / "NOTE-";
MPRINT(GET_SESSIONS_INFOS):   end;
MPRINT(GET_SESSIONS_INFOS):   run;

     
jbodart: User's Transient Folder Usage as of  2023-02-15T06:22:35+00:00
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Disk Usage (MB)    Path
             27    /lsafshared/SASWorkspaces/.transient/job_gadam_ongoing_studies.job-28c1dcac-3717-4b53-87d6-057480e8b068
             46    /lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222
             84    /lsafshared/SASWorkspaces/.transient/job_lsaf_get_last_sdtm.job-d0b7cbe4-ac49-43bf-889b-90a3d8853c70
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

     
NOTE: 7 lines were written to file PRINT.
NOTE: There were 3 observations read from the data set WORK.TRANSIENT_USAGE.
NOTE: The DATA step printed page 5.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(GET_SESSIONS_INFOS):   data _null_;
MPRINT(GET_SESSIONS_INFOS):   set transient_free_space end=last;
MPRINT(GET_SESSIONS_INFOS):   file print;
MPRINT(GET_SESSIONS_INFOS):   if _n_=1 then do;
MPRINT(GET_SESSIONS_INFOS):   put " ";
MPRINT(GET_SESSIONS_INFOS):   put "Total Transient Folder Usage as of  2023-02-15T06:22:35+00:00";
MPRINT(GET_SESSIONS_INFOS):   put 180*"-";
MPRINT(GET_SESSIONS_INFOS):   putlog "NOTE-";
MPRINT(GET_SESSIONS_INFOS):   putlog "Total Transient Folder Usage as of  2023-02-15T06:22:35+00:00";
MPRINT(GET_SESSIONS_INFOS):   putlog 180*"-";
MPRINT(GET_SESSIONS_INFOS):   end;
MPRINT(GET_SESSIONS_INFOS):   if transient_usedpct ^= ' ' then transient_usedpct = cats('(', transient_usedpct, ')');
                                                                                   The SAS System

MPRINT(GET_SESSIONS_INFOS):   put "  Size      : " transient_total / "  Used      : " transient_used " " transient_usedpct / "  Available : " transient_avail ;
MPRINT(GET_SESSIONS_INFOS):   putlog "  Size      : " transient_total / "  Used      : " transient_used " " transient_usedpct / "  Available : " transient_avail ;
MPRINT(GET_SESSIONS_INFOS):   if last then do;
MPRINT(GET_SESSIONS_INFOS):   put 180*"-";
MPRINT(GET_SESSIONS_INFOS):   put " " / " ";
MPRINT(GET_SESSIONS_INFOS):   putlog 180*"-";
MPRINT(GET_SESSIONS_INFOS):   putlog " " / "NOTE-";
MPRINT(GET_SESSIONS_INFOS):   end;
MPRINT(GET_SESSIONS_INFOS):   run;

     
Total Transient Folder Usage as of  2023-02-15T06:22:35+00:00
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  Size      : 100G
  Used      : 11G  (11%)
  Available : 90G
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

     
NOTE: 6 lines were written to file PRINT.
NOTE: There were 1 observations read from the data set WORK.TRANSIENT_FREE_SPACE.
NOTE: The DATA step printed page 6.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

Notice: [ 2023-02-15T06:22:39+00:00] GET_SESSIONS_INFOS: Elapsed time of:    0:00:04
MPRINT(GADAM_REBUILD_ADAM):  ;
MPRINT(GADAM_REBUILD_ADAM):   *- jbodart -2022-11-16 - Submit separate Study-level job if found in LSAF repository (even if not available in transient folder), in order to keep 
individual study logs -*;
Notice:(GADAM_REBUILD_ADAM): Submitting separate Study-level job: /clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job
Notice:(GADAM_REBUILD_ADAM): with SDTM_LAST_PATH=/clinical/argx-113/hv/argx-113-z005/biostat/staging/data_received/sdtm_last
MAUTOCOMPLOC:  The autocall macro SUBMIT_JOB is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/submit_job.sas.
NUM_JOBS_SPAWNED=1
MACROAPIVER=2.6
MAUTOCOMPLOC:  The autocall macro GEN_JOB_ENV is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/gen_job_env.sas.
DEBUG:(GEN_JOB_ENV): PRX=2
DEBUG:(GEN_JOB_ENV): prxmatch(2, /clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job) = 0
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job" ;
                                                                                   The SAS System

MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;


NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.00 seconds
      

MPRINT(SUBMIT_JOB):  ;
Notice:(SUBMIT_JOB): LSAF Job Path exists: /clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job.
MPRINT(SUBMIT_JOB):   proc format;
MPRINT(SUBMIT_JOB):   value $jobabbr "job_gadam_ongoing_studies.job"= "gos" "job_studies_status.job"= "ss" "job_gadam_sdtm_key_core_vars.job"= "gskcv" 
"job_unzip_sdtm_sources.job"= "uss" "job_zip_extract_files.job"= "zef" "job_lsaf_get_last_sdtm.job"= "lgls" "setup_reporting_event_folder.job"= "sref" 
"job_gadam_refresh_sdtm_last.job"= "grsl" "job_gadam_update_refresh_info.job"= "guri" "convert_definetosas.job"= "cdts" "job_gadam_studysetup.job"= "gss" 
"job_gadam_rebuild_adam.job"= "gra" "job_adAAA" - "job_adzzz"= "adx" "job_qcstudyadams.job"= "qcsa" "job_qc_gadam_vs_study.job"= "qcgvs" "job_qc_gadam_vs_study-overview.job"= 
"qcgvso" "job_check_and_load.job"= "cal" "job_tAAA" - "job_tzzz"= "txx" "job_gadam_qc_overviews.job"= "gqco" "job_make_sdtm_pool_jobs.job"= "mspj" "job_lsaf_pool_last_sdtm.job"= 
"lpls" "sdtm_pool-AAA" - "sdtm_pool-zzz"= "pci" "job_gadam_refresh_sdtm_overview.job"= "grso" "getdata.job"= "gd" OTHER = "***" ;
NOTE: Format $JOBABBR has been output.
MPRINT(SUBMIT_JOB):   run;

NOTE: PROCEDURE FORMAT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SUBMIT_JOB):   quit;
job_instance=>Ngos113Prod_4_x0_55_1<
MAUTOCOMPLOC:  The autocall macro LSAF_GETJOBPARAMETERS is compiling using the autocall source file 
            /sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.6.1/sasmacros/lsaf_getjobparameters.sas.
MPRINT(LSAF_GETJOBPARAMETERS):  ;
MPRINT(LSAF_GETJOBPARAMETERS):   data work.job_Parameters (label="Created by LSAF_GETJOBPARAMETERS" KEEP=jobPath jobVersion name label type defaultValue fileVersion 
includeSubFolders );
                                                                                   The SAS System

MPRINT(LSAF_GETJOBPARAMETERS):   attrib returnCode length=8 message length=$200 logMsgPrefix length=$70 logMsgPrimary length=$70 logMsg length=$300 rowCount length=8 jobPath 
length=$2048 label="Job Path" jobVersion length=$32 label="Job Version" name length=$256 label="Parameter Name" label length=$256 label="Parameter Label" type length=$32 
label="Parameter Type" defaultValue length=$2048 label="Parameter Default Value" fileVersion length=$32 label="File Version if File Type" includeSubFolders length=8 label="Include 
Container SubFolders" includesSubFolders length=$5 label="FOR INTERNAL PROCESSING ONLY.  WILL BE DROPPED." ;
MPRINT(LSAF_GETJOBPARAMETERS):   rowCount=0;
MPRINT(LSAF_GETJOBPARAMETERS):   declare javaobj srv("com/sas/lsaf/macro/execution/job/JobService") ;
MPRINT(LSAF_GETJOBPARAMETERS):   declare javaobj results("com/sas/lsaf/macro/execution/job/SasJobParametersResult");
MPRINT(LSAF_GETJOBPARAMETERS):   srv.callStaticVoidMethod("getRepositoryJobParameters", 
"/clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job", "", results) ;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_GETJOBPARAMETERS):   if (returnCode ne 0) then do;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_GETJOBPARAMETERS):   if "" NE "" then logMsg=" Cannot retrieve parameters for job 
/clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job, version " ;
MPRINT(LSAF_GETJOBPARAMETERS):   else logMsg=" Cannot retrieve parameters for job /clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job" 
;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   else do;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_GETJOBPARAMETERS):   logMsg=" Parameters were returned for job /clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job" ;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getJobPath", jobPath);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getJobVersion", jobVersion);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callIntMethod("getSize", rowCount);
MPRINT(LSAF_GETJOBPARAMETERS):   do row=0 to rowCount - 1;
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getName", row, name);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getLabel", row, label);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getType", row, type);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getDefaultValue", row, defaultValue);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getFileVersion", row, fileVersion);
MPRINT(LSAF_GETJOBPARAMETERS):   results.callStringMethod("getContainerIncludeSubfolders", row, includesSubFolders);
MPRINT(LSAF_GETJOBPARAMETERS):   includeSubFolders=input(includesSubFolders,best.);
MPRINT(LSAF_GETJOBPARAMETERS):   output;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   end;
MPRINT(LSAF_GETJOBPARAMETERS):   put;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " " "lsaf_getjobparameters";
MPRINT(LSAF_GETJOBPARAMETERS):   if (rowCount=0) then put logMsgPrefix " No parameters were found.";
MPRINT(LSAF_GETJOBPARAMETERS):   else put logMsgPrefix " " rowCount " records written to data set work.job_Parameters";
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(LSAF_GETJOBPARAMETERS):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(LSAF_GETJOBPARAMETERS):   put;
MPRINT(LSAF_GETJOBPARAMETERS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_GETJOBPARAMETERS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_GETJOBPARAMETERS):   run;


NOTE: SAS Life Science Analytics Framework Macro: *  
Parameters were returned for job /clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_getjobparameters
NOTE: SAS Life Science Analytics Framework Macro: *  13  records written to data set work.job_Parameters
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: The data set WORK.JOB_PARAMETERS has 13 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
                                                                                   The SAS System

      cpu time            0.01 seconds
      

MPRINT(SUBMIT_JOB):  ;
MAUTOCOMPLOC:  The autocall macro DSATTR is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/dsattr.sas.
MAUTOCOMPLOC:  The autocall macro LOWCASE is compiling using the autocall source file /sso/sfw/sas/940/SASFoundation/9.4/sasautos/lowcase.sas.
NOTE: The dataset WORK.JOB_PARAMETERS has 13 observations and 8 variables.
MPRINT(SUBMIT_JOB):   ;
MPRINT(SUBMIT_JOB):   *- dataset to specify job parameters (from macro parameters values) -*;
MPRINT(SUBMIT_JOB):   data lsaf_job_params(index=(name));
MPRINT(SUBMIT_JOB):   set work.job_Parameters(rename=(defaultValue = value));
MPRINT(SUBMIT_JOB):   if upcase(name) = "_PARENTJOB_WS_" then do;
MPRINT(SUBMIT_JOB):   if symexist("_SASWS_") and type = "CHARACTER" then value = symget("_SASWS_");
MPRINT(SUBMIT_JOB):   else value = " ";
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   else if upcase(name) = "_PARENTJOB_WRK_" then do;
MPRINT(SUBMIT_JOB):   value = pathname("WORK", "L");
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   else if symexist(name) then do;
MPRINT(SUBMIT_JOB):   if symget(name) ^= ' ' then value = symget(name);
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   new_value = translate(value, ' ', ',;()"''&%');
MPRINT(SUBMIT_JOB):   if new_value ne value then put "NOTE:(SUBMIT_JOB): Special characters may be removed from parameter value:" / @2 "parameter: " name /@2 "old value: " value 
/@2 "new value: " new_value;
MPRINT(SUBMIT_JOB):   if type="FOLDER" and value^=" " then IncludeSubFolders = 1;
MPRINT(SUBMIT_JOB):   if _n_=1 then put "Not" "ice:(SUBMIT_JOB): Updated Job parameters:";
MPRINT(SUBMIT_JOB):   if type = "FOLDER" then put " - " name @+(-1) "=" value "[" type= @+(-1) ", " includeSubFolders= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   else if TYPE = "FILE" then put " - " name @+(-1) "=" value "[" type= @+(-1) ", " fileversion= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   else put " - " name @+(-1) "=" value "[" type= @+(-1) "]" /;
MPRINT(SUBMIT_JOB):   run;

Notice:(SUBMIT_JOB): Updated Job parameters:
 - gadam_studypath=/clinical/argx-113/hv/argx-113-z005/biostat/staging/data_received/adam [type=CHARACTER]
 - sdtm_last_path=/clinical/argx-113/hv/argx-113-z005/biostat/staging/data_received/sdtm_last [type=CHARACTER]
 - qc_gadam_vs_study=Y [type=CHARACTER]
 - check_and_load_gadam=Y [type=CHARACTER]
 - run_gadam_tables=Y [type=CHARACTER]
 - update_on_new_job=N [type=CHARACTER]
 - wait=Y [type=CHARACTER]
 - force=N [type=CHARACTER]
 - mock=N [type=CHARACTER]
 - job_instance=Ngos113Prod_4_x0_55_1 [type=CHARACTER]
 - _PARENTJOB_WS_=/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222 [type=CHARACTER]
 - _PARENTJOB_WRK_=/saswork/sas_tmp/SAS_work146C00284AA8_xar08auv.vsp.sas.com/SAS_work4E6C00284AA8_xar08auv.vsp.sas.com [type=CHARACTER]
 - USE_SAS_WORKSPACE_MACROS=  [type=CHARACTER]
NOTE: There were 13 observations read from the data set WORK.JOB_PARAMETERS.
NOTE: The data set WORK.LSAF_JOB_PARAMS has 13 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

N_PARAMS=13
MPRINT(SUBMIT_JOB):   data lsaf_job_params(index=(name));
MPRINT(SUBMIT_JOB):   set lsaf_job_params;
MPRINT(SUBMIT_JOB):   by name;
MPRINT(SUBMIT_JOB):   if (not first.name) or (not last.name) then do;
                                                                                   The SAS System

MPRINT(SUBMIT_JOB):   if last.name then action = "(kept)   ";
MPRINT(SUBMIT_JOB):   else action = "(dropped)";
MPRINT(SUBMIT_JOB):   drop action;
MPRINT(SUBMIT_JOB):   put "Not" "ice:(SUBMIT_JOB): duplicate parameter " name " = " value @+(3) action;
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   if last.name;
MPRINT(SUBMIT_JOB):   run;

NOTE: There were 13 observations read from the data set WORK.LSAF_JOB_PARAMS.
NOTE: The data set WORK.LSAF_JOB_PARAMS has 13 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SUBMIT_JOB):   data _null_;
MPRINT(SUBMIT_JOB):   file print;
MPRINT(SUBMIT_JOB):   set lsaf_job_params(where=(prxmatch('/^(FOLDER|FILE)$/', trim(type))) in=a) lsaf_job_params(where=(prxmatch('/^(FOLDER|FILE)$/', trim(type))=0 and value ^= ' 
')) end=last;
MPRINT(SUBMIT_JOB):   if _n_=1 then putlog "=== 2023-02-15T06:22:39 - Submit job: /clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job 
(with parameters: " @;
MPRINT(SUBMIT_JOB):   _n_a+a;
MPRINT(SUBMIT_JOB):   if _n_-1 = _n_a then do;
MPRINT(SUBMIT_JOB):   putlog / @8 @;
MPRINT(SUBMIT_JOB):   put / @8 @;
MPRINT(SUBMIT_JOB):   end;
MPRINT(SUBMIT_JOB):   if a then putlog / @8 name @+(-1) "=" value ' (' type= includeSubFolders= @+(-1) ')   ' @;
MPRINT(SUBMIT_JOB):   else putlog name @+(-1) "=" value "  " @ ;
MPRINT(SUBMIT_JOB):   if last then putlog @+8 ") ===";
MPRINT(SUBMIT_JOB):   if _n_=1 then put "=== 2023-02-15T06:22:39 - Submit job: /clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job 
(with parameters: " @;
MPRINT(SUBMIT_JOB):   if a then put / @8 name @+(-1) "=" value ' (' type= includeSubFolders= @+(-1) ')   ' @;
MPRINT(SUBMIT_JOB):   else put name @+(-1) "=" value "  " @ ;
MPRINT(SUBMIT_JOB):   if last then put @+8 ") ===";
MPRINT(SUBMIT_JOB):   run;

=== 2023-02-15T06:22:39 - Submit job: /clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job (with parameters: 
       _PARENTJOB_WRK_=/saswork/sas_tmp/SAS_work146C00284AA8_xar08auv.vsp.sas.com/SAS_work4E6C00284AA8_xar08auv.vsp.sas.com   _PARENTJOB_WS_=
/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222   check_and_load_gadam=Y   force=N   gadam_studypath=
/clinical/argx-113/hv/argx-113-z005/biostat/staging/data_received/adam   job_instance=Ngos113Prod_4_x0_55_1   mock=N   qc_gadam_vs_study=Y   run_gadam_tables=Y   sdtm_last_path=
/clinical/argx-113/hv/argx-113-z005/biostat/staging/data_received/sdtm_last   update_on_new_job=N   wait=Y           ) ===
NOTE: 5 lines were written to file PRINT.
NOTE: There were 0 observations read from the data set WORK.LSAF_JOB_PARAMS.
      WHERE PRXMATCH('/^(FOLDER|FILE)$/', TRIM(type));
NOTE: There were 12 observations read from the data set WORK.LSAF_JOB_PARAMS.
      WHERE (PRXMATCH('/^(FOLDER|FILE)$/', TRIM(type))=0) and (value not = ' ');
NOTE: The DATA step printed page 7.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MAUTOCOMPLOC:  The autocall macro LSAF_SUBMITJOB is compiling using the autocall source file 
            /sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.6.1/sasmacros/lsaf_submitjob.sas.
MPRINT(LSAF_SUBMITJOB):  ;
MAUTOCOMPLOC:  The autocall macro CMPRES is compiling using the autocall source file /sso/sfw/sas/940/SASFoundation/9.4/sasautos/cmpres.sas.
MAUTOCOMPLOC:  The autocall macro LEFT is compiling using the autocall source file /sso/sfw/sas/940/SASFoundation/9.4/sasautos/left.sas.
MAUTOCOMPLOC:  The autocall macro QTRIM is compiling using the autocall source file /sso/sfw/sas/940/SASFoundation/9.4/sasautos/qtrim.sas.
                                                                                   The SAS System

MAUTOCOMPLOC:  The autocall macro VERIFY is compiling using the autocall source file /sso/sfw/sas/940/SASFoundation/9.4/sasautos/verify.sas.
MPRINT(LSAF_SUBMITJOB):   *;
MAUTOCOMPLOC:  The autocall macro LSAF_VALIDATE_PARAMETERS_DATASET is compiling using the autocall source file 
            /sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.6.1/sasmacros/lsaf_validate_parameters_dataset.sas.
NOTE: lsaf_submitjob: Validating dataset lsaf_job_params
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   options nonotes;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   *;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   *;
MAUTOCOMPLOC:  The autocall macro LSAF_VALIDATE_SASDATASET is compiling using the autocall source file 
            /sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.6.1/sasmacros/lsaf_validate_sasdataset.sas.
MPRINT(LSAF_VALIDATE_SASDATASET):   *;
MAUTOCOMPLOC:  The autocall macro LSAF_VALIDATE_SASDATASET_NAME is compiling using the autocall source file 
            /sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.6.1/sasmacros/lsaf_validate_sasdataset_name.sas.
MAUTOCOMPLOC:  The autocall macro QCMPRES is compiling using the autocall source file /sso/sfw/sas/940/SASFoundation/9.4/sasautos/qcmpres.sas.
MAUTOCOMPLOC:  The autocall macro QLEFT is compiling using the autocall source file /sso/sfw/sas/940/SASFoundation/9.4/sasautos/qleft.sas.
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   options nonotes;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   data _null_;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   length message $45 libName $8 dsName $300;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   providedDatasetName=kstrip("lsaf_job_params");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsName="INVALID";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsNameIsValid=0;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dotCount=countc(providedDatasetName,".");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dotPosition=kindexc(providedDatasetName,".");
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   *put dotPosition=;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (dotPosition=1 or dotPosition=length(providedDatasetName)) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message=" Missing either LIBNAME or data set.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   select (dotCount);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   when (0) dsName=providedDatasetName;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   when (1) do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (dotPosition le 9) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   libName = (ksubstr(providedDatasetName, 1, dotPosition-1));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   *put libName=;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsName = (ksubstr(providedDatasetName, dotPosition+1));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   else do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Libname longer than 8 characters.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   otherwise do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Invalid data set name structure.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   firstchar=ksubstr(kleft(dsName), 1, 1);
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (anydigit(firstchar)) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Data set name must start with a character.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   if (length(dsName) > 32) then do;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   message="Data set name longer than 32 characters.";
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   GOTO SETVARS;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   end;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   dsNameIsValid=1;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   SETVARS: call symput("_lsafvaliddsn_", strip(put(dsNameIsValid, best.)));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   call symput("dsnMsg", message);
                                                                                   The SAS System

MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   call symput("specifiedLib", strip(libName));
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   run;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   options NONOTES;
MPRINT(LSAF_VALIDATE_SASDATASET_NAME):   * CHECK EXISTS: Also getting errors for data set name.;
MPRINT(LSAF_VALIDATE_SASDATASET):  ;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):  ;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   proc sort data=lsaf_job_params out=__SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   by name;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   data _null_;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   set __SASMacro_submitJobtemp__;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   by name;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   if (first.name AND NOT(last.name)) then do;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   call symput("_lsafMsg_", "Input data set has duplicate values for parameter name " || name || ".");
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   STOP;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   end;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   call symput("_lsafRC_", "0");
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   run;
MPRINT(LSAF_VALIDATE_PARAMETERS_DATASET):   option notes;
MPRINT(LSAF_SUBMITJOB):  ;
MPRINT(LSAF_SUBMITJOB):   option notes;
MPRINT(LSAF_SUBMITJOB):   data _null_;
MPRINT(LSAF_SUBMITJOB):   attrib returnCode length=8 message length=$200 jobSubmissionId length=$525 logMsgPrefix length=$70 logMsgPrimary length=$70 logMsg length=$300 ;
MPRINT(LSAF_SUBMITJOB):   set lsaf_job_params end=eof;
MPRINT(LSAF_SUBMITJOB):   if (_n_ = 1) then do;
MPRINT(LSAF_SUBMITJOB):   declare javaobj params("com/sas/lsaf/macro/execution/job/SasParameterValues");
MPRINT(LSAF_SUBMITJOB):   declare javaobj srv("com/sas/lsaf/macro/execution/jobsubmission/JobSubmissionService");
MPRINT(LSAF_SUBMITJOB):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   params.callVoidMethod("addValue", kstrip(name), kstrip(value), kstrip(type), kstrip(fileVersion), includeSubFolders);
MPRINT(LSAF_SUBMITJOB):   if (eof);
MPRINT(LSAF_SUBMITJOB):   declare javaobj job("com/sas/lsaf/macro/execution/jobsubmission/SasSubmittableJob", 
"/clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job", "", params);
MPRINT(LSAF_SUBMITJOB):   srv.callStaticStringMethod("submitRepositoryJob", job, results, jobSubmissionId);
MPRINT(LSAF_SUBMITJOB):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_SUBMITJOB):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_SUBMITJOB):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_SUBMITJOB):   if (returnCode ne 0) then do;
MPRINT(LSAF_SUBMITJOB):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_SUBMITJOB):   logMsg=" Cannot submit job /clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job";
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   else do;
MPRINT(LSAF_SUBMITJOB):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_SUBMITJOB):   logMsg=" Submitted job /clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job";
MPRINT(LSAF_SUBMITJOB):   end;
MPRINT(LSAF_SUBMITJOB):   put;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " " "lsaf_submitjob";
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(LSAF_SUBMITJOB):   if "lsaf_job_params" = "" then put logMsgPrefix "No job parameters were supplied.";
MPRINT(LSAF_SUBMITJOB):   else put logMsgPrefix "sas_dsname = lsaf_job_params";
MPRINT(LSAF_SUBMITJOB):   put logMsgPrefix "_lsafJobSubmissionId_= " jobSubmissionId;
MPRINT(LSAF_SUBMITJOB):   put;
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_SUBMITJOB):   call symputx("_lsafJobSubmissionId_", strip(jobSubmissionId));
MPRINT(LSAF_SUBMITJOB):   run;
                                                                                   The SAS System



NOTE: SAS Life Science Analytics Framework Macro: *  Submitted job /clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_submitjob
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: * sas_dsname = lsaf_job_params
NOTE: SAS Life Science Analytics Framework Macro: * _lsafJobSubmissionId_= b05fab6a-5ab3-484e-a068-97f5f2fffa98
NOTE: There were 13 observations read from the data set WORK.LSAF_JOB_PARAMS.
NOTE: DATA statement used (Total process time):
      real time           1.86 seconds
      cpu time            0.01 seconds
      

MPRINT(LSAF_SUBMITJOB):   options NONOTES;
MPRINT(SUBMIT_JOB):  ;
MPRINT(SUBMIT_JOB):   *- Job submission succeeded -*;
MPRINT(SUBMIT_JOB):   option nomprint nonotes
Calling %lsaf_getitemid(lsaf_path=/clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job) ...
MAUTOCOMPLOC:  The autocall macro LSAF_GETITEMID is compiling using the autocall source file 
            /sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.6.1/sasmacros/lsaf_getitemid.sas.
The item ID was returned for item: /clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job.
_LSAFMSG_=Success.  _LSAFRC_=0  _LSAFITEMID_=5e651bfe-bb0c-46af-8872-f4b6dbe9e5fe
Calling %step_lsaf_getjobsubmissioninfos(job_subm_id=b05fab6a-5ab3-484e-a068-97f5f2fffa98) ...
MAUTOCOMPLOC:  The autocall macro STEP_LSAF_GETJOBSUBMISSIONINFOS is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/step_lsaf_getjobsubmissioninfos.sas
            .
Notice: SYSDATASTEPPHASE= IN_DATA_STEP=N
Ignoring record: submissionId=30678109-1661-4a87-858f-1bc1b0d581fa jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_lsaf_get_last_sdtm.job jobVersion=0.1
jobId=abcfa448-6829-4513-8bef-3d8418207d45
Ignoring record: submissionId=c4fb4991-9137-4374-8d55-32ed9002f3d8 jobPath=/general/biostat/jobs/gadam_ongoing_studies/prod/jobs/job_gadam_ongoing_studies.job jobVersion=0.1
jobId=c762f385-9376-49c8-8cec-d19326e7e18e
Ignoring record: submissionId=e83aa330-29e5-465d-946a-453b15f3d82a jobPath=/general/biostat/jobs/gadam_rebuild_adam/prod/jobs/job_gadam_rebuild_adam.job jobVersion= 
jobId=02b06e4d-7777-4a59-b2f9-2fc165603216
Notice: _LSAFJOBSUBMISSIONID_=b05fab6a-5ab3-484e-a068-97f5f2fffa98 SESSIONID=99c81847-dabc-472b-9193-e7faf908ed7a 
JOB=/clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job JOBID=5e651bfe-bb0c-46af-8872-f4b6dbe9e5fe
MAUTOCOMPLOC:  The autocall macro GET_LSAF_JOB_SUBMISSION_STATUS is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/get_lsaf_job_submission_status.sas.
(SUBMIT_JOB): 2023-02-15T06:22:41 - Submitted REPOSITORY Job /clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job          with 
Submission ID: b05fab6a-5ab3-484e-a068-97f5f2fffa98, Status: STARTED
(SUBMIT_JOB): 06:22:41.31 Elapsed: 00:00:02.75 Job Submission Status: STARTED
(SUBMIT_JOB): 06:22:43.86 Elapsed: 00:00:05.30 Job Submission Status: STARTED
(SUBMIT_JOB): 06:22:46.40 Elapsed: 00:00:07.84 Job Submission Status: STARTED
(SUBMIT_JOB): 06:22:48.94 Elapsed: 00:00:10.38 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:22:51.47 Elapsed: 00:00:12.92 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:22:54.01 Elapsed: 00:00:15.45 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:22:56.55 Elapsed: 00:00:18.00 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:22:59.09 Elapsed: 00:00:20.54 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:23:01.63 Elapsed: 00:00:23.08 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:23:04.17 Elapsed: 00:00:25.61 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:23:06.70 Elapsed: 00:00:28.14 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:23:09.23 Elapsed: 00:00:30.68 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:23:16.81 Elapsed: 00:00:38.25 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:23:24.34 Elapsed: 00:00:45.79 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:23:31.92 Elapsed: 00:00:53.36 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:23:39.45 Elapsed: 00:01:00.90 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:24:02.00 Elapsed: 00:01:23.45 Job Submission Status: RUNNING_TASKS
                                                                                   The SAS System

(SUBMIT_JOB): 06:24:24.55 Elapsed: 00:01:46.00 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:24:54.59 Elapsed: 00:02:16.03 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:25:24.62 Elapsed: 00:02:46.07 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:25:54.66 Elapsed: 00:03:16.10 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:26:24.70 Elapsed: 00:03:46.14 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:26:54.73 Elapsed: 00:04:16.17 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:27:24.77 Elapsed: 00:04:46.21 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:27:54.80 Elapsed: 00:05:16.25 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:28:24.86 Elapsed: 00:05:46.30 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:28:54.90 Elapsed: 00:06:16.34 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:29:24.93 Elapsed: 00:06:46.38 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:29:54.97 Elapsed: 00:07:16.41 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:30:25.02 Elapsed: 00:07:46.46 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:30:55.06 Elapsed: 00:08:16.50 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:31:25.11 Elapsed: 00:08:46.56 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:31:55.15 Elapsed: 00:09:16.59 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:32:25.19 Elapsed: 00:09:46.63 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:32:55.22 Elapsed: 00:10:16.67 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:33:25.31 Elapsed: 00:10:46.75 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:33:55.37 Elapsed: 00:11:16.81 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:34:25.40 Elapsed: 00:11:46.84 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:34:55.43 Elapsed: 00:12:16.88 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:35:25.47 Elapsed: 00:12:46.91 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:35:55.51 Elapsed: 00:13:16.95 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:36:25.54 Elapsed: 00:13:46.99 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:36:55.58 Elapsed: 00:14:17.02 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:37:25.62 Elapsed: 00:14:47.07 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:37:55.66 Elapsed: 00:15:17.11 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:38:25.70 Elapsed: 00:15:47.14 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:38:55.74 Elapsed: 00:16:17.18 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:39:25.80 Elapsed: 00:16:47.24 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:39:55.84 Elapsed: 00:17:17.28 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:40:25.89 Elapsed: 00:17:47.34 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:40:55.93 Elapsed: 00:18:17.37 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:41:25.96 Elapsed: 00:18:47.40 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:41:56.00 Elapsed: 00:19:17.44 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:42:26.04 Elapsed: 00:19:47.48 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:42:56.07 Elapsed: 00:20:17.52 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:43:26.12 Elapsed: 00:20:47.56 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:43:56.16 Elapsed: 00:21:17.61 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:44:26.23 Elapsed: 00:21:47.67 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:44:56.27 Elapsed: 00:22:17.71 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:45:26.30 Elapsed: 00:22:47.74 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:45:56.37 Elapsed: 00:23:17.81 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:46:26.41 Elapsed: 00:23:47.85 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:46:56.46 Elapsed: 00:24:17.90 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:47:26.51 Elapsed: 00:24:47.95 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:47:56.54 Elapsed: 00:25:17.98 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:48:26.58 Elapsed: 00:25:48.03 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:48:56.63 Elapsed: 00:26:18.07 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:49:26.66 Elapsed: 00:26:48.11 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:49:56.70 Elapsed: 00:27:18.14 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:50:26.73 Elapsed: 00:27:48.18 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:50:56.77 Elapsed: 00:28:18.21 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:51:26.81 Elapsed: 00:28:48.25 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:51:56.84 Elapsed: 00:29:18.28 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:52:26.88 Elapsed: 00:29:48.32 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:52:56.93 Elapsed: 00:30:18.37 Job Submission Status: RUNNING_TASKS
                                                                                   The SAS System

(SUBMIT_JOB): 06:53:26.96 Elapsed: 00:30:48.41 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:53:57.00 Elapsed: 00:31:18.44 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:54:27.05 Elapsed: 00:31:48.49 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:54:57.08 Elapsed: 00:32:18.52 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:55:27.12 Elapsed: 00:32:48.56 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:55:57.15 Elapsed: 00:33:18.59 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:56:27.19 Elapsed: 00:33:48.63 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:56:57.22 Elapsed: 00:34:18.67 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:57:27.26 Elapsed: 00:34:48.70 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:57:57.31 Elapsed: 00:35:18.75 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:58:27.38 Elapsed: 00:35:48.82 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:58:57.43 Elapsed: 00:36:18.88 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:59:27.48 Elapsed: 00:36:48.92 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 06:59:57.52 Elapsed: 00:37:18.97 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:00:27.56 Elapsed: 00:37:49.00 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:00:57.61 Elapsed: 00:38:19.05 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:01:27.66 Elapsed: 00:38:49.10 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:01:57.69 Elapsed: 00:39:19.14 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:02:27.74 Elapsed: 00:39:49.18 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:02:57.78 Elapsed: 00:40:19.22 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:03:27.83 Elapsed: 00:40:49.27 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:03:57.87 Elapsed: 00:41:19.31 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:04:27.91 Elapsed: 00:41:49.35 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:04:57.94 Elapsed: 00:42:19.39 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:05:27.98 Elapsed: 00:42:49.42 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:05:58.02 Elapsed: 00:43:19.46 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:06:28.06 Elapsed: 00:43:49.50 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:06:58.10 Elapsed: 00:44:19.55 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:07:28.14 Elapsed: 00:44:49.58 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:07:58.20 Elapsed: 00:45:19.64 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:08:28.25 Elapsed: 00:45:49.69 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:08:58.29 Elapsed: 00:46:19.73 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:09:28.33 Elapsed: 00:46:49.78 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:09:58.37 Elapsed: 00:47:19.81 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:10:28.42 Elapsed: 00:47:49.87 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:10:58.46 Elapsed: 00:48:19.91 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:11:28.50 Elapsed: 00:48:49.94 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:11:58.54 Elapsed: 00:49:19.98 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:12:28.58 Elapsed: 00:49:50.03 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:12:58.62 Elapsed: 00:50:20.06 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:13:28.66 Elapsed: 00:50:50.10 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:13:58.69 Elapsed: 00:51:20.13 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:14:28.73 Elapsed: 00:51:50.17 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:14:58.77 Elapsed: 00:52:20.21 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:15:28.81 Elapsed: 00:52:50.25 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:15:58.85 Elapsed: 00:53:20.29 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:16:28.89 Elapsed: 00:53:50.33 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:16:58.92 Elapsed: 00:54:20.36 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:17:28.96 Elapsed: 00:54:50.40 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:17:59.00 Elapsed: 00:55:20.44 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:18:29.04 Elapsed: 00:55:50.48 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:18:59.08 Elapsed: 00:56:20.53 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:19:29.12 Elapsed: 00:56:50.56 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:19:59.15 Elapsed: 00:57:20.60 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:20:29.19 Elapsed: 00:57:50.63 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:20:59.23 Elapsed: 00:58:20.67 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:21:29.28 Elapsed: 00:58:50.72 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:21:59.32 Elapsed: 00:59:20.77 Job Submission Status: RUNNING_TASKS
                                                                                   The SAS System

(SUBMIT_JOB): 07:22:29.37 Elapsed: 00:59:50.81 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 07:22:59.40 Elapsed: 01:00:20.85 Job Submission Status: RUNNING_TASKS
ERROR:(GET_LSAF_JOB_SUBMISSION_STATUS): job has status: COMPLETED_ERRORS
(SUBMIT_JOB): 07:23:29.47 Elapsed: 01:00:50.91 Job Submission Status: COMPLETED_ERRORS
(SUBMIT_JOB): 2023-02-15T07:23:59 - Submitted REPOSITORY job: /clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job has completed with 
status: COMPLETED_ERRORS
ERROR:(SUBMIT_JOB): REPOSITORY job job_gadam_rebuild_adam.job has status: COMPLETED_ERRORS
MPRINT(SUBMIT_JOB):  ;
job_gadam_rebuild_adam.job: get job status: 0: Success.:       Elapsed: 01:01:20.92       REPOSITORY Job 
/clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/jobs/job_gadam_rebuild_adam.job with Submission ID: b05fab6a-5ab3-484e-a068-97f5f2fffa98, Status: COMPLETED_ERRORS
MPRINT(GADAM_REBUILD_ADAM):  ;
MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/log/job_gadam_rebuild_adam.log", results, exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/log/job_gadam_rebuild_adam.log" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/log/job_gadam_rebuild_adam.log" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/log/job_gadam_rebuild_adam.log" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(LSAF_EXISTS):   run;


NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/log/job_gadam_rebuild_adam.log
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
                                                                                   The SAS System

      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(GADAM_REBUILD_ADAM):  ;
MPRINT(LSAF_GETPROPERTIES):  ;
MPRINT(LSAF_GETPROPERTIES):   data work.lsafGetProperties (label="Created by LSAF_GETPROPERTIES" KEEP=path name displayName value type isReadonly isExtended);
MPRINT(LSAF_GETPROPERTIES):   attrib returnCode length=8 message length=$200 logMsgPrefix length=$70 logMsgPrimary length=$70 logMsg length=$300 rowCount length=8 path 
length=$2048 label="Item Path" name length=$256 label="Property Name" displayName length=$256 label="Property Display Name" value length=$2048 label="Property Value" type 
length=$32 label="Property Type" isReadonly length=8 label="Property value is not modifiable." isExtended length=8 label="Property is an Extended Attribute" ;
MPRINT(LSAF_GETPROPERTIES):   rowCount=0;
MPRINT(LSAF_GETPROPERTIES):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService") ;
MPRINT(LSAF_GETPROPERTIES):   declare javaobj results("com/sas/lsaf/macro/content/repository/SasRepositoryItemPropertiesResult");
MPRINT(LSAF_GETPROPERTIES):   srv.callStaticVoidMethod("getProperties", "/clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/log/job_gadam_rebuild_adam.log", "", 
results);
MPRINT(LSAF_GETPROPERTIES):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_GETPROPERTIES):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_GETPROPERTIES):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_GETPROPERTIES):   if (returnCode ne 0) then do;
MPRINT(LSAF_GETPROPERTIES):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_GETPROPERTIES):   logMsg=" Cannot retrieve list of properties for /clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/log/job_gadam_rebuild_adam.log" ;
MPRINT(LSAF_GETPROPERTIES):   end;
MPRINT(LSAF_GETPROPERTIES):   else do;
MPRINT(LSAF_GETPROPERTIES):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_GETPROPERTIES):   logMsg=" List of properties were returned for /clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/log/job_gadam_rebuild_adam.log" ;
MPRINT(LSAF_GETPROPERTIES):   results.callIntMethod("getSize", rowCount);
MPRINT(LSAF_GETPROPERTIES):   do row=0 to rowCount - 1;
MPRINT(LSAF_GETPROPERTIES):   path="/clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/log/job_gadam_rebuild_adam.log";
MPRINT(LSAF_GETPROPERTIES):   results.callStringMethod("getPropertyName", row, name);
MPRINT(LSAF_GETPROPERTIES):   results.callStringMethod("getPropertyValue", row, value);
MPRINT(LSAF_GETPROPERTIES):   results.callStringMethod("getPropertyDisplayName", row, displayName);
MPRINT(LSAF_GETPROPERTIES):   results.callStringMethod("getPropertyAttributeType", row, type);
MPRINT(LSAF_GETPROPERTIES):   results.callBooleanMethod("getPropertyIsReadOnly", row, isReadonly);
MPRINT(LSAF_GETPROPERTIES):   results.callBooleanMethod("getPropertyIsExtended", row, isExtended);
MPRINT(LSAF_GETPROPERTIES):   output;
MPRINT(LSAF_GETPROPERTIES):   end;
MPRINT(LSAF_GETPROPERTIES):   end;
MPRINT(LSAF_GETPROPERTIES):   put;
MPRINT(LSAF_GETPROPERTIES):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_GETPROPERTIES):   put logMsgPrefix " " "lsaf_getproperties";
MPRINT(LSAF_GETPROPERTIES):   if (rowCount=0) then put logMsgPrefix " No properties were retrieved.";
MPRINT(LSAF_GETPROPERTIES):   else put logMsgPrefix " " rowCount " records written to data set work.lsafGetProperties";
MPRINT(LSAF_GETPROPERTIES):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(LSAF_GETPROPERTIES):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(LSAF_GETPROPERTIES):   put;
MPRINT(LSAF_GETPROPERTIES):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_GETPROPERTIES):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_GETPROPERTIES):   call symputx("_lsafRowCount_", rowCount);
MPRINT(LSAF_GETPROPERTIES):   run;


NOTE: SAS Life Science Analytics Framework Macro: *  
List of properties were returned for /clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/log/job_gadam_rebuild_adam.log
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_getproperties
NOTE: SAS Life Science Analytics Framework Macro: *  21  records written to data set work.lsafGetProperties
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: The data set WORK.LSAFGETPROPERTIES has 21 observations and 7 variables.
                                                                                   The SAS System

NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.02 seconds
      

MPRINT(LSAF_GETPROPERTIES):   options nonotes;
MPRINT(LSAF_GETPROPERTIES):   proc sort data=work.lsafGetProperties sortseq=linguistic(strength=primary);
MPRINT(LSAF_GETPROPERTIES):   by name;
MPRINT(LSAF_GETPROPERTIES):   run;
MPRINT(LSAF_GETPROPERTIES):   options NOTES;
MPRINT(GADAM_REBUILD_ADAM):  ;
MPRINT(GADAM_REBUILD_ADAM):   proc sql noprint;
MPRINT(GADAM_REBUILD_ADAM):   select value into :version trimmed from work.lsafGetProperties where name = "version";
MPRINT(GADAM_REBUILD_ADAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LSAF_EXISTS):  ;
MPRINT(LSAF_EXISTS):   data _null_;
MPRINT(LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(LSAF_EXISTS):   attrib message length=$200;
MPRINT(LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(LSAF_EXISTS):   attrib exists length=3;
MPRINT(LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService");
MPRINT(LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/common/result/Result");
MPRINT(LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/manifest/job_gadam_rebuild_adam.mnf", results, 
exists);
MPRINT(LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/manifest/job_gadam_rebuild_adam.mnf" ;
MPRINT(LSAF_EXISTS):   exists=-1;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_EXISTS):   if (exists) then do;
MPRINT(LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/manifest/job_gadam_rebuild_adam.mnf" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   else do;
MPRINT(LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/manifest/job_gadam_rebuild_adam.mnf" ;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   end;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(LSAF_EXISTS):   put;
MPRINT(LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
                                                                                   The SAS System

MPRINT(LSAF_EXISTS):   run;


NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/manifest/job_gadam_rebuild_adam.mnf
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(GADAM_REBUILD_ADAM):  ;
MPRINT(LSAF_GETPROPERTIES):  ;
MPRINT(LSAF_GETPROPERTIES):   data work.lsafGetProperties (label="Created by LSAF_GETPROPERTIES" KEEP=path name displayName value type isReadonly isExtended);
MPRINT(LSAF_GETPROPERTIES):   attrib returnCode length=8 message length=$200 logMsgPrefix length=$70 logMsgPrimary length=$70 logMsg length=$300 rowCount length=8 path 
length=$2048 label="Item Path" name length=$256 label="Property Name" displayName length=$256 label="Property Display Name" value length=$2048 label="Property Value" type 
length=$32 label="Property Type" isReadonly length=8 label="Property value is not modifiable." isExtended length=8 label="Property is an Extended Attribute" ;
MPRINT(LSAF_GETPROPERTIES):   rowCount=0;
MPRINT(LSAF_GETPROPERTIES):   declare javaobj srv("com/sas/lsaf/macro/content/repository/RepositoryService") ;
MPRINT(LSAF_GETPROPERTIES):   declare javaobj results("com/sas/lsaf/macro/content/repository/SasRepositoryItemPropertiesResult");
MPRINT(LSAF_GETPROPERTIES):   srv.callStaticVoidMethod("getProperties", "/clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/manifest/job_gadam_rebuild_adam.mnf", "", 
results);
MPRINT(LSAF_GETPROPERTIES):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(LSAF_GETPROPERTIES):   results.callStringMethod("getReturnMessage", message);
MPRINT(LSAF_GETPROPERTIES):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(LSAF_GETPROPERTIES):   if (returnCode ne 0) then do;
MPRINT(LSAF_GETPROPERTIES):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(LSAF_GETPROPERTIES):   logMsg=" Cannot retrieve list of properties for /clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/manifest/job_gadam_rebuild_adam.mnf" 
;
MPRINT(LSAF_GETPROPERTIES):   end;
MPRINT(LSAF_GETPROPERTIES):   else do;
MPRINT(LSAF_GETPROPERTIES):   logMsgPrimary=logMsgPrefix;
MPRINT(LSAF_GETPROPERTIES):   logMsg=" List of properties were returned for /clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/manifest/job_gadam_rebuild_adam.mnf" ;
MPRINT(LSAF_GETPROPERTIES):   results.callIntMethod("getSize", rowCount);
MPRINT(LSAF_GETPROPERTIES):   do row=0 to rowCount - 1;
MPRINT(LSAF_GETPROPERTIES):   path="/clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/manifest/job_gadam_rebuild_adam.mnf";
MPRINT(LSAF_GETPROPERTIES):   results.callStringMethod("getPropertyName", row, name);
MPRINT(LSAF_GETPROPERTIES):   results.callStringMethod("getPropertyValue", row, value);
MPRINT(LSAF_GETPROPERTIES):   results.callStringMethod("getPropertyDisplayName", row, displayName);
MPRINT(LSAF_GETPROPERTIES):   results.callStringMethod("getPropertyAttributeType", row, type);
MPRINT(LSAF_GETPROPERTIES):   results.callBooleanMethod("getPropertyIsReadOnly", row, isReadonly);
MPRINT(LSAF_GETPROPERTIES):   results.callBooleanMethod("getPropertyIsExtended", row, isExtended);
MPRINT(LSAF_GETPROPERTIES):   output;
MPRINT(LSAF_GETPROPERTIES):   end;
MPRINT(LSAF_GETPROPERTIES):   end;
MPRINT(LSAF_GETPROPERTIES):   put;
MPRINT(LSAF_GETPROPERTIES):   put logMsgPrimary " " logMsg;
MPRINT(LSAF_GETPROPERTIES):   put logMsgPrefix " " "lsaf_getproperties";
MPRINT(LSAF_GETPROPERTIES):   if (rowCount=0) then put logMsgPrefix " No properties were retrieved.";
MPRINT(LSAF_GETPROPERTIES):   else put logMsgPrefix " " rowCount " records written to data set work.lsafGetProperties";
MPRINT(LSAF_GETPROPERTIES):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(LSAF_GETPROPERTIES):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(LSAF_GETPROPERTIES):   put;
MPRINT(LSAF_GETPROPERTIES):   call symputx("_lsafRC_", returnCode);
MPRINT(LSAF_GETPROPERTIES):   call symputx("_lsafMsg_", message);
MPRINT(LSAF_GETPROPERTIES):   call symputx("_lsafRowCount_", rowCount);
                                                                                   The SAS System

MPRINT(LSAF_GETPROPERTIES):   run;


NOTE: SAS Life Science Analytics Framework Macro: *  
List of properties were returned for /clinical/argx-113/hv/argx-113-z005/biostat/staging/generic_adam/manifest/job_gadam_rebuild_adam.mnf
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_getproperties
NOTE: SAS Life Science Analytics Framework Macro: *  21  records written to data set work.lsafGetProperties
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: The data set WORK.LSAFGETPROPERTIES has 21 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.02 seconds
      

MPRINT(LSAF_GETPROPERTIES):   options nonotes;
MPRINT(LSAF_GETPROPERTIES):   proc sort data=work.lsafGetProperties sortseq=linguistic(strength=primary);
MPRINT(LSAF_GETPROPERTIES):   by name;
MPRINT(LSAF_GETPROPERTIES):   run;
MPRINT(LSAF_GETPROPERTIES):   options NOTES;
MPRINT(GADAM_REBUILD_ADAM):  ;
MPRINT(GADAM_REBUILD_ADAM):   proc sql noprint;
MPRINT(GADAM_REBUILD_ADAM):   select value into :version trimmed from work.lsafGetProperties where name = "version";
MPRINT(GADAM_REBUILD_ADAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1350       
1351       %put debug = %superq(debug);
debug = 1
1352       
1353       
1354       %scan_cur_log;
MAUTOCOMPLOC:  The autocall macro SCAN_CUR_LOG is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/scan_cur_log.sas.
MPRINT(SCAN_CUR_LOG):   ;
MAUTOCOMPLOC:  The autocall macro GET_CUR_PGM is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/get_cur_pgm.sas.
MPRINT(SCAN_CUR_LOG):  ;
MPRINT(SCAN_CUR_LOG):   proc sql noprint;
MPRINT(SCAN_CUR_LOG):   create table extfl as select *, abs(datetime() - modate) as diffdate format=time12.3 from dictionary.extfiles where prxmatch('/\w+\.log$/i', 
trim(left(xpath)))>0 and abs(datetime() - modate) < 1000 order by diffdate, xpath ;
NOTE: Table WORK.EXTFL created, with 0 rows and 10 columns.

MPRINT(SCAN_CUR_LOG):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SCAN_CUR_LOG):   data _null_;
MPRINT(SCAN_CUR_LOG):   set extfl(obs=1);
MPRINT(SCAN_CUR_LOG):   put fileref= xpath= modate= filesize= diffdate= time.;
MPRINT(SCAN_CUR_LOG):   call symput('log', cats(xpath));
MPRINT(SCAN_CUR_LOG):   run;

                                                                                   The SAS System

NOTE: There were 0 observations read from the data set WORK.EXTFL.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Warning:(SCAN_CUR_LOG): Could not identify SAS Log, aborting.
1355       
1356       %programend;
MAUTOCOMPLOC:  The autocall macro PROGRAMEND is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/programend.sas.
MPRINT(PROGRAMEND):   ;
MPRINT(PROGRAMEND):  *';
MPRINT(PROGRAMEND):  *";
MPRINT(PROGRAMEND):  */;
MPRINT(PROGRAMEND):  *);
MPRINT(PROGRAMEND):  run;
MPRINT(PROGRAMEND):  quit;
MPRINT(PROGRAMEND):  ;
MPRINT(PROGRAMEND):   option nosyntaxcheck obs=max;
MPRINT(PROGRAMEND):   option LS=180 PS=60;
MPRINT(PROGRAMEND):   option VALIDVARNAME=V7;
Attempting to assign LIBNAME __parwrk to /saswork/sas_tmp/SAS_work60810017E407_xar08auv.vsp.sas.com/SAS_work41A00017E407_xar08auv.vsp.sas.com: RC=0
_PARENTJOB_WRK_=/saswork/sas_tmp/SAS_work60810017E407_xar08auv.vsp.sas.com/SAS_work41A00017E407_xar08auv.vsp.sas.com PARWRK_LIBREF_ASSIGNED=1

Notice: === (PROGRAMEND): Starting, 2023-02-15T07:23:59.72 - SYSMEXECDEPTH: 1 - DEBUG: 1 ===
Notice: === (PROGRAMEND): OUTPUTFILENAME= ===
MAUTOCOMPLOC:  The autocall macro ODSDEST is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-61d6ccb9-0a96-4a07-a3a6-6a58a5b90222/general/biostat/macros/_library/odsdest.sas.
Notice: === (PROGRAMEND): ODS LISTING is now OPEN. ===
Notice: === (PROGRAMEND): SYSPRINTTOLIST= ===
Notice: === (PROGRAMEND): SYSPRINTTOLOG= ===
MPRINT(PROGRAMEND):   ods listing;
Notice: === (PROGRAMEND): ODS LISTING is now OPEN. ===
Current LISTING select list is set to default value (ALL).
Current OVERALL select list is: ALL
MPRINT(ODSDEST):   ODS LISTING show ;
MPRINT(PROGRAMEND):   ;
MPRINT(PROGRAMEND):   ods rtf close;
MPRINT(PROGRAMEND):   ods pdf close;
MPRINT(PROGRAMEND):   proc printto print=print;
MPRINT(PROGRAMEND):   run;
NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(PROGRAMEND):   footnote;
MPRINT(PROGRAMEND):   *- resetting the footnotes so they do not appear in the Synopsis of Program Execution -*;
MPRINT(PROGRAMEND):   *- For Tables and Listings, systematically generate a TXT and a PDF file -*;
MPRINT(PROGRAMEND):   option nomautolocdisplay;
MPRINT(PROGRAMEND):   option nosyntaxcheck obs=max;
DEBUG=1 RUNENVIRONMENT=repository
MPRINT(PROGRAMEND):   proc printto log=log;
MPRINT(PROGRAMEND):   run;

NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
                                                                                   The SAS System

      cpu time            0.00 seconds
      

DEBUG=1 RUNENVIRONMENT=repository
fileref(logf) = 20004
(PROGRAMEND): SYSMEXECDEPTH =1
_PARENTJOB_WRK_=/saswork/sas_tmp/SAS_work60810017E407_xar08auv.vsp.sas.com/SAS_work41A00017E407_xar08auv.vsp.sas.com PARWRK_LIBREF_ASSIGNED=1
MPRINT(PROGRAMEND):   *- Process Job Messages Tracker data from child jobs (if any) -*;
MPRINT(PROGRAMEND):   *- Save Job Messages Tracker data to Library OUT if defined -*;
WEEKDAY=4
TRACKER=out.jobtrackb825167c_d4 NEW_TRACKER=1 OUT_LIBREF_ASSIGNED=0
MPRINT(PROGRAMEND):   *- close active ods HTML destinations -*;
MPRINT(PROGRAMEND):   ;
MPRINT(PROGRAMEND):   *- launch dashboard job -*;
RELREPEVPATH=/general/biostat/jobs/gadam_rebuild_adam/prod
MPRINT(PROGRAMEND):   data _null_;
MPRINT(PROGRAMEND):   runinclinical = max(index("/general/biostat/jobs/gadam_rebuild_adam/prod", "/clinical/"), index("/general/biostat/jobs/gadam_rebuild_adam/prod", 
"\clinical\"));
MPRINT(PROGRAMEND):   call symputx("_runinclinical", strip(put(runinclinical, 8.)));
MPRINT(PROGRAMEND):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

_RUNINCLINICAL=0

Notice: === (PROGRAMEND): Done, 2023-02-15T07:23:59.75 - SYSMEXECDEPTH: 1 - DEBUG: 1 ===
1357       
1358       
1359       
1360       
1361       ;*';*";*/;*); run; quit;
1362       proc scaproc; write; run;

NOTE: PROCEDURE SCAPROC used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

1363       options nonotes;
1364       

/**********************************************************************************************************************
 * Submission End: gadam_rebuild_adam.sas
 * Feb 15, 2023 07:23:59 GMT
 *********************************************************************************************************************/
