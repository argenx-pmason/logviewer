1                                                          The SAS System                       Wednesday, June  7, 2023 10:36:00 AM

NOTE: Copyright (c) 2016 by SAS Institute Inc., Cary, NC, USA.
NOTE: SAS (r) Proprietary Software 9.4 (TS1M7 MBCS3170)
      Licensed to ARGENX VIA OCS_SAS LSAF_SAAS, Site 70265777.
NOTE: This session is executing on the Linux 4.18.0-305.19.1.el8_4.x86_64 (LIN X64) platform.



NOTE: Analytical products:

      SAS/STAT 15.2
      SAS/IML 15.2

NOTE: Additional host information:

 Linux LIN X64 4.18.0-305.19.1.el8_4.x86_64 #1 SMP Tue Sep 7 07:07:31 EDT 2021 x86_64 Red Hat Enterprise Linux release 8.4 (Ootpa)

You are running SAS 9. Some SAS 8 files will be automatically converted
by the V9 engine; others are incompatible.  Please see
http://support.sas.com/rnd/migration/planning/platform/64bit.html

PROC MIGRATE will preserve current SAS file attributes and is
recommended for converting all your SAS libraries from any
SAS 8 release to SAS 9.  For details and examples, please see
http://support.sas.com/rnd/migration/index.html


This message is contained in the SAS news file, and is presented upon
initialization.  Edit the file "news" in the "misc/base" directory to
display site-specific news and information in the program log.
The command line option "-nonews" will prevent this display.




NOTE: SAS Initialization used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds

NOTE: The autoexec file, /sso/biconfig/940/Lev1/LSAFApp/WorkspaceServer/autoexec.sas, was executed at server initialization.
1          options nofmterr;
2          options dtreset;
3          options locale=EN_US;
4          %let _SDDUSR_=%bquote(pmason);
5          %let _SASWS_ = %nrstr("/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a");
6          %let _SASWS_ = %qsubstr(&_SASWS_, 2, %length(&_SASWS_) - 2);
7          %let _SASUSRWS_ = %nrstr("/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/Users/pmason")
7        ! ;
8          %let _SASUSRWS_ = %qsubstr(&_SASUSRWS_, 2, %length(&_SASUSRWS_) - 2);
9          %let _SASINSTANCE_ = %nrstr("xarprod.ondemand.sas.com");
10         %let _SASINSTANCE_ = %qsubstr(&_SASINSTANCE_, 2, %length(&_SASINSTANCE_) - 2);
11         options nosource;

NOTE: DATA statement used (Total process time):
      real time           1.02 seconds
      cpu time            0.01 seconds


18

/**********************************************************************************************************************
 * Submission Start: postprocessing.sas
 * Jun 07, 2023 10:36:39 GMT by pmason
 *********************************************************************************************************************/
2                                                          The SAS System                       Wednesday, June  7, 2023 10:36:39 AM

19         options nosyntaxcheck errorcheck=strict notes;
20         ;*';*";*/;*); run; quit;
21
22         %let _SASFILELOCATION_ = %nrstr("/general/biostat/jobs/dashboard/dev/programs");
23         %let _SASFILELOCATION_ = %qsubstr(&_SASFILELOCATION_, 2, %length(&_SASFILELOCATION_) - 2);
24         %let _SASFILEPATH_ = %nrstr("/general/biostat/jobs/dashboard/dev/programs/postprocessing.sas");
25         %let _SASFILEPATH_ = %qsubstr(&_SASFILEPATH_, 2, %length(&_SASFILEPATH_) - 2);
26
27         /********************************************************************************************************************/
28         proc scaproc; record "&_SASWS_/.sessions/2/sca_97da4781-bdd7-4459-b696-dd1907ae78aa.txt" EXPANDMACROS; run;

NOTE: PROCEDURE SCAPROC used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


29
30         options nomprint;
31         /********************************************************************************************************************/
32         /* Macro Variables for Job Parameters */
33         %let refolder=&_SASWS_/clinical/argx-113/pemphigus/argx-113-1904/biostat/staging/testrun2/qc_tlf;
34         %let dbg=no;
35         %let job_instance=;
36         %let _PARENTJOB_WS_=;
37         %let _PARENTJOB_WRK_=;
38
39         /********************************************************************************************************************/
40
41         /**
42         @file
43         @brief      Refreshes dashboard
44         @details    Produces the projectstatus.html file which is a study specific dashboard.
45
46         @author     Martijn Busselen
47
48         @date       27-Mar-2022
49
50         @param[in]  refolder  Reporting event path
51
52         @test       You can test this program in your LSAF workspace by setting refolder to a folder for your study, and dbg to
52       ! no.
53         @code
54         %let refolder=/clinical/argx-113/cidp/argx-113-1802/biostat/staging/testrun1/qc_tlf;
55         %let dbg=no;
56         @endcode
57
58         #### Update History ####
59
60             Date         Author               Description
61             -----------  -------------------  --------------------------------
62             28 Mar 2022  mbusselen            Original version of code created
63             16 Jan 2023  Phil Mason (pmason)  Changed links to log so that they open the log with the logviewer program.
64                                               Set background color for Errors and Warnings.
65                                               Added study to title in browser tab.
66                                               Fixed flyover text for link to docx files.
67             17 Jan 2023  Phil Mason (pmason)  Changed links to other files so that they open the log with the fileviewer program.
68             30 Jan 2023  Phil Mason (pmason)  For figures we will link to svg file from the txt column, if there is one.
69              1 Feb 2023  Phil Mason (pmason)  Handle the issue that SVG files were named with underscores instead of dots between
3                                                          The SAS System                       Wednesday, June  7, 2023 10:36:39 AM

69       !  numbers.
70              2 Feb 2023  Phil Mason (pmason)  Allow showing txt column in native tab or file viewer
71              9 Feb 2023  Phil Mason (pmason)  Create JSON file dashstudy.json for use with Project Dashboard
72             10 Feb 2023  Phil Mason (pmason)  Fix sort sequence for Studiy Selection list
73             19 APr 2023  Phil Mason (pmason)  Added nosastags parameter to proc json, since outputs seemed to now be in the wrong
73       !  format for how they are used.
74         */
75
76         /* testing in LSAF workspace */
77         /* %let refolder=/clinical/argx-113/cidp/argx-113-1802/biostat/staging/testrun1/qc_adam; */
78         /* %let refolder=/clinical/argx-117/hv/argx-117-1901/biostat/staging/mad5_tables; */
79         /* %let refolder=/clinical/argx-113/x-ind/argx-113-0000/biostat/staging/generic_adam; */
80         /* %let refolder=/clinical/argx-113/mg/argx-113-9031/biostat/staging/ma2022; */
81         /* %let refolder=/clinical/argx-113/sjogren/argx-113-0000/biostat/staging/generic_adam; */
82         /* %let refolder=/clinical/argx-113/mg/argx-113-9031/biostat/staging/iss_20220131/qc_tlf; */
83         /* %let dbg=no; */
84
85         options nomprint;
86         %setenv (ini=0);
MPRINT(SETENV):   source source2 nofmterr notes spool nodate nonumber MAUTOCOMPLOC NOMAUTOLOCDISPLAY;
MPRINT(SETENV):   * in case run in batch;
(SETENV): _SASFILEPATH_ = /general/biostat/jobs/dashboard/dev/programs/postprocessing.sas
(SETENV): path1 = /general/biostat/jobs/dashboard/dev/programs/postprocessing.sas
(SETENV): _sasws_ = /lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a
(SETENV): runenvironment = repository
MPRINT(SETENV):   *libname projmeta "&projectsmetapath" access=readonly;
MPRINT(SETENV):   data gen_setenv(keep=fname ver maxver);
MPRINT(SETENV):   length fref $8 dirname fname $400;
MPRINT(SETENV):   direxists = 0;
MPRINT(SETENV):   found = 0;
MPRINT(SETENV):   maxver = .;
MPRINT(SETENV):
dirname="/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/macros/_library";
MPRINT(SETENV):   rc=filename(fref, dirname);
MPRINT(SETENV):   did=dopen(fref);
MPRINT(SETENV):   if did > 0 then do;
MPRINT(SETENV):   direxists=1;
MPRINT(SETENV):   memcount=dnum(did);
MPRINT(SETENV):   do i = 1 to memcount;
MPRINT(SETENV):   fname=dread(did, i);
MPRINT(SETENV):   if prxmatch('/^setenv\d+\.sas$/', cats(fname)) then do;
MPRINT(SETENV):   found+1;
MPRINT(SETENV):   ver = input(prxchange('s/^setenv(\d+)\.sas$/\1/', 1, cats(fname)), best32.);
MPRINT(SETENV):   if ver > maxver then maxver = ver;
MPRINT(SETENV):   put "(SETENV):" found= fname= ver= rc= did= fref= dirname=;
MPRINT(SETENV):   output;
MPRINT(SETENV):   end;
MPRINT(SETENV):   *put "(&sysmacroname):" found= fname= ver= rc= did= fref= dirname=;
MPRINT(SETENV):   end;
MPRINT(SETENV):   rc=dclose(did);
MPRINT(SETENV):   end;
MPRINT(SETENV):   else do;
MPRINT(SETENV):   msg = put(sysmsg(), $400.);
MPRINT(SETENV):   put "Failed to open directory: " rc= did= fref= dirname= "sysmsg=" msg;
MPRINT(SETENV):   end;
MPRINT(SETENV):   rc=filename(fref);
MPRINT(SETENV):   run;

                                                           The SAS System

(SETENV):found=1 fname=setenv01.sas ver=1 rc=0 did=1 fref=#LN00016
dirname=/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/macros/_library
(SETENV):found=2 fname=setenv02.sas ver=2 rc=0 did=1 fref=#LN00016
dirname=/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/macros/_library
(SETENV):found=3 fname=setenv03.sas ver=3 rc=0 did=1 fref=#LN00016
dirname=/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/macros/_library
NOTE: The data set WORK.GEN_SETENV has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(SETENV):   proc sql noprint;
MPRINT(SETENV):   select fname into :gen_setenv trimmed from gen_setenv having ver = max(ver) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(SETENV):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


gen_setenv = setenv03.sas
MPRINT(SETENV):   data repev_setenv(keep=fname ver maxver);
MPRINT(SETENV):   length fref frefsrc $8 setenv $32 d dirname fname msg $400;
MPRINT(SETENV):   direxists = 0;
MPRINT(SETENV):   found = 0;
MPRINT(SETENV):   maxver = .;
MPRINT(SETENV):   do
d="/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/jobs/dashboard/dev/macros/global
_macros",
"/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/jobs/dashboard/dev/macros/global-m
acros" while(direxists=0);
MPRINT(SETENV):   put d=;
MPRINT(SETENV):   rc=filename(fref, d);
MPRINT(SETENV):   did=dopen(fref);
MPRINT(SETENV):   if did > 0 then do;
MPRINT(SETENV):   direxists=1;
MPRINT(SETENV):   dirname=d;
MPRINT(SETENV):   memcount=dnum(did);
MPRINT(SETENV):   do i = 1 to memcount;
MPRINT(SETENV):   fname=dread(did, i);
MPRINT(SETENV):   if prxmatch('/^setenv\d+\.sas$/', cats(fname)) then do;
MPRINT(SETENV):   found+1;
MPRINT(SETENV):   ver = input(prxchange('s/^setenv(\d+)\.sas$/\1/', 1, cats(fname)), best32.);
MPRINT(SETENV):   if ver > maxver then do;
MPRINT(SETENV):   maxver = ver;
MPRINT(SETENV):   setenv = fname;
MPRINT(SETENV):   end;
MPRINT(SETENV):   put "(SETENV):" found= fname= ver= rc= did= fref= dirname=;
MPRINT(SETENV):   output;
MPRINT(SETENV):   end;
MPRINT(SETENV):   *put "(&sysmacroname):" found= fname= ver= rc= did= fref= dirname=;
MPRINT(SETENV):   end;
MPRINT(SETENV):   rc=dclose(did);
MPRINT(SETENV):   end;
MPRINT(SETENV):   else do;
MPRINT(SETENV):   put "Failed to open directory: " rc= did= fref= dirname=;
MPRINT(SETENV):   end;
                                                           The SAS System

MPRINT(SETENV):   rc=filename(fref);
MPRINT(SETENV):   end;
MPRINT(SETENV):   if direxists=0 then do;
MPRINT(SETENV):   *- JMBodart 2021-10-13 - create macros folder if it does not exist (START) -*;
MPRINT(SETENV):   rc=filename(fref,
"/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/jobs/dashboard/dev/macros");
MPRINT(SETENV):   did=dopen(fref);
MPRINT(SETENV):   if did > 0 then do;
MPRINT(SETENV):   rc=dclose(did);
MPRINT(SETENV):   end;
MPRINT(SETENV):   else do;
MPRINT(SETENV):   dirname = dcreate("macros",
"/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/jobs/dashboard/dev/");
MPRINT(SETENV):   dirname = ' ';
MPRINT(SETENV):   end;
MPRINT(SETENV):   rc=filename(fref);
MPRINT(SETENV):   *- JMBodart 2021-10-13 - create macros folder if it does not exist (END) -*;
MPRINT(SETENV):   dirname=dcreate("global_macros",
"/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/jobs/dashboard/dev/macros");
MPRINT(SETENV):   if dirname ^= ' ' then do;
MPRINT(SETENV):   rc=filename(fref, dirname);
MPRINT(SETENV):   did=dopen(fref);
MPRINT(SETENV):   if did > 0 then do;
MPRINT(SETENV):   direxists=1;
MPRINT(SETENV):   rc=dclose(did);
MPRINT(SETENV):   end;
MPRINT(SETENV):   rc=filename(fref);
MPRINT(SETENV):   end;
MPRINT(SETENV):   end;
MPRINT(SETENV):   put dirname= direxists=;
MPRINT(SETENV):   if direxists then do;
MPRINT(SETENV):   call execute("option insert=(sasautos="||quote(cats(dirname))||");");
MPRINT(SETENV):   if found = 0 then do;
MPRINT(SETENV):   cumrc = 0;
MPRINT(SETENV):   rc=filename(frefsrc,
"/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/macros/_library/setenv03.sas");
MPRINT(SETENV):   if rc ne 0 then do;
MPRINT(SETENV):   msg = sysmsg();
MPRINT(SETENV):   put msg;
MPRINT(SETENV):   cumrc=rc;
MPRINT(SETENV):   end;
MPRINT(SETENV):   rc=filename(fref, cats(dirname, "/setenv03.sas"));
MPRINT(SETENV):   if rc ne 0 then do;
MPRINT(SETENV):   msg = sysmsg();
MPRINT(SETENV):   put msg;
MPRINT(SETENV):   cumrc=rc;
MPRINT(SETENV):   end;
MPRINT(SETENV):   if cumrc = 0 then do;
MPRINT(SETENV):   put "Copying
""/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/macros/_library/setenv03.sas""
to" dirname $quote. ;
MPRINT(SETENV):   rc = fcopy(frefsrc, fref);
MPRINT(SETENV):   if rc ne 0 then do;
MPRINT(SETENV):   put "Failed.";
MPRINT(SETENV):   msg = sysmsg();
MPRINT(SETENV):   put msg;
MPRINT(SETENV):   cumrc=rc;
MPRINT(SETENV):   end;
                                                           The SAS System

MPRINT(SETENV):   else put "Success.";
MPRINT(SETENV):   end;
MPRINT(SETENV):   rc=filename(frefsrc);
MPRINT(SETENV):   rc=filename(fref);
MPRINT(SETENV):   if cumrc = 0 then setenv = "setenv03.sas";
MPRINT(SETENV):   end;
MPRINT(SETENV):   end;
MPRINT(SETENV):   call symput("setenv", cats(setenv));
MPRINT(SETENV):   put setenv=;
MPRINT(SETENV):   run;

d=/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/jobs/dashboard/dev/macros/global_
macros
Failed to open directory: rc=0 did=0 fref=#LN00017 dirname=
d=/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/jobs/dashboard/dev/macros/global-
macros
Failed to open directory: rc=0 did=0 fref=#LN00018 dirname=
dirname=/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/jobs/dashboard/dev/macros/g
lobal_macros direxists=1
MPRINT(SETENV):   option
insert=(sasautos="/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/jobs/dashboard/de
v/macros/global_macros");
Copying  "/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/macros/_library/setenv03.
sas" to
"/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/jobs/dashboard/dev/macros/global_m
acros"


Success.
setenv=setenv03.sas
NOTE: The data set WORK.REPEV_SETENV has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE generated line.
1         + option
insert=(sasautos="/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/jobs/dashboard/de
v/macros/global_macros");
setenv=setenv03.sas
(SETENV): Calling %setenv03(ini=0, tabno=, default_debug=1)
MAUTOCOMPLOC:  The autocall macro SETENV03 is compiling using the autocall source file
            /lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/jobs/dashboard/dev/macr
            os/global_macros/setenv03.sas.
SETENV03 was called with parameters: ini = 0, cleanup = , tabno = , default_debug = 1
MPRINT(SETENV.SETENV03):   options mprint nofmterr spool nodate nonumber MAUTOCOMPLOC NOMAUTOLOCDISPLAY;
(SETENV03): Staring with sysmexecdepth =2 DEBUG=1
MPRINT(SETENV.SETENV03):   options nosource nosource2;
MPRINT(SETENV.SETENV03):   *- jbodart -2023-03-30 - Get Session information -*;
MPRINT(SETENV.SETENV03):   data _nuLL_;
MPRINT(SETENV.SETENV03):   set sashelp.vextfl;
MPRINT(SETENV.SETENV03):   where prxmatch('/[\/\\]\.sessions[\/\\]\d+[\/\\]sca[^\/\\]+\.txt$/i', trim(xpath));
MPRINT(SETENV.SETENV03):   clientID = prxchange('s/^.*[\/\\]\.sessions[\/\\](\d+)[\/\\]sca[^\/\\]+\.txt$/\1/i', 1, trim(xpath));
MPRINT(SETENV.SETENV03):   put (_all_) (=/);
MPRINT(SETENV.SETENV03):   call symputx('clientID', clientID);
MPRINT(SETENV.SETENV03):   run;

                                                           The SAS System


fileref=#LN00011
xpath=/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/.sessions/2/sca_97da4781-bdd7-4459-b696-dd190
7ae78aa.txt
xengine=DISK
modate=01JAN60:00:00:00
filesize=0
level=0
directory=no
exists=no
temporary=yes
clientID=2
NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE PRXMATCH('/[\/\\]\.sessions[\/\\]\d+[\/\\]sca[^\/\\]+\.txt$/i', TRIM(xpath));
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MAUTOCOMPLOC:  The autocall macro LSAF_GETSESSIONSBYQUERY is compiling using the autocall source file
            /sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.6.1/sasmacros/lsaf_getsessionsbyquery.sas.
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   *;
MAUTOCOMPLOC:  The autocall macro LSAF_GETPRODUCTNAME is compiling using the autocall source file
            /sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.6.1/sasmacros/lsaf_getproductname.sas.
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):  ;
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   data work.lsafgetsessionsbyquery (label="Created by LSAF_GETSESSIONSBYQUERY"
KEEP= sessionId dateStarted dateStartedSASFormat dateEnded dateEndedSASFormat sessionType sessionState sessionOwner submissionLabel
clientId );
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   attrib returnCode length=8;
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   attrib message length=$200;
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   attrib logMsgPrefix length=$70;
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   attrib logMsgPrimary length=$70;
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   attrib logMsg length=$300;
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   attrib rowCount length=8;
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   attrib sessionOwner length=$32 label="Session Owner";
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   attrib dateStartedSASFormat label="Date Session Started (SAS DateTime Format)";
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   attrib dateStarted length=$64 label="Date Session Started";
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   attrib dateEndedSASFormat label="Date Session Ended (SAS DateTime Format)";
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   attrib dateEnded length=$64 label="Date Session Ended";
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   attrib sessionId length=$64 label="Session ID";
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   attrib sessionType length=$32 label="Session Type";
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   attrib sessionState length=$32 label="Session State";
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   attrib submissionLabel length=$1024 label="Submission Label";
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   attrib clientId length=8 label="Incremental Number Assigned to Session";
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   attrib limitReached length=3;
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   ;
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   attrib dateStartedSasFormatTmp length=$64 label="SAS Format: USED FOR FORMATTING
- will be dropped";
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   attrib dateEndedSasFormatTmp length=$64 label="SAS Format: USED FOR FORMATTING -
will be dropped";
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   format dateStartedSASFormat dateEndedSASFormat datetime.;
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   rowCount=0;
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   limitReached=0;
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   declare javaobj srv("com/sas/lsaf/macro/execution/session/SessionService") ;
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   declare javaobj
results("com/sas/lsaf/macro/execution/session/SasSessionsResult");
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   srv.callStaticBooleanMethod("search", "pmason", "", "", "", "", "", "", "", "",
"", results, limitReached);
                                                           The SAS System

MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   results.callStringMethod("getReturnMessage", message);
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   if (returnCode ne 0) then do;
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   logMsg=" Cannot retrieve list of queried sessions.";
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   end;
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   else do;
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   logMsgPrimary=logMsgPrefix;
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   logMsg=" List of all the queried sessions was returned.";
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   results.callIntMethod("getSize", rowCount);
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   do row=0 to rowCount - 1;
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   results.callStringMethod("getId", row, sessionId);
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   results.callStringMethod("getDateStarted", row, dateStarted);
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   results.callStringMethod("getDateStartedSasFormat", row,
dateStartedSasFormatTmp);
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   results.callStringMethod("getDateEnded", row, dateEnded);
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   results.callStringMethod("getDateEndedSasFormat", row, dateEndedSasFormatTmp);
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   results.callStringMethod("getType", row, sessionType);
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   results.callStringMethod("getState", row, sessionState);
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   results.callStringMethod("getOwner", row, sessionOwner);
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   results.callStringMethod("getSubmissionLabel", row, submissionLabel);
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   results.callIntMethod("getClientId", row, clientId);
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   dateStartedSasFormat = input(dateStartedSasFormatTmp, datetime.);
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   dateEndedSasFormat = input(dateEndedSasFormatTmp, datetime.);
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   output;
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   end;
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   end;
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   put;
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   put logMsgPrimary " " logMsg;
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   put logMsgPrefix " " "lsaf_getsessionsbyquery";
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   if (rowCount=0) then put logMsgPrefix " No queried sessions were found.";
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   else put logMsgPrefix " " rowCount " records written to data set
work.lsafgetsessionsbyquery";
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   put logMsgPrefix " Session Limit Reached= " limitReached;
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   put;
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   call symputx("_lsafRC_", returnCode);
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   call symputx("_lsafMsg_", message);
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   call symputx("_lsafRowCount_", rowCount);
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   run;


NOTE: SAS Life Science Analytics Framework Macro: *  List of all the queried sessions was returned.
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_getsessionsbyquery
NOTE: SAS Life Science Analytics Framework Macro: *  2  records written to data set work.lsafgetsessionsbyquery
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  Session Limit Reached= 0
NOTE: The data set WORK.LSAFGETSESSIONSBYQUERY has 2 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           1.22 seconds
      cpu time            0.00 seconds


MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   options nonotes;
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   proc sort data=work.lsafgetsessionsbyquery sortseq=linguistic(strength=primary);
                                                           The SAS System

MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   by sessionOwner dateStartedSasFormat dateEndedSasFormat;
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   run;
MPRINT(SETENV.SETENV03.LSAF_GETSESSIONSBYQUERY):   options NOTES;
MPRINT(SETENV.SETENV03):  ;
MPRINT(SETENV.SETENV03):   data _null_;
MPRINT(SETENV.SETENV03):   set WORK.LSAFGETSESSIONSBYQUERY ;
MPRINT(SETENV.SETENV03):   if clientID = 2;
MPRINT(SETENV.SETENV03):   put (sessionID sessionOwner dateStartedSASFormat dateEndedSASFormat sessionType sessionState
submissionLabel) (=/);
MPRINT(SETENV.SETENV03):   do i = 1 to countw("sessionID sessionOwner dateStartedSASFormat dateEndedSASFormat sessionType
sessionState submissionLabel");
MPRINT(SETENV.SETENV03):   var = put(scan("sessionID sessionOwner dateStartedSASFormat dateEndedSASFormat sessionType sessionState
submissionLabel", i), $32.);
MPRINT(SETENV.SETENV03):   call symputx(var, vvaluex(var), "G");
MPRINT(SETENV.SETENV03):   end;
MPRINT(SETENV.SETENV03):   run;


sessionId=c3d174dd-dd17-4b4e-9ceb-4477223f3969
sessionOwner=pmason
dateStartedSASFormat=07JUN23:10:36:35
dateEndedSASFormat=.
sessionType=PUBLISHED_JOB
sessionState=ACTIVE
submissionLabel=pp.job - postprocessing.sas (1/1)
NOTE: There were 2 observations read from the data set WORK.LSAFGETSESSIONSBYQUERY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


(SETENV03): _SASDRGDEVENV_=true _SDD_RUNMODE_=LSAF_BATCH SESSIONTYPE=PUBLISHED_JOB SESSIONID=c3d174dd-dd17-4b4e-9ceb-4477223f3969
DEBUG=0
MPRINT(SETENV.SETENV03):   *- jbodart -2023-03-30 - Get Job information -*;
MAUTOCOMPLOC:  The autocall macro LSAF_GETJOBSUBMISSIONBYSESSIONID is compiling using the autocall source file
            /sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.6.1/sasmacros/lsaf_getjobsubmissionbysessionid.sas.
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):  ;
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   data work.lsafjobsubmissionbysessionid (label="Created by
LSAF_GETJOBSUBMISSIONBYSESSIONID" KEEP=sessionId name value);
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   attrib returnCode length=8 message length=$200 logMsgPrefix length=$70
logMsgPrimary length=$70 logMsg length=$300 rowCount length=8 sessionId length=$256 label="Job Submission Session ID" name
length=$256 label="Property Name" value length=$2048 label="Property Value" ;
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   rowCount=0;
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   declare javaobj
srv("com/sas/lsaf/macro/execution/jobsubmission/JobSubmissionService") ;
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   declare javaobj
results("com/sas/lsaf/macro/common/result/SasPropertiesResult");
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   srv.callStaticVoidMethod("getJobSubmissionBySessionId",
"c3d174dd-dd17-4b4e-9ceb-4477223f3969", results);
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   results.callStringMethod("getReturnMessage", message);
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   if (returnCode ne 0) then do;
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   logMsg=" Cannot retrieve list of job submission properties for
c3d174dd-dd17-4b4e-9ceb-4477223f3969" ;
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   end;
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   else do;
                                                           The SAS System

MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   logMsgPrimary=logMsgPrefix;
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   logMsg=" List of job submission properties were returned for
c3d174dd-dd17-4b4e-9ceb-4477223f3969" ;
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   results.callIntMethod("getSize", rowCount);
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   do row=0 to rowCount - 1;
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   sessionId=kstrip("c3d174dd-dd17-4b4e-9ceb-4477223f3969");
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   results.callStringMethod("getPropertyName", row, name);
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   results.callStringMethod("getPropertyValue", row, value);
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   output;
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   end;
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   end;
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   put;
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   put logMsgPrimary " " logMsg;
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   put logMsgPrefix " " "lsaf_getjobsubmissionbysessionid";
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   if (rowCount=0) then put logMsgPrefix " No job submission properties
were retrieved.";
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   else put logMsgPrefix " " rowCount " records written to data set
work.lsafjobsubmissionbysessionid";
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   put;
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   call symputx("_lsafRC_", returnCode);
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   call symputx("_lsafMsg_", message);
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   call symputx("_lsafRowCount_", rowCount);
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   run;


NOTE: SAS Life Science Analytics Framework Macro: *
List of job submission properties were returned for c3d174dd-dd17-4b4e-9ceb-4477223f3969
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_getjobsubmissionbysessionid
NOTE: SAS Life Science Analytics Framework Macro: *  14  records written to data set work.lsafjobsubmissionbysessionid
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: The data set WORK.LSAFJOBSUBMISSIONBYSESSIONID has 14 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.02 seconds


MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   options nonotes;
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   proc sort data=work.lsafjobsubmissionbysessionid
sortseq=linguistic(strength=primary);
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   by name;
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   run;
MPRINT(SETENV.SETENV03.LSAF_GETJOBSUBMISSIONBYSESSIONID):   options NOTES;
MPRINT(SETENV.SETENV03):  ;
MPRINT(SETENV.SETENV03):   data _null_;
MPRINT(SETENV.SETENV03):   set WORK.LSAFJOBSUBMISSIONBYSESSIONID ;
MPRINT(SETENV.SETENV03):   put name= value=;
MPRINT(SETENV.SETENV03):   call symputx(cats("_", name, "_"), value, "G");
MPRINT(SETENV.SETENV03):   run;

name=completed value=
name=jobId value=030fd944-90dd-464a-8101-6d0ab92dae81
name=jobOwner value=mbusselen
name=jobPath value=/general/biostat/jobs/dashboard/dev/jobs/pp.job
name=jobVersion value=1.2
name=runAsUser value=pmason
                                                           The SAS System

name=sessionId value=c3d174dd-dd17-4b4e-9ceb-4477223f3969
name=submissionDetailStatus value=RUNNING_TASKS
name=submissionId value=81a809cc-a233-49e8-a815-51a16e7d7401
name=submissionStatusMessage value=Submitting initial program.
name=submissionSummaryStatus value=STARTED
name=submissionType value=REPOSITORY
name=submitted value=Wed Jun 07 10:36:39 GMT 2023
name=submittedBy value=pmason
NOTE: There were 14 observations read from the data set WORK.LSAFJOBSUBMISSIONBYSESSIONID.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


CLEANUP= SESSIONTYPE=PUBLISHED_JOB
Empty cleanup was set to 0 according to sessionType
SYSSCP=LIN X64 SEPCHAR=/
MPRINT(SETENV.SETENV03):   * in case run in batch;
(SETENV03): _SASFILEPATH_ = /general/biostat/jobs/dashboard/dev/programs/postprocessing.sas
(SETENV03): path1 = /general/biostat/jobs/dashboard/dev/programs/postprocessing.sas
(SETENV03): _sasws_ = /lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a
(SETENV03): runenvironment = repository
MPRINT(SETENV.SETENV03):   libname projmeta
"/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/metadata/projects/"
access=readonly;
NOTE: Library PROJMETA does not exist.
runenvironment=repository
progpath=/general/biostat/jobs/dashboard/dev/programs/
repevpath=/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/jobs/dashboard/dev/
relrepevpath=/general/biostat/jobs/dashboard/dev/
progname=postprocessing.sas
pgmname=postprocessing
general=/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/
debug=0
compound=biostat
indication=jobs
study=dashboard
revent=
SEPCHAR=/
USE_SAS_WORKSPACE_MACROS=
Notice: Environment variable USE_SAS_WORKSPACE_MACROS is NOT DEFINED.
MPRINT(SETENV.SETENV03.SETSASAUTOS):   *- If libname is created with non-existing path, let SAS create that path -*;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   options dlcreatedir;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   data sasautos;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   length sasautospath $400 sasautos $2000;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   *- macros folder in Reporting Event -*;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   sasautospath =
"/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/jobs/dashboard/dev/macros";
MPRINT(SETENV.SETENV03.SETSASAUTOS):   if libname('temp', sasautospath) = 0 then do;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   order+1;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   output;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   end;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   else put "WAR" "NING: Failed to open/create, skipping " sasautospath=;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   *- WORKSPACE macros folders - for testing purposes -*;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   *- gadam/_library -*;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   *- gsdtm/library -*;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   *- global macros folder in Reporting Event -*;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   sasautos =
                                                           The SAS System

ifc(fileexist("/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/jobs/dashboard/dev/m
acros/global-macros")
,"/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/jobs/dashboard/dev/macros/global-
macros"
,"/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/jobs/dashboard/dev/macros/global_
macros" );
MPRINT(SETENV.SETENV03.SETSASAUTOS):   *- attempt to create path if not existing -*;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   rc= libname('temp', sasautospath);
MPRINT(SETENV.SETENV03.SETSASAUTOS):   lref = libref('temp');
MPRINT(SETENV.SETENV03.SETSASAUTOS):   if lref = 0 then do;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   order+1;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   output;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   rc = libname('temp');
MPRINT(SETENV.SETENV03.SETSASAUTOS):   *- de-assign -*;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   end;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   *- general biostat macros library -*;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   sasautospath =
ifc(fileexist("/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/macros/_library/*.sa
s") ,"/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/macros/_library"
,"/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/macros/_library" );
MPRINT(SETENV.SETENV03.SETSASAUTOS):   order+1;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   output;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   *- individual paths from existing OPTION SASAUTOS -*;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   sasautos = prxchange('s/^\((.*)\)$/\1/', 1, strip(getoption("sasautos")));
MPRINT(SETENV.SETENV03.SETSASAUTOS):   *- remove enclosing parentheses if any -*;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   do i = 1 to countw(sasautos, " ", "q");
MPRINT(SETENV.SETENV03.SETSASAUTOS):   sasautospath = scan(sasautos, i, " ", "qr");
MPRINT(SETENV.SETENV03.SETSASAUTOS):   order+1;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   output;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   end;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   run;

NOTE: The data set WORK.SASAUTOS has 8 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(SETENV.SETENV03.SETSASAUTOS):   *- remove duplicate paths -*;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   proc sort data=sasautos;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   by sasautospath order;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   run;

NOTE: There were 8 observations read from the data set WORK.SASAUTOS.
NOTE: The data set WORK.SASAUTOS has 8 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(SETENV.SETENV03.SETSASAUTOS):   data sasautos;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   set sasautos(where=(sasautospath ^= ' '));
MPRINT(SETENV.SETENV03.SETSASAUTOS):   by sasautospath order;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   if fileexist(sasautospath) or upcase(sasautospath) = "SASAUTOS" then do;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   if first.sasautospath then output;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   end;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   else do;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   if first.sasautospath then put "Dropping non-existing sasautos path: " sasautospath;
                                                           The SAS System

MPRINT(SETENV.SETENV03.SETSASAUTOS):   end;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   run;

Dropping non-existing sasautos path: SASEnvironment/SASMacro
NOTE: There were 8 observations read from the data set WORK.SASAUTOS.
      WHERE sasautospath not = ' ';
NOTE: The data set WORK.SASAUTOS has 6 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(SETENV.SETENV03.SETSASAUTOS):   *- sort by initial order -*;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   proc sort data=sasautos;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   by order sasautospath;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   run;

NOTE: There were 6 observations read from the data set WORK.SASAUTOS.
NOTE: The data set WORK.SASAUTOS has 6 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(SETENV.SETENV03.SETSASAUTOS):   *- update option sasautos -*;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   option ls = 200 source source2;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   data _null_;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   set sasautos end = last;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   if _n_=1 then do;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   call execute('options mautosource mrecall sasautos=(');
MPRINT(SETENV.SETENV03.SETSASAUTOS):   put "SASAUTOS PATHS:" / "--------------";
MPRINT(SETENV.SETENV03.SETSASAUTOS):   end;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   if upcase(sasautospath) = "SASAUTOS" then call execute(' '||trim(sasautospath)||' ');
MPRINT(SETENV.SETENV03.SETSASAUTOS):   else call execute(' '||quote(trim(sasautospath))||' ');
MPRINT(SETENV.SETENV03.SETSASAUTOS):   put sasautospath;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   if last then do;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   call execute(');');
MPRINT(SETENV.SETENV03.SETSASAUTOS):   end;
MPRINT(SETENV.SETENV03.SETSASAUTOS):   run;

SASAUTOS PATHS:
--------------
/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/jobs/dashboard/dev/macros
/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/macros/_library
/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/jobs/dashboard/dev/macros/global_macros
!SASROOT/sasautos
/sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.6.1/sasmacros
/lsafshared/SASWorkspaces/global_macros
MPRINT(SETENV.SETENV03.SETSASAUTOS):   );
NOTE: There were 6 observations read from the data set WORK.SASAUTOS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE generated line.
1         + options mautosource mrecall sasautos=(
2         +  "/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/jobs/dashboard/dev/macros"
                                                                                             The SAS System

3         +  "/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/macros/_library"
4         +  "/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/jobs/dashboard/dev/macros/global_macros"
5         +  "!SASROOT/sasautos"
6         +  "/sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.6.1/sasmacros"
7         +  "/lsafshared/SASWorkspaces/global_macros"
8         + );
MPRINT(SETENV.SETENV03.SETSASAUTOS):   options nosource2;
getoption(sasautos) = ("/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/jobs/dashboard/dev/macros"
"/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/macros/_library"
"/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/jobs/dashboard/dev/macros/global_macros"   "!SASROOT/sasautos"
"/sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.6.1/sasmacros"   "/lsafshared/SASWorkspaces/global_macros")
MPRINT(SETENV.SETENV03):  ;
MPRINT(SETENV.SETENV03):   ;
MAUTOCOMPLOC:  The autocall macro GET_JOB_PROG_INFO is compiling using the autocall source file
            /lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/jobs/dashboard/dev/macros/get_job_prog_info.sas.
MPRINT(SETENV.SETENV03.GET_JOB_PROG_INFO):   options nomprint;

NOTE: The infile "/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/jobs/dashboard/dev/jobs/pp.job" is:
      Filename=/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/jobs/dashboard/dev/jobs/pp.job,
      Owner Name=webtrust,Group Name=webtrust,
      Access Permission=-rw-rw-rw-,
      Last Modified=07Sep2022:11:50:17,
      File Size (bytes)=1603

progversion=*
NOTE: 27 records were read from the infile "/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/jobs/dashboard/dev/jobs/pp.job".
      The minimum record length was 0.
      The maximum record length was 155.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MAUTOCOMPLOC:  The autocall macro LSAF_GET_VERSION is compiling using the autocall source file
            /lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/macros/_library/lsaf_get_version.sas.
MAUTOCOMPLOC:  The autocall macro LOCAL_LSAF is compiling using the autocall source file
            /lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/macros/_library/local_lsaf.sas.
MAUTOCOMPLOC:  The autocall macro LSAF_GETPROPERTIES is compiling using the autocall source file /sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.6.1/sasmacros/lsaf_getproperties.sas.


NOTE: SAS Life Science Analytics Framework Macro: *  List of properties were returned for /general/biostat/jobs/dashboard/dev/programs/postprocessing.sas
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_getproperties
NOTE: SAS Life Science Analytics Framework Macro: *  21  records written to data set work.lsafGetProperties
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: The data set WORK.LSAFGETPROPERTIES has 21 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.02 seconds



NOTE: There were 1 observations read from the data set WORK.LSAFGETPROPERTIES.
      WHERE name='version';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds

                                                                                             The SAS System


progversion = 0.125
MAUTOCOMPLOC:  The autocall macro PRXESCAPE is compiling using the autocall source file
            /lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/macros/_library/prxescape.sas.
L_SASAUTOS=("/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/jobs/dashboard/dev/macros"
"/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/macros/_library"
"/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/jobs/dashboard/dev/macros/global_macros"   "!SASROOT/sasautos"
"/sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.6.1/sasmacros"   "/lsafshared/SASWorkspaces/global_macros")

SASUnit was NOT initialized since not all conditions are met:
PGMNAME=postprocessing matches TEST pattern: 0
OPTION SYSIN is not set: 1
SASUnit folder exists: 0
_SDD_RUNMODE_=LSAF_BATCH is not equal to LSAF_BATCH: 0
G_RUNMODE= is empty: 1

(SETENV): Done.
270        options mprint;
271
272        /*remove lsaf _sasws_ part from folder path*/
273        data _null_;
274             repoloc = substr("&refolder",1,index("&refolder","/clinical/"));
275             call symputx("repoloc",strip(repoloc));
276             fp = substr("&refolder",index("&refolder","/clinical/"));
277             call symputx("repath",strip(fp));
278             call symputx("mnfpath",strip(fp)||"/manifest/");
279        run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


280        %put &=refolder;
REFOLDER=/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/clinical/argx-113/pemphigus/argx-113-1904/biostat/staging/testrun2/qc_tlf
281        %put &=repoloc;
REPOLOC=/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/
282        %put &=repath;
REPATH=/clinical/argx-113/pemphigus/argx-113-1904/biostat/staging/testrun2/qc_tlf
283        %put &=mnfpath;
MNFPATH=/clinical/argx-113/pemphigus/argx-113-1904/biostat/staging/testrun2/qc_tlf/manifest/
284
285        %let isrepevent=no;
286        %getprojmeta;
MAUTOCOMPLOC:  The autocall macro GETPROJMETA is compiling using the autocall source file
            /lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/jobs/dashboard/dev/macros/getprojmeta.sas.
METAEXISTS=no
MPRINT(GETPROJMETA):   options nomprint;
MAUTOCOMPLOC:  The autocall macro LSAF_EXISTS is compiling using the autocall source file /sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.6.1/sasmacros/lsaf_exists.sas.


NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /general/biostat/metadata/projects/meta.sas7bdat
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
                                                                                             The SAS System

      cpu time            0.01 seconds


_LSAFEXISTS_=1
MPRINT(GETPROJMETA):   options nomprint;
MAUTOCOMPLOC:  The autocall macro LSAF_EXISTSINWORKSPACE is compiling using the autocall source file
            /sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.6.1/sasmacros/lsaf_existsinworkspace.sas.


NOTE: SAS Life Science Analytics Framework Macro: *  The item exists in the workspace: /general/biostat/metadata/projects/meta.sas7bdat
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_existsinworkspace
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExistsInWorkspace_= 1
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds


MAUTOCOMPLOC:  The autocall macro LSAF_SYNCFILETOWORKSPACE is compiling using the autocall source file
            /sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.6.1/sasmacros/lsaf_syncfiletoworkspace.sas.


NOTE: SAS Life Science Analytics Framework Macro: *  The repository item was synchronized to the workspace: /general/biostat/metadata/projects/meta.sas7bdat.
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_syncfiletoworkspace
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: DATA statement used (Total process time):
      real time           1.05 seconds
      cpu time            0.00 seconds


MPRINT(GETPROJMETA):  ;
MPRINT(GETPROJMETA):   libname prjmtaws "/lsafshared/SASWorkspaces/pmason/general/biostat/metadata/projects";
NOTE: Libref PRJMTAWS was successfully assigned as follows:
      Engine:        V9
      Physical Name: /lsafshared/SASWorkspaces/pmason/general/biostat/metadata/projects
MPRINT(GETPROJMETA):   data meta;
MPRINT(GETPROJMETA):   set prjmtaws.meta;
MPRINT(GETPROJMETA):   run;
NOTE: There were 430 observations read from the data set PRJMTAWS.META.
NOTE: The data set WORK.META has 430 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(GETPROJMETA):   options nomprint;
287        data _null_;
288             set meta;
289             where index(Reporting_Event_Path, "&repath") >0;
290             call symputx("isrepevent","yes");
291        run;

NOTE: There were 1 observations read from the data set WORK.META.
      WHERE INDEX(Reporting_Event_Path, '/clinical/argx-113/pemphigus/argx-113-1904/biostat/staging/testrun2/qc_tlf')>0;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
                                                                                             The SAS System

      cpu time            0.00 seconds


292        %put &=isrepevent;
ISREPEVENT=yes
293
294        data croosdocs ;
295            delete ;
296        run ;

NOTE: The data set WORK.CROOSDOCS has 0 observations and 0 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


297
298        %macro ppmacro;
299        data _null_;
300        %if &isrepevent=no %then put "E" "RROR: job parameter: &refolder., is not valid repoting event";;
301        run;
302
303        %if &isrepevent=yes %then %do; /*go to end*/
304
305        %let compound=%scan(&repath,2,"/");
306        %let indication=%scan(&repath,3,"/");
307        %let study= %scan(&repath,4,"/");
308        %let revent= %scan(&repath,7,"/");
309        /*if CRO oversight (ie has qc_tlf/qc_adam etc) then look at the parent folder documents*/
310        %if %index(&repath.,qc_)>0 %then %do;
311           %let oversight=Y;
312        %end; %else %do;
313           %let oversight=N;
314        %end;
315        %put &=compound;
316        %put &=indication;
317        %put &=study;
318        %put &=revent;
319        %put &=oversight;
320
321        /*keep log file with reporting event*/
322        %let workpath = %sysfunc(pathname(work));
323        options linesize=MAX;
324        proc printto log="&workpath/dashboard.log" new;
325        run;
326
327        %put &=refolder;
328        %put &=repoloc;
329        %put &=repath;
330        %put &=mnfpath;
331
332
333        data _null_;
334             call sleep(1000,.01); * 10 seconds;
335        run;
336
337        %let dbstartdatetime = %sysfunc(datetime());
338
                                                                                             The SAS System

339        %let docmeta=work;
340        %if &dbg = yes %then %do;
341        /*libname docmeta "&_sasws_.&repath./documents/meta";*/
342        libname docmeta "&_sasws_.&repath./documents";
343        %let docmeta=docmeta;
344        %end;
345
346        %getlsaffolderinfo(folder=log);
347        %getlsaffolderinfo(folder=manifest);
348        %getlsaffolderinfo(folder=output);
349        %getlsaffolderinfo(folder=output/txt);
350        %getlsaffolderinfo(folder=output/svg);
351        %getlsaffolderinfo(folder=output/pdf);
352        %getlsaffolderinfo(folder=programs);
353        %getlsaffolderinfo(folder=documents/meta);
354        /*if CRO oversight (ie has qc_tlf/qc_adam etc) then look at the parent folder documents*/
355        %if &oversight.=Y %then %do;
356            %getlsaffolderinfo(folder=../documents);
357        %end;
358        %if %sysfunc(exist(fi_documents_meta))=0 %then %do;
359             /*this happens when the dashboard job runs over reporting event where documents/meta doesn't exist yet*/
360             data fi_documents_meta;
361                  set fi_log (obs=0);
362             run;
363        %end;
364        %getlsaffolderinfo(folder=documents);
365        %splistinfo(&repath);
366
367        %getrepemeta;
368        %if &repemetaexists=yes %then %do; /*goto end if not exists*/
369
370
371        proc contents data=repemeta out=x noprint;
372        run;
373        %macro addvar (varnam);
374        %let addvarnam=yes;
375        %let isnumeric=no;
376        data _null_;
377             set x;
378             if lowcase(name)="&varnam" and type=2 then call symputx('addvarnam','no');
379             if lowcase(name)="&varnam" and type=1 then call symputx('isnumeric','yes');
380        run;
381        %put &=addvarnam;
382        %if &addvarnam=yes %then %do;
383             data repemeta %if &isnumeric=yes %then (drop = vo);;
384                  length &varnam $50;
385                  set repemeta %if &isnumeric=yes %then (rename=(&varnam = vo));;
386                  %if &isnumeric=yes %then &varnam=put(vo,best.);
387                  %else &varnam="";;
388             run;
389        %end;
390        %mend addvar;
391        %addvar (dataset);
392        %addvar (num);
393        %addvar (title);
394        %addvar (Analysis_Set);
395        %addvar (Section);
396
                                                                                             The SAS System

397        proc sort data=repemeta out=sasprograms (keep=sas_program) nodupkey;
398             by sas_program;
399             where not missing(sas_program) and (not missing(dataset) or not missing (num));
400        run;
401        %let sas_program_len = 50;
402        data _null_;
403             set sasprograms (obs=1);
404             call symputx ("sas_program_len",max(50,vlength (sas_program)));
405        run;
406        %put &=sas_program_len;
407        data sasprograms;
408             length sas_program $&sas_program_len;
409             set sasprograms;
410             format sas_program;
411             informat sas_program;
412        run;
413
414        %macro mnffiles;
415             %let nbmnf=0;
416             data _null_;
417                  set fi_manifest end=last;
418                  call symputx("mnffilepath"||strip(put(_n_,8.)),strip(path));
419                  if last then call symputx("nbmnf",strip(put(_n_,8.)));
420             run;
421             %do f = 1 %to &nbmnf;
422                  option nomprint;
423        /*           %lsaf_getjobmanifestoutputs(lsaf_path=&&mnffilepath&f, lsaf_version=, sas_dsname=work.lsafGetJobManifestOutputs); */
424                  %lsaf_getjobmanifestoutputs(lsaf_location=REPOSITORY,lsaf_path=&&mnffilepath&f, lsaf_version=, sas_dsname=work.lsafGetJobManifestOutputs);
425                  option mprint;
426                  data lsafGetJobManifestOutputs;
427                       set lsafGetJobManifestOutputs;
428                       keep path jobManifestPath referenceProgram;
429                  run;
430                  %if &f=1 %then %do;
431                  data mnffiles;
432                       set lsafGetJobManifestOutputs;
433                  run;
434                  %end;
435                  %else %if &f>1 %then %do;
436                  %app(mnffiles,lsafGetJobManifestOutputs);
437                  %end;
438             %end;
439
440             proc sort data=mnffiles out=z nodupkey;
441                  by jobManifestPath referenceProgram;
442                  where not missing(referenceProgram);
443             run;
444             proc freq data=z noprint;
445                  table jobManifestPath/ norow nocol nopercent nocum list out=f (where=(count>1));
446             run;
447             data _null_;
448                  set f;
449                  put 'ER' "ROR: we don't expect manifests to have >1 sas program " @;
450                  put jobManifestPath;
451             run;
452             data z2 (keep = jobManifestPath sas_program);
453                  length sas_program $&sas_program_len;
454                  set z;
                                                                                             The SAS System

455                  sas_program=scan(referenceProgram,-1,'/\');
456             run;
457
458             data &docmeta.._mnffiles mnffiles;
459                  merge mnffiles z2;
460                  by jobManifestPath;
461             run;
462        %mend mnffiles;
463        /*jobmanifestoutputs serve as link between all outputs*/
464        %mnffiles;
465
466         /*Check which programs have no or newer manifest file than programs_pgm.json in documents/meta*/
467        /*if needed update programs_pgm.json */
468        %macro refreshmeta;
469             %let nbprogjson=0;
470
471             data prgjson (keep=sas_program pgmjsonlastmod);
472                  length sas_program $&sas_program_len;
473                  set fi_documents_meta (rename=(dateLastModified=pgmjsonlastmod)) end=last;
474                  where name=:"programs_" and index(name,".json")>0;
475                  sas_program = tranwrd(substr(name,10),'.json','');
476                  call symputx("progjson"||strip(put(_n_,8.)),strip(name));
477                  if last then call symputx("nbprogjson",strip(put(_n_,8.)));
478                  format sas_program;
479                  informat sas_program;
480             run;
481             data mnf;
482                  length sas_program $&sas_program_len;
483                  set fi_manifest (obs=0);
484                  sas_program="";
485                  manifestname=name;
486                  mnflastmod=dateLastModified;
487                  keep mnflastmod manifestname sas_program;
488                  format sas_program;
489                  informat sas_program;
490            run;
491             %do j = 1 %to &nbprogjson;
492        /*          LIBNAME dx JSON "&_sasws_.&repath./documents/meta/&&progjson&j";*/
493        /*          proc copy in=dx out=work;*/
494        /*          run;*/
495                  %getjsonfile(&repath./documents/meta/&&progjson&j);
496                  %put STEVE: &=j.;
497                  proc sql;
498                       create table mnfA as
499                       select a.dateLastModified as mnflastmod, b.manifestname, b.sas_program as sas_programA
500                       from fi_manifest as a inner join root as b
501                       on a.path = b.manifestname;
502                  quit;
503                  data mnfB (drop=sas_programA);
504                       length sas_program $&sas_program_len;
505                       set mnfA;
506                       sas_program = tranwrd(scan (sas_programA,-1,'/\'),'.sas','');
507                       format sas_program;
508                       informat sas_program;
509                  run;
510                  data mnf;
511                       set mnf mnfB;
512                  run;
                                                                                             The SAS System

513             %end;
514
515             proc sort data=mnf;
516                  by sas_program;
517             run;
518             proc sort data=prgjson;
519                  by sas_program;
520             run;
521             data mnfnorefresh (rename=(manifestname=path)) mnfrefresh (rename=(manifestname=path));
522                  merge sasprograms (in=a) prgjson (in=b) mnf (in=c);
523                  by sas_program;
524
525                  if missing(pgmjsonlastmod) or mnflastmod>pgmjsonlastmod then output mnfrefresh;
526                  else output mnfnorefresh;
527             run;
528             proc sort data=mnfnorefresh;
529                  by path;
530             run;
531             data &docmeta.._sasprograms;
532                  set sasprograms;
533             run;
534             data &docmeta.._prgjson;
535                  set prgjson;
536             run;
537             data &docmeta.._mnf;
538                  set mnf;
539             run;
540             data &docmeta.._mnfnorefresh;
541                  set mnfnorefresh;
542             run;
543             data &docmeta.._mnfrefresh;
544                  set mnfrefresh;
545             run;
546             proc sort data = fi_manifest;
547                  by path;
548             run;
549             proc sort data = mnfrefresh;
550                  by path;
551             run;
552             data torefresh;
553                  merge fi_manifest (in=a) mnfnorefresh (in=b) mnfrefresh (in=c keep=path);
554                  by path;
555                  if a and not b /*and c*/;
556             run;
557             %let nbmnf=0;
558             data _null_;
559                  set torefresh end=last;
560                  call symputx("mnffilepath"||strip(put(_n_,8.)),"&mnfpath."||strip(name));
561                  if last then call symputx("nbmnf",strip(put(_n_,8.)));
562             run;
563             filename ro  "&workpath/refreshedoutputs.json";
564             %if &nbmnf=0 %then %do;
565                  data torefresh;
566                       msg="No refresh needed";
567                  run;
568             %end;
569             proc json out=ro pretty;
570                  export torefresh / nosastags;
                                                                                             The SAS System

571             run;
572
573             %do m = 1 %to &nbmnf;
574                  %put &m - &&mnffilepath&m;
575             %end;
576
577             %do m = 1 %to &nbmnf;
578                  %permanifest (mnffilepath=&&mnffilepath&m);
579             %end;
580        %mend refreshmeta;
581
582        %macro permanifest (mnffilepath=);
583
584             option nomprint;
585        /*      %lsaf_getjobmanifestinfo(lsaf_path=&mnffilepath, lsaf_version=, sas_dsname=work.lsafGetJobManifestInfo); */
586             %lsaf_getjobmanifestinfo(lsaf_location=REPOSITORY,lsaf_path=&mnffilepath, lsaf_version=, sas_dsname=work.lsafGetJobManifestInfo);
587             option mprint;
588             data _null_ (keep=path value);
589                  set lsafGetJobManifestInfo;
590                  where name='submitted';
591                  call symputx('submitdt',strip(put(input(value,datetime18.),18.)));
592                  call symputx('submitdtf',strip(value));
593             run;
594             %put &=submitdt;
595             %put &=submitdtf;
596
597             option nomprint;
598        /*      %lsaf_getjobmanifestprograms(lsaf_path=&mnffilepath, lsaf_version=, sas_dsname=work.lsafGetJobManifestPrograms); */
599             %lsaf_getjobmanifestprograms(lsaf_location=REPOSITORY,lsaf_path=&mnffilepath, lsaf_version=, sas_dsname=work.lsafGetJobManifestPrograms);
600             option mprint;
601             %let nbsasprograms=0;
602
603             data sasprogram &docmeta.._sasprogram;
604                  set lsafGetJobManifestPrograms end=last;
605                  where index(path,'setenv')=0;
606                  pgm = scan(path,-1,'/\');
607                  call symputx("sasprogrampath"||strip(put(_n_,8.)),strip(path));
608                  call symputx("sasprogram"||strip(put(_n_,8.)),strip(pgm));
609                  call symputx("sasprogramnoext"||strip(put(_n_,8.)),strip(tranwrd(pgm,'.sas','')));
610                  if last then call symputx("nbsasprograms",strip(put(_n_,8.)));
611                  keep jobManifestPath path pgm;
612             run;
613             %put &=nbsasprograms;
614             %put &=sasprogram1;
615             /*Check if SAS program is in our repemeta list*/
616             %let programavailable=no;
617             data _null_ ;
618                  set sasprograms;
619                  where sas_program="&sasprogramnoext1" or sas_program="&sasprogram1";
620                  call symput('programavailable',"yes");
621             run;
622             %if &programavailable=yes %then %do;
623        /*
624                  option nomprint;
625                  %lsaf_getjobmanifestoutputs(lsaf_path=&mnffilepath, lsaf_version=, sas_dsname=work.lsafGetJobManifestOutputs);
626                  option mprint;*/
627                  data &docmeta.._sasoutputs&m sasoutputs;
628        /*               set lsafGetJobManifestOutputs;*/
                                                                                             The SAS System

629                       set mnffiles;
630                       where jobManifestPath="&mnffilepath";
631                       keep path jobManifestPath referenceProgram;
632                  run;
633                  data logfiles datasets outputs;
634                       set sasoutputs;
635                       if path=:"&repath./log" and index(path,".log")>0 then output logfiles;
636                       else if path=:"&repath./output" and index(path,".sas7bdat")=0 then output outputs;
637                       else if index(path,".sas7bdat")>0 and path ne:"&repath./documents" then output datasets;
638                  run;
639
640                  /*************/
641                  /* Check log */
642                  /*************/
643                  data logexists;
644                       set fi_documents_meta;
645                       where name=:"log_";
646                       path = tranwrd(tranwrd(path,'documents/meta/log_','log/'),'.json','.log');
647                  run;
648                  proc sort data=logexists; by path; run;
649                  proc sort data=logfiles; by path; run;
650             /*     proc sort data=fi_log; by path; run;*/
651                  data /*&docmeta.._todolog*/ todolog;
652                       merge logfiles(in=a) logexists (in=b) fi_log (keep=path dateLastModified rename=(dateLastModified=loglastmod));
653                       by path;
654                       if a;
655                       if missing(referenceProgram) then refresh = 1;
656                       /*if loglastmod<&submitdt or not b then*/ refresh = 1;  /*it seems not to work to use the json files that are produced for the program being run*/
657
658                       ufloglm = loglastmod;
659                       submitdt=&submitdt;
660                       submitdtf=submitdt;
661                       format ufloglm submitdt;
662                       format submitdtf datetime16.;
663                  run;
664                  %let nblogfiles=0;
665                  data _null_;
666                       set todolog end=last;
667                       where refresh;
668                       call symputx("logfile"||strip(put(_n_,8.)),strip(path));
669                       if last then call symputx("nblogfiles",strip(put(_n_,8.)));
670                  run;
671                  %put &=nblogfiles;
672
673                  %do lf = 1 %to &nblogfiles;
674                       %put log check of &&logfile&lf;
675                       options nomprint;
676                       %lsaf_exists(lsaf_path=&&logfile&lf);
677                       options mprint;
678                       %put &=_lsafExists_;
679
680                       %if &_lsafExists_=1 %then %do;
681                            options nomprint;
682                            %lsaf_existsinworkspace(lsaf_path=&&logfile&lf);
683                            %lsaf_syncfiletoworkspace(lsaf_path=&&logfile&lf);
684                            options mprint spool;
685
686                            filename logf "/lsafshared/SASWorkspaces/&_SDDUSR_.&&logfile&lf";
                                                                                             The SAS System

687                            options nomprint;
688                            %logchecker;
689                            options mprint;
690                            %log2json (repoloc=&_sasws_.&repath./log/);
691
692                            options nomprint;
693                            %if &_lsafExistsInWorkspace_=0 %then %lsaf_deleteworkspaceitem(lsaf_path=&&logfile&lf);;
694                            options mprint;
695                       %end;
696
697                  %end;
698
699                  /************************/
700                  /* Check program header */
701                  /************************/
702                  options nomprint;
703                  %lsaf_existsinworkspace(lsaf_path=&sasprogrampath1);
704                  %lsaf_syncfiletoworkspace(lsaf_path=&sasprogrampath1);
705                  options mprint;
706                  filename chkprog "/lsafshared/SASWorkspaces/&_SDDUSR_/&sasprogrampath1";
707                  %let compound=%scan(&repath,2,"&sepchar");
708                  %let indication=%scan(&repath,3,"&sepchar");
709                  %let study= %scan(&repath,4,"&sepchar");
710                  %let revent= %scan(&repath,7,"&sepchar");
711                  %checkheader (chkprog, &sasprogramnoext1, dsetout=pg_header);
712                  options nomprint;
713                  %if &_lsafExistsInWorkspace_=0 %then %lsaf_deleteworkspaceitem(lsaf_path=&sasprogrampath1);
714                  options mprint;
715
716                  proc freq data=pg_header noprint;
717                       table check / norow nocol nocum nopercent out=hck;
718                  run;
719                  proc transpose data=hck out=thck;
720                       var count;
721                       id check;
722                  run;
723                  data mess (keep=headerfailmess);
724                       length headerfailmess $1000;
725                       retain headerfailmess;
726                       set pg_header end=last;
727                       if strip(lowcase(check))="fail" then do;
728                            fcounter+1;
729                            if fcounter>1 then ms = ", "||strip(put(fcounter,8.))||") "||strip(message);
730                            else ms = strip(put(fcounter,8.))||") "||strip(message);
731                            headerfailmess = strip(headerfailmess)||strip(ms);
732                       end;
733                       if last;
734                       if strip(headerfailmess)="" then headerfailmess="All pass";
735                  run;
736                  data pg_headercombA (keep=headersummary headerfailmess pgm);
737                       length pgm $&sas_program_len;
738                       merge thck mess;
739                       if missing(fail) then fail=0;
740                       if missing(pass) then pass=0;
741                       headersummary = strip(put(fail,8.))||' Fails, '||strip(put(pass,8.))||' Pass';
742                       pgm=scan("&sasprogrampath1",-1,'/\');
743                  run;
744                  data fiprograms (keep=pgm lastModifiedBy);
                                                                                             The SAS System

745                       length pgm $&sas_program_len;
746                       set fi_programs;
747                       pgm=scan(path,-1,'/\');
748                  run;
749                  data pg_headercomb;
750                       merge pg_headercombA (in=a) fiprograms;
751                       by pgm;
752                       if a;
753                  run;
754
755                  /*this json file to keep the link between sas program and manifest file*/
756                  data sasprog;
757                       merge sasprogram pg_headercomb;
758                       rename jobManifestPath=manifestname pgm=sas_program;
759                  run;
760             %end;
761             %else %do;
762                  data sasprog;
763                       set sasprogram ;
764                       rename jobManifestPath=manifestname pgm=sas_program;
765                  run;
766             %end;
767
768        /*     filename ox  "&_sasws_.&repath./documents/meta/programs_&sasprogramnoext1..json";*/
769             filename ox  "&workpath/programs_&sasprogramnoext1..json";
770
771             proc json out=ox pretty;
772                  export sasprog / nosastags;
773             run;
774             data _null_;
775                  LENGTH logtxtline $ 1500;
776                  INFILE "&workpath/programs_&sasprogramnoext1..json"
777                  DLM = "€" TRUNCOVER LRECL=1500;
778                  INPUT logtxtline;
779                  file "&_sasws_.&repath./documents/meta/programs_&sasprogramnoext1..json";
780                  varlen=length(logtxtline);
781                  put @1 logtxtline $varying1500. varlen;
782             run;
783
784        %mend permanifest;
785
786        %refreshmeta;
787
788        /*note, this doesn't capture the items just created with log2json */
789        %macro getdocmetalist;
790        %let docmetaexists=no;
791        %if %sysfunc(fileexist(&_sasws_.&repath./documents/meta)) %then %do;
792             %let docmetaexists=yes;
793        %end;
794        %put &=docmetaexists;
795        %if &docmetaexists=yes %then %do;
796             data documentsmeta;
797                  length fref $8 fname $200;
798                  did = filename(fref,"&_sasws_.&repath./documents/meta");
799                  did = dopen(fref);
800                  do i = 1 to dnum(did);
801                    fname = dread(did,i);
802                    output;
                                                                                             The SAS System

803                  end;
804                  did = dclose(did);
805                  did = filename(fref);
806                  keep fname;
807             run;
808        %end;
809        %else %do;
810             options nomprint;
811             %lsaf_getchildren(lsaf_path=&repath./documents/meta,LSAF_RECURSIVE=1,sas_dsname=work.docmeta_files);
812             options mprint;
813             data documentsmeta;
814                  length fname $200;
815                  set docmeta_files;
816                  fname=scan(path,-1,'/\');
817             run;
818        %end;
819        data &docmeta.._documentsmeta;
820             set documentsmeta;
821        run;
822        %mend getdocmetalist;
823        %getdocmetalist;
824
825        %macro getmetadata (type=programs);
826             data mnfprog ;
827                  set documentsmeta;
828                  where fname=:"&type._";
829                  if fname ne "log_dashboard.json";
830             run;
831
832             %let nbmnfprog=0;
833             data _null_;
834                  set mnfprog end=last;
835                  call symputx("mnfprog"||strip(put(_n_,8.)),strip(fname));
836                  if last then call symputx("nbmnfprog",strip(put(_n_,8.)));
837             run;
838             %put &=nbmnfprog;
839             %do h = 1 %to &nbmnfprog;
840                  %getjsonfile (&repath./documents/meta/&&mnfprog&h);
841
842                  %if &h=1 %then %do;
843                  data mngprog;
844                       set root;
845                       length jsonfile $150;
846                       jsonfile = "&&mnfprog&h";
847                  run;
848                  %end;
849                  %else %if &h>1 %then %do;
850                  %app(mngprog,root, %str(jsonfile = "&&mnfprog&h"));
851                  %end;
852
853             %end;
854             data &docmeta.._mnf&type mnf&type;
855                  %if &type=programs %then %do;
856                  length sas_program $&sas_program_len;
857                  format sas_program;
858                  informat sas_program;
859                  %end;
860                  set mngprog;
                                                                                             The SAS System

861             run;
862        %mend getmetadata;
863        %getmetadata (type=programs);
864        %getmetadata (type=log);
865
866        %macro createdashboard;
867        /*****************************/
868        /* Report 1 on program level */
869        /*****************************/
870        data sasprogramsext;
871             length sas_program $&sas_program_len;
872             set sasprograms;
873             if index(sas_program,'.sas')=0 then sas_program=strip(sas_program)||'.sas';
874             format sas_program;
875             informat sas_program;
876        run;
877        proc sort data=sasprogramsext;
878             by sas_program;
879        run;
880        data glue;
881             length sas_program $&sas_program_len;
882             set mnffiles;
883             sas_program=scan(referenceProgram,-1,'/\');
884        run;
885        proc sort data=glue out=job;
886             by sas_program;
887             where missing(referenceProgram) and index(path,'.log')>0;
888        run;
889        data joblog;
890             set mnflog;
891             jobname2 = tranwrd(scan(path,-1,'/\'),'.log','.job');
892             where index(path,'/job_')>0;
893             length logcheck $100;
894             logcheck = "clean";
895             if war ne 0 or err ne 0 or un ne 0 or note ne 0 then
896               logcheck=strip(put(err,8.))||' E'||'rrors, '||strip(put(war,8.))||' W'||'arnings, '||strip(put(un,8.))||' U'||'ninitialized, '||strip(put(note,8.))||' N'||'otes';
897        run;
898        proc sort data=mnfprograms;
899             by sas_program;
900        run;
901        data report1a;
902             merge sasprogramsext (in=a) mnfprograms;
903             by sas_program;
904             if a;
905             sasprog_exist = 'Yes';
906             if missing(manifestname) then do;
907                  sasprog_exist = 'No';
908             end;
909             jobname = tranwrd(scan(manifestname,-1,'/\'),'.mnf','.job');
910             rename headersummary = headercheck;
911        run;
912        proc sql;
913             create table report1 as
914             select *
915             from report1a left join joblog (drop=path ordinal_root jsonfile)
916             on report1a.jobname = joblog.jobname2
917             order by sas_program;
918        quit;
                                                                                             The SAS System

919        data report1a;
920             set report1;
921             if missing(manifestname) then do;
922                  logcheck = 'no log!';
923                  jobname = 'no job';
924             end;
925        run;
926        data report1;
927             set report1a;
928             keep headercheck headerfailmess lastModifiedBy logcheck manifestname message path sas_program sasprog_exist line war err un note f_msg;
929        run;
930        data report1;
931             set report1a;
932        run;
933        filename r1  "&workpath/report1.json";
934         proc json out=r1 pretty nosastags;
935            export report1 ;
936         run;
937
938        /****************************/
939        /* Report 2 on output level */
940        /****************************/
941        data repoutputs;
942             length sas_program $&sas_program_len;
943
944             set repemeta (rename=(type=oritype));
945             order = _n_;
946             where not missing(sas_program) and (not missing(dataset) or not missing (num));
947             length output $100 type $50;
948             output = outputfilename;
949             if not missing(dataset) then do;
950                  type = "Dataset";
951             end;
952             else do;
953                  type = oritype;
954             end;
955             if index(sas_program,'.sas')=0 then sas_program=strip(sas_program)||'.sas';
956             format sas_program;
957             informat sas_program;
958        run;
959        %macro getoutputfiles(type, dsetin);
960             %if %sysfunc(exist(&dsetin)) %then %do;
961                  data output&type (keep=path&type output lastModifiedBy&type dateLastModified&type);
962                       set &dsetin;
963                       where index(name,".&type")>0;
964                       length output $100;
965                       output = tranwrd(name,".&type",'');
966                       rename path=path&type;
967                       rename lastModifiedBy=lastModifiedBy&type;
968                       rename dateLastModified=dateLastModified&type;
969                  run;
970                  proc sort data=output&type nodupkey;
971                       by output;
972                  run;
973             %end;
974             %else %do;
975                  data output&type (keep=path&type output lastModifiedBy&type dateLastModified&type);
976                       set fi_output (obs=0);
                                                                                             The SAS System

977                       length output $100;
978                       output = tranwrd(name,".&type",'');
979                       rename path=path&type;
980                       rename lastModifiedBy=lastModifiedBy&type;
981                       rename dateLastModified=dateLastModified&type;
982                  run;
983             %end;
984        %mend getoutputfiles;
985        %getoutputfiles(lst, fi_output);
986        %getoutputfiles(txt, fi_output_txt);
987        %getoutputfiles(svg, fi_output_svg);
988        %getoutputfiles(pdf, fi_output_pdf);
989        %getoutputfiles(log, fi_log);
990
991        data modified_outputsvg;
992            set outputsvg;
993            do i=2 to length(output)-1;
994                c0=substr(output,i-1,1);
995                c1=substr(output,i,1);
996                c2=substr(output,i+1,1);
997                if c1='_' and '0'<=c0<='9'  and '0'<=c2<='9' then substr(output,i,1)='.' ;
998            end ;
999        run ;
1000
1001       data alloutputfiles;
1002            merge outputlst (in=a) outputtxt (in=b) outputpdf (in=c) outputlog (in=d) modified_outputsvg(in=e);
1003            by output;
1004            if a or b or c or e then tlf=1;
1005            if missing(pathtxt) then pathtxt='';
1006            if missing(pathpdf) then pathpdf='';
1007            if missing(pathsvg) then pathsvg='';
1008            if missing(lastModifiedBylst) then lastModifiedBylst='';
1009            if missing(lastModifiedBytxt) then lastModifiedBytxt='';
1010            if missing(lastModifiedBysvg) then lastModifiedBysvg='';
1011            if missing(lastModifiedBypdf) then lastModifiedBypdf='';
1012            if missing(dateLastModifiedlst) then dateLastModifiedlst=.;
1013            if missing(dateLastModifiedtxt) then dateLastModifiedtxt=.;
1014            if missing(dateLastModifiedsvg) then dateLastModifiedsvg=.;
1015            if missing(dateLastModifiedpdf) then dateLastModifiedpdf=.;
1016            if missing(dateLastModifiedlog) then dateLastModifiedlog=.;
1017       run;
1018       proc sql;
1019            create table repoutputs2 as
1020            select a.*, b.manifestname, b.lastModifiedBy as lastModifiedByprg
1021            from repoutputs as a left join mnfprograms as b
1022            on a.sas_program=b.sas_program
1023            order by order;
1024
1025            create table repoutputs3 as
1026            select a.*, b.pathlst, b.pathtxt, b.pathsvg, b.pathpdf, b.pathlog, b.lastModifiedBylst, b.lastModifiedBytxt,  b.lastModifiedBysvg, b.lastModifiedBypdf, b.lastModifiedBylog
1027            , b.dateLastModifiedlst, b.dateLastModifiedtxt, b.dateLastModifiedsvg, b.dateLastModifiedpdf, b.dateLastModifiedlog
1028            from repoutputs2 as a left join alloutputfiles as b
1029            on a.output=b.output
1030            order by order;
1031
1032       quit;
1033       data dsets;
1034            set mnffiles (where=(index(path,'.sas7bdat')>0));
                                                                                             The SAS System

1035            if index(path,'repemeta')=0 and  index(path,'repesource')=0;
1036            if missing(dataset) then dataset="";
1037       run;
1038       data dsetlogs;
1039            set mnffiles (where=(index(path,'.log')>0));
1040            if not missing(referenceProgram);
1041       run;
1042       proc sql;
1043            create table repoutputs5 as
1044            select a.*, b.path as datasetpath
1045            from repoutputs3 as a left join dsets as b
1046            on a.sas_program=b.sas_program and index(lowcase(b.path),lowcase(strip(a.dataset)))>0
1047            order by order;
1048       quit;
1049       proc sql;
1050            create table repoutputs6 as
1051            select a.*, b.path as datasetlogpath
1052            from repoutputs5 as a left join dsetlogs as b
1053            on a.sas_program=b.sas_program and not missing(a.dataset)
1054            order by order;
1055       quit;
1056            /*retrieve programmer of datasets*/
1057       %macro noneed;
1058            data dsetlogpath;
1059                 set repoutputs6 (keep=datasetlogpath);
1060                 where not missing(datasetlogpath);
1061                 logname = scan(datasetlogpath,-1,'/\');
1062                 logfolder = substr(datasetlogpath,1,index(datasetlogpath,strip(logname))-2);
1063                 lf = strip(tranwrd(logfolder, "&repath", ''));
1064                 if substr(lf,1,1)in ('/' '\') then lf=strip(substr(lf,2));
1065            run;
1066            proc sort data=dsetlogpath nodupkey;
1067                 by logfolder;
1068            run;
1069            data &docmeta.._dsetlogpath;
1070                 set dsetlogpath;
1071            run;
1072            %let nbdsetfolders=0;
1073            data _null_;
1074                 set dsetlogpath end=last;
1075                 call symputx("dsetfolder"||strip(put(_n_,8.)),strip(lf));
1076                 if last then call symputx("nbdsetfolders",strip(put(_n_,8.)));
1077            run;
1078            %do lf=1 %to &nbdsetfolders;
1079                 %put dsetfolder&lf=&&dsetfolder&lf;
1080                 %let fldrx = %sysfunc(tranwrd(&&dsetfolder&lf,/,_));
1081                 %if %sysfunc(exist(fi_&fldrx))=0 %then %do;
1082                 %getlsaffolderinfo(folder=&&dsetfolder&lf);
1083                 %end;
1084                 data &docmeta.._fi&lf fi&lf;
1085                      set fi_&fldrx;
1086                 run;
1087            %end;
1088       %mend noneed;
1089
1090       data adddsetlog;
1091            set repoutputs6;
1092            if not missing (dataset) then do;
                                                                                             The SAS System

1093                 pathlog=datasetlogpath;
1094            end;
1095       run;
1096       proc sql;
1097            create table repoutputs7 as
1098            select a.*, b.*
1099            from adddsetlog as a left join mnflog (where=(message="Summary")) as b
1100            on strip(a.pathlog)=strip(b.path)
1101            order by order;
1102       quit;
1103
1104       %if &splistonlsaf=yes and &eventtype=reportingevent %then %do;
1105            data qcstatus;
1106                 set splist;
1107                 length qcpath $1000;
1108                 clinidx = index(href,'/clinical');
1109                 qcpath = substr(href,clinidx);
1110                 keep qcpath href status reviewer reviewmethod;
1111            run;
1112            proc sql;
1113                 create table repoutputs8 as
1114                 select a.*, b.status as qcstatus length=100, b.reviewer, b.reviewmethod
1115                 from repoutputs7 as a left join qcstatus as b
1116                 on (strip(a.datasetpath)=strip(b.qcpath) or strip(a.pathtxt)=strip(b.qcpath) or strip(a.pathlst)=strip(b.qcpath))
1117                 order by order;
1118            quit;
1119       /*     data _null_;*/
1120       /*          set repoutputs8;*/
1121       /*          if _n_<10 then do;*/
1122       /*          put _all_;*/
1123       /*          end;*/
1124       /*     run;*/
1125       %end;
1126       %else %do;
1127            data repoutputs8;
1128                 set repoutputs7;
1129            run;
1130       %end;
1131
1132       data report2a;
1133            length logcheck qcstatus $100 txtoutput pdfoutput $2 programmer $50 ;
1134            set repoutputs8;
1135            logcheck = "clean";
1136            if war ne 0 or err ne 0 or un ne 0 or note ne 0 then
1137                 logcheck=strip(put(err,8.))||' E'||'rrors, '||strip(put(war,8.))||' W'||'arnings, '||strip(put(un,8.))||' U'||'ninitialized, '||strip(put(note,8.))||' N'||'otes';
1138            if missing(pathlog) then logcheck='no log!';
1139            if missing(pathlst) and missing(dataset) then logcheck='';
1140            if not missing(pathlst) or not missing(pathtxt) or not missing(pathsvg) then txtoutput='Y';
1141            else txtoutput='N';
1142            if not missing(pathpdf) then pdfoutput='Y';
1143            else pdfoutput='N';
1144
1145            if not missing (dataset) then do;
1146                 txtoutput='NA';
1147                 pdfoutput='NA';
1148                 output = dataset;
1149            end;
1150            if not missing(lastModifiedByprg) then programmer = lastModifiedByprg;
                                                                                             The SAS System

1151            else do;
1152                 if not missing(lastModifiedBytxt) then programmer = lastModifiedBytxt;
1153                 if not missing(lastModifiedBylst) then programmer = lastModifiedBylst;
1154                 if missing(programmer) and not missing(dataset) and not missing(lastModifiedBylog) then programmer = lastModifiedBylog;
1155            end;
1156
1157            if missing(pathtxt) and not missing(pathlst) then pathtxt=pathlst;
1158
1159            if missing(qcstatus) then qcstatus="";
1160            tlf_log = dateLastModifiedlog;
1161       /*      format tlf_log yymmdd10.; */
1162            if missing(tlf_log) and not missing(dateLastModifiedlst) then tlf_log = dateLastModifiedlst;
1163
1164            * if we have svg then use that for figure in txt column ;
1165            if type='Figure' and not missing(pathsvg) then pathtxt=pathsvg ;
1166       run;
1167       data report2;
1168            set report2a;
1169            keep Analysis_Set DATASET Num Section Title datasetlogpath datasetpath dateLastModifiedlog dateLastModifiedlst logcheck message outputfilename
1170                 pathlog programmer qcstatus sas_program type line war err un note f_msg;
1171       run;
1172       data report2;
1173            set report2a;
1174       run;
1175        filename r2  "&workpath/report2.json";
1176        proc json out=r2 pretty nosastags;
1177           export report2 ;
1178        run;
1179       data outputlogissuessumm (keep=output logcheck order path);
1180            set mnflog (where=(message eq "Summary"));
1181            length logcheck output $100;
1182            output = tranwrd(jsonfile,'.json','.log');
1183            if output=:'log_' then output=substr(output,5);
1184            order=1;
1185            if war ne 0 or err ne 0 or un ne 0 or note ne 0 then do;
1186                 logcheck=strip(put(err,8.))||' E'||'rrors, '||strip(put(war,8.))||' W'||'arnings, '||strip(put(un,8.))||' U'||'ninitialized, '||strip(put(note,8.))||' N'||'otes';
1187                 output;
1188            end;
1189       run;
1190       proc sort data=outputlogissuessumm;
1191            by output;
1192       run;
1193       data outputlogissues;
1194            set mnflog (where=(message ne "Summary"));
1195            length output $100;
1196            output = tranwrd(jsonfile,'.json','.log');
1197            if output=:'log_' then output=substr(output,5);
1198            length issuetype $13;
1199            if err then issuetype='E'||'rror';
1200            else if war then issuetype='W'||'arning';
1201            else if un then issuetype='Un'||'initialized';
1202            else if note then issuetype='N'||'ote';
1203            order = 2;
1204       run;
1205       proc sort data=outputlogissues;
1206            by output order descending err descending war descending un message;
1207       run;
1208       data outputlogissues;
                                                                                             The SAS System

1209            set outputlogissues;
1210            by output order descending err descending war descending un message;
1211            if first.output then issuenr = 0;
1212            issuenr + 1;
1213       run;
1214       data outputlogreport;
1215            length col1 col2 $1500;
1216            set outputlogissuessumm (in=a) outputlogissues (in=b);
1217            by output order;
1218            if a then col1 = output;
1219            if a then issuenr=0;
1220            if b then col1 = put(issuenr,5.);
1221
1222            if a then col2=logcheck;
1223            if b then col2=message;
1224       run;
1225
1226       /***************************/
1227       /*   oversight documents   */
1228       /***************************/
1229       %if &oversight.=Y %then %do;
1230           proc sort data=fi____documents; by name datelastmodified; run;
1231           data dSAP;
1232               set fi____documents(where=(index(lowcase(name),"sap") or index(lowcase(name),"statistical analysis plan"))) end=eof;
1233               by name datelastmodified;
1234               if eof;
1235           run;
1236           data dBSOP;
1237               set fi____documents(where=(index(lowcase(name),"bsop"))) end=eof;
1238               by name datelastmodified;
1239               if eof;
1240           run;
1241
1242           data croshell;
1243               length doc $10;
1244               ord=1; doc="SAP"; output;
1245               ord=2; doc="BSOP"; output;
1246           run;
1247
1248           data croosdocs1;
1249               set dsap(in=a) dbsop(in=b);
1250               length doc $10;
1251               if a then doc="SAP";
1252               if b then doc="BSOP";
1253               keep doc name path datelastmodified;
1254           run;
1255
1256           proc sort data=croshell; by doc; run;
1257           proc sort data=croosdocs1; by doc; run;
1258
1259           data croosdocs;
1260               merge croshell croosdocs1;
1261               by doc;
1262               if ord=1 and name="" then name="<missing>";
1263               if ord=2 and name="" then name="<missing>";
1264           run;
1265
1266           proc sort data=croosdocs; by ord; run;
                                                                                             The SAS System

1267
1268           filename crd  "&workpath/croosdocs.json";
1269           proc json out=crd pretty;
1270               export croosdocs / nosastags;
1271           run;
1272       %end;
1273
1274
1275       /*********************/
1276       /* create report     */
1277       /*********************/
1278       %let logviewer=https://xarprod.ondemand.sas.com/lsaf/filedownload/sdd%3A///general/biostat/tools/logviewer/index.html;
1279       %let fileviewer=https://xarprod.ondemand.sas.com/lsaf/filedownload/sdd%3A/general/biostat/tools/fileviewer/index.html;
1280       data _null_;
1281            retext = tranwrd(tranwrd(upcase(strip("&REPATH")),'/CLINICAL',''),'BIOSTAT/STAGING/','');
1282            call symputx('retext',compress(lowcase(strip(retext))));
1283       run;
1284
1285       * gather together other bits of info that will be needed to create the dashboard ;
1286       data info ;
1287           retext="%superq(retext)";
1288           REPATH="%superq(REPATH)";
1289           splistmessage="%superq(splistmessage)";
1290           splisturl="%superq(splisturl)";
1291           SPLISTISS="%superq(SPLISTISS)";
1292           SPLISTONLSAF="%superq(SPLISTONLSAF)";
1293           SPLISTSTATUS="%superq(SPLISTSTATUS)";
1294           statusReportCreateDate="&sysdate";
1295           statusReportCreateTime="&systime";
1296           study="%superq(study)";
1297           compound="%superq(compound)";
1298           EVENTTYPE="%superq(EVENTTYPE)";
1299           INDICATION="%superq(INDICATION)";
1300           REVENT="%superq(REVENT)";
1301       run ;
1302       * make dummy dataset so that we avoid some errors in proc json;
1303       data outputsummary ;
1304           delete;
1305       run ;
1306
1307       options ls=160 ps=50;
1308
1309       /* %let icon=%str(<link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%2210 0 100 100%22><text y=%22.90em%22
1309     ! font-size=%2290%22>👽</text></svg>">); */
1310       %let icon=%str(<link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%2210 0 100 100%22><text y=%22.90em%22 font-size=%2290%22>😷</text></svg>">);
1311
1312       ods html5
1313           style=Meadow
1314           path="&_sasws_.&repath./documents"
1315           body="projectstatus.html" (TITLE="&study")
1316           options(svg_mode="inline" title="dashboard")
1317           HEADTEXT= "%superq(icon)";
1318
1319       title; footnote; options nodate missing=' ' ps=45 ls=140;
1320       ods escapechar="^";
1321       ods layout gridded advance=explicit columns=2 column_gutter=2;
1322       /*ods text="&compound./&indication./&study./&revent - Status report created on &sysdate &systime GMT";*/
1323       ods text="&retext - Status report created on &sysdate &systime GMT";
                                                                                             The SAS System

1324       ods region column=1;
1325       ods text="placeholder docs";
1326       %if &oversight.=Y %then %do;
1327            proc report data=croosdocs split='!' headline;
1328                 column path doc name datelastmodified;
1329                 define path               / noprint;
1330                 define doc                / width = 10 "Document" flow        style(column)=[cellwidth=0.5in];
1331                 define name               / width = 60 "Name" flow            style(column)=[cellwidth=3.5in];
1332                 define datelastmodified   / width = 20 "Last Modified" flow   style(column)=[cellwidth=1in];
1333
1334                 compute name ;
1335                      if name = "<missing>" then do;
1336                           call define(_col_, 'style', 'style=[backgroundcolor=red]');
1337                           end;
1338                      else if name ^in ("","<missing>") then do;
1339                          call define(_col_, 'URL', "https://xarprod.ondemand.sas.com/lsaf/filedownload/sdd%3A//"||strip(path));
1340                          call define(_col_, 'style', 'style={flyover="Click to go to file"}');
1341                      end;
1342                 endcomp;
1343
1344            run;
1345       %end;
1346            proc report data=report1 split='!' headline;
1347                 column sas_program sasprog_exist jobname logcheck headercheck;
1348                 define sas_program    / width = 40 "SAS program" flow                           style(column)=[cellwidth=1.4in];
1349                 define sasprog_exist  / width = 15 format=$3. "Program file!exists" flow        style(column)=[cellwidth=0.7in];
1350                 define jobname      / width = 40  "Job file" flow            style(column)=[cellwidth=0.7in];
1351                 define logcheck       / width = 15 "Job log file" flow                              style(column)=[cellwidth=2.5in];
1352                 define headercheck    / width = 15 "Program header checks" flow                 style(column)=[cellwidth=1in];
1353            run;
1354            proc report data=report1 (where=(lowcase(strip(headerfailmess)) not in ("" "all pass"))) split='!' headline;
1355                 column sas_program headercheck headerfailmess;
1356                 define sas_program / width = 40 "SAS program" flow             style(column)=[cellwidth=1.4in];
1357                 define headercheck / width = 15 "Program header checks" flow   style(column)=[cellwidth=1in];
1358                 define headerfailmess / width = 120 "detail" flow                 style(column)=[cellwidth=4.6in];
1359            run;
1360            proc report data=outputlogreport split='!' headline;
1361                 column output order issuenr path col1 col2;
1362                 define output      / order noprint;
1363                 define order       / order noprint;
1364                 define issuenr     / order noprint;
1365                 define path        / noprint;
1366                 define col1        / width = 30 "Log output" flow style(column)=[cellwidth=1.4in];
1367                 define col2        / width = 60 "Message" flow    style(column)=[cellwidth=5.5in];
1368                 compute col1 ;
1369                      if index(col1,'.log') >0 then do;
1370                      call define(_col_, 'URL', "%superq(logviewer)?log=https://xarprod.ondemand.sas.com/lsaf/filedownload/sdd%3A//"||strip(path));
1371                      call define(_col_, 'style', 'style={flyover="Click to go to log file"}');
1372                      end;
1373                 endcomp;
1374                 compute col2 ;
1375                      if index(col2,'ERROR:')>0 then call define (_col_,'style',"style={background=pink}");
1376                      if index(col2,'WARNING:')>0 then call define (_col_,'style',"style={background=lightgreen}");
1377                 endcomp;
1378            run;
1379
1380            ods region column=2;
1381
                                                                                             The SAS System

1382       ods text="&splistmessage";
1383            proc report data=report2 split='!' headline;
1384                 column section type output pathtxt pathpdf txtoutput pdfoutput logcheck tlf_log programmer %if &eventtype=reportingevent %then qcstatus;;
1385                 define section    / width = 30 "SAP section" flow;
1386                 define type       / width = 10 "Output!type" flow;
1387                 define output   / width = 25 "Output" flow;
1388                 define pathtxt   / noprint;
1389                 define pathpdf   / noprint;
1390                 define txtoutput   / width = 25 "txt" flow;
1391                 define pdfoutput   / width = 25 "pdf" flow;
1392                 define logcheck       / width = 15 "Output log file" flow ;
1393                 define tlf_log    / width = 19 format=datetime19. "Last!Modification" flow;
1394                 define programmer     / width = 25 "Programmer" flow;
1395                 %if &eventtype=reportingevent %then %do;
1396                 define qcstatus     / width = 25 "QC status" flow;
1397                 %end;
1398                 compute txtoutput ;
1399                      if txtoutput="Y" then do;
1400                      call define(_col_, 'URL', "https://xarprod.ondemand.sas.com/lsaf/filedownload/sdd%3A//"||strip(pathtxt));
1401                      call define(_col_, 'style', 'style={flyover="Click to go to txt file"}');
1402                      call define('type', 'URL', "%superq(fileviewer)?file=https://xarprod.ondemand.sas.com/lsaf/filedownload/sdd%3A//"||strip(pathtxt));
1403                      call define('type', 'style', 'style={flyover="File Viewer"}');
1404                      end;
1405                 endcomp;
1406                 compute pdfoutput ;
1407                      if pdfoutput="Y" then do;
1408                      call define(_col_, 'URL', "https://xarprod.ondemand.sas.com/lsaf/filedownload/sdd%3A//"||strip(pathpdf));
1409                      call define(_col_, 'style', 'style={flyover="Click to go download pdf file"}');
1410                      end;
1411                 endcomp;
1412                 compute logcheck ;
1413                      if logcheck="no log!" then do;
1414                      call define(_col_, 'style', 'style=[backgroundcolor=red]');
1415                      end;
1416                 endcomp;
1417            run;
1418
1419            ods layout end;
1420            ods _all_ close;
1421            ods listing;
1422
1423
1424
1425       %mend;
1426       %createdashboard;
1427
1428
1429               /*********************/
1430                 /* create summaries  */
1431                 /*********************/
1432                 /*PROGRAMS*/
1433                 data perexprogram;
1434                      set report1;
1435                      denomline = (not missing(SAS_Program));
1436                 run;
1437
1438                 proc freq data=perexprogram noprint;
1439                      table denomline / norow nocol nocum nopercent out=f_progr1 (rename=(count=expectedprograms));
                                                                                             The SAS System

1440                      where sasprog_exist in ("Yes" "No");
1441                 run;
1442                 proc freq data=perexprogram noprint;
1443                      table denomline / norow nocol nocum nopercent out=f_progr2 (rename=(count=cleanprograms));
1444                      where sasprog_exist="Yes" and logcheck="clean" and headerfailmess="All pass";
1445                 run;
1446                 proc freq data=perexprogram noprint;
1447                      table denomline / norow nocol nocum nopercent out=f_progr3 (rename=(count=issueprograms));
1448                      where sasprog_exist="Yes" and (logcheck ne "clean" or  headerfailmess ne "All pass");
1449                 run;
1450                 %let ep=0;
1451                 %let expected_program=0;
1452                 %let clean_program=0;
1453                 %let issue_program=0;
1454                 data programsummary;
1455                      merge f_progr1 f_progr2 f_progr3;
1456                      if missing(expectedprograms) then expectedprograms = 0;
1457                      if missing(cleanprograms) then cleanprograms = 0;
1458                      if missing(issueprograms) then issueprograms = 0;
1459                      if cleanprograms + issueprograms > expectedprograms then put 'W' 'ARNING: check number of programs';
1460                      call symputx('ep',strip(put(expectedprograms,8.)));
1461                      call symputx('expected_program',strip(put(expectedprograms-cleanprograms-issueprograms,8.)));
1462                      call symputx('clean_program',strip(put(cleanprograms,8.)));
1463                      call symputx('issue_program',strip(put(issueprograms,8.)));
1464                 run;
1465                 %put &=ep &=expected_program &=clean_program &=issue_program ;
1466
1467                 /*OUTPUTS*/
1468                 data dashboard;
1469                      set report2;
1470                      denomline = (not missing(output));
1471                 run;
1472
1473                 proc freq data=dashboard noprint;
1474                      table denomline / norow nocol nocum nopercent out=f_out1 (rename=(count=expectedoutputs));
1475                      where not missing(SAS_Program) or not missing(title) or not missing(dataset);
1476                 run;
1477                 proc freq data=dashboard noprint;
1478                      table denomline / norow nocol nocum nopercent out=f_out2 (rename=(count=createdoutputs));
1479                      where not missing(manifestname);
1480                 run;
1481                 proc freq data=dashboard noprint;
1482                      table denomline / norow nocol nocum nopercent out=f_out3 (rename=(count=cleanoutputs));
1483                      where not missing(manifestname) and logcheck eq "clean";
1484                 run;
1485                 proc freq data=dashboard noprint;
1486                      table denomline / norow nocol nocum nopercent out=f_out4 (rename=(count=issueoutputs));
1487                      where not missing(manifestname) and logcheck ne "clean";
1488                 run;
1489                 %let eo=0;
1490                 %let expected_outputs=0;
1491                 %let clean_outputs=0;
1492                 %let issue_outputs=0;
1493                 data outputsummary;
1494                      merge f_out1 f_out2 f_out3 f_out4;
1495                      if missing(expectedoutputs) then expectedoutputs = 0;
1496                      if missing(createdoutputs) then createdoutputs = 0;
1497                      if missing(cleanoutputs) then cleanoutputs = 0;
                                                                                             The SAS System

1498                      if missing(issueoutputs) then issueoutputs = 0;
1499                      if cleanoutputs + issueoutputs > createdoutputs then put 'W' 'ARNING: check number of outputs';
1500                      if createdoutputs > expectedoutputs then put 'W' 'ARNING: check number of outputs';
1501                      call symputx('eo',strip(put(expectedoutputs,8.)));
1502                      call symputx('expected_outputs',strip(put(expectedoutputs-createdoutputs,8.)));
1503                      call symputx('clean_outputs',strip(put(cleanoutputs,8.)));
1504                      call symputx('issue_outputs',strip(put(issueoutputs,8.)));
1505                 run;
1506                 %put &=eo  &=expected_outputs &=clean_outputs &=issue_outputs ;
1507
1508
1509        %macro addjs;
1510
1511                      %let pathprefix=&_sasws_.;
1512                      %let expected_docs=0;
1513
1514                      DATA _HTMLCODE0;
1515                           LENGTH htmlcode $ 1500;
1516                           INFILE "&_sasws_.&repath./documents/projectstatus.html"
1517                           DLM = "€" TRUNCOVER LRECL=1500;
1518                           INPUT htmlcode;
1519                           ID=_N_;
1520                      RUN;
1521
1522            %let crolistexists=no;
1523            options nomprint;
1524            %lsaf_exists(lsaf_path=&splistiss);
1525            options mprint;
1526            %put &=_lsafExists_;
1527            %if &_lsafExists_=1 %then %do;
1528                 %let crolistexists=yes;
1529            %end;
1530
1531                      DATA jsscriptstart;
1532                           LENGTH htmlcode $ 1500;
1533                           htmlcode='<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>'; output;
1534       /*                    %if &runenvironment ne local %then*/
1535       /*                    htmlcode='<script src="/general/biostat/jobs/dashboard/dev/programs/chart-bundle-min.js"></script>'; */
1536       /*                    %else */
1537       /*                    htmlcode='<script src="' ||"&_sasws_./general/biostat/jobs/dashboard/dev/programs/chart-bundle-min.js"||'"></script>'; */
1538                           htmlcode='<script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.4/dist/Chart.min.js"></script>';
1539                           output;
1540                           %if &crolistexists=yes %then %do;
1541                           htmlcode='<script src="https://xarprod.ondemand.sas.com/lsaf/filedownload/sdd%3A///general/biostat/jobs/dashboard/dev/programs/doughnut.js"></script>'; output;
1542                           htmlcode='<script src="https://xarprod.ondemand.sas.com/lsaf/filedownload/sdd%3A//'||strip("&splistiss")||'"></script>'; output;
1543                           htmlcode='<script src="https://xarprod.ondemand.sas.com/lsaf/filedownload/sdd%3A//'||strip("&spliststatus")||'"></script>'; output;
1544                           %end;
1545                      run;
1546                      DATA jsscript;
1547                           LENGTH htmlcode $ 1500;
1548                           INFILE "&pathprefix.&progpath.jsscript.txt"
1549                           DLM = "€" TRUNCOVER LRECL=1500;
1550                           INPUT htmlcode;
1551                           ID=_N_;
1552                      RUN;
1553                      %let nb_bars=1;
1554                      /*assume programs always exist*/
1555                      data h;
                                                                                             The SAS System

1556                           length h1 h2 h3 h4 $150 h 8;
1557                           h=1;
1558                           %if &expected_docs>0 %then %do;
1559                                h1 = "'Documents','Programs ("||"&ep"||")'";
1560                                h2 = "&clean_docs,&clean_program";
1561                                h3 = "&issue_docs,&issue_program";
1562                                h4 = "&expected_docs,&expected_program";
1563                           %end;
1564                           %else %do;
1565                                h1 = "'Programs ("||"&ep"||")'";
1566                                h2 = "&clean_program";
1567                                h3 = "&issue_program";
1568                                h4 = "&expected_program";
1569                           %end;
1570                      run;
1571                      %if &eo>0 %then %do;
1572                           data h;
1573                                set h;
1574                                h1 = strip(h1)||",'Outputs ("||"&eo"||")'";
1575                                h2 = strip(h2)||",&clean_outputs";
1576                                h3 = strip(h3)||",&issue_outputs";
1577                                h4 = strip(h4)||",&expected_outputs";
1578                           run;
1579                      %end;
1580                      %if &crolistexists=yes %then %do;
1581                      DATA doughnuthtml;
1582                           LENGTH htmlcode $ 1500;
1583                           INFILE "&pathprefix.&progpath.doughnut.txt"
1584                           DLM = "€" TRUNCOVER LRECL=1500;
1585                           INPUT htmlcode;
1586                           ID=_N_;
1587                           h=1;
1588                      run;
1589                      %end;
1590                      DATA barXX;
1591                           LENGTH htmlcode $ 1500;
1592                           INFILE "&pathprefix.&progpath.bar.txt"
1593                           DLM = "€" TRUNCOVER LRECL=1500;
1594                           INPUT htmlcode;
1595                           ID=_N_;
1596                           h=1;
1597                      run;
1598                      data bar;
1599                           merge barXX h;
1600                           by h;
1601
1602                           htmlcode = tranwrd(htmlcode,'barlabels',strip(h1));
1603                           htmlcode = tranwrd(htmlcode,'datacompleted',strip(h2));
1604                           htmlcode = tranwrd(htmlcode,'dataissues',strip(h3));
1605                           htmlcode = tranwrd(htmlcode,'dataexpected',strip(h4));
1606                      RUN;
1607
1608       /*               DATA bar;*/
1609       /*                    LENGTH htmlcode $ 1500;*/
1610       /*                    INFILE "&pathprefix.&progpath.bar.txt"*/
1611       /*                    DLM = "€" TRUNCOVER LRECL=1500;*/
1612       /*                    INPUT htmlcode;*/
1613       /*                    ID=_N_;*/
                                                                                             The SAS System

1614       /*                    htmlcode = tranwrd(htmlcode,'barlabels',"'Documents','Programs','Outputs'");*/
1615       /*                    htmlcode = tranwrd(htmlcode,'datacompleted',"3,&clean_program, 12");*/
1616       /*                    htmlcode = tranwrd(htmlcode,'dataissues',"1,&issue_program,1");*/
1617       /*                    htmlcode = tranwrd(htmlcode,'dataexpected',"0,&expected_program,2");*/
1618
1619       /*                    htmlcode = tranwrd(htmlcode,'barlabels',"'Programs'");*/
1620       /*                    htmlcode = tranwrd(htmlcode,'datacompleted',"&clean_program");*/
1621       /*                    htmlcode = tranwrd(htmlcode,'dataissues',"&issue_program");*/
1622       /*                    htmlcode = tranwrd(htmlcode,'dataexpected',"&expected_program");*/
1623       /*               RUN;*/
1624
1625                      data h1 p1 p2;
1626                           retain h f 0;
1627                           set _HTMLCODE0;
1628
1629                           idhead = index(htmlcode,'<meta content="SAS 9.4" name="generator"/>');
1630                           if h = 0 then do;
1631                                output h1;
1632                                if idhead>0 then h=1;
1633                           end;
1634                           else do;
1635                                idx = index(htmlcode,'<p class="m usertext" style="border-spacing: 0">placeholder docs</p>');
1636
1637                                if idx>0 then do;
1638                                     f = 1;
1639                                     part1 = substr(htmlcode,1,idx-1);
1640                                     part2 = substr(htmlcode,idx+length('<p class="m usertext" style="border-spacing: 0">placeholder docs</p>'));
1641                                     htmlcode=part1;
1642                                     output p1;
1643
1644                                     htmlcode=part2;
1645                                     output p2;
1646                                end;
1647                                if f=0 then output p1;
1648                                if f=1 then output p2;
1649                           end;
1650                      run;
1651                      data p1;
1652                           set p1;
1653                           htmlcode = tranwrd(htmlcode, '<a href', '<a target="_blank" href');
1654                      run;
1655                      data p2;
1656                           set p2;
1657                           htmlcode = tranwrd(htmlcode, '<a href', '<a target="_blank" href');
1658                      run;
1659                      data result;
1660                           set h1 jsscriptstart jsscript p1 %if &crolistexists=yes %then doughnuthtml; bar p2;
1661                      run;
1662                        ** Produce revised HTML file **;
1663                       data _null_;
1664                            set result;
1665                            file "&_sasws_.&repath./documents/projectstatus.html";
1666                            varlen=length(htmlcode);
1667                            put @1 htmlcode $varying1500. varlen;
1668                       run;
1669                 %mend addjs;
1670                 %addjs;
1671
                                                                                             The SAS System

1672       %clock(&dbstartdatetime);
1673
1674       %macro fix_empty_file(file) ;
1675           %let dsid=%sysfunc(open(&file));
1676           %let nobs=%sysfunc(attrn(&dsid,nobs));
1677           %if &nobs=0 %then %do ;
1678               data _&file ;
1679                   empty=1;
1680               run ;
1681           %end ;
1682           %else %do ;
1683               data _&file ;
1684                   set &file ;
1685               run ;
1686           %end ;
1687           %let dsid=%sysfunc(close(&dsid));
1688       %mend fix_empty_file ;
1689       %fix_empty_file(programsummary);
1690       %fix_empty_file(outputsummary);
1691
1692       *** Create JSON files needed for dashboard ;
1693       filename dashjson  "&_sasws_.&repath./documents/meta/dashstudy.json" ;
1694       /*  filename dashjson "dashstudy.json"; */
1695        proc json out=dashjson pretty;
1696           write open object;
1697               write value "report1";
1698               write open array ;
1699                   export report1 / nosastags;
1700               write close ;
1701               write value "croosdocs";
1702               write open array ;
1703                   export croosdocs / nosastags;
1704               write close ;
1705               write value "report2";
1706               write open array ;
1707                   export report2 / nosastags;
1708               write close ;
1709               write value "outputlogreport";
1710               write open array ;
1711                   export outputlogreport / nosastags;
1712               write close ;
1713               write value "info";
1714               write open array ;
1715                   export info / nosastags;
1716               write close;
1717               write value 'graph1';
1718               write open object;
1719                   write value "Programs";
1720                       export _programsummary / nosastags;
1721                   write value "Outputs";
1722                       export _outputsummary / nosastags;
1723               write close;
1724            write close ;
1725       run;
1726
1727       %lsaf_search(lsaf_name=dashstudy.json);
1728       data lsafsearchinfo ;
1729           dsid=open('lsafsearch');
                                                                                             The SAS System

1730           nobs=attrn(dsid,'nobs');
1731          if &_lsafSearchLimitReached_ then do ;
1732           all_data='Not all data was loaded since the limit was reached.';
1733           complete=0;
1734           end;
1735          else do ;
1736          all_data='';
1737          complete=1;
1738          end;
1739          info="Data created using lsaf_search(lsaf_name=dashstudy.json) on %sysfunc(datetime(),datetime.). "||all_data;
1740          dsid=close(dsid);
1741       run ;
1742       proc sort data=lsafsearch ;
1743           by descending datelastmodified  ;
1744       run ;
1745       proc json out="&_sasws_./general/biostat/jobs/dashboard/dev/metadata/dash-study-files.json" pretty ;
1746          export lsafsearch ;
1747          export lsafsearchinfo ;
1748       run ;
1749
1750       proc printto;
1751       run;
1752
1753       /*filename logf "&_sasws_.&repath./documents/meta/dashboard.log";*/
1754       filename logf "&workpath/dashboard.log";
1755       options nomprint;
1756       %logchecker (pgend=0);
1757       options mprint;
1758
1759       %log2json (repoloc=&_sasws_.&repath./documents/meta/);
1760
1761       %macro copyfiles (__file);
1762       data _null_;
1763            LENGTH logtxtline $ 1500;
1764            INFILE "&workpath/&__file"
1765            DLM = "€" TRUNCOVER LRECL=1500;
1766            INPUT logtxtline;
1767            file "&_sasws_.&repath./documents/meta/&__file";
1768            varlen=length(logtxtline);
1769            put @1 logtxtline $varying1500. varlen;
1770       run;
1771       %mend copyfiles;
1772       %copyfiles (dashboard.log);
1773       %copyfiles (refreshedoutputs.json);
1774       %copyfiles (report1.json);
1775       %copyfiles (report2.json);
1776
1777       %end; /*if &repemetaexists=yes*/
1778       %else %do;
1779            ods html5 style=Meadow  path="&_sasws_.&repath./documents" body="projectstatus.html" options(svg_mode="inline");
1780            title; footnote; options nodate missing=' ' ps=45 ls=180;
1781            title1 "Status report &revent - created &sysdate";
1782            title2 "&compound./&indication./&study";
1783            data chk;
1784                 length txt $180;
1785                 txt = "Excel meta data is missing"; output;
1786                 txt = "repemeta.sas7bdat doesn't exist in &_sasws_./&repevpath.documents"; output;
1787                 label txt = "Message";
                                                                                             The SAS System

1788            run;
1789            proc print data=chk width=min noobs label;
1790            run;
1791            ods html close;
1792       %end;
1793       %end; /*if &isrepevent=yes*/
1794       %mend ppmacro;
1795       %ppmacro;
MPRINT(PPMACRO):   data _null_;
MPRINT(PPMACRO):  ;
MPRINT(PPMACRO):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


COMPOUND=argx-113
INDICATION=pemphigus
STUDY=argx-113-1904
REVENT=testrun2
OVERSIGHT=Y
MPRINT(PPMACRO):   options linesize=MAX;
MPRINT(PPMACRO):   proc printto log="/saswork/sas_tmp/SAS_work109A00169758_xar08auv.vsp.sas.com/SAS_work352800169758_xar08auv.vsp.sas.com/dashboard.log" new;
MPRINT(PPMACRO):   run;

NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(PPMACRO):   filename logf
"/saswork/sas_tmp/SAS_work109A00169758_xar08auv.vsp.sas.com/SAS_work352800169758_xar08auv.vsp.sas.com/dashboard.log";
MPRINT(PPMACRO):   options nomprint;
MAUTOCOMPLOC:  The autocall macro LOGCHECKER is compiling using the autocall source file
            /lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/jobs/dashboard/dev/macros/logch
            ecker.sas.

NOTE: The infile LOGF is:
      Filename=/saswork/sas_tmp/SAS_work109A00169758_xar08auv.vsp.sas.com/SAS_work352800169758_xar08auv.vsp.sas.com/dashboard.log,
      Owner Name=pmason,Group Name=webtrust,
      Access Permission=-rw-rw-rw-,
      Last Modified=07Jun2023:10:39:06,
      File Size (bytes)=1001914

NOTE: 23248 records were read from the infile LOGF.
      The minimum record length was 0.
      The maximum record length was 255.
NOTE: The data set WORK.LOG1 has 6730 observations and 6 variables.
NOTE: The data set WORK.MAUTO has 0 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.09 seconds


MAUTOCOMPLOC:  The autocall macro LOG2JSON is compiling using the autocall source file
            /lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/general/biostat/macros/_library/log2json.sas.
MPRINT(LOG2JSON):   data _null_;
MPRINT(LOG2JSON):   runinclinical =
max(index("/saswork/sas_tmp/SAS_work109A00169758_xar08auv.vsp.sas.com/SAS_work352800169758_xar08auv.vsp.sas.com/dashboard.log","/clinical/")
,index("/saswork/sas_tmp/SAS_work109A00169758_xar08auv.vsp.sas.com/SAS_work352800169758_xar08auv.vsp.sas.com/dashboard.log","\clinical\"));
MPRINT(LOG2JSON):   repoloc =
max(index("/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/clinical/argx-113/pemphigus/argx-113-1904/biosta
t/staging/testrun2/qc_tlf/documents/meta/","/clinical/"),index("/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097
ae0a/clinical/argx-113/pemphigus/argx-113-1904/biostat/staging/testrun2/qc_tlf/documents/meta/","\clinical\"));
MPRINT(LOG2JSON):   call symputx("runinclinical",strip(put(runinclinical,8.)));
                                                               The SAS System

MPRINT(LOG2JSON):   call symputx("runinrepoloc",strip(put(repoloc,8.)));
MPRINT(LOG2JSON):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


RUNINCLINICAL=0 RUNINREPOLOC=81
MPRINT(LOG2JSON):   data _null_;
MPRINT(LOG2JSON):   *fp = substr("&repoloc",index("&repoloc","/clinical/"));
MPRINT(LOG2JSON):   fp =
substr("/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/clinical/argx-113/pemphigus/argx-113-1904/biostat/s
taging/testrun2/qc_tlf/documents/meta/",prxmatch("?[/\\]clinical[/\\]?","/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618
-b4698097ae0a/clinical/argx-113/pemphigus/argx-113-1904/biostat/staging/testrun2/qc_tlf/documents/meta/"));
MPRINT(LOG2JSON):   *- jbodart 2022-07-12 -*;
MPRINT(LOG2JSON):   call symputx("logfpath",strip(fp));
MPRINT(LOG2JSON):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


LOGFPATH=/clinical/argx-113/pemphigus/argx-113-1904/biostat/staging/testrun2/qc_tlf/documents/meta/
LOGFNAMENOEXT=dashboard
LOGFDIR=/saswork/sas_tmp/SAS_work109A00169758_xar08auv.vsp.sas.com/SAS_work352800169758_xar08auv.vsp.sas.com/
DOCMETADIR=/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/clinical/argx-113/pemphigus/argx-113-1904/biosta
t/staging/testrun2/qc_tlf/documents/meta/
MPRINT(LOG2JSON):   options dlcreatedir;
MPRINT(LOG2JSON):   libname sublog
"/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/clinical/argx-113/pemphigus/argx-113-1904/biostat/staging/
testrun2/qc_tlf/documents/meta/";
NOTE: Library SUBLOG was created.
NOTE: Libref SUBLOG was successfully assigned as follows:
      Engine:        V9
      Physical Name:
      /lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/clinical/argx-113/pemphigus/argx-113-1904/biostat/sta
      ging/testrun2/qc_tlf/documents/meta
MPRINT(LOG2JSON):   libname sublog;
NOTE: Libref SUBLOG has been deassigned.
MPRINT(LOG2JSON):   options DLCREATEDIR;
MPRINT(LOG2JSON):   data logsumm;
                                                               The SAS System

MPRINT(LOG2JSON):   set log1 (obs=1);
MPRINT(LOG2JSON):   message="Summary";
MPRINT(LOG2JSON):   war=0;
MPRINT(LOG2JSON):  err=0;
MPRINT(LOG2JSON):  un=0;
MPRINT(LOG2JSON):   note=0;
MPRINT(LOG2JSON):   line=0;
MPRINT(LOG2JSON):  path="/clinical/argx-113/pemphigus/argx-113-1904/biostat/staging/testrun2/qc_tlf/documents/meta/";
MPRINT(LOG2JSON):   run;

NOTE: There were 1 observations read from the data set WORK.LOG1.
NOTE: The data set WORK.LOGSUMM has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(LOG2JSON):   data log2note;
MPRINT(LOG2JSON):   set log2;
MPRINT(LOG2JSON):   if err=0 and war=0 and un=0 then note=1;
MPRINT(LOG2JSON):   else note=0;
MPRINT(LOG2JSON):   run;

NOTE: There were 6 observations read from the data set WORK.LOG2.
NOTE: The data set WORK.LOG2NOTE has 6 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(LOG2JSON):   proc means data=log2note noprint;
MPRINT(LOG2JSON):   output out=summ sum=;
MPRINT(LOG2JSON):   run;

NOTE: There were 6 observations read from the data set WORK.LOG2NOTE.
NOTE: The data set WORK.SUMM has 1 observations and 7 variables.
NOTE: PROCEDURE MEANS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(LOG2JSON):   data summ;
MPRINT(LOG2JSON):   set summ;
                                                               The SAS System

MPRINT(LOG2JSON):   line=0;
MPRINT(LOG2JSON):   drop _:;
MPRINT(LOG2JSON):   run;

NOTE: There were 1 observations read from the data set WORK.SUMM.
NOTE: The data set WORK.SUMM has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(LOG2JSON):   data logsumm2 ;
MPRINT(LOG2JSON):   merge logsumm summ;
MPRINT(LOG2JSON):   by line;
MPRINT(LOG2JSON):   run;

NOTE: There were 1 observations read from the data set WORK.LOGSUMM.
NOTE: There were 1 observations read from the data set WORK.SUMM.
NOTE: The data set WORK.LOGSUMM2 has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(LOG2JSON):   proc sort data=log2note out=log2small;
MPRINT(LOG2JSON):   by message line;
MPRINT(LOG2JSON):   run;

NOTE: There were 6 observations read from the data set WORK.LOG2NOTE.
NOTE: The data set WORK.LOG2SMALL has 6 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(LOG2JSON):   proc freq data=log2 noprint;
MPRINT(LOG2JSON):   table message/ norow nocol nopercent nocum list out=fmessage (rename=(count=f_msg) drop=percent);
MPRINT(LOG2JSON):   run;

NOTE: There were 6 observations read from the data set WORK.LOG2.
NOTE: The data set WORK.FMESSAGE has 6 observations and 2 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
                                                               The SAS System

      cpu time            0.01 seconds


MPRINT(LOG2JSON):   data log2smallA;
MPRINT(LOG2JSON):   set log2small;
MPRINT(LOG2JSON):   by message line;
MPRINT(LOG2JSON):   if first.message;
MPRINT(LOG2JSON):   run;

NOTE: There were 6 observations read from the data set WORK.LOG2SMALL.
NOTE: The data set WORK.LOG2SMALLA has 6 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(LOG2JSON):   data log2smallB;
MPRINT(LOG2JSON):   merge log2smallA (obs=100) fmessage;
MPRINT(LOG2JSON):   by message;
MPRINT(LOG2JSON):   run;

NOTE: There were 6 observations read from the data set WORK.LOG2SMALLA.
NOTE: There were 6 observations read from the data set WORK.FMESSAGE.
NOTE: The data set WORK.LOG2SMALLB has 6 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(LOG2JSON):   data logres(drop=upmsg);
MPRINT(LOG2JSON):   set logsumm2 log2smallB;
MPRINT(LOG2JSON):   run;

NOTE: There were 1 observations read from the data set WORK.LOGSUMM2.
NOTE: There were 6 observations read from the data set WORK.LOG2SMALLB.
NOTE: The data set WORK.LOGRES has 7 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(LOWC):   proc contents noprint data=logres out=cnt (keep=name);
MPRINT(LOWC):   run;
                                                               The SAS System


NOTE: The data set WORK.CNT has 8 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(LOWC):   data _null_;
MPRINT(LOWC):   set cnt end=last;
MPRINT(LOWC):   where name ne lowcase(name);
MPRINT(LOWC):   call symputx("lowvar"||strip(put(_n_,8.)),strip(lowcase(name)));
MPRINT(LOWC):   call symputx("highvar"||strip(put(_n_,8.)),strip(upcase(name)));
MPRINT(LOWC):   if last then call symputx("nbvars",strip(put(_n_,8.)));
MPRINT(LOWC):   run;

NOTE: There were 0 observations read from the data set WORK.CNT.
      WHERE name not = LOWCASE(name);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(LOG2JSON):  ;
MPRINT(LOG2JSON):   filename flogjson
"/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/clinical/argx-113/pemphigus/argx-113-1904/biostat/staging/
testrun2/qc_tlf/documents/meta/log_dashboard.json";
MPRINT(LOG2JSON):   proc json out=flogjson pretty;
MPRINT(LOG2JSON):   export logres / nosastags;
MPRINT(LOG2JSON):   run;

NOTE: PROCEDURE JSON used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(LOG2JSON):   filename flogjson;
NOTE: Fileref FLOGJSON has been deassigned.
MPRINT(LOG2JSON):   *- unassign fileref -*;
MPRINT(PPMACRO):  ;
MPRINT(COPYFILES):   data _null_;
MPRINT(COPYFILES):   LENGTH logtxtline $ 1500;
MPRINT(COPYFILES):   INFILE
"/saswork/sas_tmp/SAS_work109A00169758_xar08auv.vsp.sas.com/SAS_work352800169758_xar08auv.vsp.sas.com/dashboard.log" DLM = "€" TRUNCOVER
                                                               The SAS System

LRECL=1500;
MPRINT(COPYFILES):   INPUT logtxtline;
MPRINT(COPYFILES):   file
"/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/clinical/argx-113/pemphigus/argx-113-1904/biostat/staging/
testrun2/qc_tlf/documents/meta/dashboard.log";
MPRINT(COPYFILES):   varlen=length(logtxtline);
MPRINT(COPYFILES):   put @1 logtxtline $varying1500. varlen;
MPRINT(COPYFILES):   run;

NOTE: The infile "/saswork/sas_tmp/SAS_work109A00169758_xar08auv.vsp.sas.com/SAS_work352800169758_xar08auv.vsp.sas.com/dashboard.log" is:
      Filename=/saswork/sas_tmp/SAS_work109A00169758_xar08auv.vsp.sas.com/SAS_work352800169758_xar08auv.vsp.sas.com/dashboard.log,
      Owner Name=pmason,Group Name=webtrust,
      Access Permission=-rw-rw-rw-,
      Last Modified=07Jun2023:10:39:06,
      File Size (bytes)=1001914

NOTE: The file
      "/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/clinical/argx-113/pemphigus/argx-113-1904/biostat/st
      aging/testrun2/qc_tlf/documents/meta/dashboard.log" is:

      Filename=/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/clinical/argx-113/pemphigus/argx-113-1904/bi
      ostat/staging/testrun2/qc_tlf/documents/meta/dashboard.log,
      Owner Name=pmason,Group Name=webtrust,
      Access Permission=-rw-rw-rw-,
      Last Modified=07Jun2023:10:39:07

NOTE: 23248 records were read from the infile
      "/saswork/sas_tmp/SAS_work109A00169758_xar08auv.vsp.sas.com/SAS_work352800169758_xar08auv.vsp.sas.com/dashboard.log".
      The minimum record length was 0.
      The maximum record length was 255.
NOTE: 23248 records were written to the file
      "/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/clinical/argx-113/pemphigus/argx-113-1904/biostat/st
      aging/testrun2/qc_tlf/documents/meta/dashboard.log".
      The minimum record length was 1.
      The maximum record length was 254.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


MPRINT(PPMACRO):  ;
MPRINT(COPYFILES):   data _null_;
MPRINT(COPYFILES):   LENGTH logtxtline $ 1500;
                                                               The SAS System

MPRINT(COPYFILES):   INFILE
"/saswork/sas_tmp/SAS_work109A00169758_xar08auv.vsp.sas.com/SAS_work352800169758_xar08auv.vsp.sas.com/refreshedoutputs.json" DLM = "€"
TRUNCOVER LRECL=1500;
MPRINT(COPYFILES):   INPUT logtxtline;
MPRINT(COPYFILES):   file
"/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/clinical/argx-113/pemphigus/argx-113-1904/biostat/staging/
testrun2/qc_tlf/documents/meta/refreshedoutputs.json";
MPRINT(COPYFILES):   varlen=length(logtxtline);
MPRINT(COPYFILES):   put @1 logtxtline $varying1500. varlen;
MPRINT(COPYFILES):   run;

NOTE: The infile
      "/saswork/sas_tmp/SAS_work109A00169758_xar08auv.vsp.sas.com/SAS_work352800169758_xar08auv.vsp.sas.com/refreshedoutputs.json" is:
      Filename=/saswork/sas_tmp/SAS_work109A00169758_xar08auv.vsp.sas.com/SAS_work352800169758_xar08auv.vsp.sas.com/refreshedoutputs.json,
      Owner Name=pmason,Group Name=webtrust,
      Access Permission=-rw-rw-rw-,
      Last Modified=07Jun2023:10:37:22,
      File Size (bytes)=43

NOTE: The file
      "/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/clinical/argx-113/pemphigus/argx-113-1904/biostat/st
      aging/testrun2/qc_tlf/documents/meta/refreshedoutputs.json" is:

      Filename=/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/clinical/argx-113/pemphigus/argx-113-1904/bi
      ostat/staging/testrun2/qc_tlf/documents/meta/refreshedoutputs.json,
      Owner Name=pmason,Group Name=webtrust,
      Access Permission=-rw-rw-rw-,
      Last Modified=07Jun2023:10:39:07

NOTE: 5 records were read from the infile
      "/saswork/sas_tmp/SAS_work109A00169758_xar08auv.vsp.sas.com/SAS_work352800169758_xar08auv.vsp.sas.com/refreshedoutputs.json".
      The minimum record length was 1.
      The maximum record length was 30.
NOTE: 5 records were written to the file
      "/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/clinical/argx-113/pemphigus/argx-113-1904/biostat/st
      aging/testrun2/qc_tlf/documents/meta/refreshedoutputs.json".
      The minimum record length was 1.
      The maximum record length was 26.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


                                                               The SAS System

MPRINT(PPMACRO):  ;
MPRINT(COPYFILES):   data _null_;
MPRINT(COPYFILES):   LENGTH logtxtline $ 1500;
MPRINT(COPYFILES):   INFILE
"/saswork/sas_tmp/SAS_work109A00169758_xar08auv.vsp.sas.com/SAS_work352800169758_xar08auv.vsp.sas.com/report1.json" DLM = "€" TRUNCOVER
LRECL=1500;
MPRINT(COPYFILES):   INPUT logtxtline;
MPRINT(COPYFILES):   file
"/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/clinical/argx-113/pemphigus/argx-113-1904/biostat/staging/
testrun2/qc_tlf/documents/meta/report1.json";
MPRINT(COPYFILES):   varlen=length(logtxtline);
MPRINT(COPYFILES):   put @1 logtxtline $varying1500. varlen;
MPRINT(COPYFILES):   run;

NOTE: The infile "/saswork/sas_tmp/SAS_work109A00169758_xar08auv.vsp.sas.com/SAS_work352800169758_xar08auv.vsp.sas.com/report1.json" is:
      Filename=/saswork/sas_tmp/SAS_work109A00169758_xar08auv.vsp.sas.com/SAS_work352800169758_xar08auv.vsp.sas.com/report1.json,
      Owner Name=pmason,Group Name=webtrust,
      Access Permission=-rw-rw-rw-,
      Last Modified=07Jun2023:10:39:00,
      File Size (bytes)=29734

NOTE: The file
      "/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/clinical/argx-113/pemphigus/argx-113-1904/biostat/st
      aging/testrun2/qc_tlf/documents/meta/report1.json" is:

      Filename=/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/clinical/argx-113/pemphigus/argx-113-1904/bi
      ostat/staging/testrun2/qc_tlf/documents/meta/report1.json,
      Owner Name=pmason,Group Name=webtrust,
      Access Permission=-rw-rw-rw-,
      Last Modified=07Jun2023:10:39:07

NOTE: 989 records were read from the infile
      "/saswork/sas_tmp/SAS_work109A00169758_xar08auv.vsp.sas.com/SAS_work352800169758_xar08auv.vsp.sas.com/report1.json".
      The minimum record length was 1.
      The maximum record length was 274.
NOTE: 989 records were written to the file
      "/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/clinical/argx-113/pemphigus/argx-113-1904/biostat/st
      aging/testrun2/qc_tlf/documents/meta/report1.json".
      The minimum record length was 1.
      The maximum record length was 270.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
                                                               The SAS System



MPRINT(PPMACRO):  ;
MPRINT(COPYFILES):   data _null_;
MPRINT(COPYFILES):   LENGTH logtxtline $ 1500;
MPRINT(COPYFILES):   INFILE
"/saswork/sas_tmp/SAS_work109A00169758_xar08auv.vsp.sas.com/SAS_work352800169758_xar08auv.vsp.sas.com/report2.json" DLM = "€" TRUNCOVER
LRECL=1500;
MPRINT(COPYFILES):   INPUT logtxtline;
MPRINT(COPYFILES):   file
"/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/clinical/argx-113/pemphigus/argx-113-1904/biostat/staging/
testrun2/qc_tlf/documents/meta/report2.json";
MPRINT(COPYFILES):   varlen=length(logtxtline);
MPRINT(COPYFILES):   put @1 logtxtline $varying1500. varlen;
MPRINT(COPYFILES):   run;

NOTE: The infile "/saswork/sas_tmp/SAS_work109A00169758_xar08auv.vsp.sas.com/SAS_work352800169758_xar08auv.vsp.sas.com/report2.json" is:
      Filename=/saswork/sas_tmp/SAS_work109A00169758_xar08auv.vsp.sas.com/SAS_work352800169758_xar08auv.vsp.sas.com/report2.json,
      Owner Name=pmason,Group Name=webtrust,
      Access Permission=-rw-rw-rw-,
      Last Modified=07Jun2023:10:39:00,
      File Size (bytes)=124221

NOTE: The file
      "/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/clinical/argx-113/pemphigus/argx-113-1904/biostat/st
      aging/testrun2/qc_tlf/documents/meta/report2.json" is:

      Filename=/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/clinical/argx-113/pemphigus/argx-113-1904/bi
      ostat/staging/testrun2/qc_tlf/documents/meta/report2.json,
      Owner Name=pmason,Group Name=webtrust,
      Access Permission=-rw-rw-rw-,
      Last Modified=07Jun2023:10:39:07

NOTE: 3852 records were read from the infile
      "/saswork/sas_tmp/SAS_work109A00169758_xar08auv.vsp.sas.com/SAS_work352800169758_xar08auv.vsp.sas.com/report2.json".
      The minimum record length was 1.
      The maximum record length was 172.
NOTE: 3852 records were written to the file
      "/lsafshared/SASWorkspaces/.transient/pp.job-5d366f2b-6224-4361-9618-b4698097ae0a/clinical/argx-113/pemphigus/argx-113-1904/biostat/st
      aging/testrun2/qc_tlf/documents/meta/report2.json".
      The minimum record length was 1.
      The maximum record length was 168.
NOTE: DATA statement used (Total process time):
                                                               The SAS System

      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(PPMACRO):  ;
1796
1797
1798
1799
1800       ;*';*";*/;*); run; quit;
1801       proc scaproc; write; run;

NOTE: PROCEDURE SCAPROC used (Total process time):
      real time           0.24 seconds
      cpu time            0.25 seconds


1802       options nonotes;
1803

/**********************************************************************************************************************
 * Submission End: postprocessing.sas
 * Jun 07, 2023 10:39:07 GMT
 *********************************************************************************************************************/