1                                                          The SAS System                    Wednesday, January 11, 2023 11:10:00 PM

NOTE: Copyright (c) 2016 by SAS Institute Inc., Cary, NC, USA. 
NOTE: SAS (r) Proprietary Software 9.4 (TS1M6 MBCS3170) 
      Licensed to ARGENX VIA OCS CONSULTING_SAS LSAF_SAAS, Site 70265777.
NOTE: This session is executing on the Linux 3.10.0-957.27.2.el7.x86_64 (LIN X64) platform.



NOTE: Analytical products:
      
      SAS/STAT 15.1
      SAS/IML 15.1

NOTE: Additional host information:

 Linux LIN X64 3.10.0-957.27.2.el7.x86_64 #1 SMP Tue Jul 9 16:53:14 UTC 2019 x86_64 Red Hat Enterprise Linux Server release 7.6 
      (Maipo) 

You are running SAS 9. Some SAS 8 files will be automatically converted 
by the V9 engine; others are incompatible.  Please see 
http://support.sas.com/rnd/migration/planning/platform/64bit.html

PROC MIGRATE will preserve current SAS file attributes and is 
recommended for converting all your SAS libraries from any 
SAS 8 release to SAS 9.  For details and examples, please see
http://support.sas.com/rnd/migration/index.html


This message is contained in the SAS news file, and is presented upon
initialization.  Edit the file "news" in the "misc/base" directory to
display site-specific news and information in the program log.
The command line option "-nonews" will prevent this display.




NOTE: SAS Initialization used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      
NOTE: The autoexec file, /sso/biconfig/940/Lev1/LSAFApp/WorkspaceServer/autoexec.sas, was executed at server initialization.
1          options nofmterr;
2          options dtreset;
3          options locale=EN_US;
4          %let _SDDUSR_=%bquote(jbodart);
5          %let _SASWS_ = %nrstr("/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a");
6          %let _SASWS_ = %qsubstr(&_SASWS_, 2, %length(&_SASWS_) - 2);
7          
8          %let _SASUSRWS_ =
8        ! %nrstr("/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/Users/jbodart");
9          %let _SASUSRWS_ = %qsubstr(&_SASUSRWS_, 2, %length(&_SASUSRWS_) - 2);
10         options nosource;

NOTE: DATA statement used (Total process time):
      real time           1.01 seconds
      cpu time            0.01 seconds
      

17         

/**********************************************************************************************************************
 * Submission Start: adae.sas
 * Jan 11, 2023 23:10:41 GMT by jbodart
 *********************************************************************************************************************/
2                                                          The SAS System                    Wednesday, January 11, 2023 11:10:41 PM

18         
19         options nosyntaxcheck errorcheck=strict notes;
20         
21         
22         ;*';*";*/;*);run;quit;
23         *reset syscc macro variable;
24         %let syscc=0;
25         %let _SASFILEPATH_ = %nrstr("/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/programs/adae.sas");
26         %let _SASFILEPATH_ = %qsubstr(&_SASFILEPATH_, 2, %length(&_SASFILEPATH_) - 2);
27         
28         /********************************************************************************************************************/
29         proc scaproc; record "&_SASWS_/.sessions/59/sca_3f624e87-fc2c-4cdc-81fe-db7a8b378ef6.txt" EXPANDMACROS; run;

NOTE: PROCEDURE SCAPROC used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

30         
31         options nomprint;
32         /********************************************************************************************************************/
33         
34         /* Macro Variables for Job Parameters */
35         %let job_instance=Ngos_4_x0_47_1_3;
36         %let _PARENTJOB_WS_=/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-ab0e4b77-6775-449d-b460-b8d10c536c3d;
37         %let _PARENTJOB_WRK_=;
38         %let USE_SAS_WORKSPACE_MACROS=;
39         
40         /********************************************************************************************************************/
41         
42         ***********************************************************************
43         *  Project           : argx-113/cidp/argx-113-1902/biostat/staging/generic_adam
44         *  Program           : adae.sas
45         *  Author            : gadamsystem
46         *  Creation Date     : 2023-01-11
47         *  Purpose           : Generate generic adae dataset
48         ***********************************************************************;
49         
50         %setenv;
MPRINT(SETENV):   source source2 nofmterr notes spool nodate nonumber MAUTOCOMPLOC NOMAUTOLOCDISPLAY;
MPRINT(SETENV):   * in case run in batch;
(SETENV): _SASFILEPATH_ = /clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/programs/adae.sas
(SETENV): path1 = /clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/programs/adae.sas
(SETENV): _sasws_ = /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a
(SETENV): runenvironment = repository
MPRINT(SETENV):   *libname projmeta "&projectsmetapath" access=readonly;
MPRINT(SETENV):   data gen_setenv(keep=fname ver maxver);
MPRINT(SETENV):   length fref $8 dirname fname $400;
MPRINT(SETENV):   direxists = 0;
MPRINT(SETENV):   found = 0;
MPRINT(SETENV):   maxver = .;
MPRINT(SETENV):   
dirname="/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/macros/_library";
MPRINT(SETENV):   rc=filename(fref, dirname);
MPRINT(SETENV):   did=dopen(fref);
MPRINT(SETENV):   if did > 0 then do;
MPRINT(SETENV):   direxists=1;
MPRINT(SETENV):   memcount=dnum(did);
                                                           The SAS System

MPRINT(SETENV):   do i = 1 to memcount;
MPRINT(SETENV):   fname=dread(did, i);
MPRINT(SETENV):   if prxmatch('/^setenv\d+\.sas$/', cats(fname)) then do;
MPRINT(SETENV):   found+1;
MPRINT(SETENV):   ver = input(prxchange('s/^setenv(\d+)\.sas$/\1/', 1, cats(fname)), best32.);
MPRINT(SETENV):   if ver > maxver then maxver = ver;
MPRINT(SETENV):   put "(SETENV):" found= fname= ver= rc= did= fref= dirname=;
MPRINT(SETENV):   output;
MPRINT(SETENV):   end;
MPRINT(SETENV):   *put "(&sysmacroname):" found= fname= ver= rc= did= fref= dirname=;
MPRINT(SETENV):   end;
MPRINT(SETENV):   rc=dclose(did);
MPRINT(SETENV):   end;
MPRINT(SETENV):   else do;
MPRINT(SETENV):   msg = put(sysmsg(), $400.);
MPRINT(SETENV):   put "Failed to open directory: " rc= did= fref= dirname= "sysmsg=" msg;
MPRINT(SETENV):   end;
MPRINT(SETENV):   rc=filename(fref);
MPRINT(SETENV):   run;

(SETENV):found=1 fname=setenv01.sas ver=1 rc=0 did=1 fref=#LN00016
dirname=/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/macros/_library
(SETENV):found=2 fname=setenv02.sas ver=2 rc=0 did=1 fref=#LN00016
dirname=/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/macros/_library
NOTE: The data set WORK.GEN_SETENV has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SETENV):   proc sql noprint;
MPRINT(SETENV):   select fname into :gen_setenv trimmed from gen_setenv having ver = max(ver) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(SETENV):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

gen_setenv = setenv02.sas
MPRINT(SETENV):   data repev_setenv(keep=fname ver maxver);
MPRINT(SETENV):   length fref frefsrc $8 setenv $32 d dirname fname msg $400;
MPRINT(SETENV):   direxists = 0;
MPRINT(SETENV):   found = 0;
MPRINT(SETENV):   maxver = .;
MPRINT(SETENV):   do 
d="/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biost
at/staging/generic_adam/macros/global_macros", 
"/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat
/staging/generic_adam/macros/global-macros" while(direxists=0);
MPRINT(SETENV):   put d=;
MPRINT(SETENV):   rc=filename(fref, d);
MPRINT(SETENV):   did=dopen(fref);
MPRINT(SETENV):   if did > 0 then do;
MPRINT(SETENV):   direxists=1;
MPRINT(SETENV):   dirname=d;
MPRINT(SETENV):   memcount=dnum(did);
MPRINT(SETENV):   do i = 1 to memcount;
                                                           The SAS System

MPRINT(SETENV):   fname=dread(did, i);
MPRINT(SETENV):   if prxmatch('/^setenv\d+\.sas$/', cats(fname)) then do;
MPRINT(SETENV):   found+1;
MPRINT(SETENV):   ver = input(prxchange('s/^setenv(\d+)\.sas$/\1/', 1, cats(fname)), best32.);
MPRINT(SETENV):   if ver > maxver then do;
MPRINT(SETENV):   maxver = ver;
MPRINT(SETENV):   setenv = fname;
MPRINT(SETENV):   end;
MPRINT(SETENV):   put "(SETENV):" found= fname= ver= rc= did= fref= dirname=;
MPRINT(SETENV):   output;
MPRINT(SETENV):   end;
MPRINT(SETENV):   *put "(&sysmacroname):" found= fname= ver= rc= did= fref= dirname=;
MPRINT(SETENV):   end;
MPRINT(SETENV):   rc=dclose(did);
MPRINT(SETENV):   end;
MPRINT(SETENV):   else do;
MPRINT(SETENV):   put "Failed to open directory: " rc= did= fref= dirname=;
MPRINT(SETENV):   end;
MPRINT(SETENV):   rc=filename(fref);
MPRINT(SETENV):   end;
MPRINT(SETENV):   if direxists=0 then do;
MPRINT(SETENV):   *- JMBodart 2021-10-13 - create macros folder if it does not exist (START) -*;
MPRINT(SETENV):   rc=filename(fref, 
"/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat
/staging/generic_adam/macros");
MPRINT(SETENV):   did=dopen(fref);
MPRINT(SETENV):   if did > 0 then do;
MPRINT(SETENV):   rc=dclose(did);
MPRINT(SETENV):   end;
MPRINT(SETENV):   else do;
MPRINT(SETENV):   dirname = dcreate("macros", 
"/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat
/staging/generic_adam/");
MPRINT(SETENV):   dirname = ' ';
MPRINT(SETENV):   end;
MPRINT(SETENV):   rc=filename(fref);
MPRINT(SETENV):   *- JMBodart 2021-10-13 - create macros folder if it does not exist (END) -*;
MPRINT(SETENV):   dirname=dcreate("global_macros", 
"/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat
/staging/generic_adam/macros");
MPRINT(SETENV):   if dirname ^= ' ' then do;
MPRINT(SETENV):   rc=filename(fref, dirname);
MPRINT(SETENV):   did=dopen(fref);
MPRINT(SETENV):   if did > 0 then do;
MPRINT(SETENV):   direxists=1;
MPRINT(SETENV):   rc=dclose(did);
MPRINT(SETENV):   end;
MPRINT(SETENV):   rc=filename(fref);
MPRINT(SETENV):   end;
MPRINT(SETENV):   end;
MPRINT(SETENV):   put dirname= direxists=;
MPRINT(SETENV):   if direxists then do;
MPRINT(SETENV):   call execute("option insert=(sasautos="||quote(cats(dirname))||");");
MPRINT(SETENV):   if found = 0 then do;
MPRINT(SETENV):   cumrc = 0;
MPRINT(SETENV):   rc=filename(frefsrc, 
"/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/macros/_library/setenv02.sas
");
                                                           The SAS System

MPRINT(SETENV):   if rc ne 0 then do;
MPRINT(SETENV):   msg = sysmsg();
MPRINT(SETENV):   put msg;
MPRINT(SETENV):   cumrc=rc;
MPRINT(SETENV):   end;
MPRINT(SETENV):   rc=filename(fref, cats(dirname, "/setenv02.sas"));
MPRINT(SETENV):   if rc ne 0 then do;
MPRINT(SETENV):   msg = sysmsg();
MPRINT(SETENV):   put msg;
MPRINT(SETENV):   cumrc=rc;
MPRINT(SETENV):   end;
MPRINT(SETENV):   if cumrc = 0 then do;
MPRINT(SETENV):   put "Copying  
""/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/macros/_library/setenv02.sa
s"" to" dirname $quote. ;
MPRINT(SETENV):   rc = fcopy(frefsrc, fref);
MPRINT(SETENV):   if rc ne 0 then do;
MPRINT(SETENV):   put "Failed.";
MPRINT(SETENV):   msg = sysmsg();
MPRINT(SETENV):   put msg;
MPRINT(SETENV):   cumrc=rc;
MPRINT(SETENV):   end;
MPRINT(SETENV):   else put "Success.";
MPRINT(SETENV):   end;
MPRINT(SETENV):   rc=filename(frefsrc);
MPRINT(SETENV):   rc=filename(fref);
MPRINT(SETENV):   if cumrc = 0 then setenv = "setenv02.sas";
MPRINT(SETENV):   end;
MPRINT(SETENV):   end;
MPRINT(SETENV):   call symput("setenv", cats(setenv));
MPRINT(SETENV):   put setenv=;
MPRINT(SETENV):   run;

d=/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biosta
t/staging/generic_adam/macros/global_macros
(SETENV):found=1 fname=setenv02.sas ver=2 rc=0 did=1 fref=#LN00017
dirname=/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/
biostat/staging/generic_adam/macros/global_macros
dirname=/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/
biostat/staging/generic_adam/macros/global_macros direxists=1
MPRINT(SETENV):   option 
insert=(sasautos="/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx
-113-1902/biostat/staging/generic_adam/macros/global_macros");
setenv=setenv02.sas
NOTE: The data set WORK.REPEV_SETENV has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: CALL EXECUTE generated line.
1         + option 
insert=(sasautos="/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx
-113-1902/biostat/staging/generic_adam/macros/global_macros");
setenv=setenv02.sas
(SETENV): Calling %setenv02(ini=1, tabno=, default_debug=1)
MAUTOCOMPLOC:  The autocall macro SETENV02 is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1
                                                           The SAS System

            902/biostat/staging/generic_adam/macros/global_macros/setenv02.sas.
MPRINT(SETENV.SETENV02):   options mprint nofmterr spool nodate nonumber MAUTOCOMPLOC NOMAUTOLOCDISPLAY;
MPRINT(SETENV.SETENV02):   *- Clean previously compiled macros from WORK.SASMAC* -*;
MPRINT(SETENV.SETENV02):   data _NULL_;
MPRINT(SETENV.SETENV02):   length save $500;
MPRINT(SETENV.SETENV02):   retain save;
MPRINT(SETENV.SETENV02):   set sashelp.vcatalg(where=(libname="WORK" and memname=:'SASMAC' and objtype="MACRO")) end=last;
MPRINT(SETENV.SETENV02):   by memname notsorted;
MPRINT(SETENV.SETENV02):   if first.memname then do;
MPRINT(SETENV.SETENV02):   if index(" "||save, " "||strip(memname)||".") eq 0 then save = catx(" ", save, 
strip(memname)||"."||objname);
MPRINT(SETENV.SETENV02):   end;
MPRINT(SETENV.SETENV02):   if last;
MPRINT(SETENV.SETENV02):   call symputx('save_macr', save);
MPRINT(SETENV.SETENV02):   run;

NOTE: There were 2 observations read from the data set SASHELP.VCATALG.
      WHERE (libname='WORK') and (memname=:'SASMAC') and (objtype='MACRO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

save_macr = SASMAC1.SETENV
MPRINT(SETENV.SETENV02):   proc catalog catalog=work.SASMAC1 force;
MPRINT(SETENV.SETENV02):   *save &sysmacroname /et=macro;
MPRINT(SETENV.SETENV02):   save SETENV SETENV02 /et=macro;
MPRINT(SETENV.SETENV02):   run;

NOTE: Saving entry SETENV.MACRO in catalog WORK.SASMAC1.
NOTE: Saving entry SETENV02.MACRO in catalog WORK.SASMAC1.
MPRINT(SETENV.SETENV02):   quit;

NOTE: PROCEDURE CATALOG used (Total process time):
      real time           0.01 seconds
      cpu time            0.02 seconds
      

MPRINT(SETENV.SETENV02):   *- Clear filenames and delete previous scaprocrecord.txt (J-M Bodart 2021-03-25) -*;
MPRINT(SETENV.SETENV02):   filename _all_ clear;
MPRINT(SETENV.SETENV02):   * in case run in batch;
(SETENV02): _SASFILEPATH_ = /clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/programs/adae.sas
(SETENV02): path1 = /clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/programs/adae.sas
(SETENV02): _sasws_ = /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a
(SETENV02): runenvironment = repository
MPRINT(SETENV.SETENV02):   libname projmeta 
"/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/metadata/projects/" 
access=readonly;
NOTE: Libref PROJMETA was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: 
      /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/metadata/projects
runenvironment=repository
progpath=/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/programs/
repevpath=/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-190
2/biostat/staging/generic_adam/
relrepevpath=/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/
progname=adae.sas
                                                           The SAS System

pgmname=adae
general=/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/
debug=1
compound=argx-113
indication=cidp
study=argx-113-1902
revent=generic_adam
NOTE: %INCLUDE (level 1) file 
      /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/macros/_library/setsasa
      utos.sas is file 
      /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/macros/_library/setsasa
      utos.sas.
51        +/**
52        +@file
53        +@author     Martijn Busselen
54        +@date       2020-11-23
55        +@brief      set the macro sasautos so it uses first the maros defined on reporting event level and secondly those from
55       !+the global level
56        +
57        +@pre        Need to run %setenv
58        +
59        +#### Update History ####
60        +
61        +      Date           Name                       Description
62        +      ------------   ------------------------
62       !+-----------------------------------------------------------------------------
63        +      2021-07-21     S Shipp                    Update for global_macros folder.
64        +      2022-02-27     J-M Bodart                 Include /general/gadam/_library when last level of &repevpath =
64       !+generic_adam.
65        +      2022-03-01     J-M Bodart                 Add \ as delimiter in %scan(&repevpath, -1, /\) as it is not part of
65       !+default delimiters
66        +                                                (needed when run locally on Windows).
67        +      2022-06-30     J-M Bodart                 Add gsdtm/_library.
68        +      2022-12-07     J-M Bodart                 Add user workspace macros to SASAUTOS for development purposes, if
68       !+applicable.
69        +      2022-12-08     J-M Bodart                 Increase l3 size to avoid truncations.
70        +                                                Only add workspace macros to SASAUTOS if environment variable
70       !+USE_SAS_WORKSPACE_MACROS
71        +                                                is defined as Y, or global macro-variable &USE_SAS_WORKSPACE_MACROS=Y.
72        +      2022-12-11     J-M Bodart                 Fix regex !^/general/biostat/jobs/(gadam|gsdtm)_\w+/dev(/|$)!.
73        +
74        +
75        +#### Examples ####
76        +@code
77        +   option mautosource mcompilenote=all;
78        +   %setSasAutos();
79        +@endcode
80        +**/
81        +
82        +%macro setSasAutos();
83        +   %local firstset last3 nb_dirs user_workspace_macros;
84        +   %let firstset = 1;
85        +   %if %symexist(runenvironment)=0 %then %local runenvironment;
86        +
87        +   %*- Determine if WORKSPACE macros should be used (in case available) -*;
88        +   %if %symexist(USE_SAS_WORKSPACE_MACROS)=0 %then %do;
89        +      %global USE_SAS_WORKSPACE_MACROS;
90        +   %end;
                                                           The SAS System

91        +   %if %sysfunc(sysexist(USE_SAS_WORKSPACE_MACROS)) %then %do;
92        +      %let USE_SAS_WORKSPACE_MACROS = %sysget(USE_SAS_WORKSPACE_MACROS);
93        +   %end;
94        +   %if %sysfunc(sysexist(USE_SAS_WORKSPACE_MACROS))=0 and %qsysfunc(upcase(%superq(USE_SAS_WORKSPACE_MACROS)), $1.)=Y
94       !+%then %do;
95        +      *- Set environment variable -*;
96        +      option set=USE_SAS_WORKSPACE_MACROS "Y";  /*- to unset environment variable use: option
96       !+set=USE_SAS_WORKSPACE_MACROS ""; -*/
97        +   %end;
98        +   %put &=USE_SAS_WORKSPACE_MACROS;
99        +   %put %str(Not)ice: Environment variable USE_SAS_WORKSPACE_MACROS is
99       !+%sysfunc(ifc(%sysfunc(sysexist(USE_SAS_WORKSPACE_MACROS)), DEFINED, NOT DEFINED)).;
100       +
101       +   /*in LSAF there are 3 default directories in sasautos and these need to be kept*/
102       +   %if &runenvironment=repository or &runenvironment=workspace %then %do;
103       +      data _null_;
104       +         length a b c dirs l3 $4000;  /*- jbodart - 2022-12-08 - increase l3 size to avoid truncations -*/
105       +         a= strip(getoption("sasautos"));
106       +         put a=;
107       +         len = length(a);
108       +         nobrack = substr(a,2,len-2);
109       +         b = tranwrd(nobrack,'"',"");
110       +         c = compbl(strip(tranwrd(b,"'","")));
111       +         e = countw(c," ");
112       +         call symputx("nb_dirs",strip(put(e,8.)));
113       +         do i = 1 to e;
114       +            last3 = (e-i<3);
115       +            dirs = scan(c,i," ");
116       +            output;
117       +            if last3 then l3 = strip(l3)||' "'||strip(dirs)||'"';
118       +            if e then call symputx ('last3',strip(l3));
119       +         end;
120       +      run;
121       +      %put nb sasautos dirs = &nb_dirs;
122       +      %put last3 = &last3;
123       +   %end;
124       +   %if ( %sysfunc(fileexist(&general.macros&sepchar._library&sepchar)) or %sysfunc(fileexist(&repevpath.macros&sepchar))
124      !+) %then %do;
125       +      %if %sysfunc(fileexist(&repevpath.macros&sepchar)) %then %do;
126       +
127       +         %let gmdfolder=%sysfunc(fileexist(&repevpath.macros&sepchar.global-macros));
128       +         %let gmufolder=%sysfunc(fileexist(&repevpath.macros&sepchar.global_macros));
129       +
130       +         %put &=gmdfolder;
131       +         %put &=gmufolder;
132       +
133       +         options dlcreatedir;
134       +         %if &gmdfolder=1 %then %do;
135       +            libname globmac ("&repevpath.macros&sepchar.global-macros");
136       +         %end;
137       +         %else %do;
138       +            libname globmac ("&repevpath.macros&sepchar.global_macros");
139       +         %end;
140       +      %end;
141       +
142       +      %*- 2022-12-07 - jbodart - Add user workspace macros to SASAUTOS for development purposes, if applicable -*;
143       +      %let user_workspace_macros = ;
144       +
                                                           The SAS System

145       +      %if &runenvironment=repository and %symexist(_SDDUSR_) %then %do;
146       +
147       +         %if ("&revent"="generic_adam" or "%scan(&repevpath, -1, /\)"="generic_adam")
148       +            and %sysfunc(prxmatch(!^/clinical/test/gadam-tests/!, %superq(relrepevpath)))
149       +            and %sysfunc(fileexist(/lsafshared/SASWorkspaces/&_SDDUSR_/general/biostat/gadam/_library/%str(*).sas))
150       +            and %qsysfunc(upcase(%superq(USE_SAS_WORKSPACE_MACROS)), $1.)=Y
151       +            %then %let user_workspace_macros = &user_workspace_macros
151      !+"/lsafshared/SASWorkspaces/&_SDDUSR_/general/biostat/gadam/_library";
152       +
153       +         %else %if ("&revent"="generic_sdtm" or "%scan(&repevpath, -1, /\)"="generic_sdtm")
154       +            and %sysfunc(prxmatch(!^/clinical/test/gsdtm-tests/!, %superq(relrepevpath)))
155       +            and %sysfunc(fileexist(/lsafshared/SASWorkspaces/&_SDDUSR_/general/biostat/gsdtm/_library/%str(*).sas))
156       +            and %qsysfunc(upcase(%superq(USE_SAS_WORKSPACE_MACROS)), $1.)=Y
157       +            %then %let user_workspace_macros = &user_workspace_macros
157      !+"/lsafshared/SASWorkspaces/&_SDDUSR_/general/biostat/gsdtm/_library";
158       +
159       +         %if (    "&revent"="generic_adam" or "%scan(&repevpath, -1, /\)"="generic_adam"
160       +               or "&revent"="generic_sdtm" or "%scan(&repevpath, -1, /\)"="generic_sdtm"
161       +               or %sysfunc(prxmatch(!^/general/biostat/jobs/(gadam|gsdtm)_\w+/dev(/|$)!, %superq(relrepevpath)))
162       +               )
163       +            and %sysfunc(fileexist(/lsafshared/SASWorkspaces/&_SDDUSR_/general/biostat/macros/_library/%str(*).sas))
164       +            and %qsysfunc(upcase(%superq(USE_SAS_WORKSPACE_MACROS)), $1.)=Y
165       +            %then %let user_workspace_macros = &user_workspace_macros
165      !+"/lsafshared/SASWorkspaces/&_SDDUSR_/general/biostat/macros/_library";
166       +
167       +         %if %length(%superq(user_workspace_macros)) %then %do;
168       +            %put %str(WAR)NING: === Adding WORKSPACE paths to SASAUTOS for development purposes, please check macros
168      !+versions in your workspace: === ;
169       +            %put %str(   )&user_workspace_macros;
170       +            %put;
171       +         %end;
172       +
173       +         %put &=runenvironment &=_SDDUSR_ &=relrepevpath &=user_workspace_macros;
174       +
175       +      %end;
176       +
177       +      %*- Use autocall to compile any macro in Macros subfolder on demand -*;
178       +      options mautosource sasautos = (
179       +            %if %sysfunc(fileexist(&repevpath.macros&sepchar))                         %then "&repevpath.macros";
180       +                                                                                             &user_workspace_macros
181       +            %if "&revent"="generic_adam" or "%scan(&repevpath, -1, /\)"="generic_adam" %then
181      !+"&general.gadam&sepchar._library";
182       +            %if "&revent"="generic_sdtm" or "%scan(&repevpath, -1, /\)"="generic_sdtm" %then
182      !+"&general.gsdtm&sepchar._library";  /*- jbodart 2022-06-30 -*/
183       +            %if %sysfunc(fileexist(&repevpath.macros&sepchar.global-macros))           %then
183      !+"&repevpath.macros&sepchar.global-macros";
184       +            %if %sysfunc(fileexist(&repevpath.macros&sepchar.global_macros))           %then
184      !+"&repevpath.macros&sepchar.global_macros";
185       +            %if %sysfunc(fileexist(&general.macros&sepchar._library&sepchar))          %then
185      !+"&general.macros&sepchar._library" ;
186       +            %if &runenvironment=local or &runenvironment=batch or %length(%superq(runenvironment))=0
187       +                                                                                       %then sasautos;
188       +                                                                                       %else &last3;
189       +            ) MRECALL=YES;
190       +   %end;
191       +   %let sa = %sysfunc(getoption(sasautos));
192       +   %put sa=&sa;
193       +%mend setSasAutos;
                                                           The SAS System

NOTE: %INCLUDE (level 1) ending.
USE_SAS_WORKSPACE_MACROS=
Notice: Environment variable USE_SAS_WORKSPACE_MACROS is NOT DEFINED.
MPRINT(SETENV.SETENV02.SETSASAUTOS):   data _null_;
MPRINT(SETENV.SETENV02.SETSASAUTOS):   length a b c dirs l3 $4000;
MPRINT(SETENV.SETENV02.SETSASAUTOS):   a= strip(getoption("sasautos"));
MPRINT(SETENV.SETENV02.SETSASAUTOS):   put a=;
MPRINT(SETENV.SETENV02.SETSASAUTOS):   len = length(a);
MPRINT(SETENV.SETENV02.SETSASAUTOS):   nobrack = substr(a,2,len-2);
MPRINT(SETENV.SETENV02.SETSASAUTOS):   b = tranwrd(nobrack,'"',"");
MPRINT(SETENV.SETENV02.SETSASAUTOS):   c = compbl(strip(tranwrd(b,"'","")));
MPRINT(SETENV.SETENV02.SETSASAUTOS):   e = countw(c," ");
MPRINT(SETENV.SETENV02.SETSASAUTOS):   call symputx("nb_dirs",strip(put(e,8.)));
MPRINT(SETENV.SETENV02.SETSASAUTOS):   do i = 1 to e;
MPRINT(SETENV.SETENV02.SETSASAUTOS):   last3 = (e-i<3);
MPRINT(SETENV.SETENV02.SETSASAUTOS):   dirs = scan(c,i," ");
MPRINT(SETENV.SETENV02.SETSASAUTOS):   output;
MPRINT(SETENV.SETENV02.SETSASAUTOS):   if last3 then l3 = strip(l3)||' "'||strip(dirs)||'"';
MPRINT(SETENV.SETENV02.SETSASAUTOS):   if e then call symputx ('last3',strip(l3));
MPRINT(SETENV.SETENV02.SETSASAUTOS):   end;
MPRINT(SETENV.SETENV02.SETSASAUTOS):   run;

a=('/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/bios
tat/staging/generic_adam/macros/global_macros' "SASEnvironment/SASMacro" '!SASROOT/sasautos' "/sso/sfw/sas/940/SASFoundation/9.4/lsa
fapi/lsaf-sas-macro-2.3/sasmacros" "/lsafshared/SASWorkspaces/global_macros")
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

nb sasautos dirs = 5
last3 = "!SASROOT/sasautos" "/sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.3/sasmacros" 
"/lsafshared/SASWorkspaces/global_macros"
GMDFOLDER=0
GMUFOLDER=1
MPRINT(SETENV.SETENV02.SETSASAUTOS):   options dlcreatedir;
MPRINT(SETENV.SETENV02.SETSASAUTOS):   libname globmac 
("/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biosta
t/staging/generic_adam/macros/global_macros");
NOTE: Libref GLOBMAC was successfully assigned as follows: 
      Levels:           1
      Engine(1):        V9 
      Physical Name(1): 
      /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/bi
      ostat/staging/generic_adam/macros/global_macros
RUNENVIRONMENT=repository _SDDUSR_=jbodart RELREPEVPATH=/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/ 
USER_WORKSPACE_MACROS=
MPRINT(SETENV.SETENV02.SETSASAUTOS):   options mautosource sasautos = ( 
"/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat
/staging/generic_adam/macros" 
"/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/gadam/_library" 
"/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat
/staging/generic_adam/macros/global_macros" 
"/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/macros/_library" 
"!SASROOT/sasautos" "/sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.3/sasmacros" 
"/lsafshared/SASWorkspaces/global_macros" ) MRECALL=YES;
sa=("/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/bio
stat/staging/generic_adam/macros"                                                                                               
                                                           The SAS System

"/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/gadam/_library" 
"/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat
/staging/generic_adam/macros/global_macros" 
"/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/macros/_library" 
"!SASROOT/sasautos" "/sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.3/sasmacros" 
"/lsafshared/SASWorkspaces/global_macros")
MPRINT(SETENV.SETENV02):  ;
MAUTOCOMPLOC:  The autocall macro INI is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/macros/_library/i
            ni.sas.
MPRINT(SETENV.SETENV02.INI):   option validvarname=v7 mprint nofmterr spool noquotelenmax nodate nonumber nobyline ps=60 ls=200 nocenter missing=' ';
MPRINT(SETENV.SETENV02.INI):   options formchar="|----|+|---+=|-/\<>*";
ini test
MPRINT(SETENV.SETENV02.INI):   title;
MPRINT(SETENV.SETENV02.INI):   footnote;
fcmpoutlib=work.functions
MPRINT(SETENV.SETENV02.INI):  ;
MPRINT(SETENV.SETENV02.INI.DELVARS):   data vars;
MPRINT(SETENV.SETENV02.INI.DELVARS):   set sashelp.vmacro;
MPRINT(SETENV.SETENV02.INI.DELVARS):   if name not in ("_SASFILEPATH_" "CONNSERV" "_SASUSRWS_" "_METAUSER" "_SDDUSR_" "_SASWS_" "_SASDRGDEVENV_" "DEBUG" "PROJECTSMETAPATH" "GENERAL" "REPEVPATH" 
"COMPOUND" "INDICATION" "STUDY" "REVENT" "RUNENVIRONMENT" "SEPCHAR" "RELREPEVPATH" "PROGNAME" "PROGPATH" "PGMNAME" "_LSAFJOBNAME_" "PROGVERSION" "TABNOVAR" "JOB_INSTANCE" "_PARENTJOB_WS_" 
"_PARENTJOB_WRK_" );
MPRINT(SETENV.SETENV02.INI.DELVARS):   run;

NOTE: There were 142 observations read from the data set SASHELP.VMACRO.
NOTE: The data set WORK.VARS has 116 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SETENV.SETENV02.INI.DELVARS):   data _null_;
MPRINT(SETENV.SETENV02.INI.DELVARS):   set vars;
MPRINT(SETENV.SETENV02.INI.DELVARS):   temp=lag(name);
MPRINT(SETENV.SETENV02.INI.DELVARS):   if scope='GLOBAL' and substr(name,1,3) ne 'SYS' and temp ne name then call execute('%symdel '||trim(left(name))||';');
MPRINT(SETENV.SETENV02.INI.DELVARS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      
NOTE: There were 116 observations read from the data set WORK.VARS.

NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(SETENV.SETENV02.INI):   ;
debug=1 projectsmetapath=/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/metadata/projects/ 
general=/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/ 
repevpath=/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/ sepchar=/ tfnum=
runenvironment=repository progname=adae.sas pgmname=adae
compound=argx-113 indication=cidp study=argx-113-1902 revent=generic_adam
JOB_INSTANCE=Ngos_4_x0_47_1_3 _PARENTJOB_WS_=/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-ab0e4b77-6775-449d-b460-b8d10c536c3d _PARENTJOB_WRK_=
MPRINT(SETENV.SETENV02.INI):   libname _all_ clear;
NOTE: Libref GLOBMAC has been deassigned.
NOTE: Libref PROJMETA has been deassigned.
MPRINT(SETENV.SETENV02.INI):   proc datasets library=work memtype=data kill nolist;
NOTE: Deleting WORK.GEN_SETENV (memtype=DATA).
NOTE: Deleting WORK.REPEV_SETENV (memtype=DATA).
NOTE: Deleting WORK.VARS (memtype=DATA).
The SAS System

MPRINT(SETENV.SETENV02.INI):   quit;
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SETENV.SETENV02.INI):   libname projmeta "/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/metadata/projects/" access=readonly;
NOTE: Libref PROJMETA was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/metadata/projects
MPRINT(SETENV.SETENV02.INI):   libname repemeta 
"/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/documents" access=readonly;
NOTE: Libref REPEMETA was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/documents
sa=("/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/macros"                                   
                                                            "/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/gadam/_library" 
"/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/macros/global_macros" 
"/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/macros/_library" "!SASROOT/sasautos" 
"/sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.3/sasmacros" "/lsafshared/SASWorkspaces/global_macros")
MAUTOCOMPLOC:  The autocall macro READREPEVENTMETA is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/macros/_library/readrepeventmeta.sas.
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA):   data projmetameta;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA):   length Res_Reporting_Event_Path $500;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA):   set projmeta.meta;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA):   Res_Reporting_Event_Path = resolve(strip(Reporting_Event_Path));
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA):   run;

NOTE: There were 333 observations read from the data set PROJMETA.META.
NOTE: The data set WORK.PROJMETAMETA has 333 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA):   data _null_;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA):   set projmetameta;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA):   if strip(lowcase(Res_Reporting_Event_Path)) = strip(lowcase("/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/")) or 
strip(lowcase(Res_Reporting_Event_Path))||"/" = strip(lowcase("/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/"));
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA):   call symputx('repeventfile',strip(LOT));
MAUTOCOMPLOC:  The autocall macro VAREXIST is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/macros/_library/varexist.sas.
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA):   call symputx('repeventSheet',strip(LOT_sheet));
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA):   lines+1;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA):   call symputx('found',strip(put(lines,8.)));
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA):   run;

NOTE: There were 333 observations read from the data set WORK.PROJMETAMETA.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

repevpath=/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/
repeventfile=1902-generic-adam.xlsx
repeventSheet=LOT$A3:O
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.CHK):   ;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA):  ;
The SAS System

REPEVENTFILE_SP=1902-generic-adam_sp.xlsx
MAUTOCOMPLOC:  The autocall macro GETFILEDATE is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/macros/_library/getfiledate.sas.
ndatetime = 1989097201
fdatetime = 11JAN23:23:00:01
fname = 1902-generic-adam.xlsx
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA):  ;
1902-generic-adam.xlsx -> 11JAN23:23:00:01
NOT FOUND: /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/documents/1902-generic-adam_sp.xlsx
ndatetime = 1989097583
fdatetime = 11JAN23:23:06:23
fname = repemeta.sas7bdat
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA):  ;
repemeta.sas7bdat -> 11JAN23:23:00:01
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   ;
1902-generic-adam.xlsx (11JAN23:23:00:01) is not updated since repemeta.sas7bdat (11JAN23:23:06:23) is newer
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   *- JMB 2021-10-18 - remove outputs for current programs from repemeta.repemeta_resolved as we are going to recereate them and do not want 
old outputs not produced anymore to remain in the dataset -*;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   libname repemeta 
"/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/documents" compress=yes;
NOTE: Libref REPEMETA was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/documents
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   data repemeta.repemeta_resolved;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   set repemeta.repemeta_resolved;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   where lowcase(strip(sas_program)||'.sas') ^= strip(lowcase("adae.sas"));
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   run;

NOTE: There were 5 observations read from the data set REPEMETA.REPEMETA_RESOLVED.
      WHERE LOWCASE((STRIP(sas_program)||'.sas')) not = 'adae.sas';
NOTE: The data set REPEMETA.REPEMETA_RESOLVED has 5 observations and 11 variables.
NOTE: Compressing data set REPEMETA.REPEMETA_RESOLVED increased size by 100.00 percent. 
      Compressed is 2 pages; un-compressed would require 1 pages.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   libname repemeta 
"/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/documents" access=readonly;
NOTE: Libref REPEMETA was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/documents
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   *- JMB 2021-10-22 - export combined view (rather than only repemeta) to JSON -*;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   filename fjson 
"/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/documents/repemeta.json";
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   proc json out=fjson pretty;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   export repemeta.vrepemeta / nosastags;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   run;

NOTE: PROCEDURE JSON used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   filename fjson;
NOTE: Fileref FJSON has been deassigned.
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   *- unassign fileref -*;
The SAS System

MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA):  ;
MPRINT(SETENV.SETENV02.INI):  ;
MAUTOCOMPLOC:  The autocall macro SETREPEPATHS is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/macros/_library/setrepepaths.sas.
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   data a_null_;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   set repemeta.repesourcedata end=last;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   where not missing(libname);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   length path2 $1000;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   if path=:".." then 
path2=tranwrd("/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/"||strip(path),"/lsafshared/SASW
orkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a","");
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   else path2=path;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   if vtypex('access')='C' and upcase(cats(access)) in (' ' 'READONLY') then do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   if cats(access) = ' ' then call symputx("access"||strip(put(_n_,8.)), 'COMPRESS=YES');
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   else call symputx("access"||strip(put(_n_,8.)), 'access='||cats(access));
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   else do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   call symputx("access"||strip(put(_n_,8.)), 'COMPRESS=YES');
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   call symputx("dlibn"||strip(put(_n_,8.)),strip(libname));
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   call symputx("dpath"||strip(put(_n_,8.)),"/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a"||strip(path2));
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   if last then call symputx("nbls",strip(put(_n_,8.)));
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   access = access;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   *- avoid un-initialized note -*;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   run;

NOTE: There were 12 observations read from the data set REPEMETA.REPESOURCEDATA.
      WHERE not MISSING(libname);
NOTE: The data set WORK.A_NULL_ has 12 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

nbls = 12
MAUTOCOMPLOC:  The autocall macro DIREXIST is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/macros/_library/direxist.sas.
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   libname sdtm 
"/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/data_received/sdtm_last" COMPRESS=YES;
NOTE: Libref SDTM was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/data_received/sdtm_last
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   libname sdtmpool 
"/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-0000/biostat/staging/data_received/sdtm_last" COMPRESS=YES;
NOTE: Libref SDTMPOOL was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-0000/biostat/staging/data_received/sdtm_last
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   libname adam 
"/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/adam" COMPRESS=YES;
NOTE: Libref ADAM was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/adam
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   libname rdata 
"/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/output/data" COMPRESS=YES;
NOTE: Libref RDATA was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/output/data
The SAS System

MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   libname adamtmp 
"/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/adam/tmp" COMPRESS=YES;
NOTE: Libref ADAMTMP was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/adam/tmp
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   libname adamarch 
"/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/adam/archive" COMPRESS=YES;
NOTE: Libref ADAMARCH was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/adam/archive
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   libname sadam "/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a" COMPRESS=YES;
NOTE: Libref SADAM was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a
Notice: "/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/qc" does not exist in transient 
environment, skipping libname qcout assignment
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   *;
MAUTOCOMPLOC:  The autocall macro LSAF_EXISTS is compiling using the autocall source file /sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.3/sasmacros/lsaf_exists.sas.
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   *;
MAUTOCOMPLOC:  The autocall macro LSAF_GETPRODUCTNAME is compiling using the autocall source file /sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.3/sasmacros/lsaf_getproductname.sas.
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):  ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   data _null_;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib message length=$200;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib exists length=3;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/service/RepositoryService");
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/results/Result");
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/qc", results, exists);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/qc" ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   exists=-1;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   else do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   if (exists) then do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/qc" ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   else do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/qc" ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
The SAS System

MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   run;


NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/qc
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           1.29 seconds
      cpu time            0.01 seconds
      

MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):  ;
NOTE: "/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/qc" exists in the repository itself.
Notice: "/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/dictionaries/data" does not exist in transient environment, skipping libname dict 
assignment
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):  ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   data _null_;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib message length=$200;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib exists length=3;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/service/RepositoryService");
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/results/Result");
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/general/biostat/dictionaries/data", results, exists);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /general/biostat/dictionaries/data" ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   exists=-1;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   else do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   if (exists) then do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsg=" The item exists: /general/biostat/dictionaries/data" ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   else do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsg=" The item does not exist: /general/biostat/dictionaries/data" ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   run;

The SAS System

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /general/biostat/dictionaries/data
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.41 seconds
      cpu time            0.00 seconds
      

MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):  ;
NOTE: "/general/biostat/dictionaries/data" exists in the repository itself.
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   libname gadam 
"/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/adam/tmp" COMPRESS=YES;
NOTE: Libref GADAM refers to the same physical library as ADAMTMP.
NOTE: Libref GADAM was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/adam/tmp
Notice: "/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/narratives/data" does not exist in 
transient environment, skipping libname data assignment
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):  ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   data _null_;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib message length=$200;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib exists length=3;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/service/RepositoryService");
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/results/Result");
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/narratives/data", results, exists);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/narratives/data" ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   exists=-1;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   else do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   if (exists) then do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/narratives/data" ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   else do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/narratives/data" ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
The SAS System

MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   run;


NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/narratives/data
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.22 seconds
      cpu time            0.01 seconds
      

MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):  ;
NOTE: "/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/narratives/data" exists in the repository itself.
Notice: "/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/narratives/out" does not exist in 
transient environment, skipping libname out assignment
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):  ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   data _null_;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib message length=$200;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib exists length=3;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/service/RepositoryService");
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/results/Result");
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/narratives/out", results, exists);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/narratives/out" ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   exists=-1;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   else do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   if (exists) then do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsg=" The item exists: /clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/narratives/out" ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   else do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/narratives/out" ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   run;

The SAS System

NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/narratives/out
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.21 seconds
      cpu time            0.00 seconds
      

MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):  ;
NOTE: "/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/narratives/out" exists in the repository itself.
Notice:(DIREXIST): Created directory 
"/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/output/pdf"
Notice:(DIREXIST): Created directory 
"/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/output/rtf"
Notice:(DIREXIST): Created directory 
"/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/output/txt"
MPRINT(SETENV.SETENV02.INI):  ;
MAUTOCOMPLOC:  The autocall macro SETPATHS is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/macros/_library/setpaths.sas.
MPRINT(SETENV.SETENV02.INI.SETPATHS):   data title;
MPRINT(SETENV.SETENV02.INI.SETPATHS):   set repemeta.repeMETA;
MPRINT(SETENV.SETENV02.INI.SETPATHS):   where lowcase(strip(sas_program)) = strip(lowcase("adae")) or lowcase(strip(sas_program)) = strip(lowcase("adae.sas"));
MAUTOCOMPLOC:  The autocall macro ISBLANK is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/macros/_library/isblank.sas.
MPRINT(SETENV.SETENV02.INI.SETPATHS):   call symputx('outputfilename',strip(outputfilename));
MPRINT(SETENV.SETENV02.INI.SETPATHS):   if lowcase(strip(sas_program)) = lowcase(strip(outputfilename)) or lowcase(strip(sas_program)) = lowcase(strip(outputfilename)||".sas") then call 
symputx('output_eq_prog',"1");
MPRINT(SETENV.SETENV02.INI.SETPATHS):   run;

NOTE: There were 1 observations read from the data set REPEMETA.REPEMETA.
      WHERE LOWCASE(STRIP(sas_program)) in ('adae', 'adae.sas');
NOTE: The data set WORK.TITLE has 1 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MAUTOCOMPLOC:  The autocall macro OBSCNT is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/macros/_library/obscnt.sas.
OUTPUT written to /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/lst/__adae.lst
MPRINT(SETENV.SETENV02.INI.SETPATHS):   filename of 
"/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/lst/__adae.lst";
MPRINT(SETENV.SETENV02.INI.SETPATHS):   proc printto print=of new;
MPRINT(SETENV.SETENV02.INI.SETPATHS):   run;
NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SETENV.SETENV02.INI.SETPATHS):   filename logf 
"/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/log/__adae.log";
LOG written to /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/log/__adae.log
MPRINT(SETENV.SETENV02.INI.SETPATHS):   proc printto log=logf new;
MPRINT(SETENV.SETENV02.INI.SETPATHS):   run;

NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

The SAS System

DEBUG=1 RUNENVIRONMENT=repository
fileref(logf) = 0
Notice:(PROGRAMEND): Will not scan log as fileref(logf) ^= 0
MPRINT(PROGRAMEND):   option LS=180 PS=60;
MPRINT(PROGRAMEND):   data log1 (keep=line message upmsg war err un mac) mauto(keep=message upmsg mac) fulllog(keep=line message length) ;
MPRINT(PROGRAMEND):   length message upmsg lastlogfile logfile $ 400 ;
MPRINT(PROGRAMEND):   retain lastlogfile;
MPRINT(PROGRAMEND):   infile logf length=linelen filename=logfile eov=eov end=eof ;
MPRINT(PROGRAMEND):   line = 1;
MPRINT(PROGRAMEND):   retain mac 0;
MPRINT(PROGRAMEND):   do until(eof);
MPRINT(PROGRAMEND):   input @1 message $varying400. linelen;
MPRINT(PROGRAMEND):   if logfile ^= lastlogfile then do;
MPRINT(PROGRAMEND):   put " " / 180*"=";
MPRINT(PROGRAMEND):   put 3*"=" " Start of Redirected Log Content from File: " @(180-2) 3*"=";
MPRINT(PROGRAMEND):   put 3*"=" " " logfile @(180-2) 3*"=";
MPRINT(PROGRAMEND):   put 180*"=" ;
MPRINT(PROGRAMEND):   put 3*"=" @(180-2) 3*"=";
MPRINT(PROGRAMEND):   put 3*"=" @(180-2) 3*"=" / " ";
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   put message $varying400. linelen;
MPRINT(PROGRAMEND):   length = linelen;
MPRINT(PROGRAMEND):   output fulllog;
MPRINT(PROGRAMEND):   if eov or eof then do;
MPRINT(PROGRAMEND):   put " " / 3*"=" @(180-2) 3*"=";
MPRINT(PROGRAMEND):   put 3*"=" @(180-2) 3*"=";
MPRINT(PROGRAMEND):   put 180*"=";
MPRINT(PROGRAMEND):   put 3*"=" " End of Redirected Log Content from File: " @(180-2) 3*"=";
MPRINT(PROGRAMEND):   put 3*"=" " " logfile @(180-2) 3*"=";
MPRINT(PROGRAMEND):   put 180*"=" / " ";
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   line + 1;
MPRINT(PROGRAMEND):   upmsg = upcase(prxchange('s/%(l4g|log4sas)_(er[r]or|fa[t]al|war[n]ing)\b//' , -1, message));
MPRINT(PROGRAMEND):   war = 0;
MPRINT(PROGRAMEND):   err = 0;
MPRINT(PROGRAMEND):   un =0 ;
MPRINT(PROGRAMEND):   if index(upmsg,'MAUTOLOCDISPLAY')=1 or index(upmsg,'THIS MACRO WAS COMPILED FROM')>0 or index(upmsg,'MAUTOCOMPLOC:') = 1 or index(upmsg,'IS COMPILING USING 
THE AUTOCALL SOURCE FILE')>0 then mac=0;
MPRINT(PROGRAMEND):   if 0<mac<=4 then mac+1;
MPRINT(PROGRAMEND):   else mac=0;
MPRINT(PROGRAMEND):   if index(upmsg,'WARN'||'ING')=1 and not index(upmsg,'WARN'||'ING: DMS BOLD FONT') and not index(upmsg, 'WARN'||'ING: Unable to copy SAS'||'USER registry to 
WORK registry.') then war = 1;
MPRINT(PROGRAMEND):   else if index(upmsg,'ER'||'ROR')=1 and not index(upmsg,'_ER'||'ROR_=0') and not index(upmsg,'*** PROBLEM: LINE') then err = 1;
MPRINT(PROGRAMEND):   else if index(upmsg,'UNINI'||'TIALIZED') then un = 1;
MPRINT(PROGRAMEND):   else if index(upmsg,'MAUTOLOCDISPLAY') = 1 or index(upmsg,'THIS MACRO WAS COMPILED FROM')>0 or index(upmsg,'MAUTOCOMPLOC:') = 1 or index(upmsg,'IS COMPILING 
USING THE AUTOCALL SOURCE FILE')>0 then mac + 1;
MPRINT(PROGRAMEND):   if err or scan(upmsg,1,' ') eq 'NO'||'TE:' or un or war then output log1;
MPRINT(PROGRAMEND):   if mac ne 0 then output mauto;
MPRINT(PROGRAMEND):   lastlogfile = logfile;
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   run;

NOTE: The infile LOGF is:
      
      Filename=/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/log/__adae.l
      og,
      Owner Name=jbodart,Group Name=webtrust,
      Access Permission=-rw-rw----,
The SAS System

      Last Modified=11Jan2023:23:10:55,
      File Size (bytes)=216828


====================================================================================================================================================================================
=== Start of Redirected Log Content from File:                                                                                                                                   ===
=== /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/log/__adae.log      ===
====================================================================================================================================================================================
===                                                                                                                                                                              ===
===                                                                                                                                                                              ===

NOTE: PROCEDURE PRINTTO used (Total process time):
The SAS System

      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(SETENV.SETENV02.INI):  ;
Notice: =========================================================================================================
Notice: === (INI): Starting adae.sas - 2023-01-11T23:10:44 ===
Notice: =========================================================================================================
MAUTOCOMPLOC:  The autocall macro LOG4GADAM is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/gadam/_library/log4gadam.sas.
MPRINT(SETENV.SETENV02.INI.LOG4GADAM):   filename rev1 
("/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/log/monitor_adae.txt");
MPRINT(SETENV.SETENV02.INI.LOG4GADAM):   *;
MAUTOCOMPLOC:  The autocall macro LOG4SAS is compiling using the autocall source file /sso/sfw/sas/940/SASFoundation/9.4/sasautos/log4sas.sas.
MPRINT(SETENV.SETENV02.INI.LOG4GADAM.LOG4SAS):   ;
MPRINT(SETENV.SETENV02.INI.LOG4GADAM):  ;
MPRINT(SETENV.SETENV02.INI.LOG4GADAM):  ;
MPRINT(SETENV.SETENV02.INI.LOG4GADAM):  ;
MPRINT(SETENV.SETENV02.INI):  ;
MPRINT(SETENV.SETENV02):  ;
MPRINT(SETENV.SETENV02):  ;
MAUTOCOMPLOC:  The autocall macro GET_JOB_PROG_INFO is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/macros/_library/get_job_prog_info.sas.
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   data _null_;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   infile 
"/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/jobs/job_adae.job";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   input;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   *put _infile_;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   length progversion $32;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   if prxmatch("/^.*<inputSpec path=[""'][^<>""']*\/programs\/adae.sas[""'][^<>]* version=[""'][\*\d\.]+[""'][^<>]*\/>.*$/", _infile_) the
n do;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   progversion = prxchange("s/^.*<inputSpec path=[""'][^<>""']*\/programs\/adae.sas[""'][^<>]* version=[""']([\*\d\.]+)[""'][^<>]*\/>.*$/\
1/", 1, _infile_);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   put progversion=;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   call symputx('jobprogversion', progversion);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   end;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   run;

NOTE: The infile "/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/jobs/job_
adae.job" is:
      Filename=/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/jobs/job_ada
e.job,
      Owner Name=webtrust,Group Name=webtrust,
      Access Permission=-rw-rw-rw-,
The SAS System

      Last Modified=11Jan2023:23:00:02,
      File Size (bytes)=2921

progversion=*
NOTE: 41 records were read from the infile 
      "/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/jobs/job_adae.job".
      The minimum record length was 6.
      The maximum record length was 156.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MAUTOCOMPLOC:  The autocall macro LSAF_GET_VERSION is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/macros/_library/lsaf_get_version.sas.
MAUTOCOMPLOC:  The autocall macro LOCAL_LSAF is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/macros/_library/local_lsaf.sas.
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION):   *;
The SAS System

MAUTOCOMPLOC:  The autocall macro LSAF_GETPROPERTIES is compiling using the autocall source file /sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.3/sasmacros/lsaf_getpro
perties.sas.
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):  ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   data work.lsafGetProperties (label="Created by LSAF_GETPROPERTIES" KEEP=path name displayName value
 type isReadonly 
isExtended);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   attrib returnCode length=8 message length=$200 logMsgPrefix length=$70 logMsgPrimary length=$70 log
Msg length=$300 
rowCount length=8 path length=$2048 label="Item Path" name length=$256 label="Property Name" displayName length=$256 label="Property Display Name" value length=$2048 label="Propert
y Value" type 
length=$32 label="Property Type" isReadonly length=8 label="Property value is not modifiable." isExtended length=8 label="Property is an Extended Attribute" ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   rowCount=0;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   declare javaobj srv("com/sas/lsaf/macro/service/RepositoryService") ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   declare javaobj results("com/sas/lsaf/macro/results/SasRepositoryItemPropertiesResult");
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   srv.callStaticVoidMethod("getProperties", 
"/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/programs/adae.sas", "", results);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   results.callStringMethod("getReturnMessage", message);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   if (returnCode ne 0) then do;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   logMsg=" Cannot retrieve list of properties for 
/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/programs/adae.sas" ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   end;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   else do;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   logMsgPrimary=logMsgPrefix;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   logMsg=" List of properties were returned for 
/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/programs/adae.sas" ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   results.callIntMethod("getSize", rowCount);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   do row=0 to rowCount - 1;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   path="/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/programs/adae.sas";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   results.callStringMethod("getPropertyName", row, name);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   results.callStringMethod("getPropertyValue", row, value);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   results.callStringMethod("getPropertyDisplayName", row, displayName);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   results.callStringMethod("getPropertyAttributeType", row, type);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   results.callBooleanMethod("getPropertyIsReadOnly", row, isReadonly);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   results.callBooleanMethod("getPropertyIsExtended", row, isExtended);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   output;
The SAS System

MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   end;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   end;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   put;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   put logMsgPrimary " " logMsg;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   put logMsgPrefix " " "lsaf_getproperties";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   if (rowCount=0) then put logMsgPrefix " No properties were retrieved.";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   else put logMsgPrefix " " rowCount " records written to data set work.lsafGetProperties";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   put;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   call symputx("_lsafRC_", returnCode);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   call symputx("_lsafMsg_", message);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   call symputx("_lsafRowCount_", rowCount);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   run;


NOTE: SAS Life Science Analytics Framework Macro: *  List of properties were returned for /clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/programs/adae.sas
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_getproperties
NOTE: SAS Life Science Analytics Framework Macro: *  16  records written to data set work.lsafGetProperties
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: The data set WORK.LSAFGETPROPERTIES has 16 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.76 seconds
The SAS System

      cpu time            0.01 seconds


MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   options nonotes;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   proc sort data=work.lsafGetProperties;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   by name;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   run;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   options NOTES;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION):  ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION):   data _null_;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION):   set lsafGetProperties(where=(name='version'));
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION):   call symputx(symget('into'), coalescec(cats(value), '-'), 'G');
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION):   run;

NOTE: There were 1 observations read from the data set WORK.LSAFGETPROPERTIES.
      WHERE name='version';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):  ;
MPRINT(SETENV.SETENV02):  ;
progversion = -
MPRINT(SETENV):  ;
MPRINT(SETENV):   options nomprintnest;
(SETENV): Done.
194        
195        %adae;
MAUTOCOMPLOC:  The autocall macro ADAE is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/gadam/_library/adae.sas.
MPRINT(LOG4GADAM):   filename rev1 
The SAS System

("/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/log/monitor_adae.txt");
MPRINT(LOG4SAS):   ;
MPRINT(LOG4GADAM):  ;
MPRINT(LOG4GADAM):  ;
MPRINT(LOG4GADAM):  ;
MPRINT(ADAE):  ;
MAUTOCOMPLOC:  The autocall macro GADAMREADSPECS is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/gadam/_library/gadamreadspecs.sas.
MPRINT(LOG4GADAM):   filename rev1 
("/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/log/monitor_adae.txt");
MPRINT(LOG4SAS):   ;
MPRINT(LOG4GADAM):  ;
MPRINT(LOG4GADAM):  ;
MPRINT(LOG4GADAM):  ;
MPRINT(GADAMREADSPECS):  ;
MPRINT(GADAMREADSPECS):   filename adamspec "/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/gadam/metadata/argx-adam1.2.xlsx
";
Local ADaM Specs file: _ADAMSPEC_SP=argx-adam1.2_sp.xlsx
Local file does not exist: 
/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/documents/argx-adam1.2_sp.x
lsx
MPRINT(GADAMREADSPECS):   PROC IMPORT OUT= adaekeys (where=(upcase(domain)="ADAE")) DATAFILE= adamspec DBMS=xlsx REPLACE;
MPRINT(GADAMREADSPECS):   RXLX;
MPRINT(GADAMREADSPECS):   RANGE="domainList$A2:";
MPRINT(GADAMREADSPECS):   GETNAMES=YES;
MPRINT(GADAMREADSPECS):   RUN;

NOTE: One or more variables were converted because the data type is not supported by the V9 engine. For more details, run with options MSGLEVEL=I.
The SAS System

NOTE: The import data set has 13 observations and 5 variables.
NOTE: WORK.ADAEKEYS data set was successfully created.
NOTE: PROCEDURE IMPORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


MPRINT(GADAMREADSPECS):   data _null_;
MPRINT(GADAMREADSPECS):   set adaekeys;
MPRINT(GADAMREADSPECS):   commas = countc(keys,',') + 1;
MPRINT(GADAMREADSPECS):   call symputx('nb_keys',strip(put(commas,8.)), 'G');
MPRINT(GADAMREADSPECS):   do i = 1 to commas;
MPRINT(GADAMREADSPECS):   key = scan(keys,i,',');
MPRINT(GADAMREADSPECS):   call symputx('key'||strip(put(i,8.)),strip(key), 'G');
MPRINT(GADAMREADSPECS):   output;
MPRINT(GADAMREADSPECS):   end;
MPRINT(GADAMREADSPECS):   run;

NOTE: There were 1 observations read from the data set WORK.ADAEKEYS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMREADSPECS):   PROC IMPORT OUT= adaespec (rename=(type=ctype length=clength format=cformat)) DATAFILE= adamspec DBMS=xlsx REPLACE;
MPRINT(GADAMREADSPECS):   RXLX;
MPRINT(GADAMREADSPECS):   RANGE="ADAE$2A:";
MPRINT(GADAMREADSPECS):   GETNAMES=YES;
The SAS System

MPRINT(GADAMREADSPECS):   RUN;

NOTE: One or more variables were converted because the data type is not supported by the V9 engine. For more details, run with options MSGLEVEL=I.
NOTE: The import data set has 69 observations and 13 variables.
NOTE: WORK.ADAESPEC data set was successfully created.
NOTE: PROCEDURE IMPORT used (Total process time):
      real time           5.75 seconds
      cpu time            5.75 seconds


MPRINT(GADAMREADSPECS):   data adaespec;
MPRINT(GADAMREADSPECS):   set adaespec;
MPRINT(GADAMREADSPECS):   where upcase(include)="Y";
MPRINT(GADAMREADSPECS):   run;

NOTE: There were 68 observations read from the data set WORK.ADAESPEC.
      WHERE UPCASE(include)='Y';
NOTE: The data set WORK.ADAESPEC has 68 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMREADSPECS):   proc sql noprint;
MPRINT(GADAMREADSPECS):   select count(distinct codelist) into :cdlistn from adaespec where codelist ne '';
MPRINT(GADAMREADSPECS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds

The SAS System


MPRINT(GADAMREADSPECS):   proc sql noprint;
MPRINT(GADAMREADSPECS):   select distinct compress(codelist,'','kn') into :cdlist separated by '","' from adaespec;
MPRINT(GADAMREADSPECS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMREADSPECS):   PROC IMPORT OUT= adaecdlist0 (rename=(fmtname=ctnam cdname=ctlnam code=rank value=code value_label=decode) drop=ctlink IG1_1) DATAFILE= adamspec DBMS=xlsx
 REPLACE;
MPRINT(GADAMREADSPECS):   RXLX;
MPRINT(GADAMREADSPECS):   RANGE="CodeList$A2:";
MPRINT(GADAMREADSPECS):   GETNAMES=YES;
MPRINT(GADAMREADSPECS):   RUN;

NOTE:    Variable Name Change.  IG1.1 -> IG1_1                           
NOTE: One or more variables were converted because the data type is not supported by the V9 engine. For more details, run with options MSGLEVEL=I.
NOTE: The import data set has 1105 observations and 7 variables.
NOTE: WORK.ADAECDLIST0 data set was successfully created.
NOTE: PROCEDURE IMPORT used (Total process time):
      real time           0.06 seconds
      cpu time            0.07 seconds


MPRINT(GADAMREADSPECS):   proc sql noprint;
The SAS System

MPRINT(GADAMREADSPECS):   create table adaecdlist as select * from adaecdlist0 where ctnam in ("","ASPER","ASPERC","NY","UNIT_DUR");
NOTE: Table WORK.ADAECDLIST created, with 12 rows and 5 columns.

NOTE: PROC SQL statements are executed immediately; The RUN statement has no effect.
MPRINT(GADAMREADSPECS):   run;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMREADSPECS):   proc sql noprint;
MPRINT(GADAMREADSPECS):   select count(ctnam) into :checkn from adaecdlist;
MPRINT(GADAMREADSPECS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("Codelist tab successfully read in for adae.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |Codelist tab successfully read in for adae.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
The SAS System

MPRINT(GADAMREADSPECS):  ;
MPRINT(GADAMREADSPECS):   proc sql noprint;
MPRINT(GADAMREADSPECS):   select distinct count(distinct codelist), compress(codelist,'','kn') into :miscdlistn, :miscdlist separated by ' ' from adaespec where compress(codelist,'
','kn') not in 
(select distinct ctnam from adaecdlist);
NOTE: The query requires remerging summary statistics back with the original data.
NOTE: PROC SQL statements are executed immediately; The RUN statement has no effect.
MPRINT(GADAMREADSPECS):   run;
MAUTOCOMPLOC:  The autocall macro GADAMCDLISTFORMATS is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/gadam/_library/gadamcdlistformats.sas.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMCDLISTFORMATS):   data def_term_num (rename=(ctnam=ctnamn ctlnam=ctlnamn code=coden decode=decoden rank=rankn ctnam_merge=ctnam_mergen)) def_term_rest;
MPRINT(GADAMCDLISTFORMATS):   set adaecdlist (keep=ct: code decode rank);
MPRINT(GADAMCDLISTFORMATS):   if substr(ctnam,length(ctnam)-1,2)='CD' then ctnam_merge=strip(substr(ctnam, 1, length(ctnam)-2));
MPRINT(GADAMCDLISTFORMATS):   else ctnam_merge=ctnam;
MPRINT(GADAMCDLISTFORMATS):   if index(ctlnam,'(N)')>0 then do;
MPRINT(GADAMCDLISTFORMATS):   ctnam_merge=strip(substr(ctnam, 1, length(ctnam)-1));
MPRINT(GADAMCDLISTFORMATS):   output def_term_num;
MPRINT(GADAMCDLISTFORMATS):   end;
The SAS System

MPRINT(GADAMCDLISTFORMATS):   else output def_term_rest;
MPRINT(GADAMCDLISTFORMATS):   run;

NOTE: There were 12 observations read from the data set WORK.ADAECDLIST.
NOTE: The data set WORK.DEF_TERM_NUM has 4 observations and 6 variables.
NOTE: The data set WORK.DEF_TERM_REST has 8 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(GADAMCDLISTFORMATS):   proc sql noprint;
MPRINT(GADAMCDLISTFORMATS):   create table def_term as select * from def_term_num a full join def_term_rest b on a.ctnam_mergen=b.ctnam_merge and (a.decoden=b.decode or a.decoden=b
.code) order by 
ctnamn, ctnam, rank;
NOTE: Table WORK.DEF_TERM created, with 12 rows and 12 columns.

MPRINT(GADAMCDLISTFORMATS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMCDLISTFORMATS):   data def_term1;
MPRINT(GADAMCDLISTFORMATS):   set def_term;
MPRINT(GADAMCDLISTFORMATS):   if code ne '' and decode ='' then decode=code;
MPRINT(GADAMCDLISTFORMATS):   output;
MPRINT(GADAMCDLISTFORMATS):   if ctnamn ne '' then do;
MPRINT(GADAMCDLISTFORMATS):   ctnam=ctnamn;
MPRINT(GADAMCDLISTFORMATS):   ctlnam=ctlnamn;
MPRINT(GADAMCDLISTFORMATS):   ctlnamn='';
MPRINT(GADAMCDLISTFORMATS):   code=coden;
MPRINT(GADAMCDLISTFORMATS):   decode=decoden;
MPRINT(GADAMCDLISTFORMATS):   output;
MPRINT(GADAMCDLISTFORMATS):   end;
MPRINT(GADAMCDLISTFORMATS):   drop ctnam_merge ctnamn;
MPRINT(GADAMCDLISTFORMATS):   run;
The SAS System


NOTE: There were 12 observations read from the data set WORK.DEF_TERM.
NOTE: The data set WORK.DEF_TERM1 has 16 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMCDLISTFORMATS):   data def_term2;
MPRINT(GADAMCDLISTFORMATS):   set def_term1;
MPRINT(GADAMCDLISTFORMATS):   if ctnam='' then delete;
MPRINT(GADAMCDLISTFORMATS):   run;

NOTE: There were 16 observations read from the data set WORK.DEF_TERM1.
NOTE: The data set WORK.DEF_TERM2 has 12 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
The SAS System


MPRINT(GADAMCDLISTFORMATS):   proc sort data=def_term2 out=def_term2s;
MPRINT(GADAMCDLISTFORMATS):   by ctnam;
MPRINT(GADAMCDLISTFORMATS):   run;

NOTE: There were 12 observations read from the data set WORK.DEF_TERM2.
NOTE: The data set WORK.DEF_TERM2S has 12 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMCDLISTFORMATS):   data fmtdset0;
MPRINT(GADAMCDLISTFORMATS):   length type $1.;
MPRINT(GADAMCDLISTFORMATS):   set def_term2s;
MPRINT(GADAMCDLISTFORMATS):   if index(ctlnam,'(N)')>0 then do;
MPRINT(GADAMCDLISTFORMATS):   type='N';
MPRINT(GADAMCDLISTFORMATS):   fmtname=compress(ctnam,' ','')||'NL';
MPRINT(GADAMCDLISTFORMATS):   end;
MPRINT(GADAMCDLISTFORMATS):   else do;
MPRINT(GADAMCDLISTFORMATS):   type='C';
MPRINT(GADAMCDLISTFORMATS):   fmtname=compress(ctnam,' ','')||'CL';
MPRINT(GADAMCDLISTFORMATS):   end;
MPRINT(GADAMCDLISTFORMATS):   output;
MPRINT(GADAMCDLISTFORMATS):   if index(ctlnamn,'(N)')>0 then do;
MPRINT(GADAMCDLISTFORMATS):   fmtname=compress(ctnam,' ','')||'CN';
MPRINT(GADAMCDLISTFORMATS):   decode=coden;
MPRINT(GADAMCDLISTFORMATS):   type='I';
MPRINT(GADAMCDLISTFORMATS):   output;
MPRINT(GADAMCDLISTFORMATS):   end;
MPRINT(GADAMCDLISTFORMATS):   run;

NOTE: There were 12 observations read from the data set WORK.DEF_TERM2S.
NOTE: The data set WORK.FMTDSET0 has 12 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


The SAS System

MPRINT(GADAMCDLISTFORMATS):   data fmtdset1;
MPRINT(GADAMCDLISTFORMATS):   set fmtdset0;
MPRINT(GADAMCDLISTFORMATS):   start=strip(code);
MPRINT(GADAMCDLISTFORMATS):   label=strip(decode);
MPRINT(GADAMCDLISTFORMATS):   hlo='';
MPRINT(GADAMCDLISTFORMATS):   keep start label type fmtname rank hlo;
MPRINT(GADAMCDLISTFORMATS):   if start=label then delete;
MPRINT(GADAMCDLISTFORMATS):   run;

NOTE: There were 12 observations read from the data set WORK.FMTDSET0.
NOTE: The data set WORK.FMTDSET1 has 6 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMCDLISTFORMATS):   proc sort data=fmtdset1 nodupkey;
The SAS System

MPRINT(GADAMCDLISTFORMATS):   by _all_;
MPRINT(GADAMCDLISTFORMATS):   run;

NOTE: There were 6 observations read from the data set WORK.FMTDSET1.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK.FMTDSET1 has 6 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMCDLISTFORMATS):   proc sort data=fmtdset1 out=fmtdset2;
MPRINT(GADAMCDLISTFORMATS):   by fmtname start rank;
MPRINT(GADAMCDLISTFORMATS):   run;

NOTE: There were 6 observations read from the data set WORK.FMTDSET1.
NOTE: The data set WORK.FMTDSET2 has 6 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMCDLISTFORMATS):   data fmtdset2;
MPRINT(GADAMCDLISTFORMATS):   set fmtdset2;
MPRINT(GADAMCDLISTFORMATS):   by fmtname start rank;
MPRINT(GADAMCDLISTFORMATS):   if first.start;
MPRINT(GADAMCDLISTFORMATS):   run;

NOTE: There were 6 observations read from the data set WORK.FMTDSET2.
NOTE: The data set WORK.FMTDSET2 has 6 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMCDLISTFORMATS):   proc sort data=fmtdset2 out=fmtdset (drop=rank);
MPRINT(GADAMCDLISTFORMATS):   by fmtname rank;
MPRINT(GADAMCDLISTFORMATS):   run;

NOTE: There were 6 observations read from the data set WORK.FMTDSET2.
NOTE: The data set WORK.FMTDSET has 6 observations and 5 variables.
The SAS System

NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMCDLISTFORMATS):   proc format cntlin=fmtdset cntlout=cdl_formats;
NOTE: Format ASPERNL has been output.
NOTE: Format $NYCL has been output.
MPRINT(GADAMCDLISTFORMATS):   run;

NOTE: PROCEDURE FORMAT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds

NOTE: The data set WORK.CDL_FORMATS has 6 observations and 21 variables.
The SAS System

NOTE: There were 6 observations read from the data set WORK.FMTDSET.

MPRINT(GADAMREADSPECS):  ;
MAUTOCOMPLOC:  The autocall macro GADAMDEPENDENCYCHECK is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/gadam/_library/gadamdependencycheck.sas.
MPRINT(GADAMDEPENDENCYCHECK):   data alldependencies (drop=i);
MPRINT(GADAMDEPENDENCYCHECK):   set adaespec (where=( not missing(dependency) ));
MPRINT(GADAMDEPENDENCYCHECK):   _osortorder=_n_;
MPRINT(GADAMDEPENDENCYCHECK):   count_dependency = countc(dependency, ',')+1;
MPRINT(GADAMDEPENDENCYCHECK):   length tocheck memname contname valname $32;
MPRINT(GADAMDEPENDENCYCHECK):   do i = 1 to count_dependency;
MPRINT(GADAMDEPENDENCYCHECK):   if countc(dependency,'.') lt 1 then put 'W' 'ARNING: dependency need to be a comma separated list of dataset.variable values ' dependency;
MPRINT(GADAMDEPENDENCYCHECK):   tocheck = scan(dependency,i,',');
MPRINT(GADAMDEPENDENCYCHECK):   memname = strip(upcase(scan(tocheck,1,'.')));
MPRINT(GADAMDEPENDENCYCHECK):   contname = strip(upcase(scan(tocheck,2,'.')));
MPRINT(GADAMDEPENDENCYCHECK):   valname='';
MPRINT(GADAMDEPENDENCYCHECK):   if index(upcase(memname),'SUPP')>0 and countc(tocheck,'.')=2 then valname = strip(upcase(scan(tocheck,3,'.')));
MPRINT(GADAMDEPENDENCYCHECK):   output;
MPRINT(GADAMDEPENDENCYCHECK):   end;
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: There were 68 observations read from the data set WORK.ADAESPEC.
      WHERE not MISSING(dependency);
NOTE: The data set WORK.ALLDEPENDENCIES has 124 observations and 19 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   proc sort data=alldependencies;
MPRINT(GADAMDEPENDENCYCHECK):   by memname contname valname;
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: There were 124 observations read from the data set WORK.ALLDEPENDENCIES.
NOTE: The data set WORK.ALLDEPENDENCIES has 124 observations and 19 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   proc sort data=alldependencies (keep=name dependency tocheck memname contname valname) out=checkdset ;
MPRINT(GADAMDEPENDENCYCHECK):   by memname contname valname;
MPRINT(GADAMDEPENDENCYCHECK):   run;
The SAS System


NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 124 observations read from the data set WORK.ALLDEPENDENCIES.
NOTE: The data set WORK.CHECKDSET has 124 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   proc contents data=sdtm._all_ out=allsdtm (keep=memname name rename=(name=contname)) noprint;
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: The data set WORK.ALLSDTM has 979 observations and 2 variables.
The SAS System

NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.02 seconds
      cpu time            0.02 seconds


MPRINT(GADAMDEPENDENCYCHECK):   proc sort data=allsdtm;
MPRINT(GADAMDEPENDENCYCHECK):   by memname contname;
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: There were 979 observations read from the data set WORK.ALLSDTM.
NOTE: The data set WORK.ALLSDTM has 979 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(GADAMDEPENDENCYCHECK):   data this (drop=sourceexists) suppxx adxx (drop=sourceexists) exists;
MPRINT(GADAMDEPENDENCYCHECK):   merge checkdset (in=a) allsdtm (in=b);
MPRINT(GADAMDEPENDENCYCHECK):   by memname contname;
MPRINT(GADAMDEPENDENCYCHECK):   if a;
MPRINT(GADAMDEPENDENCYCHECK):   length sourceexists 8;
MPRINT(GADAMDEPENDENCYCHECK):   if b then sourceexists=1;
MPRINT(GADAMDEPENDENCYCHECK):   if b and index(upcase(memname),'SUPP')>0 and contname="QNAM" and valname ne '' then output suppxx;
MPRINT(GADAMDEPENDENCYCHECK):   else if not b and strip(upcase(memname))=strip("ADAE") then output this;
MPRINT(GADAMDEPENDENCYCHECK):   else if not b and substr(upcase(memname),1,2)="AD" then output adxx;
MPRINT(GADAMDEPENDENCYCHECK):   else output exists;
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: There were 124 observations read from the data set WORK.CHECKDSET.
NOTE: There were 979 observations read from the data set WORK.ALLSDTM.
NOTE: The data set WORK.THIS has 55 observations and 6 variables.
NOTE: The data set WORK.SUPPXX has 1 observations and 7 variables.
NOTE: The data set WORK.ADXX has 6 observations and 6 variables.
NOTE: The data set WORK.EXISTS has 62 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   proc sql noprint;
MPRINT(GADAMDEPENDENCYCHECK):   select count(distinct memname) into :nsuppdomain from suppxx;
MPRINT(GADAMDEPENDENCYCHECK):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
The SAS System



nsuppdomain=1
MPRINT(GADAMDEPENDENCYCHECK):   data suppxx;
MPRINT(GADAMDEPENDENCYCHECK):   set suppxx;
MPRINT(GADAMDEPENDENCYCHECK):   sourceexists=.;
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: There were 1 observations read from the data set WORK.SUPPXX.
NOTE: The data set WORK.SUPPXX has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
The SAS System

      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   proc sql noprint;
MPRINT(GADAMDEPENDENCYCHECK):   select distinct memname into :suppdomain separated by ' ' from suppxx;
MPRINT(GADAMDEPENDENCYCHECK):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


suppdomain=SUPPAE
suppdomain_=SUPPAE
MPRINT(GADAMDEPENDENCYCHECK):   proc sql;
MPRINT(GADAMDEPENDENCYCHECK):   create table _suppqnam as select distinct qnam from sdtm.SUPPAE;
NOTE: Table WORK._SUPPQNAM created, with 2 rows and 1 columns.

MPRINT(GADAMDEPENDENCYCHECK):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(GADAMDEPENDENCYCHECK):   proc sql undo_policy=none;
MPRINT(GADAMDEPENDENCYCHECK):   create table suppxx (drop=sourceexists_) as select distinct a.*, case when a.sourceexists_ ne . then a.sourceexists_ when b.qnam ne '' then 1 when b
.qnam = '' and 
a.memname="SUPPAE" then 0 else . end as sourceexists from suppxx (rename=(sourceexists=sourceexists_)) as a left join _suppqnam as b on a.memname="SUPPAE" and upcase(a.valname)=upc
ase(b.qnam) order 
by memname, contname, valname;
NOTE: Table WORK.SUPPXX created, with 1 rows and 7 columns.

MPRINT(GADAMDEPENDENCYCHECK):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   data exists;
MPRINT(GADAMDEPENDENCYCHECK):   set exists suppxx;
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: There were 62 observations read from the data set WORK.EXISTS.
NOTE: There were 1 observations read from the data set WORK.SUPPXX.
NOTE: The data set WORK.EXISTS has 63 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds

The SAS System


MPRINT(GADAMDEPENDENCYCHECK):   proc sql noprint;
MPRINT(GADAMDEPENDENCYCHECK):   select count(distinct memname) into :nbadxx from adxx;
MPRINT(GADAMDEPENDENCYCHECK):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
The SAS System



NBADXX=1
MPRINT(GADAMDEPENDENCYCHECK):   proc sql noprint;
MPRINT(GADAMDEPENDENCYCHECK):   select distinct memname into :adxx_list separated by ' ' from adxx;
MPRINT(GADAMDEPENDENCYCHECK):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


ADXX_LIST=ADSL
ADXX_=ADSL
MPRINT(GADAMDEPENDENCYCHECK):   proc contents data=adamtmp.ADSL out=_temp (keep=memname name rename=(name=contname)) noprint;
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: The data set WORK._TEMP has 64 observations and 2 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   data _temp2;
MPRINT(GADAMDEPENDENCYCHECK):   merge adxx (in=a where=(memname="ADSL")) _temp (in=b);
MPRINT(GADAMDEPENDENCYCHECK):   by memname contname;
MPRINT(GADAMDEPENDENCYCHECK):   if a;
MPRINT(GADAMDEPENDENCYCHECK):   length sourceexists 8;
MPRINT(GADAMDEPENDENCYCHECK):   if b then sourceexists=1;
MPRINT(GADAMDEPENDENCYCHECK):   else sourceexists=0;
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: There were 6 observations read from the data set WORK.ADXX.
      WHERE memname='ADSL';
NOTE: There were 64 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP2 has 6 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   data exists;
MPRINT(GADAMDEPENDENCYCHECK):   set exists _temp2;
MPRINT(GADAMDEPENDENCYCHECK):   run;
NOTE: There were 63 observations read from the data set WORK.EXISTS.
NOTE: There were 6 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK.EXISTS has 69 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


The SAS System

MPRINT(GADAMDEPENDENCYCHECK):   data _null_;
MPRINT(GADAMDEPENDENCYCHECK):   set this end=last;
MPRINT(GADAMDEPENDENCYCHECK):   if last then call symputx('nbthis',strip(put(_n_,8.)));
MPRINT(GADAMDEPENDENCYCHECK):   run;
The SAS System

NOTE: There were 55 observations read from the data set WORK.THIS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   **add sourceexists for vars dependent on other derived vars within same domain ;
MAUTOCOMPLOC:  The autocall macro GADAMDEPENDENCYWITHIN is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/gadam/_library/gadamdependencywithin.sas.
MPRINT(GADAMDEPENDENCYWITHIN):   proc sql noprint;
MPRINT(GADAMDEPENDENCYWITHIN):   select distinct domain into: dom from alldependencies;
MPRINT(GADAMDEPENDENCYWITHIN):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYWITHIN):   data _specs1 ;
MPRINT(GADAMDEPENDENCYWITHIN):   set alldependencies ;
MPRINT(GADAMDEPENDENCYWITHIN):   run;

NOTE: There were 124 observations read from the data set WORK.ALLDEPENDENCIES.
NOTE: The data set WORK._SPECS1 has 124 observations and 19 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYWITHIN):   proc sql noprint;
MPRINT(GADAMDEPENDENCYWITHIN):   create table _specs2 as select distinct domain , name , memname , contname from _specs1 ;
NOTE: Table WORK._SPECS2 created, with 124 rows and 4 columns.

MPRINT(GADAMDEPENDENCYWITHIN):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYWITHIN):   data _depcheck1 ;
MPRINT(GADAMDEPENDENCYWITHIN):   if _n_ = 1 then do ;
MPRINT(GADAMDEPENDENCYWITHIN):   dcl hash vord (dataset:'_specs2' , multidata: "Y") ;
MPRINT(GADAMDEPENDENCYWITHIN):   vord.definekey ("name") ;
MPRINT(GADAMDEPENDENCYWITHIN):   vord.definedata ( "contname" , "memname" ) ;
MPRINT(GADAMDEPENDENCYWITHIN):   vord.definedone ();
MPRINT(GADAMDEPENDENCYWITHIN):   end;
MPRINT(GADAMDEPENDENCYWITHIN):   set _specs2 (where=( strip(memname) = strip(domain) )) ;
MPRINT(GADAMDEPENDENCYWITHIN):   by name ;
MPRINT(GADAMDEPENDENCYWITHIN):   length stack alldep $ 500 var1 $ 8 ;
MPRINT(GADAMDEPENDENCYWITHIN):   retain alldep ;
MPRINT(GADAMDEPENDENCYWITHIN):   retain _abort 0;
MPRINT(GADAMDEPENDENCYWITHIN):   if first.name then alldep = '' ;
MPRINT(GADAMDEPENDENCYWITHIN):   stack = contname ;
MPRINT(GADAMDEPENDENCYWITHIN):   alldep = catx(' ' , alldep, contname ) ;
The SAS System

MPRINT(GADAMDEPENDENCYWITHIN):   s = 0;
MPRINT(GADAMDEPENDENCYWITHIN):   **resolve lineage and output all dependent variables that are derived vars within domain ;
MPRINT(GADAMDEPENDENCYWITHIN):   do while ( stack ne '' and _abort = 0 ) ;
The SAS System

MPRINT(GADAMDEPENDENCYWITHIN):   put s= name = var1 = stack = ;
MPRINT(GADAMDEPENDENCYWITHIN):   var1 = strip(scan(stack,1,' ') );
MPRINT(GADAMDEPENDENCYWITHIN):   s = s+ 1 ;
MPRINT(GADAMDEPENDENCYWITHIN):   if s > 50 then do;
MPRINT(GADAMDEPENDENCYWITHIN):   put 'WARN' 'ING: Check loop exit condition ' ;
MPRINT(GADAMDEPENDENCYWITHIN):   leave ;
MPRINT(GADAMDEPENDENCYWITHIN):   end;
MPRINT(GADAMDEPENDENCYWITHIN):   if strip(memname) = strip(domain) then output;
MPRINT(GADAMDEPENDENCYWITHIN):   r = 0 ;
MPRINT(GADAMDEPENDENCYWITHIN):   do _find = vord.find(key: var1) by 0 while(_find = 0 ) ;
MPRINT(GADAMDEPENDENCYWITHIN):   r = r + 1 ;
MPRINT(GADAMDEPENDENCYWITHIN):   if r > 50 then do;
MPRINT(GADAMDEPENDENCYWITHIN):   put 'WARN' 'ING: Check loop exit condition ' ;
MPRINT(GADAMDEPENDENCYWITHIN):   leave ;
MPRINT(GADAMDEPENDENCYWITHIN):   end;
MPRINT(GADAMDEPENDENCYWITHIN):   if strip(contname) = name then do;
MPRINT(GADAMDEPENDENCYWITHIN):   put 'ERR' 'OR:  Circular logic : ' name= contname= var1= ;
MPRINT(GADAMDEPENDENCYWITHIN):   _abort = 1 ;
MPRINT(GADAMDEPENDENCYWITHIN):   _errcode = 'ER' !! 'ROR: Circular logic ' !! strip(var1) ;
MPRINT(GADAMDEPENDENCYWITHIN):   output;
MPRINT(GADAMDEPENDENCYWITHIN):   leave ;
MPRINT(GADAMDEPENDENCYWITHIN):   end;
MPRINT(GADAMDEPENDENCYWITHIN):   if memname = domain then do ;
MPRINT(GADAMDEPENDENCYWITHIN):   output ;
MPRINT(GADAMDEPENDENCYWITHIN):   **add dependent var to stack if derived within domain ;
MPRINT(GADAMDEPENDENCYWITHIN):   stack = catx(' ' , stack, contname ) ;
MPRINT(GADAMDEPENDENCYWITHIN):   end;
MPRINT(GADAMDEPENDENCYWITHIN):   _find = vord.find_next();
MPRINT(GADAMDEPENDENCYWITHIN):   end;
MPRINT(GADAMDEPENDENCYWITHIN):   if _find ne 0 and r= 0 then do;
MPRINT(GADAMDEPENDENCYWITHIN):   put 'ERR' 'OR:  Variable not found : ' name= contname= var1= ;
MPRINT(GADAMDEPENDENCYWITHIN):   _errcode = 'ER' !! 'ROR: Variable not found ' !! strip(var1) ;
MPRINT(GADAMDEPENDENCYWITHIN):   _abort = 1;
MPRINT(GADAMDEPENDENCYWITHIN):   output;
MPRINT(GADAMDEPENDENCYWITHIN):   leave ;
MPRINT(GADAMDEPENDENCYWITHIN):   end;
MPRINT(GADAMDEPENDENCYWITHIN):   **move to next car on stack ;
MPRINT(GADAMDEPENDENCYWITHIN):   if scan(stack,2, ' ') ne ' ' then stack = substr( strip(stack) , index(stack,' ')) ;
MPRINT(GADAMDEPENDENCYWITHIN):   else stack = '' ;
MPRINT(GADAMDEPENDENCYWITHIN):   end;
MPRINT(GADAMDEPENDENCYWITHIN):   run;

NOTE: There were 124 observations read from the data set WORK._SPECS2.
s=0 name=ADUR var1=  stack=AENDT
s=0 name=ADUR var1=  stack=ASTDT
s=0 name=ADURN var1=  stack=AENDT
s=0 name=ADURN var1=  stack=AEOUT
s=0 name=ADURN var1=  stack=ASTDT
s=0 name=ADURU var1=  stack=ADURN
s=1 name=ADURU var1=ADURN stack=AENDT AEOUT ASTDT
s=2 name=ADURU var1=AENDT stack=AENDT AEOUT ASTDT
s=3 name=ADURU var1=AENDT stack=AEOUT ASTDT
s=4 name=ADURU var1=AEOUT stack=AEOUT ASTDT
s=5 name=ADURU var1=AEOUT stack=ASTDT
s=0 name=AENDY var1=  stack=AENDT
The SAS System

s=0 name=AERELDY var1=  stack=AESTDTC
The SAS System

s=0 name=AERELDY var1=  stack=ASTDT
s=0 name=AERELDY var1=  stack=ASTDTM
s=0 name=AERELTM var1=  stack=AESTDTC
s=0 name=AERELTM var1=  stack=ASTDT
s=0 name=AERELTM var1=  stack=ASTDTM
s=0 name=AERELTMU var1=  stack=AESTDTC
s=0 name=AERELTMU var1=  stack=ASTDT
s=0 name=AERELTMU var1=  stack=ASTDTM
s=0 name=APEREDT var1=  stack=ASTDT
s=0 name=APERIOD var1=  stack=ASTDT
s=0 name=APERIODC var1=  stack=ASTDT
s=0 name=APERSDT var1=  stack=ASTDT
s=0 name=ASP var1=  stack=ASTDT
s=0 name=ASP3M var1=  stack=ASTDT
s=0 name=ASP3MC var1=  stack=ASTDT
s=0 name=ASP3MEDT var1=  stack=ASTDT
s=0 name=ASP3MSDT var1=  stack=ASTDT
s=0 name=ASPC var1=  stack=ASTDT
s=0 name=ASPEDT var1=  stack=ASTDT
s=0 name=ASPER var1=  stack=ASTDT
s=0 name=ASPERC var1=  stack=ASTDT
s=0 name=ASPEREDT var1=  stack=ASTDT
s=0 name=ASPERSDT var1=  stack=ASTDT
s=0 name=ASPSDT var1=  stack=ASTDT
s=0 name=ASPTR var1=  stack=ASTDT
s=0 name=ASPTRC var1=  stack=ASTDT
s=0 name=ASPTREDT var1=  stack=ASTDT
s=0 name=ASPTRSDT var1=  stack=ASTDT
s=0 name=ASTDY var1=  stack=ASTDT
s=0 name=ATOXGR var1=  stack=ATOXGRN
s=0 name=DOSEDT var1=  stack=AESTDTC
s=0 name=DOSEDT var1=  stack=ASTDT
s=0 name=DOSEDT var1=  stack=ASTDTM
s=0 name=DOSEDTM var1=  stack=AESTDTC
s=0 name=DOSEDTM var1=  stack=ASTDT
s=0 name=DOSEDTM var1=  stack=ASTDTM
s=0 name=DOSEROUTE var1=  stack=AESTDTC
s=0 name=DOSEROUTE var1=  stack=ASTDT
s=0 name=DOSEROUTE var1=  stack=ASTDTM
s=0 name=DOSESEQ var1=  stack=AESTDTC
s=0 name=DOSESEQ var1=  stack=ASTDT
s=0 name=DOSESEQ var1=  stack=ASTDTM
s=0 name=EXTRT var1=  stack=AESTDTC
s=0 name=EXTRT var1=  stack=ASTDT
s=0 name=EXTRT var1=  stack=ASTDTM
s=0 name=TRTEMFL var1=  stack=AESTDTC
s=0 name=TRTEMFL var1=  stack=TRTSDTM
NOTE: There were 55 observations read from the data set WORK._SPECS2.
      WHERE STRIP(memname)=STRIP(domain);
NOTE: The data set WORK._DEPCHECK1 has 58 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(GADAMDEPENDENCYWITHIN):   **count distinct dependent vars;
MPRINT(GADAMDEPENDENCYWITHIN):   proc sql noprint;
The SAS System
The SAS System


MPRINT(GADAMDEPENDENCYWITHIN):   create table _depcheck2 as select name , count(distinct contname) as deprank from _depcheck1 group by name;
NOTE: Table WORK._DEPCHECK2 created, with 35 rows and 2 columns.

MPRINT(GADAMDEPENDENCYWITHIN):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYWITHIN):   **log messages ;
MPRINT(GADAMDEPENDENCYWITHIN):   data _null_ ;
MPRINT(GADAMDEPENDENCYWITHIN):   set _depcheck1 (where=( index(_errcode , 'ER'||'ROR' ) ));
MPRINT(GADAMDEPENDENCYWITHIN):   call execute('%l4g_qcfail_nc('||quote(strip(_errcode))||');');
MPRINT(GADAMDEPENDENCYWITHIN):   run;

NOTE: There were 0 observations read from the data set WORK._DEPCHECK1.
      WHERE INDEX(_errcode, 'ER'||'ROR');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYWITHIN):   data _depspecs ;
MPRINT(GADAMDEPENDENCYWITHIN):   set _depcheck2 ;
MPRINT(GADAMDEPENDENCYWITHIN):   run;

NOTE: There were 35 observations read from the data set WORK._DEPCHECK2.
NOTE: The data set WORK._DEPSPECS has 35 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   ;
MPRINT(GADAMDEPENDENCYCHECK):   proc sort data=exists nodupkey;
MPRINT(GADAMDEPENDENCYCHECK):   by memname contname valname sourceexists;
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: There were 69 observations read from the data set WORK.EXISTS.
NOTE: 32 observations with duplicate key values were deleted.
NOTE: The data set WORK.EXISTS has 37 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(GADAMDEPENDENCYCHECK):   proc sort data=alldependencies ;
MPRINT(GADAMDEPENDENCYCHECK):   by memname contname valname;
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   data alldependencies;
The SAS System

MPRINT(GADAMDEPENDENCYCHECK):   merge alldependencies (in=a) exists (in=b keep= memname contname valname sourceexists);
The SAS System

MPRINT(GADAMDEPENDENCYCHECK):   by memname contname valname;
MPRINT(GADAMDEPENDENCYCHECK):   if a;
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: There were 124 observations read from the data set WORK.ALLDEPENDENCIES.
NOTE: There were 37 observations read from the data set WORK.EXISTS.
NOTE: The data set WORK.ALLDEPENDENCIES has 124 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   **merge sourceexists for variables derived from aother derived variables;
MPRINT(GADAMDEPENDENCYCHECK):   proc sql noprint;
MPRINT(GADAMDEPENDENCYCHECK):   create table alldep2 as select a.*, b.deprank from alldependencies a left join _depspecs b on a.name=b.name;
NOTE: Table WORK.ALLDEP2 created, with 124 rows and 21 columns.

MPRINT(GADAMDEPENDENCYCHECK):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   data alldependencies ;
MPRINT(GADAMDEPENDENCYCHECK):   set alldep2 ;
MPRINT(GADAMDEPENDENCYCHECK):   if sourceexists = . and strip(upcase(memname))= strip("ADAE") then sourceexists = deprank + 1 ;
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: There were 124 observations read from the data set WORK.ALLDEP2.
NOTE: The data set WORK.ALLDEPENDENCIES has 124 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   proc sql;
MPRINT(GADAMDEPENDENCYCHECK):   create table _temp as select distinct name, count_dependency, memname, contname, valname, sourceexists from alldependencies;
NOTE: Table WORK._TEMP created, with 124 rows and 6 columns.

MPRINT(GADAMDEPENDENCYCHECK):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   data _temp (drop=memname contname valname sourceexists);
MPRINT(GADAMDEPENDENCYCHECK):   set _temp;
MPRINT(GADAMDEPENDENCYCHECK):   by name count_dependency memname contname valname sourceexists;
MPRINT(GADAMDEPENDENCYCHECK):   length count_dependency_exist 3;
MPRINT(GADAMDEPENDENCYCHECK):   retain count_dependency_exist;
MPRINT(GADAMDEPENDENCYCHECK):   if first.name then count_dependency_exist=0;
MPRINT(GADAMDEPENDENCYCHECK):   if sourceexists gt 0 then count_dependency_exist+1;
MPRINT(GADAMDEPENDENCYCHECK):   if last.name;
MPRINT(GADAMDEPENDENCYCHECK):   run;
The SAS System

NOTE: There were 124 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 68 observations and 3 variables.
NOTE: DATA statement used (Total process time):
The SAS System

      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   proc sql undo_policy=none;
MPRINT(GADAMDEPENDENCYCHECK):   create table alldependencies as select distinct a.*, b.count_dependency_exist from alldependencies as a left join _temp as b on a.name=b.name;
NOTE: Table WORK.ALLDEPENDENCIES created, with 124 rows and 22 columns.

MPRINT(GADAMDEPENDENCYCHECK):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   proc sort data=alldependencies out=adaespec (drop=_osortorder);
MPRINT(GADAMDEPENDENCYCHECK):   by _osortorder;
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: There were 124 observations read from the data set WORK.ALLDEPENDENCIES.
NOTE: The data set WORK.ADAESPEC has 124 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMREADSPECS):  ;
MPRINT(GADAMREADSPECS):   data misssource adaespec;
MPRINT(GADAMREADSPECS):   set adaespec;
MPRINT(GADAMREADSPECS):   *if not missing(sourceexists) then output &dsout;
MPRINT(GADAMREADSPECS):   if count_dependency ^= count_dependency_exist then output misssource;
MPRINT(GADAMREADSPECS):   else output adaespec;
MPRINT(GADAMREADSPECS):   run;

NOTE: There were 124 observations read from the data set WORK.ADAESPEC.
NOTE: The data set WORK.MISSSOURCE has 0 observations and 21 variables.
NOTE: The data set WORK.ADAESPEC has 124 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMREADSPECS):   data adaespec ;
MPRINT(GADAMREADSPECS):   set adaespec ;
MPRINT(GADAMREADSPECS):   _osortorder=_n_;
MPRINT(GADAMREADSPECS):   run;

NOTE: There were 124 observations read from the data set WORK.ADAESPEC.
NOTE: The data set WORK.ADAESPEC has 124 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
The SAS System

MPRINT(GADAMREADSPECS):   proc sort data=adaespec ;
MPRINT(GADAMREADSPECS):   by name sourceexists ;
MPRINT(GADAMREADSPECS):   run;

NOTE: There were 124 observations read from the data set WORK.ADAESPEC.
The SAS System

NOTE: The data set WORK.ADAESPEC has 124 observations and 22 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMREADSPECS):   data adaespec (drop=tocheck memname contname valname);
MPRINT(GADAMREADSPECS):   set adaespec ;
MPRINT(GADAMREADSPECS):   by name ;
MPRINT(GADAMREADSPECS):   if last.name ;
MPRINT(GADAMREADSPECS):   run;

NOTE: There were 124 observations read from the data set WORK.ADAESPEC.
NOTE: The data set WORK.ADAESPEC has 68 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMREADSPECS):   proc sort data=adaespec ;
MPRINT(GADAMREADSPECS):   by _osortorder ;
MPRINT(GADAMREADSPECS):   run;

NOTE: There were 68 observations read from the data set WORK.ADAESPEC.
NOTE: The data set WORK.ADAESPEC has 68 observations and 18 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(GADAMREADSPECS):   data _null_;
MPRINT(GADAMREADSPECS):   set misssource;
MPRINT(GADAMREADSPECS):   length t1 $1000;
MPRINT(GADAMREADSPECS):   *- jbodart - 2022-09-30 - allow for source and name variables to contain embedded quotes -*;
MPRINT(GADAMREADSPECS):   if strip(lowcase(core))="req" then t1 = quote('no source '||strip(source)||" found for required variable "||strip(name));
MPRINT(GADAMREADSPECS):   else t1 = quote('no source '||strip(source)||" found for variable "||strip(name));
MPRINT(GADAMREADSPECS):   if strip(lowcase(core))="req" then call execute('%l4g_qcfail_crit('||strip(t1)||');');
MPRINT(GADAMREADSPECS):   else call execute('%l4g_qcfail_nc('||strip(t1)||');');
MPRINT(GADAMREADSPECS):   run;

NOTE: There were 0 observations read from the data set WORK.MISSSOURCE.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(ADAE):  ;
MAUTOCOMPLOC:  The autocall macro GADAMMAKEATTRIB is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/gadam/_library/gadammakeattrib.sas.
MPRINT(GADAMMAKEATTRIB):   data sub ;
MPRINT(GADAMMAKEATTRIB):   length osort 8;
The SAS System

MPRINT(GADAMMAKEATTRIB):   set adaespec;
MPRINT(GADAMMAKEATTRIB):   osort + 1;
MPRINT(GADAMMAKEATTRIB):   run;

NOTE: There were 68 observations read from the data set WORK.ADAESPEC.
NOTE: The data set WORK.SUB has 68 observations and 19 variables.
NOTE: DATA statement used (Total process time):
The SAS System

      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMMAKEATTRIB):   data nohead sdtm adam nosdtm;
MPRINT(GADAMMAKEATTRIB):   length sourcedset sourcevar $200;
MPRINT(GADAMMAKEATTRIB):   set sub;
MPRINT(GADAMMAKEATTRIB):   if name ne 'domain';
MPRINT(GADAMMAKEATTRIB):   output nohead;
MPRINT(GADAMMAKEATTRIB):   if lowcase(label) in ("[sdtm]") then do;
MPRINT(GADAMMAKEATTRIB):   sourcedset = scan(Source,1,'.');
MPRINT(GADAMMAKEATTRIB):   sourcevar = scan(Source,2,'.');
MPRINT(GADAMMAKEATTRIB):   output sdtm;
MPRINT(GADAMMAKEATTRIB):   end;
MPRINT(GADAMMAKEATTRIB):   else
MPRINT(PICKDSET):   lowcase(label) in ("[adam]") then do;
MPRINT(PICKDSET):   sourcedset = scan(Source,1,'.');
MPRINT(PICKDSET):   sourcevar = scan(Source,2,'.');
MPRINT(PICKDSET):   output adam;
MPRINT(PICKDSET):   end;
MPRINT(GADAMMAKEATTRIB):   else output nosdtm;
MPRINT(GADAMMAKEATTRIB):   run;

NOTE: There were 68 observations read from the data set WORK.SUB.
NOTE: The data set WORK.NOHEAD has 68 observations and 21 variables.
NOTE: The data set WORK.SDTM has 22 observations and 21 variables.
NOTE: The data set WORK.ADAM has 2 observations and 21 variables.
NOTE: The data set WORK.NOSDTM has 44 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GETATTR):   proc freq data=adam noprint;
MPRINT(GETATTR):   table sourcedset/ norow nocol nocum nopercent out=adamdset;
MPRINT(GETATTR):   run;

NOTE: There were 2 observations read from the data set WORK.ADAM.
NOTE: The data set WORK.ADAMDSET has 1 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GETATTR):   data _null_;
MPRINT(GETATTR):   set adamdset end=last;
MPRINT(GETATTR):   call symputx("adam"||strip(put(_n_,8.)),lowcase(strip(sourcedset)),'G');
MPRINT(GETATTR):   if last then call symputx("nb_adam",strip(put(_n_,8.)));
MPRINT(GETATTR):   run;
The SAS System


NOTE: There were 1 observations read from the data set WORK.ADAMDSET.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MAUTOCOMPLOC:  The autocall macro DATASETSUSED is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/macros/_library/datasetsused.sas.
The SAS System

adsl
MPRINT(DATASETSUSED):   data adsl;
MPRINT(DATASETSUSED):   set adamtmp.adsl;
MPRINT(DATASETSUSED):   ;
MPRINT(DATASETSUSED):   run;

NOTE: There were 106 observations read from the data set ADAMTMP.ADSL.
NOTE: The data set WORK.ADSL has 106 observations and 64 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(DATASETSUSED):   data adsl;
MPRINT(DATASETSUSED):   set adsl;
MPRINT(DATASETSUSED):   run;

NOTE: There were 106 observations read from the data set WORK.ADSL.
NOTE: The data set WORK.ADSL has 106 observations and 64 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(GETATTR):  ;
MPRINT(GETATTR):   data vl;
MPRINT(GETATTR):   length name $32 ;
MPRINT(GETATTR):   set adam;
MPRINT(GETATTR):   where lowcase(sourcedset)=lowcase("adsl");
MPRINT(GETATTR):   name=name;
MPRINT(GETATTR):   run;

NOTE: There were 2 observations read from the data set WORK.ADAM.
      WHERE LOWCASE(sourcedset)='adsl';
NOTE: The data set WORK.VL has 2 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GETATTR):   proc contents data=adamtmp.adsl out=x1;
MPRINT(GETATTR):   run;

NOTE: The data set WORK.X1 has 64 observations and 41 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
The SAS System


NOTE: The PROCEDURE CONTENTS printed pages 1-2.

MPRINT(GETATTR):   proc sort data=vl;
MPRINT(GETATTR):   by name;
MPRINT(GETATTR):  run;

NOTE: There were 2 observations read from the data set WORK.VL.
NOTE: The data set WORK.VL has 2 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
The SAS System

      cpu time            0.00 seconds


MPRINT(GETATTR):   proc sort data=x1;
MPRINT(GETATTR):   by name;
MPRINT(GETATTR):  run;

NOTE: There were 64 observations read from the data set WORK.X1.
NOTE: The data set WORK.X1 has 64 observations and 41 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GETATTR):   data getadamattributes1;
MPRINT(GETATTR):   length name $32 label $300;
MPRINT(GETATTR):   merge vl (in=a) x1 (in=b keep=name type length label format: sorted:);
MPRINT(GETATTR):   by name;
MPRINT(GETATTR):   if a;
MPRINT(GETATTR):   if not b then label="Variable not found in adam..adsl";
MPRINT(GETATTR):   if not(missing(format) and formatl in (. 0)) then do;
MPRINT(GETATTR):   if formatl >0 then format = strip(format)||cats(formatl)||'.';
MPRINT(GETATTR):   else format = strip(format)||'.';
MPRINT(GETATTR):   if formatd ne 0 then format = strip(format)||cats(formatd);
MPRINT(GETATTR):   end;
MPRINT(GETATTR):   run;

NOTE: There were 2 observations read from the data set WORK.VL.
NOTE: There were 64 observations read from the data set WORK.X1.
NOTE: The data set WORK.GETADAMATTRIBUTES1 has 2 observations and 28 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(GETATTR):   data getadamattributes;
MPRINT(GETATTR):   set getadamattributes1;
MPRINT(GETATTR):   run;

NOTE: There were 2 observations read from the data set WORK.GETADAMATTRIBUTES1.
NOTE: The data set WORK.GETADAMATTRIBUTES has 2 observations and 28 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
The SAS System


MPRINT(GADAMMAKEATTRIB):  ;
MPRINT(GETATTR):   proc freq data=sdtm noprint;
MPRINT(GETATTR):   table sourcedset/ norow nocol nocum nopercent out=sdtmdset;
MPRINT(GETATTR):   run;

NOTE: There were 22 observations read from the data set WORK.SDTM.
NOTE: The data set WORK.SDTMDSET has 1 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


The SAS System

MPRINT(GETATTR):   data _null_;
MPRINT(GETATTR):   set sdtmdset end=last;
MPRINT(GETATTR):   call symputx("sdtm"||strip(put(_n_,8.)),lowcase(strip(sourcedset)),'G');
MPRINT(GETATTR):   if last then call symputx("nb_sdtm",strip(put(_n_,8.)));
MPRINT(GETATTR):   run;

NOTE: There were 1 observations read from the data set WORK.SDTMDSET.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


ae
MPRINT(DATASETSUSED):   data ae;
MPRINT(DATASETSUSED):   set sdtm.ae;
MPRINT(DATASETSUSED):   ;
MPRINT(DATASETSUSED):   run;

NOTE: There were 319 observations read from the data set SDTM.AE.
NOTE: The data set WORK.AE has 319 observations and 40 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(DATASETSUSED):   data ae;
MPRINT(DATASETSUSED):   set ae;
MPRINT(DATASETSUSED):   run;

NOTE: There were 319 observations read from the data set WORK.AE.
NOTE: The data set WORK.AE has 319 observations and 40 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GETATTR):  ;
MPRINT(GETATTR):   data vl;
MPRINT(GETATTR):   length name $32 ;
MPRINT(GETATTR):   set sdtm;
MPRINT(GETATTR):   where lowcase(sourcedset)=lowcase("ae");
MPRINT(GETATTR):   name=name;
MPRINT(GETATTR):   run;
The SAS System


NOTE: There were 22 observations read from the data set WORK.SDTM.
      WHERE LOWCASE(sourcedset)='ae';
NOTE: The data set WORK.VL has 22 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GETATTR):   proc contents data=sdtm.ae out=x1;
MPRINT(GETATTR):   run;

NOTE: The data set WORK.X1 has 40 observations and 41 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
The SAS System

      cpu time            0.01 seconds

NOTE: The PROCEDURE CONTENTS printed pages 3-4.

MPRINT(GETATTR):   proc sort data=vl;
MPRINT(GETATTR):   by name;
MPRINT(GETATTR):  run;

NOTE: There were 22 observations read from the data set WORK.VL.
NOTE: The data set WORK.VL has 22 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GETATTR):   proc sort data=x1;
MPRINT(GETATTR):   by name;
MPRINT(GETATTR):  run;

NOTE: There were 40 observations read from the data set WORK.X1.
NOTE: The data set WORK.X1 has 40 observations and 41 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GETATTR):   data getsdtmattributes1;
MPRINT(GETATTR):   length name $32 label $300;
MPRINT(GETATTR):   merge vl (in=a) x1 (in=b keep=name type length label format: sorted:);
MPRINT(GETATTR):   by name;
MPRINT(GETATTR):   if a;
MPRINT(GETATTR):   if not b then label="Variable not found in sdtm..ae";
MPRINT(GETATTR):   if not(missing(format) and formatl in (. 0)) then do;
MPRINT(GETATTR):   if formatl >0 then format = strip(format)||cats(formatl)||'.';
MPRINT(GETATTR):   else format = strip(format)||'.';
MPRINT(GETATTR):   if formatd ne 0 then format = strip(format)||cats(formatd);
MPRINT(GETATTR):   end;
MPRINT(GETATTR):   run;

NOTE: There were 22 observations read from the data set WORK.VL.
NOTE: There were 40 observations read from the data set WORK.X1.
The SAS System

NOTE: The data set WORK.GETSDTMATTRIBUTES1 has 22 observations and 28 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GETATTR):   data getsdtmattributes;
MPRINT(GETATTR):   set getsdtmattributes1;
MPRINT(GETATTR):   run;

NOTE: There were 22 observations read from the data set WORK.GETSDTMATTRIBUTES1.
NOTE: The data set WORK.GETSDTMATTRIBUTES has 22 observations and 28 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


The SAS System

MPRINT(GADAMMAKEATTRIB):  ;
MPRINT(GADAMMAKEATTRIB):   data nosdtm;
MPRINT(GADAMMAKEATTRIB):   length name $32 label $300 type 8 format $32;
MPRINT(GADAMMAKEATTRIB):   set nosdtm;
MPRINT(GADAMMAKEATTRIB):   name=strip(name);
MPRINT(GADAMMAKEATTRIB):   label=strip(label);
MPRINT(GADAMMAKEATTRIB):   if lowcase(ctype) in ("char") then type=2;
MPRINT(GADAMMAKEATTRIB):   if lowcase(ctype) in ("num") then type=1;
MPRINT(GADAMMAKEATTRIB):   length = input(clength, best.);
MPRINT(GADAMMAKEATTRIB):   if not missing(cformat) then format=strip(cformat);
MPRINT(GADAMMAKEATTRIB):   run;

NOTE: There were 44 observations read from the data set WORK.NOSDTM.
NOTE: The data set WORK.NOSDTM has 44 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMMAKEATTRIB):   data allspecs;
MPRINT(GADAMMAKEATTRIB):   set nosdtm getSDTMattributes getADAMattributes;
MPRINT(GADAMMAKEATTRIB):   run;

NOTE: There were 44 observations read from the data set WORK.NOSDTM.
NOTE: There were 22 observations read from the data set WORK.GETSDTMATTRIBUTES.
NOTE: There were 2 observations read from the data set WORK.GETADAMATTRIBUTES.
NOTE: The data set WORK.ALLSPECS has 68 observations and 28 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(GADAMMAKEATTRIB):   proc sort data=allspecs;
MPRINT(GADAMMAKEATTRIB):   by osort;
MPRINT(GADAMMAKEATTRIB):   where not missing(name);
MPRINT(GADAMMAKEATTRIB):   run;

NOTE: There were 68 observations read from the data set WORK.ALLSPECS.
      WHERE not MISSING(name);
The SAS System

NOTE: The data set WORK.ALLSPECS has 68 observations and 28 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMMAKEATTRIB):   *------------------------------------------------------------------;
MPRINT(GADAMMAKEATTRIB):   * 2. Build attrib file in work directory ;
MPRINT(GADAMMAKEATTRIB):   *------------------------------------------------------------------;
MPRINT(GADAMMAKEATTRIB):   data _null_;
MPRINT(GADAMMAKEATTRIB):   length len $256;
MPRINT(GADAMMAKEATTRIB):   file "/saswork/sas_tmp/SAS_work3136000052A7_xar05auv/SAS_workD12E000052A7_xar05auv/attr.sas";
MPRINT(GADAMMAKEATTRIB):   set allspecs end=last;
MPRINT(GADAMMAKEATTRIB):   if lowcase(cats(type)) in ('2' 'char') then len = '$'!!cats(length);
MPRINT(GADAMMAKEATTRIB):   *compress(put(length,8.));
MPRINT(GADAMMAKEATTRIB):   else len = cats(length);
MPRINT(GADAMMAKEATTRIB):   *compress(put(length,8.));
MPRINT(GADAMMAKEATTRIB):   poslen = max(25,length(name)+2);
MPRINT(GADAMMAKEATTRIB):   posformat = max(32,poslen + length(cats(length))) + 10;
The SAS System

MPRINT(GADAMMAKEATTRIB):   poslabel = max(62,posformat + length(format)) + 10;
MPRINT(GADAMMAKEATTRIB):   posinform = max (100,poslabel + length(label)+2) + 9;
MPRINT(GADAMMAKEATTRIB):   if _n_=1 then put 'attrib';
MPRINT(GADAMMAKEATTRIB):   put @1 name @;
MPRINT(GADAMMAKEATTRIB):   if length ne . then put @poslen 'length = ' len @;
MPRINT(GADAMMAKEATTRIB):   if format ne '' then put @posformat 'format = ' format @;
MPRINT(GADAMMAKEATTRIB):   if label ne '' then put @poslabel 'label = "' label'"' @;
MPRINT(GADAMMAKEATTRIB):   put;
MPRINT(GADAMMAKEATTRIB):   if last then put ';';
MPRINT(GADAMMAKEATTRIB):   run;

NOTE: The file "/saswork/sas_tmp/SAS_work3136000052A7_xar05auv/SAS_workD12E000052A7_xar05auv/attr.sas" is:
      Filename=/saswork/sas_tmp/SAS_work3136000052A7_xar05auv/SAS_workD12E000052A7_xar05auv/attr.sas,
      Owner Name=jbodart,Group Name=webtrust,
      Access Permission=-rw-rw----,
      Last Modified=11Jan2023:23:10:50

NOTE: 70 records were written to the file "/saswork/sas_tmp/SAS_work3136000052A7_xar05auv/SAS_workD12E000052A7_xar05auv/attr.sas".
      The minimum record length was 1.
      The maximum record length was 128.
NOTE: There were 68 observations read from the data set WORK.ALLSPECS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMMAKEATTRIB):   *------------------------------------------------------------------;
MPRINT(GADAMMAKEATTRIB):   * 3. Build keep statement (5 variables on 1 line) ;
MPRINT(GADAMMAKEATTRIB):   *------------------------------------------------------------------;
MPRINT(GADAMMAKEATTRIB):   data _null_;
MPRINT(GADAMMAKEATTRIB):   file "/saswork/sas_tmp/SAS_work3136000052A7_xar05auv/SAS_workD12E000052A7_xar05auv/keep.sas";
MPRINT(GADAMMAKEATTRIB):   set allspecs end=last;
MPRINT(GADAMMAKEATTRIB):   if _n_ = 1 then put 'keep ' @;
MPRINT(GADAMMAKEATTRIB):   if mod(_n_,5) ne 0 then put name @;
MPRINT(GADAMMAKEATTRIB):   else put name;
MPRINT(GADAMMAKEATTRIB):   if last then put ';';
MPRINT(GADAMMAKEATTRIB):   run;
The SAS System


NOTE: The file "/saswork/sas_tmp/SAS_work3136000052A7_xar05auv/SAS_workD12E000052A7_xar05auv/keep.sas" is:
      Filename=/saswork/sas_tmp/SAS_work3136000052A7_xar05auv/SAS_workD12E000052A7_xar05auv/keep.sas,
      Owner Name=jbodart,Group Name=webtrust,
      Access Permission=-rw-rw----,
      Last Modified=11Jan2023:23:10:50

NOTE: 14 records were written to the file "/saswork/sas_tmp/SAS_work3136000052A7_xar05auv/SAS_workD12E000052A7_xar05auv/keep.sas".
      The minimum record length was 26.
      The maximum record length was 40.
NOTE: There were 68 observations read from the data set WORK.ALLSPECS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMMAKEATTRIB):   *------------------------------------------------------------------;
MPRINT(GADAMMAKEATTRIB):   * 3. Build set and keep statement for starting SDTM/ADAM dataset ;
MPRINT(GADAMMAKEATTRIB):   *------------------------------------------------------------------;
MPRINT(GADAMMAKEATTRIB):   data startfromae;
MPRINT(GADAMMAKEATTRIB):   file "/saswork/sas_tmp/SAS_work3136000052A7_xar05auv/SAS_workD12E000052A7_xar05auv/startfromae.sas";
The SAS System

MPRINT(GADAMMAKEATTRIB):   set allspecs end=last;
MPRINT(GADAMMAKEATTRIB):   where lowcase(sourcedset)=lowcase("ae");
MPRINT(GADAMMAKEATTRIB):   if _n_ = 1 then put "set  sdtm.ae ;" ;
MPRINT(GADAMMAKEATTRIB):   if _n_ = 1 then put 'keep ' @;
MPRINT(GADAMMAKEATTRIB):   if mod(_n_,5) ne 0 then put name @;
MPRINT(GADAMMAKEATTRIB):   else put name;
MPRINT(GADAMMAKEATTRIB):   if last then put ';';
MPRINT(GADAMMAKEATTRIB):   run;

NOTE: The file "/saswork/sas_tmp/SAS_work3136000052A7_xar05auv/SAS_workD12E000052A7_xar05auv/startfromae.sas" is:
      Filename=/saswork/sas_tmp/SAS_work3136000052A7_xar05auv/SAS_workD12E000052A7_xar05auv/startfromae.sas,
      Owner Name=jbodart,Group Name=webtrust,
      Access Permission=-rw-rw----,
      Last Modified=11Jan2023:23:10:50

NOTE: 6 records were written to the file "/saswork/sas_tmp/SAS_work3136000052A7_xar05auv/SAS_workD12E000052A7_xar05auv/startfromae.sas".
      The minimum record length was 14.
      The maximum record length was 41.
NOTE: There were 22 observations read from the data set WORK.ALLSPECS.
      WHERE LOWCASE(sourcedset)='ae';
NOTE: The data set WORK.STARTFROMAE has 22 observations and 28 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMMAKEATTRIB):   data startfromadsl;
MPRINT(GADAMMAKEATTRIB):   file "/saswork/sas_tmp/SAS_work3136000052A7_xar05auv/SAS_workD12E000052A7_xar05auv/startfromadsl.sas";
MPRINT(GADAMMAKEATTRIB):   set allspecs end=last;
MPRINT(GADAMMAKEATTRIB):   where lowcase(sourcedset)=lowcase("adsl");
MPRINT(GADAMMAKEATTRIB):   if _n_ = 1 then put "set  adamtmp.adsl ;" ;
MPRINT(GADAMMAKEATTRIB):   if _n_ = 1 then put 'keep ' @;
MPRINT(GADAMMAKEATTRIB):   if mod(_n_,5) ne 0 then put name @;
MPRINT(GADAMMAKEATTRIB):   else put name;
MPRINT(GADAMMAKEATTRIB):   if last then put ';';
The SAS System

MPRINT(GADAMMAKEATTRIB):   run;

NOTE: The file "/saswork/sas_tmp/SAS_work3136000052A7_xar05auv/SAS_workD12E000052A7_xar05auv/startfromadsl.sas" is:
      Filename=/saswork/sas_tmp/SAS_work3136000052A7_xar05auv/SAS_workD12E000052A7_xar05auv/startfromadsl.sas,
      Owner Name=jbodart,Group Name=webtrust,
      Access Permission=-rw-rw----,
      Last Modified=11Jan2023:23:10:50

NOTE: 2 records were written to the file "/saswork/sas_tmp/SAS_work3136000052A7_xar05auv/SAS_workD12E000052A7_xar05auv/startfromadsl.sas".
      The minimum record length was 19.
      The maximum record length was 20.
NOTE: There were 2 observations read from the data set WORK.ALLSPECS.
      WHERE LOWCASE(sourcedset)='adsl';
NOTE: The data set WORK.STARTFROMADSL has 2 observations and 28 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(ADAE):  ;
MPRINT(ADAE):   data adaestart;
NOTE: %INCLUDE (level 1) file /saswork/sas_tmp/SAS_work3136000052A7_xar05auv/SAS_workD12E000052A7_xar05auv/startfromae.sas is file 
      /saswork/sas_tmp/SAS_work3136000052A7_xar05auv/SAS_workD12E000052A7_xar05auv/startfromae.sas.
The SAS System

196       +set  sdtm.ae ;
MPRINT(ADAE):   set sdtm.ae ;
197       +keep STUDYID USUBJID AESEQ AETERM AEDECOD
198       +AEBODSYS AELLT AEHLT AEHLGT AESOC
199       +AECAT AESCAT AESTDTC AEENDTC AEENRTPT
200       +AEENTPT AESER AETOXGR AEREL AEACN
201       +AEOUT AESDTH ;
MPRINT(ADAE):   keep STUDYID USUBJID AESEQ AETERM AEDECOD AEBODSYS AELLT AEHLT AEHLGT AESOC AECAT AESCAT AESTDTC AEENDTC AEENRTPT AEENTPT AESER AETOXGR AEREL AEACN AEOUT AESDTH ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(ADAE):   run;
NOTE: There were 319 observations read from the data set SDTM.AE.
NOTE: The data set WORK.ADAESTART has 319 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(ADAE):   *%gadamgetsupp(inds=sdtm.ae,insuppds=sdtm.suppae,outds=adaestart);
MAUTOCOMPLOC:  The autocall macro DOM_SUPP is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/macros/_library/dom_supp.sas.
MSGLEVEL=N
MPRINT(DOM_SUPP):   option msglevel=N;
MPRINT(DOM_SUPP):   *- Create a sorted version of the SUPP dataset -*;
MPRINT(DOM_SUPP):   *- JMB 2022-02-24 - Increment QNAM values in case of dupplicates (should not occur in well-formed SDTM datasets) -*;
MPRINT(DOM_SUPP):   proc sql noprint;
MAUTOCOMPLOC:  The autocall macro VARLIST is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/macros/_library/varlist.sas.
MPRINT(DOM_SUPP):   create table sdtm_suppae_srt(drop=__obs_n_ rename=(QNAM=QNAM_orig QNAMnew=QNAM)) as select * , strip(QLABEL)||" (n="||cats(count(QVAL))||")" as QLABEL_N from ( 
select
MPRINT(VARLIST):   STUDYID, RDOMAIN, USUBJID, IDVAR, IDVARVAL, QNAM, QLABEL, QVAL, QORIG, QEVAL
MPRINT(DOM_SUPP):   , monotonic() as __obs_n_ , calculated __obs_n_ - min(calculated __obs_n_) + 1 as __repeat_ , case when calculated __repeat_ eq 1 and QNAM not in (" "
MPRINT(VARLIST):   "STUDYID", "DOMAIN", "USUBJID", "AESEQ", "AEREFID", "AESPID", "AETERM", "AELLT", "AELLTCD", "AEDECOD", "AEPTCD", "AEHLT", "AEHLTCD", "AEHLGT", "AEHLGTCD", "AECAT
", "AESCAT", 
The SAS System

"AEBODSYS", "AEBDSYCD", "AESOC", "AESOCCD", "AESER", "AEACN", "AEREL", "AEOUT", "AESCONG", "AESDISAB", "AESDTH", "AESHOSP", "AESLIFE", "AESMIE", "AECONTRT", "AETOXGR", "EPOCH", "AE
STDTC", "AEENDTC", 
"AESTDY", "AEENDY", "AEENRTPT", "AEENTPT"
MPRINT(DOM_SUPP):  ) then QNAM else cats(QNAM, calculated __repeat_) end as QNAMnew from (select distinct
MPRINT(VARLIST):   STUDYID, USUBJID, IDVAR, IDVARVAL, RDOMAIN, QNAM, QLABEL, QVAL, QORIG, QEVAL
MPRINT(DOM_SUPP):  , monotonic() as __tmp_ from sdtm.suppae) group by
MPRINT(VARLIST):   STUDYID, USUBJID
MPRINT(DOM_SUPP):  , idvar, idvarval, qnam ) group by
MPRINT(VARLIST):   QNAM, QLABEL
MPRINT(DOM_SUPP):   order by
MPRINT(VARLIST):   STUDYID, USUBJID
MPRINT(DOM_SUPP):  , idvar, idvarval, QNAMnew ;
NOTE: The query requires remerging summary statistics back with the original data.
NOTE: Table WORK.SDTM_SUPPAE_SRT created, with 638 rows and 13 columns.

MPRINT(DOM_SUPP):   select distinct idvar into :idvars separated by " " from sdtm_suppae_srt;

MPRINT(DOM_SUPP):   select distinct QNAM into :renamed_QNAMs separated by ' ' from sdtm_suppae_srt where QNAM not in (select distinct QNAM from sdtm.suppae) ;
NOTE: No rows were selected.

MPRINT(DOM_SUPP):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.76 seconds
      cpu time            0.76 seconds


MAUTOCOMPLOC:  The autocall macro DSATTR is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/macros/_library/dsattr.sas.
The SAS System

MAUTOCOMPLOC:  The autocall macro LOWCASE is compiling using the autocall source file /sso/sfw/sas/940/SASFoundation/9.4/sasautos/lowcase.sas.
Notice:(DOM_SUPP): Original dataset sdtm.suppae has 638 obs., Sorted dataset sdtm_suppae_srt has 638 obs.
MPRINT(DOM_SUPP):   *- Transpose the SUPP dataset records with empty <IDVAR> -*;
MPRINT(DOM_SUPP):   proc transpose data=sdtm_suppae_srt(where=(idvar=" ")) out=sdtm_suppae_srt_t(drop=_name: _label:);
MPRINT(DOM_SUPP):   by
MPRINT(VARLIST):   STUDYID USUBJID
MPRINT(DOM_SUPP):  ;
MPRINT(DOM_SUPP):   var QVAL;
MPRINT(DOM_SUPP):   id QNAM;
MPRINT(DOM_SUPP):   idlabel QLABEL_N;
MPRINT(DOM_SUPP):   run;

NOTE: There were 0 observations read from the data set WORK.SDTM_SUPPAE_SRT.
      WHERE idvar=' ';
NOTE: The data set WORK.SDTM_SUPPAE_SRT_T has 1 observations and 2 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds


MPRINT(DOM_SUPP):   *- Transpose the SUPP dataset records with a given <IDVAR> -*;
MPRINT(DOM_SUPP):   proc transpose data=sdtm_suppae_srt(where=(idvar="AESEQ")) out=sdtm_suppae_srt_t_AESEQ(drop=_name: _label:);
MPRINT(DOM_SUPP):   by
MPRINT(VARLIST):   STUDYID USUBJID
MPRINT(DOM_SUPP):   idvarval;
MPRINT(DOM_SUPP):   var QVAL;
MPRINT(DOM_SUPP):   id QNAM;
MPRINT(DOM_SUPP):   idlabel QLABEL_N;
The SAS System

MPRINT(DOM_SUPP):   run;

NOTE: There were 638 observations read from the data set WORK.SDTM_SUPPAE_SRT.
      WHERE idvar='AESEQ';
NOTE: The data set WORK.SDTM_SUPPAE_SRT_T_AESEQ has 319 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds


ALL_SUPP_T_IDS=sdtm_suppae_srt_t:s sdtm_suppae_srt_t_AESEQ:s1
ALL_LIB_MEMS="sdtm.ae",  "work.sdtm_suppae_srt_t",  "work.sdtm_suppae_srt_t_aeseq"
ALL_LIB_MEMS2=sdtm.ae     work.sdtm_suppae_srt_t     work.sdtm_suppae_srt_t_aeseq
MPRINT(DOM_SUPP):   proc sql noprint;
MPRINT(DOM_SUPP):   *- Identify variables with same name that exist in multiple datasets -*;
MPRINT(DOM_SUPP):   select distinct lowcase(name) into :multvars separated by ' ' from sashelp.vcolumn where lowcase(catx('.', libname, memname)) in ("sdtm.ae", "work.sdtm_suppae_s
rt_t", 
"work.sdtm_suppae_srt_t_aeseq") group by lowcase(name) having count(name) > 1 ;
NOTE: The query requires remerging summary statistics back with the original data.
MULTVARS=STUDYID USUBJID
MPRINT(DOM_SUPP):   *- Merge back each of the transposed SUPP datasets by their <IDVAR> -*;
MPRINT(DOM_SUPP):   create table adaestart as select
MPRINT(VARLIST):   coalesce(a.STUDYID, s.STUDYID, s1.STUDYID) as STUDYID length=13 label='Study Identifier' format=$13., coalesce(a.USUBJID, s.USUBJID, s1.USUBJID) as USUBJID lengt
h=25 label='Unique 
Subject Identifier' format=$25.,
MPRINT(VARLIST):   a.DOMAIN, a.AESEQ, a.AEREFID, a.AESPID, a.AETERM, a.AELLT, a.AELLTCD, a.AEDECOD, a.AEPTCD, a.AEHLT, a.AEHLTCD, a.AEHLGT, a.AEHLGTCD, a.AECAT, a.AESCAT, a.AEBODSY
S, a.AEBDSYCD, 
a.AESOC, a.AESOCCD, a.AESER, a.AEACN, a.AEREL, a.AEOUT, a.AESCONG, a.AESDISAB, a.AESDTH, a.AESHOSP, a.AESLIFE, a.AESMIE, a.AECONTRT, a.AETOXGR, a.EPOCH, a.AESTDTC, a.AEENDTC, a.AES
TDY, a.AEENDY, 
a.AEENRTPT, a.AEENTPT,
MPRINT(VARLIST):   s1.IDVARVAL label="Identifying Variable Value [sdtm.suppae.IDVARVAL]", s1.AERELPRC label="Relation to Study Procedure (n=319) [sdtm.suppae.AERELPRC]", s1.AETRTEM
 label="Treatment 
Emergent Flag (n=319) [sdtm.suppae.AETRTEM]",
MPRINT(DOM_SUPP):   case when 0
MPRINT(VARLIST):   + count(s.STUDYID) + count(s.USUBJID)
The SAS System

MPRINT(VARLIST):   + count(s1.STUDYID) + count(s1.USUBJID) + count(s1.IDVARVAL)
MPRINT(DOM_SUPP):   >= 1 then "Y" else " " end as _in_supp_fl label="In Supp dataset" from sdtm.ae as a left join sdtm_suppae_srt_t as s on
MPRINT(VARLIST):   a.STUDYID = s.STUDYID and a.USUBJID = s.USUBJID
MPRINT(DOM_SUPP):   left join sdtm_suppae_srt_t_AESEQ as s1 on
MPRINT(VARLIST):   a.STUDYID = s1.STUDYID and a.USUBJID = s1.USUBJID
MPRINT(DOM_SUPP):   and cats(a.AESEQ) = cats(s1.idvarval) having
MPRINT(VARLIST):   cats(STUDYID)^='' and cats(USUBJID)^=''
MPRINT(DOM_SUPP):   order by
MPRINT(VARLIST):   usubjid, AESEQ
MPRINT(DOM_SUPP):   ;
NOTE: The query requires remerging summary statistics back with the original data.
NOTE: Table WORK.ADAESTART created, with 319 rows and 44 columns.

MPRINT(DOM_SUPP):   *- Remove intermediate datasets -*;
MPRINT(DOM_SUPP):   drop table sdtm_suppae_srt_t , sdtm_suppae_srt_t_AESEQ ;
NOTE: Table WORK.SDTM_SUPPAE_SRT_T has been dropped.
NOTE: Table WORK.SDTM_SUPPAE_SRT_T_AESEQ has been dropped.
MPRINT(DOM_SUPP):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           1.33 seconds
      cpu time            1.33 seconds
The SAS System



MPRINT(VARLIST):   proc datasets nolist lib=WORK;
MPRINT(VARLIST):   modify ADAESTART ;
MPRINT(VARLIST):   format STUDYID USUBJID DOMAIN AESEQ AEREFID AESPID AETERM AELLT AELLTCD AEDECOD AEPTCD AEHLT AEHLTCD AEHLGT AEHLGTCD AECAT AESCAT AEBODSYS AEBDSYCD AESOC AESOCCD
 AESER AEACN AEREL 
AEOUT AESCONG AESDISAB AESDTH AESHOSP AESLIFE AESMIE AECONTRT AETOXGR EPOCH AESTDTC AEENDTC AESTDY AEENDY AEENRTPT AEENTPT IDVARVAL AERELPRC AETRTEM;
MPRINT(VARLIST):   run;

NOTE: MODIFY was successful for WORK.ADAESTART.DATA.
MPRINT(VARLIST):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(DOM_SUPP):   ;
Notice:(DOM_SUPP): Original dataset sdtm.ae has 319 obs., Final dataset adaestart has 319 obs.
Notice: Numbered variables created in final dataset:.
MPRINT(DOM_SUPP):   option MSGLEVEL=N;
MPRINT(ADAE):  ;
MPRINT(ADAE):   proc sort data=adaestart;
MPRINT(ADAE):   by studyid usubjid aeseq;
MPRINT(ADAE):   run;

NOTE: There were 319 observations read from the data set WORK.ADAESTART.
NOTE: The data set WORK.ADAESTART has 319 observations and 44 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MAUTOCOMPLOC:  The autocall macro GADAMCHECKSTARTVARIABLES is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/gadam/_library/gadamcheckstartvariables.sas.
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set startfromae end = last;
MPRINT(GADAMCHECKSTARTVARIABLES):   call symputx("spvar"||strip(put(_n_,8.)),strip(name));
The SAS System

MPRINT(GADAMCHECKSTARTVARIABLES):   call symputx("spvarcore"||strip(put(_n_,8.)),lowcase(strip(core)));
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx("nb_spvars",strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 22 observations read from the data set WORK.STARTFROMAE.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adaestart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where missing(STUDYID);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('missrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 0 observations read from the data set WORK.ADAESTART.
      WHERE MISSING(STUDYID);
The SAS System

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("STUDYID is key variable and has no missing records");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_QCPASS"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_qcpass     |STUDYID is key variable and has no missing records
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_QCPASS):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adaestart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(STUDYID);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 319 observations read from the data set WORK.ADAESTART.
      WHERE not MISSING(STUDYID);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("STUDYID is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

The SAS System

l4g_message    |STUDYID is created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adaestart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where missing(USUBJID);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('missrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 0 observations read from the data set WORK.ADAESTART.
The SAS System

      WHERE MISSING(USUBJID);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("USUBJID is key variable and has no missing records");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_QCPASS"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_qcpass     |USUBJID is key variable and has no missing records
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_QCPASS):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adaestart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(USUBJID);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 319 observations read from the data set WORK.ADAESTART.
      WHERE not MISSING(USUBJID);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("USUBJID is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |USUBJID is created.
The SAS System

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adaestart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(AESEQ);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;
The SAS System

NOTE: There were 319 observations read from the data set WORK.ADAESTART.
      WHERE not MISSING(AESEQ);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("AESEQ is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |AESEQ is created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adaestart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where missing(AETERM);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('missrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 0 observations read from the data set WORK.ADAESTART.
      WHERE MISSING(AETERM);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("AETERM is key variable and has no missing records");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_QCPASS"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_qcpass     |AETERM is key variable and has no missing records
The SAS System

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_QCPASS):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adaestart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(AETERM);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;
The SAS System


NOTE: There were 319 observations read from the data set WORK.ADAESTART.
      WHERE not MISSING(AETERM);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("AETERM is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |AETERM is created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adaestart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(AEDECOD);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 277 observations read from the data set WORK.ADAESTART.
      WHERE not MISSING(AEDECOD);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("AEDECOD is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |AEDECOD is created.
NOTE: DATA statement used (Total process time):
The SAS System

      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adaestart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(AEBODSYS);
The SAS System

MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 277 observations read from the data set WORK.ADAESTART.
      WHERE not MISSING(AEBODSYS);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("AEBODSYS is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |AEBODSYS is created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adaestart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(AELLT);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 277 observations read from the data set WORK.ADAESTART.
      WHERE not MISSING(AELLT);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("AELLT is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |AELLT is created.
NOTE: DATA statement used (Total process time):
The SAS System

      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
The SAS System

MPRINT(GADAMCHECKSTARTVARIABLES):   set adaestart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(AEHLT);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 277 observations read from the data set WORK.ADAESTART.
      WHERE not MISSING(AEHLT);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("AEHLT is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |AEHLT is created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adaestart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(AEHLGT);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 277 observations read from the data set WORK.ADAESTART.
      WHERE not MISSING(AEHLGT);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("AEHLGT is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |AEHLGT is created.
NOTE: DATA statement used (Total process time):
The SAS System

      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
The SAS System

MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adaestart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(AESOC);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 277 observations read from the data set WORK.ADAESTART.
      WHERE not MISSING(AESOC);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("AESOC is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |AESOC is created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adaestart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(AECAT);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 319 observations read from the data set WORK.ADAESTART.
      WHERE not MISSING(AECAT);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("AECAT is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |AECAT is created.
NOTE: DATA statement used (Total process time):
The SAS System

      real time           0.00 seconds
      cpu time            0.00 seconds
The SAS System

NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adaestart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(AESCAT);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 60 observations read from the data set WORK.ADAESTART.
      WHERE not MISSING(AESCAT);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("AESCAT is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |AESCAT is created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adaestart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where missing(AESTDTC);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('missrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 0 observations read from the data set WORK.ADAESTART.
      WHERE MISSING(AESTDTC);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("AESTDTC is key variable and has no missing records");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_QCPASS"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_qcpass     |AESTDTC is key variable and has no missing records
NOTE: DATA statement used (Total process time):
The SAS System

      real time           0.00 seconds
      cpu time            0.00 seconds
The SAS System



NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_QCPASS):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adaestart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(AESTDTC);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 319 observations read from the data set WORK.ADAESTART.
      WHERE not MISSING(AESTDTC);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("AESTDTC is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |AESTDTC is created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adaestart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where missing(AEENDTC);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('missrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 141 observations read from the data set WORK.ADAESTART.
      WHERE MISSING(AEENDTC);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("AEENDTC is (cond) key variable and has 141 missing records");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_QCFAIL_NC"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_qcfail_nc  |AEENDTC is (cond) key variable and has 141 missing records
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
The SAS System
The SAS System

      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_QCFAIL_NC):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adaestart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(AEENDTC);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 178 observations read from the data set WORK.ADAESTART.
      WHERE not MISSING(AEENDTC);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("AEENDTC is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |AEENDTC is created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adaestart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(AEENRTPT);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 41 observations read from the data set WORK.ADAESTART.
      WHERE not MISSING(AEENRTPT);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("AEENRTPT is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |AEENRTPT is created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
The SAS System

The SAS System



NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adaestart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(AEENTPT);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 41 observations read from the data set WORK.ADAESTART.
      WHERE not MISSING(AEENTPT);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("AEENTPT is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |AEENTPT is created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adaestart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(AESER);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 319 observations read from the data set WORK.ADAESTART.
      WHERE not MISSING(AESER);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("AESER is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |AESER is created.
NOTE: DATA statement used (Total process time):
The SAS System

      real time           0.00 seconds
      cpu time            0.00 seconds
The SAS System



NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adaestart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(AETOXGR);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 319 observations read from the data set WORK.ADAESTART.
      WHERE not MISSING(AETOXGR);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("AETOXGR is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |AETOXGR is created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adaestart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(AEREL);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 319 observations read from the data set WORK.ADAESTART.
      WHERE not MISSING(AEREL);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("AEREL is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;
The SAS System

l4g_message    |AEREL is created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
The SAS System



NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adaestart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(AEACN);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 319 observations read from the data set WORK.ADAESTART.
      WHERE not MISSING(AEACN);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("AEACN is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |AEACN is created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adaestart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(AEOUT);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 225 observations read from the data set WORK.ADAESTART.
      WHERE not MISSING(AEOUT);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("AEOUT is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
The SAS System

MPRINT(BUILDMSG):   run;

l4g_message    |AEOUT is created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
The SAS System



NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adaestart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(AESDTH);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 22 observations read from the data set WORK.ADAESTART.
      WHERE not MISSING(AESDTH);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("AESDTH is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |AESDTH is created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(ADAE):  ;
MPRINT(ADAE):   *- add AEs from MH -*;
MPRINT(ADAE):   data mh_ae;
MPRINT(ADAE):   set sdtm.mh (where=(mhcat='AE'));
MPRINT(ADAE):   run;

NOTE: There were 0 observations read from the data set SDTM.MH.
      WHERE mhcat='AE';
NOTE: The data set WORK.MH_AE has 0 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: No observations in data set WORK.MH_AE.
MPRINT(ADAE):   data adaestart;
The SAS System

MPRINT(ADAE):   set adaestart;
MPRINT(ADAE):   rename aestdtc=astdtc;
MPRINT(ADAE):   rename aeendtc=aendtc;
MPRINT(ADAE):   rename aeterm=aterm;
MPRINT(ADAE):   rename aedecod=adecod;
MPRINT(ADAE):   rename aellt=allt;
MPRINT(ADAE):   rename aehlt=ahlt;
MPRINT(ADAE):   rename aehlgt=ahlgt;
The SAS System

MPRINT(ADAE):   rename aebodsys=abodsys;
MPRINT(ADAE):   rename aesoc=asoc;
MPRINT(ADAE):   run;

NOTE: There were 319 observations read from the data set WORK.ADAESTART.
NOTE: The data set WORK.ADAESTART has 319 observations and 44 variables.
NOTE: DATA statement used (Total process time):
      real time           0.21 seconds
      cpu time            0.22 seconds


MAUTOCOMPLOC:  The autocall macro GADAMMERGEADSL is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/gadam/_library/gadammergeadsl.sas.
MPRINT(GADAMMERGEADSL):   data din;
MPRINT(GADAMMERGEADSL):   set adaestart;
MPRINT(GADAMMERGEADSL):   osortorder = _n_;
MPRINT(GADAMMERGEADSL):   run;

NOTE: There were 319 observations read from the data set WORK.ADAESTART.
NOTE: The data set WORK.DIN has 319 observations and 45 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMMERGEADSL):   proc sort data=din ;
MPRINT(GADAMMERGEADSL):   by studyid usubjid ;
MPRINT(GADAMMERGEADSL):   run;

NOTE: There were 319 observations read from the data set WORK.DIN.
NOTE: The data set WORK.DIN has 319 observations and 45 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMMERGEADSL):   proc sort data=adamtmp.adsl out=adamtmp_adsl ;
MPRINT(GADAMMERGEADSL):   by studyid usubjid ;
MPRINT(GADAMMERGEADSL):   run;

NOTE: There were 106 observations read from the data set ADAMTMP.ADSL.
NOTE: The data set WORK.ADAMTMP_ADSL has 106 observations and 64 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMMERGEADSL):   *- JMB 2022-02-22 check for dupplicates -*;
The SAS System

MPRINT(GADAMMERGEADSL):   data adamtmp_adsl_dups;
MPRINT(GADAMMERGEADSL):   set adamtmp_adsl ;
MPRINT(GADAMMERGEADSL):   by studyid usubjid ;
MPRINT(GADAMMERGEADSL):   if (not first.usubjid) or (not last.usubjid);
MPRINT(GADAMMERGEADSL):   run;

NOTE: There were 106 observations read from the data set WORK.ADAMTMP_ADSL.
NOTE: The data set WORK.ADAMTMP_ADSL_DUPS has 0 observations and 64 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
The SAS System

      cpu time            0.00 seconds


NOTE: No observations in data set WORK.ADAMTMP_ADSL_DUPS.
MPRINT(GADAMMERGEADSL):   option mcompilenote=all;
MAUTOCOMPLOC:  The autocall macro UNI_VLENGTH is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/macros/_library/uni_vlength.sas.
NOTE: The macro UNI_VLENGTH completed compilation without errors.
      216 instructions 6824 bytes.
MPRINT(GADAMMERGEADSL):   option MCOMPILENOTE=NONE;
MPRINT(UNI_VLENGTH):   *- Harmonize length of character variables in Data= datasets According to the length found in Ref= datasests (if specified) -*;
MPRINT(UNI_VLENGTH):   proc sql noprint;
MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated by " " from (select distinct 
upcase(LIBNAME) as 
LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.DIN" "WORK.ADAMTMP_ADSL" )) th
en LENGTH else . 
end ) as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.DIN" "WORK.DIN" "WORK.ADAMTMP_ADSL" ) group by upcase(name)) group by upcase(name), u
pcase(type) having 
sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK.DIN" and TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.DIN" "WORK.ADAMTMP_ADSL" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(UNI_VLENGTH):   alter table WORK.DIN modify ABODSYS character(52), ADECOD character(57), AEACN character(16), AECAT character(22), AECONTRT character(1), AEENRTPT character(
7), AEENTPT 
character(17), AENDTC character(16), AEOUT character(32), AEREFID character(18), AEREL character(16), AERELPRC character(71), AESCAT character(9), AESCONG character(1), AESDISAB ch
aracter(1), AESDTH 
character(1), AESER character(1), AESHOSP character(1), AESLIFE character(1), AESMIE character(1), AESPID character(2), AETOXGR character(1), AETRTEM character(71), AHLGT character
(66), AHLT 
character(64), ALLT character(40), ASOC character(52), ASTDTC character(16), ATERM character(128), DOMAIN character(2), EPOCH character(20), IDVARVAL character(2), STUDYID characte
r(13), USUBJID 
character(25), _IN_SUPP_FL character(1) ;
NOTE: Table WORK.DIN has been modified, with 45 columns.
MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated by " " from (select distinct 
upcase(LIBNAME) as 
LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.DIN" "WORK.ADAMTMP_ADSL" )) th
en LENGTH else . 
end ) as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.ADAMTMP_ADSL" "WORK.DIN" "WORK.ADAMTMP_ADSL" ) group by upcase(name)) group by upcase
(name), 
upcase(type) having sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK.ADAMTMP_ADSL" and TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.DIN" "WORK.ADAMTMP_AD
SL" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(UNI_VLENGTH):   alter table WORK.ADAMTMP_ADSL modify ACTARM character(1), ACTARMCD character(1), AGEU character(5), ARM character(44), ARMCDAS character(200), ARMCDS charact
er(200), COHORT 
character(40), COUNTRY character(3), CUMARMCA character(4), CUMARMCD character(15), CUMSTUD character(28), DCSREAS character(200), DCSREASP character(200), DCTREAS character(200), 
The SAS System

DCTREASP 
character(200), DTHDTC character(1), DTHFL character(1), EOSSTT character(30), EOTSTT character(12), ETHNIC character(22), LSTCNSRC character(50), RACE character(25), RACEOTH chara
cter(20), RFENDTC 
character(10), RFICDTC character(10), RFPENDTC character(19), RFSTDTC character(16), SAFFL character(1), SEX character(1), SITEID character(7), STUDIES character(200), STUDYID char
acter(13), 
STUDYROUTES character(12), STUDYROUTESNUM character(20), SUBJID character(10), SUBJROUTES character(12), SUBJROUTESNUM character(20), TRTSEQA character(200), TSEQAG1 character(50),
 USUBJID 
character(25) ;
NOTE: Table WORK.ADAMTMP_ADSL has been modified, with 64 columns.
MPRINT(UNI_VLENGTH):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.14 seconds
      cpu time            0.15 seconds


MPRINT(GADAMMERGEADSL):  ;
MPRINT(GADAMMERGEADSL):   data dinfd alert;
MPRINT(GADAMMERGEADSL):   merge din (in=a) adamtmp_adsl (in=b);
MPRINT(GADAMMERGEADSL):   by studyid usubjid;
MPRINT(GADAMMERGEADSL):   if a and not b then output alert;
MPRINT(GADAMMERGEADSL):   if a and b then output dinfd;
MPRINT(GADAMMERGEADSL):   run;
NOTE: There were 319 observations read from the data set WORK.DIN.
NOTE: There were 106 observations read from the data set WORK.ADAMTMP_ADSL.
NOTE: The data set WORK.DINFD has 319 observations and 107 variables.
NOTE: The data set WORK.ALERT has 0 observations and 107 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
The SAS System

      cpu time            0.01 seconds


MPRINT(GADAMMERGEADSL):   proc sql noprint;
MPRINT(GADAMMERGEADSL):   select count(usubjid) into :checkn from alert;
MPRINT(GADAMMERGEADSL):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMMERGEADSL):   proc sort data=dinfd out=adaestart (drop=osortorder);
MPRINT(GADAMMERGEADSL):   by osortorder;
MPRINT(GADAMMERGEADSL):   run;

NOTE: There were 319 observations read from the data set WORK.DINFD.
NOTE: The data set WORK.ADAESTART has 319 observations and 106 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("ADSL merged to dataset.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;
The SAS System


l4g_message    |ADSL merged to dataset.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMMERGEADSL):  ;
MPRINT(ADAE):  ;
MAUTOCOMPLOC:  The autocall macro GADAMDERIVATIONS is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/gadam/_library/gadamderivations.sas.
MPRINT(GADAMDERIVATIONS):   proc sql noprint;
MPRINT(GADAMDERIVATIONS):   select case when upcase(name) = "PARIDENT" then "Y" else "N" end into: bdsvlm from sashelp.vcolumn where libname = "WORK" and upcase(memname) = "ADAESPE
C" and upcase(name) 
= "PARIDENT";
NOTE: No rows were selected.
MPRINT(GADAMDERIVATIONS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDERIVATIONS):   proc sort data = ADAESPEC out=algo nodupkey;
MPRINT(GADAMDERIVATIONS):   by sourceexists sascode;
MPRINT(GADAMDERIVATIONS):   where not missing(sascode);
MPRINT(GADAMDERIVATIONS):   run;

NOTE: There were 44 observations read from the data set WORK.ADAESPEC.
      WHERE not MISSING(sascode);
The SAS System

NOTE: 26 observations with duplicate key values were deleted.
NOTE: The data set WORK.ALGO has 18 observations and 18 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDERIVATIONS):   data algo;
MPRINT(GADAMDERIVATIONS):   set algo;
MPRINT(GADAMDERIVATIONS):   length codetype $6;
MPRINT(GADAMDERIVATIONS):   if lowcase(sascode)=:'%v' then codetype = "macro";
MPRINT(GADAMDERIVATIONS):   else codetype= "inline";
MPRINT(GADAMDERIVATIONS):   if lowcase(sascode)=:'%' and codetype= "inline" then put "WAR" "NING:(GADAMDERIVATIONS): SAS code starting with" '"%" (but not with "%v")' " for derivat
ion of " domain 
@+(-1) "." @+(-1) name / @2 " is considered inline code rather than macro code: " / @2 sascode /;
MPRINT(GADAMDERIVATIONS):   run;

NOTE: There were 18 observations read from the data set WORK.ALGO.
NOTE: The data set WORK.ALGO has 18 observations and 19 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDERIVATIONS):   proc sort data=algo;
The SAS System

MPRINT(GADAMDERIVATIONS):   *by sourceexists codetype;
MPRINT(GADAMDERIVATIONS):   by sourceexists _osortorder;
MPRINT(GADAMDERIVATIONS):   run;

NOTE: There were 18 observations read from the data set WORK.ALGO.
NOTE: The data set WORK.ALGO has 18 observations and 19 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDERIVATIONS):   data a_null_;
MPRINT(GADAMDERIVATIONS):   set algo end=last;
MPRINT(GADAMDERIVATIONS):   by sourceexists _osortorder;
MPRINT(GADAMDERIVATIONS):   if first.sourceexists then algolevel+1;
MPRINT(GADAMDERIVATIONS):   if first.sourceexists then cnt=0;
MPRINT(GADAMDERIVATIONS):   cnt+1;
MPRINT(GADAMDERIVATIONS):   length _startcode _endcode $ 200 ;
MPRINT(GADAMDERIVATIONS):   call missing(_startcode , _endcode ) ;
MPRINT(GADAMDERIVATIONS):   if upcase(ctype) eq "CHAR" and codetype = 'inline' then do;
MPRINT(GADAMDERIVATIONS):   _startcode = "if 0 then " !! strip(name) !! '= put(" ", $' !! strip(clength) !! ".) ; " ;
MPRINT(GADAMDERIVATIONS):   end;
MPRINT(GADAMDERIVATIONS):   call symputx("algo"||strip(put(algolevel,8.))||'_'||strip(put(cnt,8.)),strip(_startcode) !! "  " !! strip(sascode) !! " " !!strip(_endcode) );
MPRINT(GADAMDERIVATIONS):   call symputx("algotype"||strip(put(algolevel,8.))||'_'||strip(put(cnt,8.)),strip(codetype));
MPRINT(GADAMDERIVATIONS):   if last.sourceexists then call symputx("nb_algolevels",strip(put(algolevel,8.)));
MPRINT(GADAMDERIVATIONS):   if last.sourceexists then call symputx("nb_algos"||strip(put(algolevel,8.)),strip(put(cnt,8.)));
MPRINT(GADAMDERIVATIONS):   run;

NOTE: There were 18 observations read from the data set WORK.ALGO.
NOTE: The data set WORK.A_NULL_ has 18 observations and 23 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds

The SAS System


MPRINT(GADAMDERIVATIONS):   data _a_1;
MPRINT(GADAMDERIVATIONS):   set adaestart;
MPRINT(GADAMDERIVATIONS):   run;

NOTE: There were 319 observations read from the data set WORK.ADAESTART.
NOTE: The data set WORK._A_1 has 319 observations and 106 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDERIVATIONS):   data _a_2;
MPRINT(GADAMDERIVATIONS):   set _a_1;
MPRINT(GADAMDERIVATIONS):   if prxmatch('/^[1-2]\d{3}-[0-1]\d-[0-3]\dT?.*$/i', cats(AESTDTC)) then do;
MPRINT(GADAMDERIVATIONS):   ASTDT_date=upcase(prxchange('s/^([1-2]\d{3}-[0-1]\d-[0-3]\d)T?.*$/\1/i', 1, cats(AESTDTC)));
MPRINT(GADAMDERIVATIONS):   if ASTDT_date ne "" then ASTDT=input(ASTDT_date,yymmdd10.);
MPRINT(GADAMDERIVATIONS):   drop ASTDT_date;
MPRINT(GADAMDERIVATIONS):   end;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):   if prxmatch('/^[1-2]\d{3}-[0-1]\d-[0-3](\dT\d\d:\d\d.*)?$/i', cats(AESTDTC)) then ASTDTM=input(AESTDTC,E8601DT.);
MPRINT(GADAMDERIVATIONS):   ;
The SAS System

MPRINT(GADAMDERIVATIONS):   if prxmatch('/^[1-2]\d{3}-[0-1]\d-[0-3]\dT?.*$/i', cats(AEENDTC)) then do;
MPRINT(GADAMDERIVATIONS):   AENDT_date=upcase(prxchange('s/^([1-2]\d{3}-[0-1]\d-[0-3]\d)T?.*$/\1/i', 1, cats(AEENDTC)));
MPRINT(GADAMDERIVATIONS):   if AENDT_date ne "" then AENDT=input(AENDT_date,yymmdd10.);
MPRINT(GADAMDERIVATIONS):   drop AENDT_date;
MPRINT(GADAMDERIVATIONS):   end;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):   if prxmatch('/^[1-2]\d{3}-[0-1]\d-[0-3]\dT\d\d:\d\d.*$/i', cats(AEENDTC)) then do;
MPRINT(GADAMDERIVATIONS):   AENDTM_datetime=upcase(prxchange('s/^([1-2]\d{3}-[0-1]\d-[0-3]\dT\d\d:\d\d.*)$/\1/i', 1, cats(AEENDTC)));
MPRINT(GADAMDERIVATIONS):   if AENDTM_datetime ne "" then AENDTM=input(AENDTM_datetime,E8601DT.);
MPRINT(GADAMDERIVATIONS):   drop AENDTM_datetime;
MPRINT(GADAMDERIVATIONS):   end;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):   if AETOXGR='' then ATOXGRN=.;
MPRINT(GADAMDERIVATIONS):   else if prxmatch('/^\d.*$/i', cats(AETOXGR)) then ATOXGRN=input(AETOXGR,best.);
MPRINT(GADAMDERIVATIONS):   else if upcase(AETOXGR)='MILD' then ATOXGRN=1;
MPRINT(GADAMDERIVATIONS):   else if upcase(AETOXGR)='MODERATE' then ATOXGRN=2;
MPRINT(GADAMDERIVATIONS):   else if upcase(AETOXGR)='SEVERE' then ATOXGRN=3;
MPRINT(GADAMDERIVATIONS):   else if compress(upcase(AETOXGR),'- ')='LIFETHREATENING' then ATOXGRN=4;
MPRINT(GADAMDERIVATIONS):   else if upcase(AETOXGR)='FATAL' then ATOXGRN=5;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):   if 0 then RELGR1= put(" ", $40.) ;
MPRINT(GADAMDERIVATIONS):   if ( (index(AEREL,'RELATED')>0 or index(AEREL,'PROBAB')>0 or index(AEREL,'POSSIBL')>0 or index(AEREL,'LIKELY')>0) and (index(AEREL,'NOT')=0 and index(AE
REL,'UN')=0) ) or 
AEREL='' then RELGR1='TREATMENT-RELATED';
MPRINT(GADAMDERIVATIONS):   else if index(AEREL,'NOT')=0 or index(AEREL,'UN')=0 or AEREL='NONE' or AEREL='NOT APPLICABLE' then RELGR1='NOT TREATMENT-RELATED';
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):   if 0 then ITEM01= put(" ", $200.) ;
MPRINT(GADAMDERIVATIONS):   item01="PROTOCOL-REQUIRED PROCEDURES";
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):   if 0 then AEREL01= put(" ", $200.) ;
MPRINT(GADAMDERIVATIONS):   AEREL01=AERELPRC;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      201:122   
The SAS System

NOTE: Variable AESTDTC is uninitialized.
NOTE: Variable AEENDTC is uninitialized.
NOTE: There were 319 observations read from the data set WORK._A_1.
NOTE: The data set WORK._A_2 has 319 observations and 116 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds


MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):   ;
The SAS System

MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):   ;
MAUTOCOMPLOC:  The autocall macro VAECM is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/gadam/_library/vaecm.sas.
MPRINT(VAECM):   ;
MPRINT(VAECM):   data _temp;
MPRINT(VAECM):   set WORK._A_2;
MPRINT(VAECM):   _sort = _n_;
MPRINT(VAECM):   run;

NOTE: There were 319 observations read from the data set WORK._A_2.
NOTE: The data set WORK._TEMP has 319 observations and 117 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(VAECM):   proc contents data=_temp out=_cont (keep=name where=( upcase(name) in ('STUDYID' 'USUBJID' 'AESEQ') )) noprint;
MPRINT(VAECM):   run;

NOTE: The data set WORK._CONT has 3 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VAECM):   proc sql;
MPRINT(VAECM):   create table _ae_cm as select distinct a.studyid, a.usubjid, a.aeseq , c.cmDECOD from _temp as a left join sdtm.relrec (where=(rdomain="AE" and idvar="AESEQ")) as 
r on 
a.studyid=r.studyid and a.usubjid=r.usubjid and a.aeseq=input(r.idvarval,best.) left join sdtm.relrec (where=(rdomain="CM" and idvar="CMSEQ")) as l on a.studyid=l.studyid and a.usu
bjid=l.usubjid and 
r.relid=l.relid left join sdtm.cm (where=(cmindc="ADVERSE EVENT")) as c on a.studyid=c.studyid and a.usubjid=c.usubjid and input(l.idvarval,best.)=c.cmseq order by studyid, usubjid
, aeseq, cmDECOD;
NOTE: Table WORK._AE_CM created, with 509 rows and 4 columns.

MPRINT(VAECM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
The SAS System

      cpu time            0.02 seconds


MPRINT(VAECM):   data _ae_cm_conc (drop=cmDECOD);
MPRINT(VAECM):   set _ae_cm;
MPRINT(VAECM):   by studyid usubjid aeseq cmDECOD;
MPRINT(VAECM):   length aecm $400;
MPRINT(VAECM):   retain aecm;
MPRINT(VAECM):   if first.aeseq then call missing(of aecm);
MPRINT(VAECM):   aecm = catx(', ',aecm,cmDECOD);
MPRINT(VAECM):   if last.aeseq;
MPRINT(VAECM):   run;

NOTE: There were 509 observations read from the data set WORK._AE_CM.
The SAS System

NOTE: The data set WORK._AE_CM_CONC has 319 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VAECM):   proc sql;
MPRINT(VAECM):   create table WORK._A_2 (drop=_sort) as select distinct a.*, b.aecm from _temp as a left join _ae_cm_conc as b on a.studyid=b.studyid and a.usubjid=b.usubjid and a.
aeseq=b.aeseq order 
by _sort;
NOTE: Table WORK._A_2 created, with 319 rows and 117 columns.

MPRINT(VAECM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.02 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("AECM lists the CM.CMDECOD corresponding to the AE.AESEQ.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_DRVVARDEF"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_drvvardef  |AECM lists the CM.CMDECOD corresponding to the AE.AESEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_DRVVARDEF):   ;
MPRINT(VAECM):  ;
MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("AECM is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |AECM is created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
The SAS System



NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(VAECM):  ;
MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):   data _a_3;
MPRINT(GADAMDERIVATIONS):   set _a_2;
MPRINT(GADAMDERIVATIONS):   if ASTDT = . or TRTSDT=. then ASTDY=. ;
The SAS System

MPRINT(GADAMDERIVATIONS):   else if ASTDT>=TRTSDT then ASTDY=ASTDT-TRTSDT+1;
MPRINT(GADAMDERIVATIONS):   else ASTDY=ASTDT-TRTSDT;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):   if AENDT = . or TRTSDT=. then AENDY=. ;
MPRINT(GADAMDERIVATIONS):   else if AENDT>=TRTSDT then AENDY=AENDT-TRTSDT+1;
MPRINT(GADAMDERIVATIONS):   else AENDY=AENDT-TRTSDT;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):   if 0 then ATOXGR= put(" ", $20.) ;
MPRINT(GADAMDERIVATIONS):   if ATOXGRN>. then ATOXGR='Grade '||cats(put(ATOXGRN,best.));
MPRINT(GADAMDERIVATIONS):   if ATOXGR='' then ATOXGR=AETOXGR;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):   run;

NOTE: There were 319 observations read from the data set WORK._A_2.
NOTE: The data set WORK._A_3 has 319 observations and 120 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds


MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):  *********************************************************************** * Project : /general/biostat/gadam/_library * Program : vaperiod.sas * Author : j
bodart * Creation 
Date : 2022-04-20 * Purpose : Merge ADAPER to dataset &inds * Input datasets : requireded: &inds, adamtmp.adaper * optionnal datasets: sdtm.sv where visit='SCREENING' * Update: * D
ate Author Revision 
* 2022-07-17 P. Schrauben - update variable names from ADAPER * 2022-07-20 P. Schrauben - join ADAPER also when &dt=. and &dt2 ne . * - join ADAPER also on studyid * - use time inf
o when available in 
dates * - add war-ning messages * - when aperiod(c) missing: * if dates during the FU of 60/90/last days after overall treatment period * then aperiodc='post-treatment period' * an
d asperc='60 days 
post-treatment period' or '90 days post-treatment period' or 'post-treatment period' * else if end date prior overall treatment period * then aperiodc=asperc='Prior' and aperiod=as
per=-1 * - update 
header of the macro * 2022-08-29 P. Schrauben - update ASPERC = 60 days post-treatment period => 1-60 days Post-Treatment * 90 days post-treatment period => 61-90 days Post-Treatme
nt * 90 days 
post-treatment period => >90 days Post-Treatment * - add ASPERC ='1-30 days Pre-Treatment' and '>30 days Pre-Treatment' * - use of new macro parameter return in %varlist * - remove
 macro parameter 
cond * - remove macro parameter dt2 to avoid duplicates when for eg start in 'Overall Treatment' period and end in '1-60 days Post-Treatment' * 2022-09-13 P. Schrauben - subperiods
 in different 
variables (no more duplicated in records) * - add periods values 'Screening' and 'Pre-Screening' (before screening visit) and 'Pre-Study'(no screening visit) 
*****************************************************************************************************************;
MPRINT(GADAMDERIVATIONS):   * PARAMS : inds = input dataset (set to &syslast. if missing) ;
MPRINT(GADAMDERIVATIONS):   * dt = start date of event (by default=adt) ;
MPRINT(GADAMDERIVATIONS):   ******************************************************************************************************************;
MAUTOCOMPLOC:  The autocall macro VAPERIOD is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/gadam/_library/vaperiod.sas.
MPRINT(VAPERIOD):   data din;
MPRINT(VAPERIOD):   set WORK._A_3;
MPRINT(VAPERIOD):   osortorder = _n_;
MPRINT(VAPERIOD):   run;

The SAS System

NOTE: There were 319 observations read from the data set WORK._A_3.
The SAS System

NOTE: The data set WORK.DIN has 319 observations and 121 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VAPERIOD):   data WORK._A_3;
MPRINT(VAPERIOD):   set din;
MPRINT(VAPERIOD):   format sdtm1 sdtm2 e8601dt.;
MPRINT(VAPERIOD):   if astdtm = . and astdt ne . then do;
MPRINT(VAPERIOD):   sdtm1 = dhms(astdt,00,00,00);
MPRINT(VAPERIOD):   sdtm2 = dhms(astdt,23,59,59);
MPRINT(VAPERIOD):   end;
MPRINT(VAPERIOD):   else do;
MPRINT(VAPERIOD):   sdtm1 = astdtm;
MPRINT(VAPERIOD):   sdtm2 = astdtm;
MPRINT(VAPERIOD):   end;
MPRINT(VAPERIOD):   run;

NOTE: There were 319 observations read from the data set WORK.DIN.
NOTE: The data set WORK._A_3 has 319 observations and 123 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds


MPRINT(VAPERIOD):   proc sql undo_policy=none;
MPRINT(VAPERIOD):   create table WORK._A_3 as select distinct a.* , b.aspsdtm as ftreatdtm , b.aspedtm as ltreatdtm , b.asp60dtm as fu60dtm, b.asp90dtm as fu90dtm from WORK._A_3 as
 a left join 
adamtmp.adaper (where=(aspertyp='OVERALL TREATMENT')) as b on a.usubjid=b.usubjid and a.studyid=b.studyid order by osortorder;
NOTE: Table WORK._A_3 created, with 319 rows and 127 columns.

MPRINT(VAPERIOD):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.02 seconds


MPRINT(VAPERIOD):   proc sql undo_policy=none;
MPRINT(VAPERIOD):   create table WORK._A_3 as select distinct a.*, b.aperiod , b.aperiodc , b.trtsdt as apersdt , b.trtedt as aperedt , b.aperiod as asper, b.aperiodc as asperc, b.
trtsdt as aspersdt, 
b.trtedt as asperedt from WORK._A_3 as a left join adamtmp.adaper (where=(aperiodc ne '' and aspsdtm ne . and aspedtm ne .)) as b on a.usubjid=b.usubjid and a.studyid=b.studyid and
 astdt ne . and 
a.sdtm2 >= b.aspsdtm and (a.sdtm1 <= b.aspedtm or b.aspedtm=.) order by osortorder, aperiod;
NOTE: Table WORK._A_3 created, with 319 rows and 135 columns.

MPRINT(VAPERIOD):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds


MPRINT(VAPERIOD):   data WORK._A_3;
MPRINT(VAPERIOD):   set WORK._A_3;
MPRINT(VAPERIOD):   format asperc $200.;
MPRINT(VAPERIOD):   if aperiodc='' then do;
MPRINT(VAPERIOD):   if sdtm1=. then do;
MPRINT(VAPERIOD):   aperiod=.;
The SAS System

MPRINT(VAPERIOD):   aperiodc='Missing';
MPRINT(VAPERIOD):   end;
The SAS System

MPRINT(VAPERIOD):   else if ftreatdtm=. then do;
MPRINT(VAPERIOD):   aperiod=-99;
MPRINT(VAPERIOD):   aperiodc='No Treatment';
MPRINT(VAPERIOD):   end;
MPRINT(VAPERIOD):   else if sdtm2 < ftreatdtm then do;
MPRINT(VAPERIOD):   aperiod=-1;
MPRINT(VAPERIOD):   aperiodc='Pre-Treatment';
MPRINT(VAPERIOD):   aperedt=datepart(intnx('minute',ftreatdtm,-1));
MPRINT(VAPERIOD):   end;
MPRINT(VAPERIOD):   else if sdtm1 > ltreatdtm then do;
MPRINT(VAPERIOD):   aperiod=1;
MPRINT(VAPERIOD):   aperiodc='Post-Treatment';
MPRINT(VAPERIOD):   apersdt=datepart(intnx('minute',ltreatdtm,1));
MPRINT(VAPERIOD):   end;
MPRINT(VAPERIOD):   else do;
MPRINT(VAPERIOD):   aperiod=0;
MPRINT(VAPERIOD):   aperiodc='Treatment';
MPRINT(VAPERIOD):   end;
MPRINT(VAPERIOD):   end;
MPRINT(VAPERIOD):   run;

NOTE: There were 319 observations read from the data set WORK._A_3.
NOTE: The data set WORK._A_3 has 319 observations and 135 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VAPERIOD):   proc sql undo_policy=none;
MPRINT(VAPERIOD):   create table WORK._A_3 (drop=screendt) as select distinct a.*, case when prxmatch('/^\d{4}-\d{2}-\d{2}.*$/i',cats(b.svstdtc)) then 
input(prxchange('s/^(\d{4}-\d{2}-\d{2}).*$/\1/i',1,cats(b.svstdtc)), e8601da.) else . end as screendt format=e8601da. , case when 
prxmatch('/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}(:\d{2})?$/i',cats(b.svstdtc)) then input(strip(b.svstdtc),e8601dt.) when calculated screendt ne . then dhms(calculated screendt,00,00,00) 
else . end as 
screendtm format=e8601dt. from WORK._A_3 as a left join sdtm.sv (where=(visit='SCREENING')) as b on a.usubjid=b.usubjid and a.studyid=b.studyid order by osortorder, aperiod;
NOTE: Table WORK._A_3 created, with 319 rows and 136 columns.

MPRINT(VAPERIOD):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds


MPRINT(VAPERIOD):   data WORK._A_3;
MPRINT(VAPERIOD):   set WORK._A_3;
MPRINT(VAPERIOD):   if asperc='Overall Treatment' then do;
MPRINT(VAPERIOD):   aspersdt = datepart(ftreatdtm);
MPRINT(VAPERIOD):   asperedt = datepart(ltreatdtm);
MPRINT(VAPERIOD):   end;
MPRINT(VAPERIOD):   else if aperiodc='No Treatment' then do;
MPRINT(VAPERIOD):   if screendtm = . then do;
MPRINT(VAPERIOD):   asper=-999;
MPRINT(VAPERIOD):   asperc='Pre-Study';
MPRINT(VAPERIOD):   end;
MPRINT(VAPERIOD):   else if sdtm2 < screendtm then do;
The SAS System

MPRINT(VAPERIOD):   asper=-99;
MPRINT(VAPERIOD):   asperc='Pre-Screening';
MPRINT(VAPERIOD):   asperedt=datepart(intnx('minute',screendtm,-1));
MPRINT(VAPERIOD):   end;
MPRINT(VAPERIOD):   else do;
The SAS System

MPRINT(VAPERIOD):   asper=-90;
MPRINT(VAPERIOD):   asperc='Screening';
MPRINT(VAPERIOD):   aspersdt=datepart(screendtm);
MPRINT(VAPERIOD):   asperedt=.;
MPRINT(VAPERIOD):   end;
MPRINT(VAPERIOD):   end;
MPRINT(VAPERIOD):   else if aperiodc='Pre-Treatment' then do;
MPRINT(VAPERIOD):   ftreat_event = (sdtm2 - ftreatdtm) / (24*60*60);
MPRINT(VAPERIOD):   if ftreat_event >= -30 then do;
MPRINT(VAPERIOD):   asper=-1;
MPRINT(VAPERIOD):   asperc='1-30 days Pre-Treatment';
MPRINT(VAPERIOD):   aspersdt = datepart(intnx('hour',ftreatdtm,-30*24));
MPRINT(VAPERIOD):   asperedt = datepart(intnx('minute',ftreatdtm,-1));
MPRINT(VAPERIOD):   end;
MPRINT(VAPERIOD):   else do;
MPRINT(VAPERIOD):   asper=-31;
MPRINT(VAPERIOD):   asperc='>30 days Pre-treatment';
MPRINT(VAPERIOD):   aspersdt = .;
MPRINT(VAPERIOD):   asperedt = datepart(intnx('hour',ftreatdtm,-31*24));
MPRINT(VAPERIOD):   end;
MPRINT(VAPERIOD):   end;
MPRINT(VAPERIOD):   else if aperiodc='Post-Treatment' then do;
MPRINT(VAPERIOD):   if sdtm1 <= fu60dtm then do;
MPRINT(VAPERIOD):   asper=1;
MPRINT(VAPERIOD):   asperc='1-60 days Post-treatment';
MPRINT(VAPERIOD):   aspersdt = datepart(intnx('minute',ltreatdtm,1));
MPRINT(VAPERIOD):   asperedt = datepart(fu60dtm);
MPRINT(VAPERIOD):   end;
MPRINT(VAPERIOD):   else if sdtm1 <= fu90dtm then do;
MPRINT(VAPERIOD):   asper=61;
MPRINT(VAPERIOD):   asperc='61-90 days Post-treatment';
MPRINT(VAPERIOD):   aspersdt = datepart(intnx('minute',fu60dtm,1));
MPRINT(VAPERIOD):   asperedt = datepart(fu90dtm);
MPRINT(VAPERIOD):   end;
MPRINT(VAPERIOD):   else if sdtm2 > fu90dtm then do;
MPRINT(VAPERIOD):   asper=91;
MPRINT(VAPERIOD):   asperc='>90 days Post-treatment';
MPRINT(VAPERIOD):   aspersdt = datepart(intnx('minute',fu90dtm,1));
MPRINT(VAPERIOD):   asperedt = .;
MPRINT(VAPERIOD):   end;
MPRINT(VAPERIOD):   end;
MPRINT(VAPERIOD):   run;

NOTE: There were 319 observations read from the data set WORK._A_3.
NOTE: The data set WORK._A_3 has 319 observations and 137 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(ADD_SUPERIOD):   proc sql undo_policy=none;
The SAS System

MPRINT(ADD_SUPERIOD):   create table WORK._A_3 as select distinct a.*, b.asper as asp3m, b.asperc as asp3mc , b.aspsdt as asp3msdt , b.aspedt as asp3medt from WORK._A_3 as a left j
oin adamtmp.adaper 
(where=(aspertyp="3 MONTHS")) as b on a.usubjid=b.usubjid and a.studyid=b.studyid and astdt ne . and a.sdtm2 >= b.aspsdtm and (a.sdtm1 <= b.aspedtm or b.aspedtm=.) order by osortor
der, aperiod, asper;
NOTE: Table WORK._A_3 created, with 319 rows and 141 columns.

MPRINT(ADD_SUPERIOD):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
The SAS System

      cpu time            0.02 seconds


MPRINT(VAPERIOD):  ;
MPRINT(ADD_SUPERIOD):   proc sql undo_policy=none;
MPRINT(ADD_SUPERIOD):   create table WORK._A_3 as select distinct a.*, b.asper as asprt, b.asperc as asprtc , b.aspsdt as asprtsdt , b.aspedt as asprtedt from WORK._A_3 as a left j
oin adamtmp.adaper 
(where=(aspertyp="TREATMENT-ROUTE")) as b on a.usubjid=b.usubjid and a.studyid=b.studyid and astdt ne . and a.sdtm2 >= b.aspsdtm and (a.sdtm1 <= b.aspedtm or b.aspedtm=.) order by 
osortorder, 
aperiod, asper;
NOTE: Table WORK._A_3 created, with 319 rows and 145 columns.

MPRINT(ADD_SUPERIOD):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


MPRINT(VAPERIOD):  ;
MPRINT(ADD_SUPERIOD):   proc sql undo_policy=none;
MPRINT(ADD_SUPERIOD):   create table WORK._A_3 as select distinct a.*, b.asper as asptr, b.asperc as asptrc , b.aspsdt as asptrsdt , b.aspedt as asptredt from WORK._A_3 as a left j
oin adamtmp.adaper 
(where=(aspertyp="TREATMENT")) as b on a.usubjid=b.usubjid and a.studyid=b.studyid and astdt ne . and a.sdtm2 >= b.aspsdtm and (a.sdtm1 <= b.aspedtm or b.aspedtm=.) and strip(scan(
a.asprtc,1,'-')) = 
b.asperc order by osortorder, aperiod, asper;
NOTE: Table WORK._A_3 created, with 319 rows and 149 columns.

MPRINT(ADD_SUPERIOD):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds


MPRINT(VAPERIOD):  ;
MPRINT(VAPERIOD):   data WORK._A_3;
MPRINT(VAPERIOD):   set WORK._A_3 (drop = osortorder);
MPRINT(VAPERIOD):   run;

NOTE: There were 319 observations read from the data set WORK._A_3.
NOTE: The data set WORK._A_3 has 319 observations and 148 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("ADAPER merged to dataset.");
The SAS System

MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |ADAPER merged to dataset.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(VAPERIOD):  ;
MPRINT(GADAMDERIVATIONS):  ;
The SAS System

MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):   data _a_4;
MPRINT(GADAMDERIVATIONS):   set _a_3;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):   if 0 then ADUR= put(" ", $200.) ;
MPRINT(GADAMDERIVATIONS):   if AENDT ne . and ASTDT ne . then ADUR=strip(put(AENDT-ASTDT+1,best.));
MPRINT(GADAMDERIVATIONS):   else if AEOUT = 'RECOVERED/RESOLVED' then ADUR='MISSING';
MPRINT(GADAMDERIVATIONS):   else if ASTDT ne . and LSTCNDT ne . then ADUR='>'||strip(put(LSTCNDT-ASTDT+1,best.));
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):   run;

NOTE: There were 319 observations read from the data set WORK._A_3.
NOTE: The data set WORK._A_4 has 319 observations and 149 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDERIVATIONS):  *********************************************************************** * Project : /general/biostat/gadam/_library/ * Program : vtrtemfl.sas * Author : 
azaniewska * 
Creation Date : 2021-08-26 * Purpose : To derive adae.trtemfl * Notes : 1. This macro derives trtemfl as per the following rule: Treatment-emergent adverse events (TEAE) are define
d as AEs starting 
on or after first administration of any study drug. 2. It assumes that trtsdtm is present and that AE start date may include time 3. It does not cover scenarios where ae starts aft
er treatment end 
date or any other cases apart from the one specified above. * Updates: * 2022-02-16 - pschrauben - keep original value of &date. and use new variable &date._ for computation * 2022
-02-18 - pschrauben 
- adapt computation for dates containing '--' * - take into account of dates like 2021-11T11:00 * - add checks on existence of input dataset and existence of TRTSDTM and &date. var
iables in input 
dataset * 2022-07-15 - pschrauben - avoid in-valid note for in-valid dates like 2022-03-15TUN:UN or 2022-03-15T10:UN or ... ********************************************************
***************;
MAUTOCOMPLOC:  The autocall macro VTRTEMFL is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/gadam/_library/vtrtemfl.sas.
MPRINT(VTRTEMFL):   data WORK._A_4 ;
MPRINT(VTRTEMFL):   set WORK._A_4 ;
MPRINT(VTRTEMFL):   *deal with data issues;
MPRINT(VTRTEMFL):   aestdtc_=aestdtc;
MPRINT(VTRTEMFL):   aestdtc_=strip(tranwrd(tranwrd(tranwrd(aestdtc_,'T--:--',''),':--',''),'--',''));
MPRINT(VTRTEMFL):   aestdtc_=strip(tranwrd(tranwrd(tranwrd(aestdtc_,'TUK:UK',''),':UK',''),'UK',''));
MPRINT(VTRTEMFL):   aestdtc_=strip(tranwrd(tranwrd(tranwrd(aestdtc_,'TUN:UN',''),':UN',''),'UN',''));
MPRINT(VTRTEMFL):   if find(aestdtc_, 'T')<11 and find(aestdtc_, 'T')>0 then do;
The SAS System

MPRINT(VTRTEMFL):   aestdtc_=substr(aestdtc_, 1, find(aestdtc_, 'T')-1);
MPRINT(VTRTEMFL):   end;
MPRINT(VTRTEMFL):   *impute aestdtc with first day of the month and December (if month also missing) - in-between step to create full date;
MPRINT(VTRTEMFL):   if length(aestdtc_)>=10 then aestdtc_t=aestdtc_;
MPRINT(VTRTEMFL):   if length(aestdtc_)=7 then do;
MPRINT(VTRTEMFL):   aestdtc_t=strip(aestdtc_)||'-01';
MPRINT(VTRTEMFL):   flag='D';
MPRINT(VTRTEMFL):   end;
MPRINT(VTRTEMFL):   if length(aestdtc_)=4 then do;
MPRINT(VTRTEMFL):   aestdtc_t=strip(aestdtc_)||'-12-01';
MPRINT(VTRTEMFL):   flag='M';
MPRINT(VTRTEMFL):   end;
MPRINT(VTRTEMFL):   *convert to numeric so intnx function can take it;
MPRINT(VTRTEMFL):   if prxmatch('/^[1-2]\d{3}-[0-1]\d-[0-3]\dT?.*$/i', cats(aestdtc_t)) then date=input(aestdtc_t,yymmdd10.);
MPRINT(VTRTEMFL):   *return the last day of the month of the supplied date.;
MPRINT(VTRTEMFL):   if date ne . then eom=intnx('month',date,0,'end');
MPRINT(VTRTEMFL):   *extract last day of the month for each date;
MPRINT(VTRTEMFL):   if eom ne . then numdays=put(day(eom),2.);
MPRINT(VTRTEMFL):   *impute with the last date of the month and December (if month also missing);
MPRINT(VTRTEMFL):   if length(aestdtc_)>10 then aestdtc_t1=aestdtc_;
MPRINT(VTRTEMFL):   if length(aestdtc_)=10 then aestdtc_t1=strip(aestdtc_)||'T23:59';
MPRINT(VTRTEMFL):   if length(aestdtc_)=7 then aestdtc_t1=strip(aestdtc_)||'-'||strip(numdays)||'T23:59';
MPRINT(VTRTEMFL):   if length(aestdtc_)=4 then aestdtc_t1=strip(aestdtc_)||'-12-'||strip(numdays)||'T23:59';
The SAS System

MPRINT(VTRTEMFL):   *convert to ISO8601 date;
MPRINT(VTRTEMFL):   if aestdtc_t1 ne '' then date1=input(aestdtc_t1,E8601DT19.);
MPRINT(VTRTEMFL):   format date1 E8601DT19.;
MPRINT(VTRTEMFL):   if n(date1,trtsdtm)=2 then do;
MPRINT(VTRTEMFL):   if date1>=trtsdtm then trtemfl='Y';
MPRINT(VTRTEMFL):   end;
MPRINT(VTRTEMFL):   drop date flag eom numdays date1 aestdtc_t aestdtc_t1 aestdtc_;
MPRINT(VTRTEMFL):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      201:1   201:1   201:1   201:1   201:1   201:1   201:1   201:1   201:1   201:1   201:1   201:1   201:1   201:1   201:1   201:1   201:1   201:1   201:1   201:1   201:1   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      201:133   201:222   201:53    201:213   201:26    201:145   201:62    201:155   201:2     201:83    
NOTE: There were 319 observations read from the data set WORK._A_4.
NOTE: The data set WORK._A_4 has 319 observations and 150 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VTRTEMFL):   data _null_;
MPRINT(VTRTEMFL):   dsid=open("WORK._A_4                            ");
MPRINT(VTRTEMFL):   check=varnum(dsid,'trtemfl');
MPRINT(VTRTEMFL):   call symputx('check', check);
MPRINT(VTRTEMFL):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("TRTEMFL is created.");
The SAS System

MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |TRTEMFL is created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(VTRTEMFL):  ;
MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("TRTEMFL=Y is defined as AE starting on or after first administration of any study drug.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_DRVVARDEF"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_drvvardef  |TRTEMFL=Y is defined as AE starting on or after first administration of any study drug.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
The SAS System



NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_DRVVARDEF):   ;
MPRINT(VTRTEMFL):  ;
MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):   data _a_5;
MPRINT(GADAMDERIVATIONS):   set _a_4;
MPRINT(GADAMDERIVATIONS):   if AENDT ne . and ASTDT ne . then ADURN=AENDT-ASTDT+1;
MPRINT(GADAMDERIVATIONS):   else if ASTDT ne . and LSTCNDT ne . and AEOUT ne 'RECOVERED/RESOLVED' then ADURN=LSTCNDT-ASTDT+1;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):   run;

NOTE: There were 319 observations read from the data set WORK._A_4.
NOTE: The data set WORK._A_5 has 319 observations and 151 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):   ;
MAUTOCOMPLOC:  The autocall macro VAEDOSE is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/gadam/_library/vaedose.sas.
MPRINT(VAEDOSE):   ;
MPRINT(VAEDOSE):   data _temp;
The SAS System

MPRINT(VAEDOSE):   set WORK._A_5;
MPRINT(VAEDOSE):   _sort = _n_;
MPRINT(VAEDOSE):   run;

NOTE: There were 319 observations read from the data set WORK._A_5.
NOTE: The data set WORK._TEMP has 319 observations and 152 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(VAEDOSE):   proc sql;
MPRINT(VAEDOSE):   create table _ex as select distinct usubjid, studyid, exstdtc, extrt, exroute , case when prxmatch('/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}(:\d{2})?$/i', cats(exstdtc)) 
then 
input(strip(exstdtc),e8601dt.) else . end as ex_datetime format=best12. , case when prxmatch('/^\d{4}-\d{2}-\d{2}.*$/i', cats(exstdtc)) then 
input(prxchange('s/^(\d{4}-\d{2}-\d{2}).*$/\1/i',1,cats(exstdtc)), e8601da.) else . end as ex_date format=best12. from sdtm.ex where length(exstdtc) >= 10 order by usubjid, studyid
, ex_date, 
ex_datetime;
NOTE: Table WORK._EX created, with 3330 rows and 7 columns.

MPRINT(VAEDOSE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds


MPRINT(VAEDOSE):   data _ex (drop=ex_date_);
MPRINT(VAEDOSE):   set _ex (where=(ex_date ne .));
MPRINT(VAEDOSE):   attrib dose format=3.0;
The SAS System

MPRINT(VAEDOSE):   by usubjid studyid ex_date;
MPRINT(VAEDOSE):   retain dose ex_date_;
MPRINT(VAEDOSE):   if first.studyid then do;
MPRINT(VAEDOSE):   dose=1;
MPRINT(VAEDOSE):   ex_date_=ex_date;
MPRINT(VAEDOSE):   end;
MPRINT(VAEDOSE):   else if ex_date_ ne ex_date then do;
MPRINT(VAEDOSE):   dose+1;
MPRINT(VAEDOSE):   ex_date_=ex_date;
MPRINT(VAEDOSE):   end;
MPRINT(VAEDOSE):   run;

NOTE: There were 3330 observations read from the data set WORK._EX.
      WHERE ex_date not = .;
NOTE: The data set WORK._EX has 3330 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VAEDOSE):   proc contents data=_ex out=_cont_ex (keep=name length) noprint;
MPRINT(VAEDOSE):   run;

NOTE: The data set WORK._CONT_EX has 8 observations and 2 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
The SAS System



MPRINT(VAEDOSE):   proc sql noprint;
MPRINT(VAEDOSE):   select distinct strip(put(length,best.)) into :l_dosetrt trimmed from _cont_ex where upcase(name)="EXTRT";
MPRINT(VAEDOSE):   select distinct strip(put(length,best.)) into :l_doseroute trimmed from _cont_ex where upcase(name)="EXROUTE";
MPRINT(VAEDOSE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VAEDOSE):   proc sql;
MPRINT(VAEDOSE):   create table _temp2 as select distinct a.usubjid, a.studyid, a.aestdtc, a.astdt, a.astdtm , max(b.ex_date) as DOSEDT , max(b.ex_datetime) as DOSEDTM , max(b.dose
) as DOSESEQ , 
extrt as EXTRT length=12 , exroute as DOSEROUTE length=12 from _temp as a left join _ex as b on a.usubjid=b.usubjid and a.studyid=b.studyid and a.astdt ne . and a.astdt>=b.ex_date 
and (a.astdtm=. or 
a.astdtm>=b.ex_datetime) group by a.usubjid, a.studyid, a.aestdtc having b.ex_date=dosedt and b.ex_datetime=dosedtm order by usubjid, studyid, astdt, dosedt, astdtm, extrt, exroute
;
NOTE: The query requires remerging summary statistics back with the original data.
NOTE: Table WORK._TEMP2 created, with 75 rows and 10 columns.

MPRINT(VAEDOSE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(VAEDOSE):   * EXTRT and DOSEROUTE - concatenation by EXSTDTC date = dosedt*;
MPRINT(VAEDOSE):   proc sql;
MPRINT(VAEDOSE):   create table _temp3_ as select distinct usubjid, studyid, aestdtc, dosedt, doseseq, extrt, doseroute from _temp2 order by usubjid, studyid, aestdtc, dosedt, extr
t, doseroute;
NOTE: Table WORK._TEMP3_ created, with 75 rows and 7 columns.

MPRINT(VAEDOSE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
The SAS System

      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VAEDOSE):   data _temp3_ (drop=extrt doseroute);
MPRINT(VAEDOSE):   set _temp3_;
MPRINT(VAEDOSE):   attrib extrt_ doseroute_ format=$100.;
MPRINT(VAEDOSE):   by usubjid studyid aestdtc dosedt extrt doseroute;
MPRINT(VAEDOSE):   retain extrt_ doseroute_;
MPRINT(VAEDOSE):   if first.aestdtc then do;
MPRINT(VAEDOSE):   extrt_=strip(extrt);
MPRINT(VAEDOSE):   doseroute_=strip(doseroute);
MPRINT(VAEDOSE):   end;
MPRINT(VAEDOSE):   else do;
MPRINT(VAEDOSE):   if strip(extrt_) ne strip(extrt) and extrt ne "" then do;
MPRINT(VAEDOSE):   extrt_=strip(extrt_)||" + "||strip(extrt);
MPRINT(VAEDOSE):   end;
MPRINT(VAEDOSE):   if strip(doseroute_) ne strip(doseroute) and doseroute ne "" then do;
MPRINT(VAEDOSE):   doseroute_=strip(doseroute_)||" + "||strip(doseroute);
MPRINT(VAEDOSE):   end;
MPRINT(VAEDOSE):   end;
The SAS System

MPRINT(VAEDOSE):   if last.aestdtc then output;
MPRINT(VAEDOSE):   run;

NOTE: There were 75 observations read from the data set WORK._TEMP3_.
NOTE: The data set WORK._TEMP3_ has 75 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(VAEDOSE):   proc sql undo_policy=none;
MPRINT(VAEDOSE):   create table _temp3 as select distinct a.usubjid, a.studyid, a.aestdtc, a.astdt, a.astdtm, a.DOSEDT, a.DOSEDTM, a.DOSESEQ , b.extrt_ as EXTRT length=100 , b.dose
route_ as DOSEROUTE 
length=100 from _temp2 as a left join _temp3_ as b on a.usubjid=b.usubjid and a.studyid=b.studyid and a.aestdtc=b.aestdtc order by usubjid, studyid, astdt, astdtm;
NOTE: Table WORK._TEMP3 created, with 75 rows and 10 columns.

MPRINT(VAEDOSE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VAEDOSE):   proc sql ;
MPRINT(VAEDOSE):   create table WORK._A_5 (drop=_sort) as select distinct a.*, b.DOSEDT format=e8601da. , b.DOSEDTM format=e8601dt. , case when a.astdt = . then . when b.DOSESEQ ne
 . then b.DOSESEQ 
when c.dose=1 and (a.astdt<c.ex_date or (a.astdt=c.ex_date and a.astdtm ne . and a.astdtm<c.ex_datetime)) then 0 else . end as DOSESEQ , b.EXTRT , b.DOSEROUTE , case when a.ASTDT n
e . and b.DOSEDT ne 
. then a.ASTDT-b.DOSEDT+1 else . end as AERELDY , case when a.ASTDTM ne . and b.DOSEDTM ne . then intck('second', b.DOSEDTM, a.ASTDTM) else . end as AERELTM format=time8. , case wh
en a.ASTDTM ne . 
and b.DOSEDTM ne . then 'SECONDS' else '' end as AERELTMU from _temp as a left join _temp3 as b on a.usubjid=b.usubjid and a.studyid=b.studyid and a.aestdtc=b.aestdtc left join _ex
 (where=(dose=1)) 
as c on a.usubjid=c.usubjid and a.studyid=c.studyid order by _sort;
NOTE: Table WORK._A_5 created, with 319 rows and 159 columns.

MPRINT(VAEDOSE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.02 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("DOSEDT(M) are defined from maximum EX.EXSTDTC date (datetime) before AESTDTC.");
The SAS System

MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_DRVVARDEF"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_drvvardef  |DOSEDT(M) are defined from maximum EX.EXSTDTC date (datetime) before AESTDTC.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_DRVVARDEF):   ;
MPRINT(VAEDOSE):  ;
The SAS System

MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("DOSESEQ is the number of EX.EXSTDTC dates before AESTDTC.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_DRVVARDEF"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_drvvardef  |DOSESEQ is the number of EX.EXSTDTC dates before AESTDTC.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_DRVVARDEF):   ;
MPRINT(VAEDOSE):  ;
MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("EXTRT, DOSEROUTE are defined as EX.EXTRT, EX.EXROUTE at DOSEDTM.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_DRVVARDEF"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_drvvardef  |EXTRT, DOSEROUTE are defined as EX.EXTRT, EX.EXROUTE at DOSEDTM.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_DRVVARDEF):   ;
MPRINT(VAEDOSE):  ;
MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("AERELDY is the number of days between DOSEDT and ASTDT.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_DRVVARDEF"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_drvvardef  |AERELDY is the number of days between DOSEDT and ASTDT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds

The SAS System


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_DRVVARDEF):   ;
MPRINT(VAEDOSE):  ;
MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("AERELTM is the number of seconds between DOSEDTM and ASTDTM. AERELTMU=SECONDS.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_DRVVARDEF"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_drvvardef  |AERELTM is the number of seconds between DOSEDTM and ASTDTM. AERELTMU=SECONDS.
The SAS System

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_DRVVARDEF):   ;
MPRINT(VAEDOSE):  ;
MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("DOSEDT(M), DOSESEQ, EXTRT, DOSEROUTE, AERELDY, AERELTM, AERELTMU are created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |DOSEDT(M), DOSESEQ, EXTRT, DOSEROUTE, AERELDY, AERELTM, AERELTMU are created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(VAEDOSE):  ;
MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):   data _a_6;
MPRINT(GADAMDERIVATIONS):   set _a_5;
MPRINT(GADAMDERIVATIONS):   if 0 then ADURU= put(" ", $200.) ;
MPRINT(GADAMDERIVATIONS):   if ADURN ne . then ADURU='DAYS' ;
MPRINT(GADAMDERIVATIONS):   run;

NOTE: There were 319 observations read from the data set WORK._A_5.
NOTE: The data set WORK._A_6 has 319 observations and 160 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):   data adaeder;
MPRINT(GADAMDERIVATIONS):   set _a_6;
MPRINT(GADAMDERIVATIONS):   run;

The SAS System

NOTE: There were 319 observations read from the data set WORK._A_6.
NOTE: The data set WORK.ADAEDER has 319 observations and 160 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(ADAE):  ;
MPRINT(ADAE):   *- additional metadata variable -*;
MPRINT(ADAE):   proc sql noprint;
The SAS System

MPRINT(ADAE):   create table ae_modte as select distinct studyid, _dsmodte_ from sdtmpool.ae ;
NOTE: Table WORK.AE_MODTE created, with 2 rows and 2 columns.

MPRINT(ADAE):   create table adaeder2 as select a.*, b._dsmodte_ as ae_modte label = "Source AE domain last modified date/time" from adaeder(
MPRINT(VARLIST):  drop=AESTDTC AEENDTC
MPRINT(ADAE):  ) as a left join ae_modte as b on a.studyid = b.studyid order by studyid, usubjid, aeseq ;
NOTE: Table WORK.ADAEDER2 created, with 319 rows and 159 columns.

MPRINT(ADAE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.07 seconds
      cpu time            0.08 seconds


MPRINT(ADAE):   *- minimize character variables length according to contents -*;
MPRINT(ADAE):   option mcompilenote=all;
MAUTOCOMPLOC:  The autocall macro MINI_VLENGTH is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/macros/_library/mini_vlength.sas.
NOTE: The macro MINI_VLENGTH completed compilation without errors.
      184 instructions 5200 bytes.
MPRINT(ADAE):   option MCOMPILENOTE=NONE;
MPRINT(MINI_VLENGTH):   *- Minimize length of character variables in Data= datasets -*;
MPRINT(MINI_VLENGTH):   proc sql noprint;
MPRINT(MINI_VLENGTH):   *- identify character variables in current dataset &libds -*;
MPRINT(MINI_VLENGTH):   select distinct name, count(distinct name) into :c_vars separated by " ", :n_c_vars trimmed from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNA
ME)) in 
("WORK.ADAEDER2" ) and upcase(TYPE)="CHAR" ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(MINI_VLENGTH):   *- retrieve length of longest value for each character variable in current dataset &libds -*;
MPRINT(MINI_VLENGTH):   select "ACTARM character("||cats(max(1, max(length("ACTARM"N)) ))||")" ||", "|| "ACTARMCD character("||cats(max(1, max(length("ACTARMCD"N)) ))||")" ||", "||
 "ADUR 
character("||cats(max(1, max(length("ADUR"N)) ))||")" ||", "|| "ADURU character("||cats(max(1, max(length("ADURU"N)) ))||")" ||", "|| "AEACN character("||cats(max(1, max(length("AE
ACN"N)) ))||")" 
||", "|| "AECAT character("||cats(max(1, max(length("AECAT"N)) ))||")" ||", "|| "AECONTRT character("||cats(max(1, max(length("AECONTRT"N)) ))||")" ||", "|| "AEENRTPT character("||
cats(max(1, 
max(length("AEENRTPT"N)) ))||")" ||", "|| "AEENTPT character("||cats(max(1, max(length("AEENTPT"N)) ))||")" ||", "|| "AEOUT character("||cats(max(1, max(length("AEOUT"N)) ))||")" |
|", "|| "AEREFID 
character("||cats(max(1, max(length("AEREFID"N)) ))||")" ||", "|| "AEREL character("||cats(max(1, max(length("AEREL"N)) ))||")" ||", "|| "AEREL01 character("||cats(max(1, max(lengt
h("AEREL01"N)) 
))||")" ||", "|| "AERELPRC character("||cats(max(1, max(length("AERELPRC"N)) ))||")" ||", "|| "AERELTMU character("||cats(max(1, max(length("AERELTMU"N)) ))||")" ||", "|| "AESCAT 
character("||cats(max(1, max(length("AESCAT"N)) ))||")" ||", "|| "AESCONG character("||cats(max(1, max(length("AESCONG"N)) ))||")" ||", "|| "AESDISAB character("||cats(max(1, max(l
ength("AESDISAB"N)) 
))||")" ||", "|| "AESDTH character("||cats(max(1, max(length("AESDTH"N)) ))||")" ||", "|| "AESER character("||cats(max(1, max(length("AESER"N)) ))||")" ||", "|| "AESHOSP character(
"||cats(max(1, 
max(length("AESHOSP"N)) ))||")" ||", "|| "AESLIFE character("||cats(max(1, max(length("AESLIFE"N)) ))||")" ||", "|| "AESMIE character("||cats(max(1, max(length("AESMIE"N)) ))||")" 
||", "|| "AESPID 
character("||cats(max(1, max(length("AESPID"N)) ))||")" ||", "|| "AETOXGR character("||cats(max(1, max(length("AETOXGR"N)) ))||")" ||", "|| "AETRTEM character("||cats(max(1, max(le
ngth("AETRTEM"N)) 
))||")" ||", "|| "AGEU character("||cats(max(1, max(length("AGEU"N)) ))||")" ||", "|| "APERIODC character("||cats(max(1, max(length("APERIODC"N)) ))||")" ||", "|| "ARM character("|
|cats(max(1, 
max(length("ARM"N)) ))||")" ||", "|| "ARMCDAS character("||cats(max(1, max(length("ARMCDAS"N)) ))||")" ||", "|| "ARMCDS character("||cats(max(1, max(length("ARMCDS"N)) ))||")" ||",
 "|| "ATOXGR 
character("||cats(max(1, max(length("ATOXGR"N)) ))||")" ||", "|| "COHORT character("||cats(max(1, max(length("COHORT"N)) ))||")" ||", "|| "COUNTRY character("||cats(max(1, max(leng
th("COUNTRY"N)) 
))||")" ||", "|| "DCSREAS character("||cats(max(1, max(length("DCSREAS"N)) ))||")" ||", "|| "DCSREASP character("||cats(max(1, max(length("DCSREASP"N)) ))||")" ||", "|| "DCTREAS 
character("||cats(max(1, max(length("DCTREAS"N)) ))||")" ||", "|| "DCTREASP character("||cats(max(1, max(length("DCTREASP"N)) ))||")" ||", "|| "DOMAIN character("||cats(max(1, max(
length("DOMAIN"N)) 
))||")" ||", "|| "DOSEROUTE character("||cats(max(1, max(length("DOSEROUTE"N)) ))||")" ||", "|| "DTHDTC character("||cats(max(1, max(length("DTHDTC"N)) ))||")" ||", "|| "DTHFL 
The SAS System

character("||cats(max(1, max(length("DTHFL"N)) ))||")" ||", "|| "EOSSTT character("||cats(max(1, max(length("EOSSTT"N)) ))||")" ||", "|| "EOTSTT character("||cats(max(1, max(length
("EOTSTT"N)) 
))||")" ||", "|| "EPOCH character("||cats(max(1, max(length("EPOCH"N)) ))||")" ||", "|| "ETHNIC character("||cats(max(1, max(length("ETHNIC"N)) ))||")" ||", "|| "EXTRT character("|
|cats(max(1, 
max(length("EXTRT"N)) ))||")" ||", "|| "IDVARVAL character("||cats(max(1, max(length("IDVARVAL"N)) ))||")" ||", "|| "ITEM01 character("||cats(max(1, max(length("ITEM01"N)) ))||")" 
||", "|| "LSTCNSRC 
character("||cats(max(1, max(length("LSTCNSRC"N)) ))||")" ||", "|| "RACE character("||cats(max(1, max(length("RACE"N)) ))||")" ||", "|| "RACEOTH character("||cats(max(1, max(length
("RACEOTH"N)) 
The SAS System

))||")" ||", "|| "RELGR1 character("||cats(max(1, max(length("RELGR1"N)) ))||")" ||", "|| "RFENDTC character("||cats(max(1, max(length("RFENDTC"N)) ))||")" ||", "|| "RFICDTC charac
ter("||cats(max(1, 
max(length("RFICDTC"N)) ))||")" ||", "|| "RFPENDTC character("||cats(max(1, max(length("RFPENDTC"N)) ))||")" ||", "|| "RFSTDTC character("||cats(max(1, max(length("RFSTDTC"N)) ))||
")" ||", "|| "SAFFL 
character("||cats(max(1, max(length("SAFFL"N)) ))||")" ||", "|| "SEX character("||cats(max(1, max(length("SEX"N)) ))||")" ||", "|| "SITEID character("||cats(max(1, max(length("SITE
ID"N)) ))||")" ||", 
"|| "STUDIES character("||cats(max(1, max(length("STUDIES"N)) ))||")" ||", "|| "STUDYID character("||cats(max(1, max(length("STUDYID"N)) ))||")" ||", "|| "SUBJID character("||cats(
max(1, 
max(length("SUBJID"N)) ))||")" ||", "|| "TRTSEQA character("||cats(max(1, max(length("TRTSEQA"N)) ))||")" ||", "|| "TSEQAG1 character("||cats(max(1, max(length("TSEQAG1"N)) ))||")"
 ||", "|| "USUBJID 
character("||cats(max(1, max(length("USUBJID"N)) ))||")" ||", "|| "_in_supp_fl character("||cats(max(1, max(length("_in_supp_fl"N)) ))||")" ||", "|| "abodsys character("||cats(max(
1, 
max(length("abodsys"N)) ))||")" ||", "|| "adecod character("||cats(max(1, max(length("adecod"N)) ))||")" ||", "|| "aecm character("||cats(max(1, max(length("aecm"N)) ))||")" ||", "
|| "aendtc 
character("||cats(max(1, max(length("aendtc"N)) ))||")" ||", "|| "ahlgt character("||cats(max(1, max(length("ahlgt"N)) ))||")" ||", "|| "ahlt character("||cats(max(1, max(length("a
hlt"N)) ))||")" 
||", "|| "allt character("||cats(max(1, max(length("allt"N)) ))||")" ||", "|| "asoc character("||cats(max(1, max(length("asoc"N)) ))||")" ||", "|| "asp3mc character("||cats(max(1, 
max(length("asp3mc"N)) ))||")" ||", "|| "asperc character("||cats(max(1, max(length("asperc"N)) ))||")" ||", "|| "asprtc character("||cats(max(1, max(length("asprtc"N)) ))||")" ||"
, "|| "asptrc 
character("||cats(max(1, max(length("asptrc"N)) ))||")" ||", "|| "astdtc character("||cats(max(1, max(length("astdtc"N)) ))||")" ||", "|| "aterm character("||cats(max(1, max(length
("aterm"N)) ))||")" 
||", "|| "cumarmca character("||cats(max(1, max(length("cumarmca"N)) ))||")" ||", "|| "cumarmcd character("||cats(max(1, max(length("cumarmcd"N)) ))||")" ||", "|| "cumstud characte
r("||cats(max(1, 
max(length("cumstud"N)) ))||")" ||", "|| "studyroutes character("||cats(max(1, max(length("studyroutes"N)) ))||")" ||", "|| "studyroutesnum character("||cats(max(1, max(length("stu
dyroutesnum"N)) 
))||")" ||", "|| "subjroutes character("||cats(max(1, max(length("subjroutes"N)) ))||")" ||", "|| "subjroutesnum character("||cats(max(1, max(length("subjroutesnum"N)) ))||")" ||",
 "|| "trtemfl 
character("||cats(max(1, max(length("trtemfl"N)) ))||")" into :char_vars trimmed from WORK.ADAEDER2 ;
MPRINT(MINI_VLENGTH):   *- adjust character variable lengths -*;
MPRINT(MINI_VLENGTH):   alter table WORK.ADAEDER2 modify ACTARM character(1), ACTARMCD character(1), ADUR character(7), ADURU character(1), AEACN character(16), AECAT character(22)
, AECONTRT 
character(1), AEENRTPT character(7), AEENTPT character(17), AEOUT character(32), AEREFID character(18), AEREL character(16), AEREL01 character(71), AERELPRC character(71), AERELTMU
 character(1), 
AESCAT character(9), AESCONG character(1), AESDISAB character(1), AESDTH character(1), AESER character(1), AESHOSP character(1), AESLIFE character(1), AESMIE character(1), AESPID c
haracter(2), 
AETOXGR character(1), AETRTEM character(1), AGEU character(5), APERIODC character(7), ARM character(44), ARMCDAS character(4), ARMCDS character(15), ATOXGR character(7), COHORT cha
racter(1), COUNTRY 
character(3), DCSREAS character(21), DCSREASP character(120), DCTREAS character(21), DCTREASP character(120), DOMAIN character(2), DOSEROUTE character(1), DTHDTC character(1), DTHF
L character(1), 
EOSSTT character(12), EOTSTT character(12), EPOCH character(20), ETHNIC character(22), EXTRT character(1), IDVARVAL character(2), ITEM01 character(28), LSTCNSRC character(22), RACE
 character(12), 
RACEOTH character(1), RELGR1 character(21), RFENDTC character(10), RFICDTC character(10), RFPENDTC character(19), RFSTDTC character(16), SAFFL character(1), SEX character(1), SITEI
D character(7), 
STUDIES character(28), STUDYID character(13), SUBJID character(10), TRTSEQA character(12), TSEQAG1 character(12), USUBJID character(25), _in_supp_fl character(1), abodsys character
(52), adecod 
character(57), aecm character(400), aendtc character(16), ahlgt character(66), ahlt character(64), allt character(40), asoc character(52), asp3mc character(1), asperc character(1),
 asprtc 
character(1), asptrc character(1), astdtc character(16), aterm character(128), cumarmca character(4), cumarmcd character(15), cumstud character(28), studyroutes character(12), stud
The SAS System

yroutesnum 
character(20), subjroutes character(12), subjroutesnum character(20), trtemfl character(1);
NOTE: Table WORK.ADAEDER2 has been modified, with 159 columns.
MPRINT(MINI_VLENGTH):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds


MPRINT(ADAE):  ;
MPRINT(ADAE):   *- create empty adae based on specs -*;
MPRINT(ADAE):   data _empty_adae;
NOTE: %INCLUDE (level 1) file /saswork/sas_tmp/SAS_work3136000052A7_xar05auv/SAS_workD12E000052A7_xar05auv/attr.sas is file 
      /saswork/sas_tmp/SAS_work3136000052A7_xar05auv/SAS_workD12E000052A7_xar05auv/attr.sas.
202       +attrib
203       +STUDYID                 length = $13     format = $13.                 label = "Study Identifier "
204       +USUBJID                 length = $25     format = $25.                 label = "Unique Subject Identifier "
205       +SAFFL                   length = $1                                    label = "Safety Population Flag "
206       +TRTSDTM                 length = 8       format = E8601DT.             label = "Datetime of First Exposure to Treatment "
207       +AESEQ                   length = 8       format = 8.                   label = "Sequence Number "
208       +AETERM                  length = $128    format = $128.                label = "Reported Term for the Adverse Event "
209       +AEDECOD                 length = $57     format = $57.                 label = "Dictionary-Derived Term "
210       +AEBODSYS                length = $52     format = $52.                 label = "Body System or Organ Class "
211       +AELLT                   length = $40     format = $40.                 label = "Lowest Level Term "
212       +AEHLT                   length = $64     format = $64.                 label = "High Level Term "
213       +AEHLGT                  length = $66     format = $66.                 label = "High Level Group Term "
214       +AESOC                   length = $52     format = $52.                 label = "Primary System Organ Class "
215       +AECAT                   length = $22     format = $22.                 label = "Category for Adverse Event "
216       +AESCAT                  length = $9      format = $9.                  label = "Subcategory for Adverse Event "
217       +AESTDTC                 length = $16     format = $16.                 label = "Start Date/Time of Adverse Event "
218       +ASTDT                   length = 8       format = e8601da.             label = "Analysis Start Date "
219       +ASTDTM                  length = 8       format = e8601dt.             label = "Analysis Start Datetime "
220       +ASTDY                   length = 8                                     label = "Analysis Start Relative Day "
The SAS System

221       +TRTEMFL                 length = $1                                    label = "Treatment Emergent Analysis Flag "
222       +AEENDTC                 length = $16     format = $16.                 label = "End Date/Time of Adverse Event "
223       +AENDT                   length = 8       format = e8601da.             label = "Analysis End Date "
224       +AENDTM                  length = 8       format = e8601dt.             label = "Analysis End Datetime "
225       +AENDY                   length = 8                                     label = "Analysis End Relative Day "
226       +AEENRTPT                length = $7      format = $7.                  label = "End Relative to Reference Time Point "
227       +AEENTPT                 length = $17     format = $17.                 label = "End Reference Time Point "
228       +ADURN                   length = 8                                     label = "Analysis Duration (N) "
229       +ADUR                    length = $200                                  label = "Analysis Duration "
230       +ADURU                   length = $200                                  label = "Analysis Duration Units "
231       +DOSEDT                  length = 8       format = e8601da.             label = "Treatment Dose date at AE start "
232       +DOSEDTM                 length = 8       format = e8601dt.             label = "Treatment Dose datetime at AE start "
233       +DOSESEQ                 length = 8                                     label = "Treatment Dose number at AE start "
234       +EXTRT                   length = $40                                   label = "Name of Treatment at AE start "
235       +DOSEROUTE               length = $20                                   label = "Treatment Dose route at AE start "
236       +AERELDY                 length = 8                                     label = "Number of Days from Treatment Dose to AE start "
237       +AERELTM                 length = 8       format = time8.               label = "Analysis relative time "
238       +AERELTMU                length = $10                                   label = "Analysis relative time unit "
239       +AESER                   length = $1      format = $1.                  label = "Serious Event "
240       +AETOXGR                 length = $1      format = $1.                  label = "Standard Toxicity Grade "
241       +ATOXGR                  length = $20                                   label = "Analysis Toxicity Grade "
242       +ATOXGRN                 length = 8                                     label = "Analysis Toxicity Grade (N) "
243       +AEREL                   length = $16     format = $16.                 label = "Causality "
The SAS System

244       +RELGR1                  length = $40                                   label = "Pooled Causality Group 1 "
245       +ITEM01                  length = $200                                  label = "Item 01 "
246       +AEREL01                 length = $200                                  label = "Relation to Study Procedure "
247       +AEACN                   length = $16     format = $16.                 label = "Action Taken with Study Treatment "
248       +AEOUT                   length = $32     format = $32.                 label = "Outcome of Adverse Event "
249       +AESDTH                  length = $1      format = $1.                  label = "Results in Death "
250       +AECM                    length = $200                                  label = "Concomitant Medication "
251       +APERIOD                 length = 8                                     label = "Period "
252       +APERIODC                length = $200                                  label = "Period (C) "
253       +APERSDT                 length = 8       format = e8601da.             label = "Period Start Date "
254       +APEREDT                 length = 8       format = e8601da.             label = "Period End Date "
255       +ASPER                   length = 8                                     label = "Subperiod within Period "
256       +ASPERC                  length = $200                                  label = "Subperiod within Period (C) "
257       +ASPERSDT                length = 8       format = e8601da.             label = "Subperiod Start Date "
258       +ASPEREDT                length = 8       format = e8601da.             label = "Subperiod End Date "
259       +ASP3M                   length = 8                                     label = "3 Months Subperiod within Period "
260       +ASP3MC                  length = $200                                  label = "3 Months Subperiod within Period (C) "
261       +ASP3MSDT                length = 8       format = e8601da.             label = "3 Months Subperiod Start Date "
262       +ASP3MEDT                length = 8       format = e8601da.             label = "3 Months Subperiod End Date "
263       +ASP                     length = 8                                     label = "Subperiod within Period "
264       +ASPC                    length = $200                                  label = "Subperiod within Period (C) "
265       +ASPSDT                  length = 8       format = e8601da.             label = "Subperiod Start Date "
266       +ASPEDT                  length = 8       format = e8601da.             label = "Subperiod End Date "
267       +ASPTR                   length = 8                                     label = "Treatment Subperiod within Period "
268       +ASPTRC                  length = $200                                  label = "Treatment Subperiod within Period (C) "
269       +ASPTRSDT                length = 8       format = e8601da.             label = "Treatment Subperiod Start Date "
270       +ASPTREDT                length = 8       format = e8601da.             label = "Treatment Subperiod End Date "
271       +;
MPRINT(ADAE):   attrib STUDYID length = $13 format = $13. label = "Study Identifier " USUBJID length = $25 format = $25. label = "Unique Subject Identifier " SAFFL length = $1 labe
l = "Safety 
Population Flag " TRTSDTM length = 8 format = E8601DT. label = "Datetime of First Exposure to Treatment " AESEQ length = 8 format = 8. label = "Sequence Number " AETERM length = $1
28 format = $128. 
label = "Reported Term for the Adverse Event " AEDECOD length = $57 format = $57. label = "Dictionary-Derived Term " AEBODSYS length = $52 format = $52. label = "Body System or Org
an Class " AELLT 
length = $40 format = $40. label = "Lowest Level Term " AEHLT length = $64 format = $64. label = "High Level Term " AEHLGT length = $66 format = $66. label = "High Level Group Term
 " AESOC length = 
$52 format = $52. label = "Primary System Organ Class " AECAT length = $22 format = $22. label = "Category for Adverse Event " AESCAT length = $9 format = $9. label = "Subcategory 
for Adverse Event " 
AESTDTC length = $16 format = $16. label = "Start Date/Time of Adverse Event " ASTDT length = 8 format = e8601da. label = "Analysis Start Date " ASTDTM length = 8 format = e8601dt.
 label = "Analysis 
Start Datetime " ASTDY length = 8 label = "Analysis Start Relative Day " TRTEMFL length = $1 label = "Treatment Emergent Analysis Flag " AEENDTC length = $16 format = $16. label = 
"End Date/Time of 
The SAS System

Adverse Event " AENDT length = 8 format = e8601da. label = "Analysis End Date " AENDTM length = 8 format = e8601dt. label = "Analysis End Datetime " AENDY length = 8 label = "Analy
sis End Relative 
Day " AEENRTPT length = $7 format = $7. label = "End Relative to Reference Time Point " AEENTPT length = $17 format = $17. label = "End Reference Time Point " ADURN length = 8 labe
l = "Analysis 
Duration (N) " ADUR length = $200 label = "Analysis Duration " ADURU length = $200 label = "Analysis Duration Units " DOSEDT length = 8 format = e8601da. label = "Treatment Dose da
te at AE start " 
DOSEDTM length = 8 format = e8601dt. label = "Treatment Dose datetime at AE start " DOSESEQ length = 8 label = "Treatment Dose number at AE start " EXTRT length = $40 label = "Name
 of Treatment at AE 
start " DOSEROUTE length = $20 label = "Treatment Dose route at AE start " AERELDY length = 8 label = "Number of Days from Treatment Dose to AE start " AERELTM length = 8 format = 
time8. label = 
"Analysis relative time " AERELTMU length = $10 label = "Analysis relative time unit " AESER length = $1 format = $1. label = "Serious Event " AETOXGR length = $1 format = $1. labe
l = "Standard 
Toxicity Grade " ATOXGR length = $20 label = "Analysis Toxicity Grade " ATOXGRN length = 8 label = "Analysis Toxicity Grade (N) " AEREL length = $16 format = $16. label = "Causalit
y " RELGR1 length = 
The SAS System

$40 label = "Pooled Causality Group 1 " ITEM01 length = $200 label = "Item 01 " AEREL01 length = $200 label = "Relation to Study Procedure " AEACN length = $16 format = $16. label 
= "Action Taken 
with Study Treatment " AEOUT length = $32 format = $32. label = "Outcome of Adverse Event " AESDTH length = $1 format = $1. label = "Results in Death " AECM length = $200 label = "
Concomitant 
Medication " APERIOD length = 8 label = "Period " APERIODC length = $200 label = "Period (C) " APERSDT length = 8 format = e8601da. label = "Period Start Date " APEREDT length = 8 
format = e8601da. 
label = "Period End Date " ASPER length = 8 label = "Subperiod within Period " ASPERC length = $200 label = "Subperiod within Period (C) " ASPERSDT length = 8 format = e8601da. lab
el = "Subperiod 
Start Date " ASPEREDT length = 8 format = e8601da. label = "Subperiod End Date " ASP3M length = 8 label = "3 Months Subperiod within Period " ASP3MC length = $200 label = "3 Months
 Subperiod within 
Period (C) " ASP3MSDT length = 8 format = e8601da. label = "3 Months Subperiod Start Date " ASP3MEDT length = 8 format = e8601da. label = "3 Months Subperiod End Date " ASP length 
= 8 label = 
"Subperiod within Period " ASPC length = $200 label = "Subperiod within Period (C) " ASPSDT length = 8 format = e8601da. label = "Subperiod Start Date " ASPEDT length = 8 format = 
e8601da. label = 
"Subperiod End Date " ASPTR length = 8 label = "Treatment Subperiod within Period " ASPTRC length = $200 label = "Treatment Subperiod within Period (C) " ASPTRSDT length = 8 format
 = e8601da. label = 
"Treatment Subperiod Start Date " ASPTREDT length = 8 format = e8601da. label = "Treatment Subperiod End Date " ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(ADAE):   array _n _numeric_;
MPRINT(ADAE):   array _c _character_;
MPRINT(ADAE):   do over _n;
MPRINT(ADAE):   call missing(of _n);
MPRINT(ADAE):   end;
MPRINT(ADAE):   do over _c;
MPRINT(ADAE):   call missing(of _c);
MPRINT(ADAE):   end;
NOTE: %INCLUDE (level 1) file /saswork/sas_tmp/SAS_work3136000052A7_xar05auv/SAS_workD12E000052A7_xar05auv/keep.sas is file 
      /saswork/sas_tmp/SAS_work3136000052A7_xar05auv/SAS_workD12E000052A7_xar05auv/keep.sas.
272       +keep STUDYID USUBJID SAFFL TRTSDTM AESEQ
273       +AETERM AEDECOD AEBODSYS AELLT AEHLT
274       +AEHLGT AESOC AECAT AESCAT AESTDTC
275       +ASTDT ASTDTM ASTDY TRTEMFL AEENDTC
276       +AENDT AENDTM AENDY AEENRTPT AEENTPT
277       +ADURN ADUR ADURU DOSEDT DOSEDTM
278       +DOSESEQ EXTRT DOSEROUTE AERELDY AERELTM
279       +AERELTMU AESER AETOXGR ATOXGR ATOXGRN
280       +AEREL RELGR1 ITEM01 AEREL01 AEACN
281       +AEOUT AESDTH AECM APERIOD APERIODC
282       +APERSDT APEREDT ASPER ASPERC ASPERSDT
283       +ASPEREDT ASP3M ASP3MC ASP3MSDT ASP3MEDT
284       +ASP ASPC ASPSDT ASPEDT ASPTR
285       +ASPTRC ASPTRSDT ASPTREDT ;
MPRINT(ADAE):   keep STUDYID USUBJID SAFFL TRTSDTM AESEQ AETERM AEDECOD AEBODSYS AELLT AEHLT AEHLGT AESOC AECAT AESCAT AESTDTC ASTDT ASTDTM ASTDY TRTEMFL AEENDTC AENDT AENDTM AENDY
 AEENRTPT AEENTPT 
ADURN ADUR ADURU DOSEDT DOSEDTM DOSESEQ EXTRT DOSEROUTE AERELDY AERELTM AERELTMU AESER AETOXGR ATOXGR ATOXGRN AEREL RELGR1 ITEM01 AEREL01 AEACN AEOUT AESDTH AECM APERIOD APERIODC A
PERSDT APEREDT 
ASPER ASPERC ASPERSDT ASPEREDT ASP3M ASP3MC ASP3MSDT ASP3MEDT ASP ASPC ASPSDT ASPEDT ASPTR ASPTRC ASPTRSDT ASPTREDT ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(ADAE):   delete;
MPRINT(ADAE):   run;
NOTE: The data set WORK._EMPTY_ADAE has 0 observations and 68 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(ADAE):   *- uniformaize lengths between both datasets -*;
MPRINT(UNI_VLENGTH):   *- Harmonize length of character variables in Data= datasets According to the length found in Ref= datasests (if specified) -*;
The SAS System

MPRINT(UNI_VLENGTH):   proc sql noprint;
MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated by " " from (select distinct 
upcase(LIBNAME) as 
The SAS System

LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.ADAEDER2" "WORK._EMPTY_ADAE" )
) then LENGTH else 
. end ) as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.ADAEDER2" "WORK.ADAEDER2" "WORK._EMPTY_ADAE" ) group by upcase(name)) group by upca
se(name), 
upcase(type) having sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK.ADAEDER2" and TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.ADAEDER2" "WORK._EMPTY_AD
AE" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(UNI_VLENGTH):   alter table WORK.ADAEDER2 modify ABODSYS character(52), ACTARM character(1), ACTARMCD character(1), ADECOD character(57), ADUR character(200), ADURU characte
r(200), AEACN 
character(16), AECAT character(22), AECM character(400), AECONTRT character(1), AEENRTPT character(7), AEENTPT character(17), AENDTC character(16), AEOUT character(32), AEREFID cha
racter(18), AEREL 
character(16), AEREL01 character(200), AERELPRC character(71), AERELTMU character(10), AESCAT character(9), AESCONG character(1), AESDISAB character(1), AESDTH character(1), AESER 
character(1), 
AESHOSP character(1), AESLIFE character(1), AESMIE character(1), AESPID character(2), AETOXGR character(1), AETRTEM character(1), AGEU character(5), AHLGT character(66), AHLT chara
cter(64), ALLT 
character(40), APERIODC character(200), ARM character(44), ARMCDAS character(4), ARMCDS character(15), ASOC character(52), ASP3MC character(200), ASPERC character(200), ASPRTC char
acter(1), ASPTRC 
character(200), ASTDTC character(16), ATERM character(128), ATOXGR character(20), COHORT character(1), COUNTRY character(3), CUMARMCA character(4), CUMARMCD character(15), CUMSTUD 
character(28), 
DCSREAS character(21), DCSREASP character(120), DCTREAS character(21), DCTREASP character(120), DOMAIN character(2), DOSEROUTE character(20), DTHDTC character(1), DTHFL character(1
), EOSSTT 
character(12), EOTSTT character(12), EPOCH character(20), ETHNIC character(22), EXTRT character(40), IDVARVAL character(2), ITEM01 character(200), LSTCNSRC character(22), RACE char
acter(12), RACEOTH 
character(1), RELGR1 character(40), RFENDTC character(10), RFICDTC character(10), RFPENDTC character(19), RFSTDTC character(16), SAFFL character(1), SEX character(1), SITEID charac
ter(7), STUDIES 
character(28), STUDYID character(13), STUDYROUTES character(12), STUDYROUTESNUM character(20), SUBJID character(10), SUBJROUTES character(12), SUBJROUTESNUM character(20), TRTEMFL 
character(1), 
TRTSEQA character(12), TSEQAG1 character(12), USUBJID character(25), _IN_SUPP_FL character(1) ;
NOTE: Table WORK.ADAEDER2 has been modified, with 159 columns.
MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated by " " from (select distinct 
upcase(LIBNAME) as 
LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.ADAEDER2" "WORK._EMPTY_ADAE" )
) then LENGTH else 
. end ) as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._EMPTY_ADAE" "WORK.ADAEDER2" "WORK._EMPTY_ADAE" ) group by upcase(name)) group by u
pcase(name), 
upcase(type) having sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK._EMPTY_ADAE" and TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.ADAEDER2" "WORK._EMPTY
_ADAE" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
NOTE: No observations in data set WORK._EMPTY_ADAE.
NOTE: No observations in data set WORK._EMPTY_ADAE.
MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(UNI_VLENGTH):   alter table WORK._EMPTY_ADAE modify ADUR character(200), ADURU character(200), AEACN character(16), AEBODSYS character(52), AECAT character(22), AECM charact
er(400), AEDECOD 
character(57), AEENDTC character(16), AEENRTPT character(7), AEENTPT character(17), AEHLGT character(66), AEHLT character(64), AELLT character(40), AEOUT character(32), AEREL chara
cter(16), AEREL01 
character(200), AERELTMU character(10), AESCAT character(9), AESDTH character(1), AESER character(1), AESOC character(52), AESTDTC character(16), AETERM character(128), AETOXGR cha
racter(1), APERIODC 
character(200), ASP3MC character(200), ASPC character(200), ASPERC character(200), ASPTRC character(200), ATOXGR character(20), DOSEROUTE character(20), EXTRT character(40), ITEM01
 character(200), 
RELGR1 character(40), SAFFL character(1), STUDYID character(13), TRTEMFL character(1), USUBJID character(25) ;
The SAS System

NOTE: Table WORK._EMPTY_ADAE has been modified, with 68 columns.
MPRINT(UNI_VLENGTH):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds


MPRINT(ADAE):  ;
MPRINT(ADAE):   data adamtmp.adae;
MPRINT(ADAE):   set _empty_adae(obs=0) adaeder2 ;
NOTE: %INCLUDE (level 1) file /saswork/sas_tmp/SAS_work3136000052A7_xar05auv/SAS_workD12E000052A7_xar05auv/keep.sas is file 
      /saswork/sas_tmp/SAS_work3136000052A7_xar05auv/SAS_workD12E000052A7_xar05auv/keep.sas.
286       +keep STUDYID USUBJID SAFFL TRTSDTM AESEQ
287       +AETERM AEDECOD AEBODSYS AELLT AEHLT
288       +AEHLGT AESOC AECAT AESCAT AESTDTC
289       +ASTDT ASTDTM ASTDY TRTEMFL AEENDTC
290       +AENDT AENDTM AENDY AEENRTPT AEENTPT
291       +ADURN ADUR ADURU DOSEDT DOSEDTM
292       +DOSESEQ EXTRT DOSEROUTE AERELDY AERELTM
293       +AERELTMU AESER AETOXGR ATOXGR ATOXGRN
294       +AEREL RELGR1 ITEM01 AEREL01 AEACN
295       +AEOUT AESDTH AECM APERIOD APERIODC
296       +APERSDT APEREDT ASPER ASPERC ASPERSDT
297       +ASPEREDT ASP3M ASP3MC ASP3MSDT ASP3MEDT
298       +ASP ASPC ASPSDT ASPEDT ASPTR
299       +ASPTRC ASPTRSDT ASPTREDT ;
MPRINT(ADAE):   keep STUDYID USUBJID SAFFL TRTSDTM AESEQ AETERM AEDECOD AEBODSYS AELLT AEHLT AEHLGT AESOC AECAT AESCAT AESTDTC ASTDT ASTDTM ASTDY TRTEMFL AEENDTC AENDT AENDTM AENDY
 AEENRTPT AEENTPT 
The SAS System

ADURN ADUR ADURU DOSEDT DOSEDTM DOSESEQ EXTRT DOSEROUTE AERELDY AERELTM AERELTMU AESER AETOXGR ATOXGR ATOXGRN AEREL RELGR1 ITEM01 AEREL01 AEACN AEOUT AESDTH AECM APERIOD APERIODC A
PERSDT APEREDT 
ASPER ASPERC ASPERSDT ASPEREDT ASP3M ASP3MC ASP3MSDT ASP3MEDT ASP ASPC ASPSDT ASPEDT ASPTR ASPTRC ASPTRSDT ASPTREDT ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(ADAE):   keep ae_modte;
MPRINT(ADAE):   *- keep additional variable -*;
MPRINT(ADAE):   run;
NOTE: There were 0 observations read from the data set WORK._EMPTY_ADAE.
NOTE: There were 319 observations read from the data set WORK.ADAEDER2.
NOTE: The data set ADAMTMP.ADAE has 319 observations and 69 variables.
NOTE: Compressing data set ADAMTMP.ADAE decreased size by 66.67 percent. 
      Compressed is 3 pages; un-compressed would require 9 pages.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("adamtmp.adae generated");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |adamtmp.adae generated
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
The SAS System



NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(ADAE):  ;
300        
301        %programend;
MAUTOCOMPLOC:  The autocall macro PROGRAMEND is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/macros/_library/programend.sas.
MPRINT(PROGRAMEND):   ;
MPRINT(PROGRAMEND):  *';
MPRINT(PROGRAMEND):  *";
MPRINT(PROGRAMEND):  */;
MPRINT(PROGRAMEND):  *);
MPRINT(PROGRAMEND):  run;
MPRINT(PROGRAMEND):  quit;
MPRINT(PROGRAMEND):  ;
MPRINT(PROGRAMEND):   option nosyntaxcheck obs=max;
MPRINT(PROGRAMEND):   option LS=180 PS=60;
MPRINT(PROGRAMEND):   option VALIDVARNAME=V7;
_PARENTJOB_WRK_= PARWRK_LIBREF_ASSIGNED=0
MPRINT(PROGRAMEND):   options nosymbolgen nomlogic;
sbg=NOSYMBOLGEN
MPRINT(PROGRAMEND):   * seconds ;
MPRINT(PROGRAMEND):   * convert seconds to days ;
MPRINT(PROGRAMEND):   * subtract days from run time ;


=================================================================================================================
SAS PROGRAM : /clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/programs/adae.sas
RUN ENVIRONMENT: repository  -  SYSMEXECDEPTH:1  - DEBUG: 1
The SAS System

SAS LOG     : /clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/log/__adae.log
PRINTTO LOG : LOGF =  /clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/log/__adae.log
SAS OUTPUT  : /clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/output/__adae.lst
PRINTTO LIST: OF =  /clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/lst/__adae.lst
-----------------------------------------------------------------------------------------------------------------
USER                                  : jbodart
SAS VERSION                           : 9.04.01M6P11072018
PLATFORM                              : Linux LIN X64 3.10.0-957.27.2.el7.x86_64 #1 SMP Tue Jul 9 16:53:14 UTC 2019 x86_64 Red Hat Enterprise Linux Server release 7.6 (Maipo)
HOSTNAME                              : xar05auv
ENCODING                              : utf-8
JOBID                                 : 21159
START DATE AND TIME OF EXECUTION      : Wednesday, 11 January 2023 at 23:10:44
COMPLETION DATE AND TIME OF EXECUTION : Wednesday, 11 January 2023 at 23:10:55
COMPUTATION TIME                      : 0 days 0 hours 0 minutes 11.5 seconds
=================================================================================================================


MPRINT(PROGRAMEND):   options NOSYMBOLGEN NOMLOGIC;

Notice: === (PROGRAMEND): Starting, 2023-01-11T23:10:55.04 - SYSMEXECDEPTH: 1 - DEBUG: 1 ===
Notice: === (PROGRAMEND): OUTPUTFILENAME=__adae ===
MAUTOCOMPLOC:  The autocall macro ODSDEST is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/macros/_library/odsdest.sas.
Notice: === (PROGRAMEND): ODS LISTING is now OPEN. ===
Notice: === (PROGRAMEND): SYSPRINTTOLIST=OF = 
The SAS System

/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/lst/__adae.lst ===
Notice: === (PROGRAMEND): SYSPRINTTOLOG=LOGF = 
/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/log/__adae.log ===
MPRINT(PROGRAMEND):   ods listing;
Notice: === (PROGRAMEND): ODS LISTING is now OPEN. ===
Current LISTING select list is set to default value (ALL).
Current OVERALL select list is: ALL
MPRINT(ODSDEST):   ODS LISTING show ;
MPRINT(PROGRAMEND):   ;
MPRINT(PROGRAMEND):   ods rtf close;
MPRINT(PROGRAMEND):   ods pdf close;
MPRINT(PROGRAMEND):   proc printto print=print;
MPRINT(PROGRAMEND):   run;
NOTE: At least one W.D format was too small for the number to be printed. The decimal may be shifted by the "BEST" format.
NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(PROGRAMEND):   footnote;
MPRINT(PROGRAMEND):   *- resetting the footnotes so they do not appear in the Synopsis of Program Execution -*;
MPRINT(PROGRAMEND):   *- For Tables and Listings, systematically generate a TXT and a PDF file -*;
MPRINT(PROGRAMEND):   option nomautolocdisplay;
MPRINT(PROGRAMEND):   option nosyntaxcheck obs=max;
DEBUG=1 RUNENVIRONMENT=repository
MPRINT(PROGRAMEND):   proc printto log=log;
MPRINT(PROGRAMEND):   run;


===                                                                                                                                                                              ===
===                                                                                                                                                                              ===
====================================================================================================================================================================================
=== End of Redirected Log Content from File:                                                                                                                                     ===
=== /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/log/__adae.log      ===
====================================================================================================================================================================================
NOTE: 4196 records were read from the infile LOGF.
      The minimum record length was 0.
      The maximum record length was 200.
NOTE: The data set WORK.LOG1 has 621 observations and 7 variables.
NOTE: The data set WORK.MAUTO has 136 observations and 3 variables.
NOTE: The data set WORK.FULLLOG has 4196 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      

MPRINT(PROGRAMEND):   *- detect log issues and information about submitted jobs - jbodart -2022-09-14 -*;
MPRINT(PROGRAMEND):   *- identify blocs of lines by the presence of a specific pattern in their first line -*;
MPRINT(PROGRAMEND):   data fulllog1;
MPRINT(PROGRAMEND):   set fulllog;
MPRINT(PROGRAMEND):   length msg_type $10 job_submission_id job_compl_status $40 job_path $200;
MPRINT(PROGRAMEND):   retain msg_num msg_type msg_start thesassystem job_submission_id job_compl_status job_path;
MPRINT(PROGRAMEND):   prx1 = prxparse('/^(ER[R]OR( \d+-\d+)?|WA[R]NING|NO[T]E|DE[B]UG|No[t]ice|SYMB[O]LGEN|MAUTO(COMPLOC|LOCDISPLAY)|(MP[R]INT|ML[O]GIC)\(\w+(\.\w+)*\)):/');
MPRINT(PROGRAMEND):   prx2 = prxparse('/\b[Jj]ob(?: [Ww]ith)? Submission ID: ([0-9a-f]+(-[0-9a-f]+)+)?/');
MPRINT(PROGRAMEND):   prx3 = prxparse('/\b[Jj]ob\b.+has completed with status: (COMPLETED(_\w+)+\b)?/');
MPRINT(PROGRAMEND):   prx4 = prxparse('!(?:\b[Ss]ubmitted (?:REPOSITORY |WORKSPACE )?[Jj]ob\:? |\%submit_job\( *)(/(general|clinical)/(\w+/)+\w+.job\b)?!');
MPRINT(PROGRAMEND):   drop prx1-prx4;
MPRINT(PROGRAMEND):   msg_num=0;
The SAS System

MPRINT(PROGRAMEND):   if message = " " and line-1 > thesassystem then do;
MPRINT(PROGRAMEND):   msg_type = " ";
MPRINT(PROGRAMEND):   msg_start = .;
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   else if prxmatch(prx1, message) then do;
MPRINT(PROGRAMEND):   msg_type = scan(prxposn(prx1, 1, message), 1);
MPRINT(PROGRAMEND):   msg_start=line;
MPRINT(PROGRAMEND):   msg_num+1;
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   else if prxmatch("/^\x0C\d{0,8} *The SAS System /", message) then do;
MPRINT(PROGRAMEND):   thesassystem = line;
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   else if substr(message, 1, 1) ^= " " then do;
MPRINT(PROGRAMEND):   msg_type = " ";
MPRINT(PROGRAMEND):   msg_start = .;
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   if prxmatch(prx2, message) then do;
MPRINT(PROGRAMEND):   if msg_type=' ' then msg_type="JOB_SUBMIT";
MPRINT(PROGRAMEND):   job_submission_id = prxposn(prx2, 1, message);
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   if prxmatch(prx3, message) then do;
MPRINT(PROGRAMEND):   if msg_type=' ' then msg_type="JOB_COMPL";
MPRINT(PROGRAMEND):   job_compl_status = prxposn(prx3, 1, message);
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   if prxmatch(prx4, message) then do;
MPRINT(PROGRAMEND):   if msg_type=' ' then msg_type="JOB_PATH";
MPRINT(PROGRAMEND):   job_path = prxposn(prx4, 1, message);
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   if prxmatch("/^Not[i]ce:(\(\w+(\.\w+)*\))? (Updated )?Job parameters: /", message) then do;
MPRINT(PROGRAMEND):   if msg_type in ("Notice") then msg_type = "JOB_PARAM";
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   run;

NOTE: There were 4196 observations read from the data set WORK.FULLLOG.
NOTE: The data set WORK.FULLLOG1 has 4196 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.08 seconds
      

MPRINT(PROGRAMEND):   *- "remove" from the blocks the lines containing "The SAS System" after a page break -*;
MPRINT(PROGRAMEND):   *- also, identify job-related blocks by the first occurrence of a differnt job path -*;
MPRINT(PROGRAMEND):   data fulllog1;
MPRINT(PROGRAMEND):   set fulllog1(
MPRINT(PROGRAMEND):  );
MPRINT(PROGRAMEND):   by job_path notsorted;
MPRINT(PROGRAMEND):   retain job_start job_num 0;
MPRINT(PROGRAMEND):   if (line = thesassystem) or (line = ifn(thesassystem = ., ., sum(thesassystem,1)) and message = ' ') then do;
MPRINT(PROGRAMEND):   msg_type="SASSYSTEM";
MPRINT(PROGRAMEND):   msg_num = msg_num + 0.1;
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   else do;
MPRINT(PROGRAMEND):   adj_line+1;
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   if first.job_path then do;
MPRINT(PROGRAMEND):   job_start = line;
MPRINT(PROGRAMEND):   job_num+1;
MPRINT(PROGRAMEND):   end;
The SAS System

MPRINT(PROGRAMEND):   run;

NOTE: There were 4196 observations read from the data set WORK.FULLLOG1.
NOTE: The data set WORK.FULLLOG1 has 4196 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.02 seconds
      

MPRINT(PROGRAMEND):   data fulllog1;
MPRINT(PROGRAMEND):   set fulllog1;
MPRINT(PROGRAMEND):   if msg_type="SASSYSTEM" then adj_line = -100;
MPRINT(PROGRAMEND):   run;

NOTE: There were 4196 observations read from the data set WORK.FULLLOG1.
NOTE: The data set WORK.FULLLOG1 has 4196 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(PROGRAMEND):   *- get the ending line number of each block and of each job-related block -*;
MPRINT(PROGRAMEND):   proc sql noprint;
MPRINT(PROGRAMEND):   create table fulllog2 as select *, max(line) as msg_end from (select *, max(line * (message ^= " ")) as job_end from fulllog1(
MPRINT(VARLIST):  drop= thesassystem
MPRINT(PROGRAMEND):  ) group by job_num) group by msg_num, msg_type order by line ;
NOTE: The query requires remerging summary statistics back with the original data.
NOTE: Table WORK.FULLLOG2 created, with 4196 rows and 14 columns.

MPRINT(PROGRAMEND):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.04 seconds
      cpu time            0.05 seconds
      

MPRINT(PROGRAMEND):   *- for each line retrieve the next 2 lines with same msg_type and msg_num in order to reconstruct complete lines that were wrapped -*;
MPRINT(PROGRAMEND):   proc sql noprint;
MPRINT(PROGRAMEND):   create table fulllog3(compress=Y) as select a.* ,b.message as message2 ,coalesce(b.length, 0) as length2 ,c.message as message3 ,coalesce(c.length, 0) as 
length3 ,d.message as message4 ,coalesce(d.length, 0) as length4 from fulllog2 as a left join fulllog2 as b on a.adj_line+1 = b.adj_line and a.msg_type = b.msg_type and a.msg_num 
= b.msg_num left join fulllog2 as c on a.adj_line+2 = c.adj_line and a.msg_type = c.msg_type and a.msg_num = c.msg_num left join fulllog2 as d on a.adj_line+3 = d.adj_line and 
a.msg_type = d.msg_type and a.msg_num = d.msg_num order by line ;
NOTE: Compressing data set WORK.FULLLOG3 decreased size by 88.35 percent. 
      Compressed is 12 pages; un-compressed would require 103 pages.
NOTE: Table WORK.FULLLOG3 created, with 4196 rows and 20 columns.

MPRINT(PROGRAMEND):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.06 seconds
      cpu time            0.09 seconds
      

MPRINT(PROGRAMEND):   *- detect the presence of specific messages in specific block types and assign a severity level: issue_lvl -*;
MPRINT(PROGRAMEND):   data job_messages0(compress=Y);
MPRINT(PROGRAMEND):   length parent_job_instance $200 message_concat $1200;
MPRINT(PROGRAMEND):   format parent_job_stdtm E8601DT.;
MPRINT(PROGRAMEND):   set fulllog3(rename
MPRINT(PROGRAMEND):  =(job_submission_id = _job_submission_id job_compl_status = _job_compl_status job_path = _job_path)) end = last;
MPRINT(PROGRAMEND):   where ( msg_type not in (" " "SASSYSTEM" "MPRINT" "MLOGIC" "DEBUG" "MAUTOCOMPLOC" "MAUTOLOCDISPLAY") ) ;
The SAS System

MPRINT(VARLIST):   if _job_submission_id ^= " " then job_submission_id = _job_submission_id ;
MPRINT(VARLIST):   if _job_compl_status ^= " " then job_compl_status = _job_compl_status ;
MPRINT(VARLIST):   if _job_path ^= " " then job_path = _job_path ;
MPRINT(PROGRAMEND):   ;
MPRINT(PROGRAMEND):   retain indent job_submission_id job_compl_status job_path;
MPRINT(PROGRAMEND):   if symexist('startdatetime') then parent_job_stdtm = input(symget('startdatetime'), best32.);
MPRINT(PROGRAMEND):   else parent_job_stdtm = input("11JAN2023:23:10", datetime.);
MPRINT(PROGRAMEND):   if symexist('job_instance') then do;
MPRINT(PROGRAMEND):   parent_job_instance = symget('job_instance');
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   if parent_job_instance = " " then parent_job_instance = catx("_", put(symget("sysjobid"), $20.), "T231055", 'xx');
MPRINT(PROGRAMEND):   if msg_type in ("ERROR", "WARNING", "NOTE") then do;
MPRINT(PROGRAMEND):   *- case of indented blocks -*;
MPRINT(PROGRAMEND):   if line = msg_start and 0 < index(message, ": ") then do;
MPRINT(PROGRAMEND):   *- first line of block defines indentation of next lines -*;
MPRINT(PROGRAMEND):   if prxmatch("/^NOTE: (DATA statement|PROCEDURE [A-Z]+) used /", message) then do;
MPRINT(PROGRAMEND):   *- special case -*;
MPRINT(PROGRAMEND):   indent = index(message, ": ");
MPRINT(PROGRAMEND):   message_concat = substrn(message, 1, length) || ","|| compbl(substrn(message2, indent + 1, length2 - indent)) || ","|| compbl(substrn(message3, indent + 1, 
length3 - indent)) || ","|| compbl(substrn(message4, indent + 1, length4 - indent)) ;
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   else do;
MPRINT(PROGRAMEND):   *- common case -*;
MPRINT(PROGRAMEND):   indent = index(message, ": ")+1;
MPRINT(PROGRAMEND):   message_concat = substrn(message, 1, length) || substrn(message2, indent + 1, length2 - indent) || substrn(message3, indent + 1, length3 - indent) || 
substrn(message4, indent + 1, length4 - indent) ;
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   else do;
MPRINT(PROGRAMEND):   *- block lines 2 and above use the indent calculated in line 1 -*;
MPRINT(PROGRAMEND):   message_concat = substrn(message, indent + 1, length - indent ) || substrn(message2, indent + 1, length2 - indent) || substrn(message3, indent + 1, length3 - 
indent) || substrn(message4, indent + 1, length4 - indent) ;
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   else do;
MPRINT(PROGRAMEND):   *- cas of non-indented blocks -*;
MPRINT(PROGRAMEND):   indent = 0;
MPRINT(PROGRAMEND):   message_concat = substrn(message, 1, length) || substrn(message2, 1, length2) || substrn(message3, 1, length3) || substrn(message4, 1, length4);
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   message_concat = compbl(message_concat);
MPRINT(PROGRAMEND):   *- 2nd attempt to retrieve Job Submission ID, completion status, and path, using concatenated message, in case 1st attempt failed due to log messge 
truncation (wrapping) -*;
MPRINT(PROGRAMEND):   prx2 = prxparse('/\b[Jj]ob(?: [Ww]ith)? Submission ID: ([0-9a-f]+(-[0-9a-f]+)+)/');
MPRINT(PROGRAMEND):   prx3 = prxparse('/\b[Jj]ob\b.+has completed with status: (COMPLETED(_\w+)+\b)/');
MPRINT(PROGRAMEND):   prx4 = prxparse('!(?:\b[Ss]ubmitted (?:REPOSITORY |WORKSPACE )?[Jj]ob\:? |\%submit_job\( *)(/(general|clinical)/(\w+/)+\w+.job\b)!');
MPRINT(PROGRAMEND):   drop prx2-prx4;
MPRINT(PROGRAMEND):   if substr(msg_type, 1, 4)="JOB_" then do;
MPRINT(PROGRAMEND):   if prxmatch(prx2, message_concat) then do;
MPRINT(PROGRAMEND):   job_submission_id = prxposn(prx2, 1, message_concat);
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   if prxmatch(prx3, message_concat) then do;
MPRINT(PROGRAMEND):   job_compl_status = prxposn(prx3, 1, message_concat);
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   if prxmatch(prx4, message_concat) then do;
MPRINT(PROGRAMEND):   job_path = prxposn(prx4, 1, message_concat);
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   run;
The SAS System


NOTE: There were 1225 observations read from the data set WORK.FULLLOG3.
      WHERE msg_type not in (' ', 'DEBUG', 'MLOGIC', 'MPRINT', 'SASSYSTEM');
NOTE: The data set WORK.JOB_MESSAGES0 has 1225 observations and 27 variables.
NOTE: Compressing data set WORK.JOB_MESSAGES0 decreased size by 88.89 percent. 
      Compressed is 4 pages; un-compressed would require 36 pages.
NOTE: DATA statement used (Total process time):
      real time           0.11 seconds
      cpu time            0.11 seconds
      

MPRINT(PROGRAMEND):   data job_messages01;
MPRINT(PROGRAMEND):   set job_messages0(drop
MPRINT(PROGRAMEND):  =_job_submission_id _job_compl_status _job_path);
MPRINT(PROGRAMEND):   by job_num notsorted;
MPRINT(PROGRAMEND):   if (msg_type = "ER"||"ROR") then issue_lvl = 5;
MPRINT(PROGRAMEND):   else if (msg_type = "WAR"||"NING" and prxmatch("/(YOUR SYSTEM|IS ASSOCIATED) (WILL|IS SCHEDULED TO) EXPIRE/i", message) = 0 and prxmatch("/Unable to copy 
SAS[U]SER registry to WORK registry/i", message) = 0 ) then issue_lvl = 3;
MPRINT(PROGRAMEND):   else if (msg_type = "NO"||"TE") then do;
MPRINT(PROGRAMEND):   if prxmatch("/(\bINV[A]LID( \w+)? ARGUMENT TO FUNCTION\b" ||"|MERGE STA[T]EMENT HAS MORE T[H]AN ONE |DATA SET WITH RE[P]EATS (OF BY VALUES)?" ||"|SAS SET 
OP[T]ION OBS=0 AND WILL CON[T]INUE (TO CHECK STATEMENTS)?" ||"|SAS (SYSTEM )?STOP[P]ED PROCESSING THIS STEP" ||")/i", message) then issue_lvl = 4;
MPRINT(PROGRAMEND):   else if prxmatch("/(\bunin[i]titalized\b" ||"|Mis[s]ing values were ge[n]erated" ||"|for[m]at was too small" ||"|values have been con[v]erted" ||"|ER[R]OR 
DETECTED IN ANNOTATE" ||")/i", message) then issue_lvl = 2;
MPRINT(PROGRAMEND):   else issue_lvl = 0;
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   else issue_lvl = 0;
MPRINT(PROGRAMEND):   if ( (line = job_start or line = job_end or last.job_num) and job_path^= " ") or (msg_type = "JOB_"||"PARAM") or issue_lvl >= 2 ;
MPRINT(PROGRAMEND):   run;

NOTE: There were 1225 observations read from the data set WORK.JOB_MESSAGES0.
NOTE: The data set WORK.JOB_MESSAGES01 has 4 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.16 seconds
      cpu time            0.17 seconds
      

MPRINT(PROGRAMEND):   proc sql noprint;
MPRINT(PROGRAMEND):   create table job_messages1 as select parent_job_instance, parent_job_stdtm ,max(job_path) as job_path ,max(job_submission_id) as job_submission_id 
,max(job_compl_status) as job_compl_status ,
MPRINT(VARLIST):  line, message, length, msg_type, msg_num, msg_start, job_start, job_num, job_end, msg_end
MPRINT(PROGRAMEND):   ,max(issue_lvl) as job_max_issue_lvl ,issue_lvl from job_messages01 group by job_num order by
MPRINT(VARLIST):   parent_job_instance, parent_job_stdtm, job_path, job_submission_id, line
MPRINT(PROGRAMEND):  ;
NOTE: The query requires remerging summary statistics back with the original data.
NOTE: Table WORK.JOB_MESSAGES1 created, with 4 rows and 17 columns.

MPRINT(PROGRAMEND):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.19 seconds
      cpu time            0.19 seconds
      

MPRINT(PROGRAMEND):   *- Add messages from current log scan to Job Messages Tracker data -*;
_PARENTJOB_WRK_= PARWRK_LIBREF_ASSIGNED=0
MPRINT(PROGRAMEND):   data work.__job_messages_tracker;
MPRINT(PROGRAMEND):   set job_messages1;
MPRINT(PROGRAMEND):   by parent_job_instance parent_job_stdtm job_path job_submission_id line;
MPRINT(PROGRAMEND):   run;
The SAS System


NOTE: There were 4 observations read from the data set WORK.JOB_MESSAGES1.
NOTE: The data set WORK.__JOB_MESSAGES_TRACKER has 4 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(PROGRAMEND):   proc sql noprint;
MPRINT(PROGRAMEND):   create index _idx0_ on work.__job_messages_tracker(
MPRINT(VARLIST):  parent_job_instance, parent_job_stdtm, job_path, job_submission_id, line
NOTE: Composite index _idx0_ has been defined.
MPRINT(PROGRAMEND):  ) quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.05 seconds
      cpu time            0.05 seconds
      

MPRINT(PROGRAMEND):   data log2;
MPRINT(PROGRAMEND):   set log1 ;
MPRINT(PROGRAMEND):   where (war = 1 and (index(upmsg,'PRODUCT WITH WHICH') eq 0 and index(upmsg,'IS ASSOCIATED WILL EXPIRE') eq 0 and index(upmsg,'MPRINT') eq 0 and 
index(upmsg,'MLOGIC') eq 0 and index(upmsg,'SYMBOLGEN') eq 0 and index(upmsg,'IS ASSOCIATED IS SCHEDULED TO EXPIRE') eq 0 and index(upmsg,'YOUR SYSTEM IS SCHEDULED TO EXPIRE') eq 
0)) or un or (err and index(upmsg,'MPRINT') eq 0 and index(upmsg,'MLOGIC') eq 0 and index(upmsg,'SYMBOLGEN') eq 0 and upmsg ne:'GLOBAL') or ( upmsg like "NOTE: MIS"||"SING VALUES 
WERE GEN"||"ERATED AS A RESULT OF PERFORMING AN OPERATION ON MIS"||"SING VALUES.#" or upmsg like "NOTE: AT LEAST ONE W.D FOR"||"MAT WAS TOO SMALL FOR THE NUMBER TO BE PRINTED. THE 
DECIMAL MAY BE#" or upmsg like "NOTE: NUMERIC VALUES HAVE BEEN CONV"||"ERTED TO CHARACTER VALUES AT THE PLACES GIVEN BY:#" or upmsg like "NOTE: INV"||"ALID ARGUMENT TO%#" or upmsg 
like "NOTE: % UNINI"||"TIALIZED%#" or upmsg like "NOTE: MERGE STA"||"TEMENT HAS MORE TH"||"AN ONE DATA SET WITH RE"||"PEATS OF BY VALUES." or upmsg like "NOTE: THE SAS SYSTEM 
STOP"||"PED PROCESSING THIS STEP BECAUSE OF ER"||"RORS." or upmsg like "NOTE: SAS SET OP"||"TION OBS=0 AND WILL CONTINUE TO CHECK STATEMENTS." or upmsg like "NOTE: ER"||"ROR 
DETECTED IN ANNOTATE= DATASET" );
MPRINT(PROGRAMEND):   run;

NOTE: There were 2 observations read from the data set WORK.LOG1.
      WHERE ((war=1) and (INDEX(upmsg, 'PRODUCT WITH WHICH')=0) and (INDEX(upmsg, 'IS ASSOCIATED WILL EXPIRE')=0) and (INDEX(upmsg, 'MPRINT')=0) and (INDEX(upmsg, 'MLOGIC')=0) and 
      (INDEX(upmsg, 'SYMBOLGEN')=0) and (INDEX(upmsg, 'IS ASSOCIATED IS SCHEDULED TO EXPIRE')=0) and (INDEX(upmsg, 'YOUR SYSTEM IS SCHEDULED TO EXPIRE')=0)) or un or (err and 
      (INDEX(upmsg, 'MPRINT')=0) and (INDEX(upmsg, 'MLOGIC')=0) and (INDEX(upmsg, 'SYMBOLGEN')=0) and (upmsg not =: 'GLOBAL')) or upmsg like ('NOTE: MIS'||'SING VALUES WERE 
      GEN'||'ERATED AS A RESULT OF PERFORMING AN OPERATION ON MIS'||'SING VALUES.#') or upmsg like ('NOTE: AT LEAST ONE W.D FOR'||'MAT WAS TOO SMALL FOR THE NUMBER TO BE PRINTED. 
      THE DECIMAL MAY BE#') or upmsg like ('NOTE: NUMERIC VALUES HAVE BEEN CONV'||'ERTED TO CHARACTER VALUES AT THE PLACES GIVEN BY:#') or upmsg like ('NOTE: INV'||'ALID ARGUMENT 
      TO%#') or upmsg like ('NOTE: % UNINI'||'TIALIZED%#') or upmsg like ('NOTE: MERGE STA'||'TEMENT HAS MORE TH'||'AN ONE DATA SET WITH RE'||'PEATS OF BY VALUES.') or upmsg like 
      ('NOTE: THE SAS SYSTEM STOP'||'PED PROCESSING THIS STEP BECAUSE OF ER'||'RORS.') or upmsg like ('NOTE: SAS SET OP'||'TION OBS=0 AND WILL CONTINUE TO CHECK STATEMENTS.') or 
      upmsg like ('NOTE: ER'||'ROR DETECTED IN ANNOTATE= DATASET');
NOTE: The data set WORK.LOG2 has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MAUTOCOMPLOC:  The autocall macro LOG2JSON is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/macros/_library/log2json.sas.
MPRINT(LOG2JSON):   data _null_;
MPRINT(LOG2JSON):   runinclinical = 
max(index("/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/log/__adae.log",
"/clinical/"),index("/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/log/__
adae.log","\clinical\"));
MPRINT(LOG2JSON):   repoloc = max(index("no","/clinical/"),index("no","\clinical\"));
MPRINT(LOG2JSON):   call symputx("runinclinical",strip(put(runinclinical,8.)));
MPRINT(LOG2JSON):   call symputx("runinrepoloc",strip(put(repoloc,8.)));
MPRINT(LOG2JSON):   run;

NOTE: DATA statement used (Total process time):
The SAS System

      real time           0.00 seconds
      cpu time            0.00 seconds
      

RUNINCLINICAL=87 RUNINREPOLOC=0
MPRINT(LOG2JSON):   data _null_;
MPRINT(LOG2JSON):   *fp = substr("&logfilepath",index("&logfilepath","/clinical/"));
MPRINT(LOG2JSON):   fp = 
substr("/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/log/__adae.log",prx
match("?[/\\]clinical[/\\]?","/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_ad
am/log/__adae.log"));
MPRINT(LOG2JSON):   *- jbodart 2022-07-12 -*;
MPRINT(LOG2JSON):   call symputx("logfpath",strip(fp));
MPRINT(LOG2JSON):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

LOGFPATH=/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/log/__adae.log
LOGFNAMENOEXT=__adae
LOGFDIR=/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/log/
DOCMETADIR=/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/documents/meta/
MPRINT(LOG2JSON):   options dlcreatedir;
MPRINT(LOG2JSON):   libname sublog 
"/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/documents/meta/";
NOTE: Libref SUBLOG was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: 
      /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/documents/meta
MPRINT(LOG2JSON):   libname sublog;
NOTE: Libref SUBLOG has been deassigned.
MPRINT(LOG2JSON):   options DLCREATEDIR;
MPRINT(LOG2JSON):   data logsumm;
MPRINT(LOG2JSON):   set log1 (obs=1);
MPRINT(LOG2JSON):   message="Summary";
MPRINT(LOG2JSON):   war=0;
MPRINT(LOG2JSON):  err=0;
MPRINT(LOG2JSON):  un=0;
MPRINT(LOG2JSON):   note=0;
MPRINT(LOG2JSON):   line=0;
MPRINT(LOG2JSON):  path="/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/log/__adae.log";
MPRINT(LOG2JSON):   run;

NOTE: There were 1 observations read from the data set WORK.LOG1.
NOTE: The data set WORK.LOGSUMM has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LOG2JSON):   data log2note;
MPRINT(LOG2JSON):   set log2;
MPRINT(LOG2JSON):   if err=0 and war=0 and un=0 then note=1;
MPRINT(LOG2JSON):   else note=0;
MPRINT(LOG2JSON):   run;

The SAS System

NOTE: There were 2 observations read from the data set WORK.LOG2.
NOTE: The data set WORK.LOG2NOTE has 2 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LOG2JSON):   proc means data=log2note noprint;
MPRINT(LOG2JSON):   output out=summ sum=;
MPRINT(LOG2JSON):   run;

NOTE: There were 2 observations read from the data set WORK.LOG2NOTE.
NOTE: The data set WORK.SUMM has 1 observations and 8 variables.
NOTE: PROCEDURE MEANS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LOG2JSON):   data summ;
MPRINT(LOG2JSON):   set summ;
MPRINT(LOG2JSON):   line=0;
MPRINT(LOG2JSON):   drop _:;
MPRINT(LOG2JSON):   run;

NOTE: There were 1 observations read from the data set WORK.SUMM.
NOTE: The data set WORK.SUMM has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(LOG2JSON):   data logsumm2 ;
MPRINT(LOG2JSON):   merge logsumm summ;
MPRINT(LOG2JSON):   by line;
MPRINT(LOG2JSON):   run;

NOTE: There were 1 observations read from the data set WORK.LOGSUMM.
NOTE: There were 1 observations read from the data set WORK.SUMM.
NOTE: The data set WORK.LOGSUMM2 has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LOG2JSON):   proc sort data=log2note out=log2small;
MPRINT(LOG2JSON):   by message line;
MPRINT(LOG2JSON):   run;

NOTE: There were 2 observations read from the data set WORK.LOG2NOTE.
NOTE: The data set WORK.LOG2SMALL has 2 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LOG2JSON):   proc freq data=log2 noprint;
MPRINT(LOG2JSON):   table message/ norow nocol nopercent nocum list out=fmessage (rename=(count=f_msg) drop=percent);
MPRINT(LOG2JSON):   run;
The SAS System


NOTE: There were 2 observations read from the data set WORK.LOG2.
NOTE: The data set WORK.FMESSAGE has 2 observations and 2 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LOG2JSON):   data log2smallA;
MPRINT(LOG2JSON):   set log2small;
MPRINT(LOG2JSON):   by message line;
MPRINT(LOG2JSON):   if first.message;
MPRINT(LOG2JSON):   run;

NOTE: There were 2 observations read from the data set WORK.LOG2SMALL.
NOTE: The data set WORK.LOG2SMALLA has 2 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LOG2JSON):   data log2smallB;
MPRINT(LOG2JSON):   merge log2smallA (obs=100) fmessage;
MPRINT(LOG2JSON):   by message;
MPRINT(LOG2JSON):   run;

NOTE: There were 2 observations read from the data set WORK.LOG2SMALLA.
NOTE: There were 2 observations read from the data set WORK.FMESSAGE.
NOTE: The data set WORK.LOG2SMALLB has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LOG2JSON):   data logres(drop=upmsg);
MPRINT(LOG2JSON):   set logsumm2 log2smallB;
MPRINT(LOG2JSON):   run;

NOTE: There were 1 observations read from the data set WORK.LOGSUMM2.
NOTE: There were 2 observations read from the data set WORK.LOG2SMALLB.
NOTE: The data set WORK.LOGRES has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LOWC):   proc contents noprint data=logres out=cnt (keep=name);
MPRINT(LOWC):   run;

NOTE: The data set WORK.CNT has 9 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LOWC):   data _null_;
MPRINT(LOWC):   set cnt end=last;
MPRINT(LOWC):   where name ne lowcase(name);
The SAS System

MPRINT(LOWC):   call symputx("lowvar"||strip(put(_n_,8.)),strip(lowcase(name)));
MPRINT(LOWC):   call symputx("highvar"||strip(put(_n_,8.)),strip(upcase(name)));
MPRINT(LOWC):   if last then call symputx("nbvars",strip(put(_n_,8.)));
MPRINT(LOWC):   run;

NOTE: There were 0 observations read from the data set WORK.CNT.
      WHERE name not = LOWCASE(name);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LOG2JSON):  ;
MPRINT(LOG2JSON):   filename flogjson 
"/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam/documents/meta/log___adae.
json";
MPRINT(LOG2JSON):   proc json out=flogjson pretty;
MPRINT(LOG2JSON):   export logres / nosastags;
MPRINT(LOG2JSON):   run;

NOTE: PROCEDURE JSON used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LOG2JSON):   filename flogjson;
NOTE: Fileref FLOGJSON has been deassigned.
MPRINT(LOG2JSON):   *- unassign fileref -*;
MPRINT(PROGRAMEND):  ;
MPRINT(PROGRAMEND):   data mac;
MPRINT(PROGRAMEND):   length order 8;
MPRINT(PROGRAMEND):   set mauto;
MPRINT(PROGRAMEND):   upmsg=strip(COMPBL(upmsg));
MPRINT(PROGRAMEND):   if index(upmsg,'MAUTOLOCDISPLAY') or index(upmsg,'THIS MACRO WAS COMPILED FROM')>0 or index(upmsg,'MAUTOCOMPLOC') or index(upmsg,'IS COMPILING USING THE 
AUTOCALL SOURCE FILE')>0 then order+1;
MPRINT(PROGRAMEND):   if index(upmsg,'THE SAS SYSTEM')>0 then delete;
MPRINT(PROGRAMEND):   upmsg=compress(upmsg);
MPRINT(PROGRAMEND):   run;

NOTE: There were 136 observations read from the data set WORK.MAUTO.
NOTE: The data set WORK.MAC has 133 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

COPYNEEDED=0
(PROGRAMEND): sysmexecdepth =1
MPRINT(ODSDEST):   ods LISTING close;
MPRINT(PROGRAMEND):   ;
MPRINT(PROGRAMEND):   ods listing;
MPRINT(PROGRAMEND):   data _null_;
MPRINT(PROGRAMEND):   set log2 end=last;
MPRINT(PROGRAMEND):   if last then call symputx('nb_loglines',_n_);
MPRINT(PROGRAMEND):   run;

NOTE: There were 2 observations read from the data set WORK.LOG2.
NOTE: DATA statement used (Total process time):
The SAS System

      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(PROGRAMEND):   proc freq data= log2 noprint;
MPRINT(PROGRAMEND):   table MESSAGE/ out=messagelist;
MPRINT(PROGRAMEND):   run;

NOTE: There were 2 observations read from the data set WORK.LOG2.
NOTE: The data set WORK.MESSAGELIST has 2 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(PROGRAMEND):   title "LOG CHECK of adae.sas for output: __adae";
MPRINT(PROGRAMEND):   footnote;
MPRINT(PROGRAMEND):   *-2021-04-12 - Jean-Michel Bodart - use proc report with flow option allowing to display long messages without truncation -*;
MPRINT(PROGRAMEND):   proc report data=messagelist nowindows split='|' headline headskip contents='' formchar(2)='_' missing spacing=2 NOCOMPLETECOLS SPANROWS;
MPRINT(PROGRAMEND):   ***- Option SPANROWS allows corresponding value of group variables to be printed on 1st row of each page, without being repeated on subsequent rows -***;
MPRINT(PROGRAMEND):  ;
MPRINT(PROGRAMEND):   columns count message;
MPRINT(PROGRAMEND):   define count / "Count" order=data width = 6;
MPRINT(PROGRAMEND):   define message / "Message" order=data flow width=170;
MPRINT(PROGRAMEND):   run;

NOTE: There were 2 observations read from the data set WORK.MESSAGELIST.
NOTE: The PROCEDURE REPORT printed page 5.
NOTE: PROCEDURE REPORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(PROGRAMEND):   title;
MPRINT(PROGRAMEND):   filename of;
NOTE: Fileref OF has been deassigned.
MPRINT(PROGRAMEND):   filename logf;
NOTE: Fileref LOGF has been deassigned.
(PROGRAMEND): SYSMEXECDEPTH =1
_PARENTJOB_WRK_= PARWRK_LIBREF_ASSIGNED=0
MPRINT(PROGRAMEND):   *- Process Job Messages Tracker data from child jobs (if any) -*;
MPRINT(PROGRAMEND):   *- Save Job Messages Tracker data to Library OUT if defined -*;
WEEKDAY=4
TRACKER=out.jobtrackd7fdc636_d4 NEW_TRACKER=1 OUT_LIBREF_ASSIGNED=0
MPRINT(PROGRAMEND):   *- close active ods HTML destinations -*;
MPRINT(PROGRAMEND):   ;
MPRINT(PROGRAMEND):   *- launch dashboard job -*;
RELREPEVPATH=/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam
MPRINT(PROGRAMEND):   data _null_;
MPRINT(PROGRAMEND):   runinclinical = max(index("/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam", "/clinical/"), 
index("/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam", "\clinical\"));
MPRINT(PROGRAMEND):   call symputx("_runinclinical", strip(put(runinclinical, 8.)));
MPRINT(PROGRAMEND):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      
The SAS System


_RUNINCLINICAL=1
MAUTOCOMPLOC:  The autocall macro SUBMIT_JOB is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/macros/_library/submit_job.sas.
NUM_JOBS_SPAWNED=1
MACROAPIVER=2.3
MPRINT(SUBMIT_JOB):   option nomprint;


NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /general/biostat/jobs/dashboard/dev/jobs/pp.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.21 seconds
      cpu time            0.00 seconds
      

Notice:(SUBMIT_JOB): LSAF Job Path exists: /general/biostat/jobs/dashboard/dev/jobs/pp.job.
NOTE: Format $JOBABBR has been output.

NOTE: PROCEDURE FORMAT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MAUTOCOMPLOC:  The autocall macro LSAF_GETJOBPARAMETERS is compiling using the autocall source file 
            /sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.3/sasmacros/lsaf_getjobparameters.sas.


NOTE: SAS Life Science Analytics Framework Macro: *  Parameters were returned for job /general/biostat/jobs/dashboard/dev/jobs/pp.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_getjobparameters
NOTE: SAS Life Science Analytics Framework Macro: *  5  records written to data set work.job_Parameters
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: The data set WORK.JOB_PARAMETERS has 5 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.24 seconds
      cpu time            0.00 seconds
      

NOTE: The dataset WORK.JOB_PARAMETERS has 5 observations and 8 variables.

Notice:(SUBMIT_JOB): Updated Job parameters:
 - refolder=/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam [type=FOLDER, includeSubFolders=0]
 - dbg=no [type=CHARACTER]
 - job_instance=Ngos_4_x0_47_1_3 [type=CHARACTER]
 - _PARENTJOB_WS_=/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a [type=CHARACTER]
 - _PARENTJOB_WRK_=  [type=CHARACTER]
NOTE: There were 5 observations read from the data set WORK.JOB_PARAMETERS.
NOTE: The data set WORK.LSAF_JOB_PARAMS has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

N_PARAMS=5
The SAS System


NOTE: There were 5 observations read from the data set WORK.LSAF_JOB_PARAMS.
NOTE: The data set WORK.LSAF_JOB_PARAMS has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


=== 2023-01-11T23:10:57 - Submit job: /general/biostat/jobs/dashboard/dev/jobs/pp.job (with parameters: 
       refolder=/clinical/argx-113/cidp/argx-113-1902/biostat/staging/generic_adam  (type=FOLDER includeSubFolders=0)   
       _PARENTJOB_WS_=/lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a   dbg=no   job_instance=Ngos_4_x0_47_1_3           ) ===
NOTE: 3 lines were written to file PRINT.
NOTE: There were 1 observations read from the data set WORK.LSAF_JOB_PARAMS.
      WHERE PRXMATCH('/^(FOLDER|FILE)$/', TRIM(type));
NOTE: There were 3 observations read from the data set WORK.LSAF_JOB_PARAMS.
      WHERE (PRXMATCH('/^(FOLDER|FILE)$/', TRIM(type))=0) and (value not = ' ');
NOTE: The DATA step printed page 6.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MAUTOCOMPLOC:  The autocall macro LSAF_SUBMITJOB is compiling using the autocall source file 
            /sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.3/sasmacros/lsaf_submitjob.sas.
MAUTOCOMPLOC:  The autocall macro CMPRES is compiling using the autocall source file /sso/sfw/sas/940/SASFoundation/9.4/sasautos/cmpres.sas.
MAUTOCOMPLOC:  The autocall macro LEFT is compiling using the autocall source file /sso/sfw/sas/940/SASFoundation/9.4/sasautos/left.sas.
MAUTOCOMPLOC:  The autocall macro QTRIM is compiling using the autocall source file /sso/sfw/sas/940/SASFoundation/9.4/sasautos/qtrim.sas.
MAUTOCOMPLOC:  The autocall macro VERIFY is compiling using the autocall source file /sso/sfw/sas/940/SASFoundation/9.4/sasautos/verify.sas.
MAUTOCOMPLOC:  The autocall macro LSAF_VALIDATE_PARAMETERS_DATASET is compiling using the autocall source file 
            /sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.3/sasmacros/lsaf_validate_parameters_dataset.sas.
NOTE: lsaf_submitjob: Validating dataset lsaf_job_params
MAUTOCOMPLOC:  The autocall macro LSAF_VALIDATE_SASDATASET is compiling using the autocall source file 
            /sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.3/sasmacros/lsaf_validate_sasdataset.sas.
MAUTOCOMPLOC:  The autocall macro QCMPRES is compiling using the autocall source file /sso/sfw/sas/940/SASFoundation/9.4/sasautos/qcmpres.sas.
MAUTOCOMPLOC:  The autocall macro QLEFT is compiling using the autocall source file /sso/sfw/sas/940/SASFoundation/9.4/sasautos/qleft.sas.


NOTE: SAS Life Science Analytics Framework Macro: *  Submitted job /general/biostat/jobs/dashboard/dev/jobs/pp.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_submitjob
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: * sas_dsname = lsaf_job_params
NOTE: SAS Life Science Analytics Framework Macro: * _lsafJobSubmissionId_= 7506fa67-60e1-4708-ae07-ee129ef22a78
NOTE: There were 5 observations read from the data set WORK.LSAF_JOB_PARAMS.
NOTE: DATA statement used (Total process time):
      real time           1.62 seconds
      cpu time            0.00 seconds
      

MAUTOCOMPLOC:  The autocall macro GET_LSAF_JOB_SUBMISSION_STATUS is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adae.job-d4f9efa5-d84c-4aa5-902f-3192d10c073a/general/biostat/macros/_library/get_lsaf_job_submission_status.sas.
(SUBMIT_JOB): 2023-01-11T23:10:59 - Submitted REPOSITORY Job /general/biostat/jobs/dashboard/dev/jobs/pp.job          with Submission ID: 7506fa67-60e1-4708-ae07-ee129ef22a78, 
Status: STARTED
(SUBMIT_JOB): 23:10:59.00 Elapsed: 00:00:03.03 Job Submission Status: STARTED
(SUBMIT_JOB): 23:11:01.52 Elapsed: 00:00:05.56 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:11:04.65 Elapsed: 00:00:08.68 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:11:07.37 Elapsed: 00:00:11.40 Job Submission Status: RUNNING_TASKS
The SAS System

(SUBMIT_JOB): 23:11:10.29 Elapsed: 00:00:14.32 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:11:13.01 Elapsed: 00:00:17.04 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:11:15.93 Elapsed: 00:00:19.97 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:11:19.05 Elapsed: 00:00:23.09 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:11:22.38 Elapsed: 00:00:26.42 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:11:25.11 Elapsed: 00:00:29.14 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:11:28.43 Elapsed: 00:00:32.47 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:11:36.55 Elapsed: 00:00:40.59 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:11:44.48 Elapsed: 00:00:48.51 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:11:52.80 Elapsed: 00:00:56.84 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:12:00.33 Elapsed: 00:01:04.36 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:12:23.65 Elapsed: 00:01:27.69 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 23:12:46.78 Elapsed: 00:01:50.81 Job Submission Status: COMPLETED_SUCCESSFUL
(SUBMIT_JOB): 2023-01-11T23:13:17 - Submitted REPOSITORY job: /general/biostat/jobs/dashboard/dev/jobs/pp.job has completed with status: COMPLETED_SUCCESSFUL
pp.job: get job status: 0: Success.:       Elapsed: 00:02:20.82       REPOSITORY Job /general/biostat/jobs/dashboard/dev/jobs/pp.job with Submission ID: 
7506fa67-60e1-4708-ae07-ee129ef22a78, Status: COMPLETED_SUCCESSFUL
MPRINT(PROGRAMEND):  ;

Notice: === (PROGRAMEND): Done, 2023-01-11T23:13:16.79 - SYSMEXECDEPTH: 1 - DEBUG: 1 ===
302        
303        
304        
305        
306        
307        
308        ;*';*";*/;*);run;quit;
309        proc scaproc; write; run;
310        options nonotes;
311        

/**********************************************************************************************************************
 * Submission End: adae.sas
 * Jan 11, 2023 23:13:16 GMT
 *********************************************************************************************************************/
