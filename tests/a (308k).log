
https://xarprod.ondemand.sas.com/lsaf/webdav/repo/clinical/argx-113/x-ind/argx-113-0000/biostat/staging/generic_adam/log/t_2.8.1_taeisr.log

/clinical/argx-113/x-ind/argx-113-0000/biostat/staging/generic_adam/log
Directory
t_2.8.1_taeisr.log
NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


(MULTI.SETENV.SETENV03.INI.SETPATHS): Start of redirected LOG from  to
/lsafshared/SASWorkspaces/.transient/job_taeisr.job-e19492be-402c-4d8d-bc56-04fdf60d0a18/clinical/argx-113/x-ind/argx-113-0000/biostat/staging/generic_adam/log/t_2.8.1_taeisr.log
MPRINT(MULTI.SETENV.SETENV03.INI):  ;
fcmpoutlib=work.functions
MPRINT(MULTI.SETENV.SETENV03.INI):  ;
NOTE: No CMP or C functions found in library work.functions.
MPRINT(MULTI.SETENV.SETENV03.INI):   proc fcmp outlib=work.functions.run;
MPRINT(MULTI.SETENV.SETENV03.INI):   /* outlib = <library>.<dataset>.<package> */ *- Function that runs SAS Code passed quoted as macro-variable ARGS to macro %run_macro, which is expected to have
been already compiled or to be found among the autocall macros. The %run_macro has no parameters but retrieves the contents of ARGS from macro-variable &ARGS, de-quote them and executes them. The
code executed is expected to assign a value to macro-variable &RESULT which is passed back to the FCMP function and becomes the value returned by that FCMP function. -*;
MPRINT(MULTI.SETENV.SETENV03.INI):   function RUNMACRO(args $) $;
MPRINT(MULTI.SETENV.SETENV03.INI):  *$32000;
MPRINT(MULTI.SETENV.SETENV03.INI):   length result $32000;
MPRINT(MULTI.SETENV.SETENV03.INI):   result="";
MPRINT(MULTI.SETENV.SETENV03.INI):   rc = run_macro('run_macro', args, result);
MPRINT(MULTI.SETENV.SETENV03.INI):   *if rc = 0 then return(quote(trimn(result)));
MPRINT(MULTI.SETENV.SETENV03.INI):   if rc = 0 then return(trimn(result));
MPRINT(MULTI.SETENV.SETENV03.INI):   else return('ER'||'ROR attempting to call macro run_macro');
MPRINT(MULTI.SETENV.SETENV03.INI):   endsub;
MPRINT(MULTI.SETENV.SETENV03.INI):   /* *- test -*;
MPRINT(MULTI.SETENV.SETENV03.INI):   res = RUNMACRO('%lib_datasets(lib=maps);
MPRINT(MULTI.SETENV.SETENV03.INI):  ');
MPRINT(MULTI.SETENV.SETENV03.INI):   put res=;
MPRINT(MULTI.SETENV.SETENV03.INI):   res = RUNMACRO('%non_existing_macro(lib=maps);
MPRINT(MULTI.SETENV.SETENV03.INI):  ');
MPRINT(MULTI.SETENV.SETENV03.INI):   put res=;
MPRINT(MULTI.SETENV.SETENV03.INI):   */ run;

NOTE: Function RUNMACRO saved to work.functions.run.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(MULTI.SETENV.SETENV03.INI):   quit;
MPRINT(MULTI.SETENV.SETENV03.INI):   options ;
option cmplib=work.functions
fcmpoutlib=work.functions
MPRINT(MULTI.SETENV.SETENV03.INI):   option mprint mlogic;
MPRINT(MULTI.SETENV.SETENV03.INI):   options ;
option cmplib=work.functions
MLOGIC(DEL_EXISTING):  Beginning execution.
MLOGIC(DEL_EXISTING):  %IF condition %symexist(debug)=0 is FALSE
MLOGIC(DEL_EXISTING):  %IF condition %sysfunc(exist(&fcmpoutlib., data)) is TRUE
MLOGIC(DEL_EXISTING):  %LET (variable name is FUNC_LIST)
MPRINT(MULTI.SETENV.SETENV03.INI.DEL_EXISTING):   proc sql noprint;


================================================================> Page 2 <================================================================


The SAS System

MPRINT(MULTI.SETENV.SETENV03.INI.DEL_EXISTING):   select distinct scan(_KEY_, -1, ".") into :func_list separated by ' ' from work.functions where type="Prototype" and scan(_key_, 1, ".") = "F" and
scan(_key_, 2, ".") = "STRINGS" ;
NOTE: No rows were selected.
MPRINT(MULTI.SETENV.SETENV03.INI.DEL_EXISTING):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MLOGIC(DEL_EXISTING):  %PUT Existing FCMP functions in &fcmpoutlib..&package: &func_list..
Existing FCMP functions in work.functions.STRINGS: .
MLOGIC(DEL_EXISTING):  %IF condition %qupcase(%superq(debug))=%quote(Y) is FALSE
MPRINT(MULTI.SETENV.SETENV03.INI.DEL_EXISTING):   proc fcmp outlib=work.functions.STRINGS;
MLOGIC(DEL_EXISTING):  %IF condition %index( &func_list ,  E8601PATTERNC ) is FALSE
MLOGIC(DEL_EXISTING):  %IF condition %index( &func_list ,  PATTERNC ) is FALSE
MLOGIC(DEL_EXISTING):  %IF condition %index( &func_list ,  PATTERNN ) is FALSE
MLOGIC(DEL_EXISTING):  %IF condition %index( &func_list ,  RIGHT20CHAR ) is FALSE
MLOGIC(DEL_EXISTING):  %IF condition %index( &func_list ,  OVERWRITE ) is FALSE
MLOGIC(DEL_EXISTING):  %IF condition %index( &func_list ,  SPLITINDENT ) is FALSE
MLOGIC(DEL_EXISTING):  %IF condition %index( &func_list ,  SPLITINSERTSEP ) is FALSE
MPRINT(MULTI.SETENV.SETENV03.INI.DEL_EXISTING):   quit;

NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MLOGIC(DEL_EXISTING):  Ending execution.
MPRINT(MULTI.SETENV.SETENV03.INI):  ;
MPRINT(MULTI.SETENV.SETENV03.INI):   option nomlogic;
MPRINT(MULTI.SETENV.SETENV03.INI):   proc fcmp outlib=work.functions.STRINGS;
MPRINT(MULTI.SETENV.SETENV03.INI):   /* outlib = <library>.<dataset>.<package> */ *- Function to return an ISO8601 datetime string transformed into a pattern where every year digit is replaced by Y
every month digit is replaced by M every day digit is replaced by D every hour digit is replaced by h every minute digit is replaced by m every second digit is replaced by s other characters are left
unchanged (useful to create a user-specific format ) -*;
MPRINT(MULTI.SETENV.SETENV03.INI):   function E8601PATTERNC(text $) $;
MPRINT(MULTI.SETENV.SETENV03.INI):   length ret $200;
MPRINT(MULTI.SETENV.SETENV03.INI):   ret=prxchange('s/^(\d{4}-\d\d-\d\dT\d\d[:]\d\d[:])\d\d/\1ss/', 1, text);
MPRINT(MULTI.SETENV.SETENV03.INI):   ret=prxchange('s/^(\d{4}-\d\d-\d\dT\d\d[:])\d\d/\1mm/', 1, ret);
MPRINT(MULTI.SETENV.SETENV03.INI):   ret=prxchange('s/^(\d{4}-\d\d-\d\dT)\d\d/\1hh/', 1, ret);
MPRINT(MULTI.SETENV.SETENV03.INI):   ret=prxchange('s/^(\d{4}-\d\d-)\d\d/\1DD/', 1, ret);
MPRINT(MULTI.SETENV.SETENV03.INI):   ret=prxchange('s/^(\d{4}-)\d\d/\1MM/', 1, ret);
MPRINT(MULTI.SETENV.SETENV03.INI):   ret=prxchange('s/^\d{4}/YYYY/', 1, ret);
MPRINT(MULTI.SETENV.SETENV03.INI):   return(ret);
MPRINT(MULTI.SETENV.SETENV03.INI):   endsub;
MPRINT(MULTI.SETENV.SETENV03.INI):   *- Function to return a character string transformed into a pattern where every letter is replaced by X every digit is replaced by 9 other characters are left
unchanged (useful to create a user-specific format ) -*;
MPRINT(MULTI.SETENV.SETENV03.INI):   function PATTERNC(text $) $;
MPRINT(MULTI.SETENV.SETENV03.INI):   length ret $200;
MPRINT(MULTI.SETENV.SETENV03.INI):   ret=prxchange('s/\d/9/', -1, text);
MPRINT(MULTI.SETENV.SETENV03.INI):   ret=prxchange('s/[a-zA-Z]/X/', -1, ret);
MPRINT(MULTI.SETENV.SETENV03.INI):   return(ret);
MPRINT(MULTI.SETENV.SETENV03.INI):   endsub;
MPRINT(MULTI.SETENV.SETENV03.INI):   *- Function to return a number first transformed into a string by applying format best12. then transformed into a pattern where every non-zero digit is replaced
by 9 other characters are left unchanged (useful to create a user-specific format ) -*;
MPRINT(MULTI.SETENV.SETENV03.INI):   function PATTERNN(num) $12;
MPRINT(MULTI.SETENV.SETENV03.INI):   length ret $12;
MPRINT(MULTI.SETENV.SETENV03.INI):   ret=put(num, best12.);
MPRINT(MULTI.SETENV.SETENV03.INI):   ret=prxchange('s/[1-9]/9/', -1, ret);


================================================================> Page 3 <================================================================


The SAS System

MPRINT(MULTI.SETENV.SETENV03.INI):   return(ret);
MPRINT(MULTI.SETENV.SETENV03.INI):   endsub;
MPRINT(MULTI.SETENV.SETENV03.INI):   *- Function to return the last 20 characters of a value, right-aligned (can be used to create a format) -*;
MPRINT(MULTI.SETENV.SETENV03.INI):   function RIGHT20CHAR(text $) $20;
MPRINT(MULTI.SETENV.SETENV03.INI):   length ret $20;
MPRINT(MULTI.SETENV.SETENV03.INI):   l = length(cats(text));
MPRINT(MULTI.SETENV.SETENV03.INI):   if l >20 then ret = substr(cats(text), l - 20 + 1);
MPRINT(MULTI.SETENV.SETENV03.INI):   else substr(ret, 20 - l + 1) = cats(text);
MPRINT(MULTI.SETENV.SETENV03.INI):   return(ret);
MPRINT(MULTI.SETENV.SETENV03.INI):   endsub;
MPRINT(MULTI.SETENV.SETENV03.INI):   *- Function to return one charcater string completed by the end of a second string when the first string is shorted than the second string -*;
MPRINT(MULTI.SETENV.SETENV03.INI):   function OVERWRITE(new $, old $) $;
MPRINT(MULTI.SETENV.SETENV03.INI):   file log;
MPRINT(MULTI.SETENV.SETENV03.INI):   if lengthn(new) >= length(old) then return(new);
MPRINT(MULTI.SETENV.SETENV03.INI):   if lengthn(new) = 0 then return(old);
MPRINT(MULTI.SETENV.SETENV03.INI):   return( trim(new)||substr(old, lengthn(new)+1) );
MPRINT(MULTI.SETENV.SETENV03.INI):   return(ret);
MPRINT(MULTI.SETENV.SETENV03.INI):   endsub;
MPRINT(MULTI.SETENV.SETENV03.INI):   *- Function to indent and split character values by inserting spaces at appropriate locations so that the returned string is made up of a number of chunks of the
same size that will be aligned when printed by proc report in a column of the given size to the listing destination with a non-proportional font. This function can be used either in a DATA STEP
(prior to calling proc report) or WITHIN A PROC REPORT COMPUTE BLOCK (i.e. without pre-processing the input dataset). Unless there is only one chunk, inserting an extra space in front of the last
chunk seems necessary for proc report to have that chunk correctly aligned. -*;
MPRINT(MULTI.SETENV.SETENV03.INI):   function SPLITINDENT(_text $, _indent, size) $;
MPRINT(MULTI.SETENV.SETENV03.INI):   file log;
MPRINT(MULTI.SETENV.SETENV03.INI):   length text $32767;
MPRINT(MULTI.SETENV.SETENV03.INI):   text = _text;
MPRINT(MULTI.SETENV.SETENV03.INI):   indent = _indent;
MPRINT(MULTI.SETENV.SETENV03.INI):   if indent <= .Z then do;
MPRINT(MULTI.SETENV.SETENV03.INI):   if indent =. then do;
MPRINT(MULTI.SETENV.SETENV03.INI):   if substr(text, 1, 1) in (' ' 'A0'x) then indent=verify(text, ' '||'A0'x);
MPRINT(MULTI.SETENV.SETENV03.INI):   else indent=indexc(text, ' '||'A0'x);
MPRINT(MULTI.SETENV.SETENV03.INI):   end;
MPRINT(MULTI.SETENV.SETENV03.INI):   else do;
MPRINT(MULTI.SETENV.SETENV03.INI):   indent = 0;
MPRINT(MULTI.SETENV.SETENV03.INI):   end;
MPRINT(MULTI.SETENV.SETENV03.INI):   end;
MPRINT(MULTI.SETENV.SETENV03.INI):   l = lengthn(text);
MPRINT(MULTI.SETENV.SETENV03.INI):   startpos = 1;
MPRINT(MULTI.SETENV.SETENV03.INI):   if l=0 then return ( trim(text) );
MPRINT(MULTI.SETENV.SETENV03.INI):   do until (startpos > lengthn(text));
MPRINT(MULTI.SETENV.SETENV03.INI):   *- indent text as requested -*;
MPRINT(MULTI.SETENV.SETENV03.INI):   v = verify(substr(text, startpos), ' ');
MPRINT(MULTI.SETENV.SETENV03.INI):   if indent > 0 and v >0 then substr(text, startpos) = repeat(' ', indent-1)||substr(substr(text, startpos), v);
MPRINT(MULTI.SETENV.SETENV03.INI):   else if v > 0 then substr(text, startpos) = substr(substr(text, startpos), v);
MPRINT(MULTI.SETENV.SETENV03.INI):   else substr(text, startpos) = repeat(' ', indent-1)||substr(text, startpos);
MPRINT(MULTI.SETENV.SETENV03.INI):   *- split text as requested -*;
MPRINT(MULTI.SETENV.SETENV03.INI):   splitpos = findc( substr(text, startpos, size) , " " , -size );
MPRINT(MULTI.SETENV.SETENV03.INI):   *- backwards find position of first space prior to size -*;
MPRINT(MULTI.SETENV.SETENV03.INI):   if splitpos <= indent then splitpos = size;
MPRINT(MULTI.SETENV.SETENV03.INI):   if splitpos < size then substr(text, startpos) = substr(text, startpos, splitpos)||repeat(' ', size - splitpos)||substr(text, startpos + splitpos);
MPRINT(MULTI.SETENV.SETENV03.INI):   startpos=startpos + size;
MPRINT(MULTI.SETENV.SETENV03.INI):   end;
MPRINT(MULTI.SETENV.SETENV03.INI):   *- Unless there is only one chunk, insert one more space in front of the last chunk in order to have it correctly aligned by proc report when used with options
width = &size flow and the LISTING destination -*;
MPRINT(MULTI.SETENV.SETENV03.INI):   startpos = startpos - size;
MPRINT(MULTI.SETENV.SETENV03.INI):   if startpos > size then do;
MPRINT(MULTI.SETENV.SETENV03.INI):   *- i.e. this is not the first and only chunk -*;
MPRINT(MULTI.SETENV.SETENV03.INI):   substr(text, startpos) = " "||substr(text, startpos);


================================================================> Page 4 <================================================================


The SAS System

MPRINT(MULTI.SETENV.SETENV03.INI):   end;
MPRINT(MULTI.SETENV.SETENV03.INI):   return( trim(text) );
MPRINT(MULTI.SETENV.SETENV03.INI):   endsub;
MPRINT(MULTI.SETENV.SETENV03.INI):   *- Function to split character values into chunks that are at most the specified size, insert separators between all chunks and join them back together after
suppressing leading spaces in chunks. When separators already exist in the input string, they are preserved (the string is forced to split at those positions). The separators are typically used to
wrap text in a fixed width column. -*;
MPRINT(MULTI.SETENV.SETENV03.INI):   Function SPLITINSERTSEP(_text $, size, sep $) $;
MPRINT(MULTI.SETENV.SETENV03.INI):   file log;
MPRINT(MULTI.SETENV.SETENV03.INI):   length text $32767;
MPRINT(MULTI.SETENV.SETENV03.INI):   text = _text;
MPRINT(MULTI.SETENV.SETENV03.INI):   l = lengthn(text);
MPRINT(MULTI.SETENV.SETENV03.INI):   lsep = length(sep);
MPRINT(MULTI.SETENV.SETENV03.INI):   startpos = 1;
MPRINT(MULTI.SETENV.SETENV03.INI):   if l=0 then return ( trim(text) );
MPRINT(MULTI.SETENV.SETENV03.INI):   iter = 0;
MPRINT(MULTI.SETENV.SETENV03.INI):   remain = klength(substr(text, startpos));
MPRINT(MULTI.SETENV.SETENV03.INI):   *do until (startpos > lengthn(text) or iter > 20);
MPRINT(MULTI.SETENV.SETENV03.INI):   do until (klength(substr(text, startpos))< size or iter > 20);
MPRINT(MULTI.SETENV.SETENV03.INI):   iter = iter + 1;
MPRINT(MULTI.SETENV.SETENV03.INI):   l = lengthn(text);
MPRINT(MULTI.SETENV.SETENV03.INI):   v = kindex (substr(text, startpos), ' ');
MPRINT(MULTI.SETENV.SETENV03.INI):   vb= kindexb(substr(text, startpos), ' ');
MPRINT(MULTI.SETENV.SETENV03.INI):   s = kindex (substr(text, startpos), sep);
MPRINT(MULTI.SETENV.SETENV03.INI):   sb= kindexb(substr(text, startpos), sep);
MPRINT(MULTI.SETENV.SETENV03.INI):   sizeb = lengthn(ksubstr(ktrim(substr(text, startpos))||repeat('.', size), 1, size)||"|");
MPRINT(MULTI.SETENV.SETENV03.INI):   *put iter= startpos= l= v= vb= s= sb= size= sizeb= lsep=;
MPRINT(MULTI.SETENV.SETENV03.INI):   if 0 < s <= size then do;
MPRINT(MULTI.SETENV.SETENV03.INI):   *put "case 1)";
MPRINT(MULTI.SETENV.SETENV03.INI):   startpos = startpos + sb -1 + lsep;
MPRINT(MULTI.SETENV.SETENV03.INI):   substr(text, startpos) = kleft(substr(text, startpos));
MPRINT(MULTI.SETENV.SETENV03.INI):   end;
MPRINT(MULTI.SETENV.SETENV03.INI):   else do;
MPRINT(MULTI.SETENV.SETENV03.INI):   if 0 < v <= size then do;
MPRINT(MULTI.SETENV.SETENV03.INI):   w = kfindc( substr(text, startpos, sizeb) , " " , -size );
MPRINT(MULTI.SETENV.SETENV03.INI):   wb = lengthn( ksubstr( substr(text, startpos, sizeb), 1, w ) );
MPRINT(MULTI.SETENV.SETENV03.INI):   *put "case 2) " w= wb=;
MPRINT(MULTI.SETENV.SETENV03.INI):   substr(text, startpos + wb) = ktrim(sep) || kleft(substr(text, startpos + wb));
MPRINT(MULTI.SETENV.SETENV03.INI):   startpos = startpos + wb + lsep;
MPRINT(MULTI.SETENV.SETENV03.INI):   end;
MPRINT(MULTI.SETENV.SETENV03.INI):   else do;
MPRINT(MULTI.SETENV.SETENV03.INI):   *put "case 3)";
MPRINT(MULTI.SETENV.SETENV03.INI):   substr(text, startpos + sizeb) = ktrim(sep) || kleft(substr(text, startpos + sizeb));
MPRINT(MULTI.SETENV.SETENV03.INI):   startpos = startpos + sizeb + lsep;
MPRINT(MULTI.SETENV.SETENV03.INI):   end;
MPRINT(MULTI.SETENV.SETENV03.INI):   end;
MPRINT(MULTI.SETENV.SETENV03.INI):   remain = klength(substr(text, startpos));
MPRINT(MULTI.SETENV.SETENV03.INI):   *put "new " startpos= / text / "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890";
MPRINT(MULTI.SETENV.SETENV03.INI):   *put "Remaining: " remain;
MPRINT(MULTI.SETENV.SETENV03.INI):   end;
MPRINT(MULTI.SETENV.SETENV03.INI):   return( trim(text) );
MPRINT(MULTI.SETENV.SETENV03.INI):   endsub;
MPRINT(MULTI.SETENV.SETENV03.INI):   run;

NOTE: Function SPLITINSERTSEP saved to work.functions.STRINGS.
NOTE: Function SPLITINDENT saved to work.functions.STRINGS.
NOTE: Function OVERWRITE saved to work.functions.STRINGS.
NOTE: Function RIGHT20CHAR saved to work.functions.STRINGS.
NOTE: Function PATTERNN saved to work.functions.STRINGS.


================================================================> Page 5 <================================================================


The SAS System

NOTE: Function PATTERNC saved to work.functions.STRINGS.
NOTE: Function E8601PATTERNC saved to work.functions.STRINGS.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(MULTI.SETENV.SETENV03.INI):   quit;
MPRINT(MULTI.SETENV.SETENV03.INI):   options ;
option cmplib=work.functions
Notice: =========================================================================================================
Notice: === (INI): Starting taeisr.sas - 2023-06-03T03:08:56 ===
Notice: =========================================================================================================
MPRINT(MULTI.SETENV.SETENV03):   ;
L_SASAUTOS=("/lsafshared/SASWorkspaces/.transient/job_taeisr.job-e19492be-402c-4d8d-bc56-04fdf60d0a18/clinical/argx-113/x-ind/argx-113-0000/biostat/staging/generic_adam/macros"
"/lsafshared/SASWorkspaces/.transient/job_taeisr.job-e19492be-402c-4d8d-bc56-04fdf60d0a18/general/biostat/gadam/_library"
"/lsafshared/SASWorkspaces/.transient/job_taeisr.job-e19492be-402c-4d8d-bc56-04fdf60d0a18/general/biostat/macros/_library"
"/lsafshared/SASWorkspaces/.transient/job_taeisr.job-e19492be-402c-4d8d-bc56-04fdf60d0a18/clinical/argx-113/x-ind/argx-113-0000/biostat/staging/generic_adam/macros/global_macros"
"!SASROOT/sasautos"   "/sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.6.1/sasmacros"   "/lsafshared/SASWorkspaces/global_macros")

SASUnit was NOT initialized since not all conditions are met:
PGMNAME=taeisr matches TEST pattern: 0
OPTION SYSIN is not set: 1
SASUnit folder exists: 0
_SDD_RUNMODE_= is not equal to LSAF_BATCH: 1
G_RUNMODE= is empty: 1

MPRINT(MULTI.SETENV.SETENV03):   *-- restore initial options -----------------------------------------------------------*;
MPRINT(MULTI.SETENV.SETENV03):   options SOURCE SOURCE2;
MPRINT(MULTI.SETENV):  ;
MPRINT(MULTI.SETENV):   options nomprintnest;
(SETENV): Done.
MPRINT(MULTI):  ;
DEBUG:(CHECK_ONE_DEPEND): DS=adam.adae VARS=aeterm
DEBUG:(CHECK_ONE_DEPEND): DS=adam.adae VARS=aeterm
DEBUG:(CHECK_ONE_DEPEND): DS=adam.adae VARS=aterm
DEBUG:(CHECK_ONE_DEPEND): DS=adam.adae VARS=aterm
MPRINT(TAEISR):  ;
DEBUG:(CHECK_ONE_DEPEND): DS=adam.adae VARS=aedecod
DEBUG:(CHECK_ONE_DEPEND): DS=adam.adae VARS=aedecod
DEBUG:(CHECK_ONE_DEPEND): DS=adam.adae VARS=adecod
DEBUG:(CHECK_ONE_DEPEND): DS=adam.adae VARS=adecod
MPRINT(TAEISR):  ;
DEBUG:(CHECK_ONE_DEPEND): DS=adam.adae VARS=aehlt
DEBUG:(CHECK_ONE_DEPEND): DS=adam.adae VARS=aehlt
DEBUG:(CHECK_ONE_DEPEND): DS=adam.adae VARS=ahlt
DEBUG:(CHECK_ONE_DEPEND): DS=adam.adae VARS=ahlt
MPRINT(TAEISR):  ;
DEBUG:(CHECK_ONE_DEPEND): DS=adam.adae VARS=aesoc
DEBUG:(CHECK_ONE_DEPEND): DS=adam.adae VARS=aesoc
DEBUG:(CHECK_ONE_DEPEND): DS=adam.adae VARS=asoc
DEBUG:(CHECK_ONE_DEPEND): DS=adam.adae VARS=asoc
DEBUG:(CHECK_ONE_DEPEND): DS=adam.adae VARS=aebodsys
DEBUG:(CHECK_ONE_DEPEND): DS=adam.adae VARS=aebodsys
DEBUG:(CHECK_ONE_DEPEND): DS=adam.adae VARS=abodsys
DEBUG:(CHECK_ONE_DEPEND): DS=adam.adae VARS=abodsys
MPRINT(TAEISR):  ;
AETERM=ATERM


================================================================> Page 6 <================================================================


The SAS System

AEDECOD=ADECOD
AEHLT=AHLT
AESOC=ABODSYS
MPRINT(TAEISR):  ;
MPRINT(TAEISR):  ;
MPRINT(GETPOPMAP):   data populationMap;
MPRINT(GETPOPMAP):   length studyPopDef population $200;
MPRINT(GETPOPMAP):   studyPopDef="Safety";
MPRINT(GETPOPMAP):   population="SAF";
MPRINT(GETPOPMAP):   output;
MPRINT(GETPOPMAP):   studyPopDef="Safety Analysis Set";
MPRINT(GETPOPMAP):   population="SAF";
MPRINT(GETPOPMAP):   output;
MPRINT(GETPOPMAP):   studyPopDef="Full Analysis Set";
MPRINT(GETPOPMAP):   population="FAS";
MPRINT(GETPOPMAP):   output;
MPRINT(GETPOPMAP):   studyPopDef="Subjects who entered the Open-Label Treatment Period";
MPRINT(GETPOPMAP):   population="enterOL";
MPRINT(GETPOPMAP):   output;
MPRINT(GETPOPMAP):   run;

NOTE: The data set WORK.POPULATIONMAP has 4 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GETPOPMAP):   data populationMap;
MPRINT(GETPOPMAP):   length lcstudyPopDef $200;
MPRINT(GETPOPMAP):   set populationMap;
MPRINT(GETPOPMAP):   lcstudyPopDef = lowcase(studyPopDef);
MPRINT(GETPOPMAP):   run;

NOTE: There were 4 observations read from the data set WORK.POPULATIONMAP.
NOTE: The data set WORK.POPULATIONMAP has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GETPOPMAP):   proc sort data=populationMap;
MPRINT(GETPOPMAP):   by lcstudyPopDef;
MPRINT(GETPOPMAP):   run;

NOTE: There were 4 observations read from the data set WORK.POPULATIONMAP.
NOTE: The data set WORK.POPULATIONMAP has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(POPULATION):  ;
MPRINT(POPULATION):   data populationMap;
MPRINT(POPULATION):   set populationMap;
MPRINT(POPULATION):   lcstudyPopDef = lowcase(studyPopDef);
MPRINT(POPULATION):   put lcstudyPopDef=;
MPRINT(POPULATION):   run;
lcstudyPopDef=full analysis set


================================================================> Page 7 <================================================================


The SAS System

lcstudyPopDef=safety
lcstudyPopDef=safety analysis set
lcstudyPopDef=subjects who entered the open-label treatment period
NOTE: There were 4 observations read from the data set WORK.POPULATIONMAP.
NOTE: The data set WORK.POPULATIONMAP has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(POPULATION):   proc sort data=populationmap;
MPRINT(POPULATION):   by lcstudyPopDef;
MPRINT(POPULATION):  run;

NOTE: There were 4 observations read from the data set WORK.POPULATIONMAP.
NOTE: The data set WORK.POPULATIONMAP has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(POPULATION):   data pop1;
MPRINT(POPULATION):   length population studyPopDef lcstudyPopDef tabno_resolved $200;
MPRINT(POPULATION):   set repemeta.repeMETA;
MPRINT(POPULATION):   where lowcase(cats(sas_program)||'.sas') = strip(lowcase("taeisr.sas")) or lowcase(cats(sas_program) ) = strip(lowcase("taeisr.sas"));
MPRINT(POPULATION):   if missing(population) then population="";
MPRINT(POPULATION):   if not missing(population) then studyPopDef = population;
MPRINT(POPULATION):   else if not missing(analysis_set) then studyPopDef = analysis_set;
MPRINT(POPULATION):   if missing(studyPopDef) then studyPopDef=population;
MPRINT(POPULATION):   lcstudyPopDef = lowcase(studyPopDef);
MPRINT(POPULATION):   put @10 lcstudyPopDef=;
MPRINT(POPULATION):   tabno_resolved = tabno_resolved;
MPRINT(POPULATION):   run;

         lcstudyPopDef=safety
NOTE: There were 1 observations read from the data set REPEMETA.REPEMETA.
      WHERE (LOWCASE((CATS(sas_program)||'.sas'))='taeisr.sas') or (LOWCASE(CATS(sas_program))='taeisr.sas');
NOTE: The data set WORK.POP1 has 1 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(POPULATION):   proc sort data=pop1;
MPRINT(POPULATION):   by lcstudyPopDef;
MPRINT(POPULATION):   run;

NOTE: There were 1 observations read from the data set WORK.POP1.
NOTE: The data set WORK.POP1 has 1 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(POPULATION):   data pop2;
MPRINT(POPULATION):   merge pop1 (in=_a_ keep=lcstudyPopDef) populationmap ;
MPRINT(POPULATION):   by lcstudyPopDef;
MPRINT(POPULATION):   if _a_ and population ^= '' ;


================================================================> Page 8 <================================================================


The SAS System

MPRINT(POPULATION):   call symputx('_pop',strip(population));
MPRINT(POPULATION):   call symputx('population',strip(studyPopDef));
MPRINT(POPULATION):   run;

NOTE: There were 1 observations read from the data set WORK.POP1.
NOTE: There were 4 observations read from the data set WORK.POPULATIONMAP.
NOTE: The data set WORK.POP2 has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


_pop = SAF
population = Safety
adsl
MPRINT(DATASETSUSED):   data adsl;
MPRINT(DATASETSUSED):   set adam.adsl;
MPRINT(DATASETSUSED):   ;
MPRINT(DATASETSUSED):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.02 seconds

NOTE: There were 3684 observations read from the data set ADAM.ADSL.
NOTE: The data set WORK.ADSL has 3684 observations and 68 variables.

MPRINT(DATASETSUSED):   data adsl;
MPRINT(DATASETSUSED):   set adsl;
MPRINT(DATASETSUSED):   run;

NOTE: There were 3684 observations read from the data set WORK.ADSL.
NOTE: The data set WORK.ADSL has 3684 observations and 68 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.02 seconds


MPRINT(POP_SAF):  ;
MPRINT(POP_SAF):   data population;
MPRINT(POP_SAF):   set adsl;
MPRINT(POP_SAF):   where SAFFL='Y';
MPRINT(POP_SAF):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds

NOTE: There were 2576 observations read from the data set WORK.ADSL.
      WHERE SAFFL='Y';
NOTE: The data set WORK.POPULATION has 2576 observations and 68 variables.

MPRINT(POPULATION):  ;
MPRINT(POPULATION):   data Metapopulation (keep=filepath filetype item value);
MPRINT(POPULATION):   length filepath $1000 filetype $50 item $30 value $150;
MPRINT(POPULATION):   *set meta;
MPRINT(POPULATION):   filepath='population 1';
MPRINT(POPULATION):   filetype='population';


================================================================> Page 9 <================================================================


The SAS System

MPRINT(POPULATION):   item='shortpop';
MPRINT(POPULATION):   value="SAF";
MPRINT(POPULATION):   output;
MPRINT(POPULATION):   item='fullpop';
MPRINT(POPULATION):   value="Safety";
MPRINT(POPULATION):   output;
MPRINT(POPULATION):   item='N_pop';
MPRINT(POPULATION):   value="2576";
MPRINT(POPULATION):   output;
MPRINT(POPULATION):  ;
MPRINT(POPULATION):   run;

NOTE: The data set WORK.METAPOPULATION has 3 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(POPULATION):   *- Dataset population is created as a subset of adam.adsl for the population specified in LoT sheet or by parameter _POP= -*;
MPRINT(POPULATION):   data population;
MPRINT(POPULATION):   set population;
MPRINT(POPULATION):   run;

NOTE: There were 2576 observations read from the data set WORK.POPULATION.
NOTE: The data set WORK.POPULATION has 2576 observations and 68 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


MPRINT(TAEISR):  ;
MPRINT(TAEISR):   data population;
MPRINT(TAEISR):   set population(keep
MPRINT(TAEISR):  =SAFFL STUDYID ARM USUBJID startdate lastdate cumstud cumarmcd subjroutes);
MPRINT(TAEISR):   run;

NOTE: There were 2576 observations read from the data set WORK.POPULATION.
NOTE: The data set WORK.POPULATION has 2576 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.11 seconds


MPRINT(TAEISR):   proc sql noprint;
MPRINT(TAEISR):   create table population_d as select distinct studyid, usubjid from population group by studyid, usubjid, startdate having startdate=max(startdate) ;
NOTE: Table WORK.POPULATION_D created, with 2576 rows and 2 columns.

MPRINT(TAEISR):   select max(trtn) into :n_trt trimmed from (select ARM, monotonic() as trtn from (select distinct ARM from population)) ;
n_trt = 57
MPRINT(TAEISR):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


MPRINT(TAEISR):   *- check for additional optional depedencies - JMB 2022-12-06 -*;
MPRINT(TAEISR):  ;
NMISS_DEPENDENCIES=0


================================================================> Page 10 <================================================================


The SAS System

MPRINT(TAEISR):   proc sort data=adam.adae(keep=studyid usubjid trtemfl aeser aetoxgr aecat ABODSYS ADECOD AHLT ATERM aereldy aereltm aesdth aerel aerel01 aeacn lastdate startdate) out=adae00;
MPRINT(TAEISR):   by studyid usubjid ;
MPRINT(TAEISR):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 30173 observations read from the data set ADAM.ADAE.
NOTE: The data set WORK.ADAE00 has 30173 observations and 18 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds


MPRINT(UNI_VLENGTH):   *- Harmonize length of character variables in Data= datasets According to the length found in Ref= datasests (if specified) -*;
MPRINT(UNI_VLENGTH):   proc sql noprint;
MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated by " " from (select distinct upcase(LIBNAME) as
LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.ADAE00" "WORK.POPULATION_D" )) then LENGTH else .
end ) as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.ADAE00" "WORK.ADAE00" "WORK.POPULATION_D" ) group by upcase(name)) group by upcase(name), upcase(type)
having sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK.ADAE00" and TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.ADAE00" "WORK.POPULATION_D" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(UNI_VLENGTH):   alter table WORK.ADAE00 modify ABODSYS character(200), ADECOD character(200), AEACN character(17), AECAT character(33), AEREL character(16), AEREL01 character(200), AESDTH
character(1), AESER character(1), AETOXGR character(16), AHLT character(200), ATERM character(200), STUDYID character(13), TRTEMFL character(1), USUBJID character(28) ;
NOTE: Table WORK.ADAE00 has been modified, with 18 columns.
MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated by " " from (select distinct upcase(LIBNAME) as
LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.ADAE00" "WORK.POPULATION_D" )) then LENGTH else .
end ) as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.POPULATION_D" "WORK.ADAE00" "WORK.POPULATION_D" ) group by upcase(name)) group by upcase(name),
upcase(type) having sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK.POPULATION_D" and TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.ADAE00" "WORK.POPULATION_D" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(UNI_VLENGTH):   alter table WORK.POPULATION_D modify STUDYID character(13), USUBJID character(28) ;
NOTE: Table WORK.POPULATION_D has been modified, with 2 columns.
MPRINT(UNI_VLENGTH):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.16 seconds
      cpu time            0.17 seconds


MPRINT(TAEISR):  ;
MPRINT(TAEISR):   **data manipulation start**;
MPRINT(TAEISR):   data ae0;
MPRINT(TAEISR):   merge adae00 (in=a) population_d (in=b);
MPRINT(TAEISR):   by studyid usubjid ;
MPRINT(TAEISR):   if a and b;
MPRINT(TAEISR):   run;
NOTE: There were 30173 observations read from the data set WORK.ADAE00.
NOTE: There were 2576 observations read from the data set WORK.POPULATION_D.
NOTE: The data set WORK.AE0 has 15477 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds


N_TRT=57 N_CUMTRT=0
TABLE_BY=ARM
MPRINT(TAEISR):   ***-- Create table by Treatment Arm --***;
MPRINT(TAEISR):   **create treatment column containing trtn=1 : last extraction only ;


================================================================> Page 11 <================================================================


The SAS System

MPRINT(DATEXCOL):   **if no list is given but only levels then create list ;
MPRINT(DATEXCOL):   ** with all startdates / lastdates present in dataset (up to number of &datelevels ) ;
MPRINT(DATEXCOL):   **excluding lastdates where another lastdate exists that is first lastdate +1 ;
MPRINT(DATEXCOL):   proc sql noprint;
MPRINT(DATEXCOL):   create table _distdates1 as select distinct startdate , lastdate from ae0 ;
NOTE: Table WORK._DISTDATES1 created, with 1 rows and 2 columns.

MPRINT(DATEXCOL):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(DATEXCOL):   proc sql noprint;
MPRINT(DATEXCOL):   create table _distdates2 as select distinct a.startdate , a.lastdate , b.lastdate as _fudate from _distdates1 a left join _distdates1 b on a.lastdate + 1 =b.lastdate ;
NOTE: Table WORK._DISTDATES2 created, with 1 rows and 3 columns.

MPRINT(DATEXCOL):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(DATEXCOL):   data _distdates3 ;
MPRINT(DATEXCOL):   set _distdates2 ;
MPRINT(DATEXCOL):   if _fudate ne . then do;
MPRINT(DATEXCOL):   if lastdate + 1 = _fudate then lastdate = . ;
MPRINT(DATEXCOL):   end;
MPRINT(DATEXCOL):   if startdate ne . then do ;
MPRINT(DATEXCOL):   date = startdate ;
MPRINT(DATEXCOL):   output;
MPRINT(DATEXCOL):   end;
MPRINT(DATEXCOL):   if lastdate ne . then do ;
MPRINT(DATEXCOL):   date = lastdate ;
MPRINT(DATEXCOL):   output;
MPRINT(DATEXCOL):   end;
MPRINT(DATEXCOL):   run;

NOTE: There were 1 observations read from the data set WORK._DISTDATES2.
NOTE: The data set WORK._DISTDATES3 has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(DATEXCOL):   proc sql noprint;
MPRINT(DATEXCOL):   create table _distdates4 as select distinct date from _distdates3;
NOTE: Table WORK._DISTDATES4 created, with 1 rows and 1 columns.

MPRINT(DATEXCOL):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(DATEXCOL):   proc sort data=_distdates4 ;
MPRINT(DATEXCOL):   by descending date ;
MPRINT(DATEXCOL):   run;


================================================================> Page 12 <================================================================


The SAS System


NOTE: There were 1 observations read from the data set WORK._DISTDATES4.
NOTE: The data set WORK._DISTDATES4 has 1 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(DATEXCOL):   data _distdates4 ;
MPRINT(DATEXCOL):   set _distdates4 ;
MPRINT(DATEXCOL):   by descending date ;
MPRINT(DATEXCOL):   if _n_ <= 1 ;
MPRINT(DATEXCOL):   run;

NOTE: There were 1 observations read from the data set WORK._DISTDATES4.
NOTE: The data set WORK._DISTDATES4 has 1 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(DATEXCOL):   proc sort data=_distdates4 ;
MPRINT(DATEXCOL):   by descending date ;
MPRINT(DATEXCOL):   run;

NOTE: There were 1 observations read from the data set WORK._DISTDATES4.
NOTE: The data set WORK._DISTDATES4 has 1 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(DATEXCOL):   data _null_ ;
MPRINT(DATEXCOL):   set _distdates4 end=last;
MPRINT(DATEXCOL):   length _dlist $ 200 ;
MPRINT(DATEXCOL):   retain _dlist ;
MPRINT(DATEXCOL):   _dlist = catx(" " , _dlist , "'" !! put(date,date9.) !! "'d" ) ;
MPRINT(DATEXCOL):   if last then call symputx('dlist' , _dlist ) ;
MPRINT(DATEXCOL):   run;

NOTE: There were 1 observations read from the data set WORK._DISTDATES4.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(DATEXCOL):   data ae0d_ ;
MPRINT(DATEXCOL):   set ae0 ;
MPRINT(DATEXCOL):   length trt $ 200 ;
MPRINT(DATEXCOL):   if startdate <= '03JUN2023'd <= lastdate then do ;
MPRINT(DATEXCOL):   trt = "TOTAL~Extract: " !! put( '03JUN2023'd , date9.) ;
MPRINT(DATEXCOL):   trtn = 1 ;
MPRINT(DATEXCOL):   output;
MPRINT(DATEXCOL):   end;
MPRINT(DATEXCOL):   run;

NOTE: There were 15477 observations read from the data set WORK.AE0.
NOTE: The data set WORK.AE0D_ has 15477 observations and 20 variables.


================================================================> Page 13 <================================================================


The SAS System

NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.02 seconds


MPRINT(TAEISR):  ;
MPRINT(DATEXCOL):   **if no list is given but only levels then create list ;
MPRINT(DATEXCOL):   ** with all startdates / lastdates present in dataset (up to number of &datelevels ) ;
MPRINT(DATEXCOL):   **excluding lastdates where another lastdate exists that is first lastdate +1 ;
MPRINT(DATEXCOL):   proc sql noprint;
MPRINT(DATEXCOL):   create table _distdates1 as select distinct startdate , lastdate from population ;
NOTE: Table WORK._DISTDATES1 created, with 1 rows and 2 columns.

MPRINT(DATEXCOL):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(DATEXCOL):   proc sql noprint;
MPRINT(DATEXCOL):   create table _distdates2 as select distinct a.startdate , a.lastdate , b.lastdate as _fudate from _distdates1 a left join _distdates1 b on a.lastdate + 1 =b.lastdate ;
NOTE: Table WORK._DISTDATES2 created, with 1 rows and 3 columns.

MPRINT(DATEXCOL):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(DATEXCOL):   data _distdates3 ;
MPRINT(DATEXCOL):   set _distdates2 ;
MPRINT(DATEXCOL):   if _fudate ne . then do;
MPRINT(DATEXCOL):   if lastdate + 1 = _fudate then lastdate = . ;
MPRINT(DATEXCOL):   end;
MPRINT(DATEXCOL):   if startdate ne . then do ;
MPRINT(DATEXCOL):   date = startdate ;
MPRINT(DATEXCOL):   output;
MPRINT(DATEXCOL):   end;
MPRINT(DATEXCOL):   if lastdate ne . then do ;
MPRINT(DATEXCOL):   date = lastdate ;
MPRINT(DATEXCOL):   output;
MPRINT(DATEXCOL):   end;
MPRINT(DATEXCOL):   run;

NOTE: There were 1 observations read from the data set WORK._DISTDATES2.
NOTE: The data set WORK._DISTDATES3 has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(DATEXCOL):   proc sql noprint;
MPRINT(DATEXCOL):   create table _distdates4 as select distinct date from _distdates3;
NOTE: Table WORK._DISTDATES4 created, with 1 rows and 1 columns.

MPRINT(DATEXCOL):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds


================================================================> Page 14 <================================================================


The SAS System

      cpu time            0.00 seconds


MPRINT(DATEXCOL):   proc sort data=_distdates4 ;
MPRINT(DATEXCOL):   by descending date ;
MPRINT(DATEXCOL):   run;

NOTE: There were 1 observations read from the data set WORK._DISTDATES4.
NOTE: The data set WORK._DISTDATES4 has 1 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(DATEXCOL):   data _distdates4 ;
MPRINT(DATEXCOL):   set _distdates4 ;
MPRINT(DATEXCOL):   by descending date ;
MPRINT(DATEXCOL):   if _n_ <= 1 ;
MPRINT(DATEXCOL):   run;

NOTE: There were 1 observations read from the data set WORK._DISTDATES4.
NOTE: The data set WORK._DISTDATES4 has 1 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(DATEXCOL):   proc sort data=_distdates4 ;
MPRINT(DATEXCOL):   by descending date ;
MPRINT(DATEXCOL):   run;

NOTE: There were 1 observations read from the data set WORK._DISTDATES4.
NOTE: The data set WORK._DISTDATES4 has 1 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(DATEXCOL):   data _null_ ;
MPRINT(DATEXCOL):   set _distdates4 end=last;
MPRINT(DATEXCOL):   length _dlist $ 200 ;
MPRINT(DATEXCOL):   retain _dlist ;
MPRINT(DATEXCOL):   _dlist = catx(" " , _dlist , "'" !! put(date,date9.) !! "'d" ) ;
MPRINT(DATEXCOL):   if last then call symputx('dlist' , _dlist ) ;
MPRINT(DATEXCOL):   run;

NOTE: There were 1 observations read from the data set WORK._DISTDATES4.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(DATEXCOL):   data pop_ ;
MPRINT(DATEXCOL):   set population ;
MPRINT(DATEXCOL):   length trt $ 200 ;
MPRINT(DATEXCOL):   if startdate <= '03JUN2023'd <= lastdate then do ;
MPRINT(DATEXCOL):   trt = "TOTAL~Extract: " !! put( '03JUN2023'd , date9.) ;
MPRINT(DATEXCOL):   trtn = 1 ;


================================================================> Page 15 <================================================================


The SAS System

MPRINT(DATEXCOL):   output;
MPRINT(DATEXCOL):   end;
MPRINT(DATEXCOL):   run;

NOTE: There were 2576 observations read from the data set WORK.POPULATION.
NOTE: The data set WORK.POP_ has 2576 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(TAEISR):  ;
MPRINT(TAEISR):   ** re-derive trtn, trt according to ARM ;
MPRINT(TAEISR):   proc sql noprint;
MPRINT(TAEISR):   create table trt as select trt length=200, monotonic() as trtn, ARM from (select distinct ARM, coalesce(ARM, "Missing") as trt from pop_) UNION select distinct "Overall" as trt, 900
as trtn, ARM from pop_ order by trtn, trt, ARM ;
NOTE: Table WORK.TRT created, with 114 rows and 3 columns.

MPRINT(TAEISR):   create table pop as select a.*, b.trtn, b.trt from pop_(drop=trtn trt) as a left join trt as b on a.ARM = b.ARM order by studyid, usubjid ;
NOTE: Table WORK.POP created, with 5152 rows and 11 columns.

MPRINT(TAEISR):   create table ae0d as select a.*, coalesce(b.trtn, 1000) as trtn, coalesce(b.trt, "MISSING") as trt from ae0d_(drop=trtn trt) as a left join pop as b on a.studyid=b.studyid and
a.usubjid=b.usubjid order by studyid, usubjid ;
NOTE: Table WORK.AE0D created, with 30954 rows and 20 columns.

MPRINT(TAEISR):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.09 seconds
      cpu time            0.12 seconds


MPRINT(TAEISR):   proc sql noprint;
MPRINT(TAEISR):   create table bigN as select distinct trtn, trt, count(distinct usubjid) as bigN from pop group by trtn union select distinct trtn, trt, . as bigN from ae0d where trt not in (select
distinct trt from pop) ;
NOTE: The query requires remerging summary statistics back with the original data.
NOTE: Table WORK.BIGN created, with 58 rows and 3 columns.

MPRINT(TAEISR):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds


MPRINT(TAEISR):   proc sort data=ae0d;
MPRINT(TAEISR):   by STUDYID USUBJID ATERM ADECOD ABODSYS AHLT AECAT TRTEMFL AERELDY AERELTM AESER AETOXGR AEREL AEREL01 AEACN AESDTH lastdate startdate trtn trt;
MPRINT(TAEISR):   run;

NOTE: There were 30954 observations read from the data set WORK.AE0D.
NOTE: The data set WORK.AE0D has 30954 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.11 seconds
      cpu time            0.11 seconds


MPRINT(TAEISR):   data ae0d_uniq ae0d_dups;
MPRINT(TAEISR):   set ae0d;
MPRINT(TAEISR):   by STUDYID USUBJID ATERM ADECOD ABODSYS AHLT AECAT TRTEMFL AERELDY AERELTM AESER AETOXGR AEREL AEREL01 AEACN AESDTH lastdate startdate trtn trt;
MPRINT(TAEISR):   if last.trt then output ae0d_uniq;


================================================================> Page 16 <================================================================


The SAS System

MPRINT(TAEISR):   if (not first.trt) or (not last.trt) then output ae0d_dups;
MPRINT(TAEISR):   run;

NOTE: There were 30954 observations read from the data set WORK.AE0D.
NOTE: The data set WORK.AE0D_UNIQ has 28584 observations and 20 variables.
NOTE: The data set WORK.AE0D_DUPS has 3906 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds


WARNING: Dropped 3906 duplicate observations (see dataset WORK.AE0D_DUPS).
MPRINT(TAEISR):   ;
MPRINT(TAEISR):   *- Source Study(ies) last updated -*;
MPRINT(TAEISR):   proc sql noprint;
MPRINT(TAEISR):   create table ae_studies as select distinct upcase(study) as studyid, max(modate) as modate format = E8601DT. from sdtm.refresh where upcase(memname) = "AE" group by studyid ;
NOTE: The query requires remerging summary statistics back with the original data.
NOTE: Table WORK.AE_STUDIES created, with 27 rows and 2 columns.

MPRINT(TAEISR):   select distinct cats(studyid)||" ("||case when modate > .z then put(datepart(modate), E8601DA.) else "UNK" end||")" into :source_studies separated by ', ' from ae_studies;
SOURCE_STUDIES=ARGX-113-1501 (2020-10-02), ARGX-113-1603 (2022-07-26), ARGX-113-1701 (2020-11-25), ARGX-113-1702 (2018-12-03), ARGX-113-1704 (2021-08-27), ARGX-113-1705 (2023-04-14), ARGX-113-1801
(2022-11-28), ARGX-113-1802 (2023-06-01), ARGX-113-1803 (2023-06-01), ARGX-113-1901 (2022-04-13), ARGX-113-1902 (2023-05-08), ARGX-113-1904 (2023-05-19), ARGX-113-1905 (2023-05-15), ARGX-113-1907
(2022-04-13), ARGX-113-2001 (2022-07-05), ARGX-113-2002 (2023-06-02), ARGX-113-2003 (2023-05-10), ARGX-113-2004 (2023-06-01), ARGX-113-2005 (2023-05-08), ARGX-113-2006 (2023-05-10), ARGX-113-2007
(2023-05-22), ARGX-113-2008 (2023-05-10), ARGX-113-2009 (2023-05-30), ARGX-113-2102 (2023-04-13), ARGX-113-2104 (2023-03-30), ARGX-113-Z005 (2022-06-15), ARGX-113-Z006 (2022-06-15)
MPRINT(TAEISR):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds


MPRINT(TAEISR):   proc format;
MPRINT(TAEISR):   invalue TOXGR " " = . "MILD", "Mild", "mild" = 1 "MODERATE", "Moderate", "moderate" = 2 "SEVERE", "Severe", "severe" = 3 "LIFE-THREATENING", "Life-Threatening", "life-threatening",
"LIFE THREATENING", "Life Threatening", "life threatening" = 4 "FATAL", "Fatal", "fatal" = 5 OTHER = [BEST12.] ;
NOTE: Informat TOXGR is already on the library WORK.FORMATS.
NOTE: Informat TOXGR has been output.
MPRINT(TAEISR):   run;

NOTE: PROCEDURE FORMAT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(TAEISR):   data ae1a;
MPRINT(TAEISR):   length ADECOD $250;
MPRINT(TAEISR):   set ae0d_uniq;
MPRINT(TAEISR):   where AHLT = 'Injection site reactions' or ( AHLT="" and (
prxmatch('/(RE?ACTION|HEMATOMA|BRUIS(E|ING)|EDEMA|ER[iY]TH?EMA|EXANTHEMA|HYPEREMIA|INFLAMM?ATION|REDNESS|SWELLING|ITCH(Y|INESS|ING)'
||'|SORE(NESS)?|PARESTHESIA|PINCHING|RASH|WHEAL|TENDERNESS|DISCOMFORT)/i', ATERM)>0 and prxmatch('/(THIGH|ABDOMEN|ABDOMINAL'||')/i', ATERM)>0 and ( prxmatch('/(POST|AFTER
).*(ADMINISTRATION|INJECTION|INFUSION)/i', ATERM)>0 or (prxmatch("/(ADMINISTRATION|INJECTION"||")/i", ATERM)>0 and prxmatch("/(site|place|area|region)/i", ATERM)>0 ) ) ) ) ;
MPRINT(TAEISR):   if 0 then aecat = put(' ', $200.);
MPRINT(TAEISR):   if AHLT = ' ' then do;
MPRINT(TAEISR):   AHLT = '*** Not Coded';
MPRINT(TAEISR):   ADECOD = catx(' ', '*** Not Coded:', ATERM);
MPRINT(TAEISR):   end;
MPRINT(TAEISR):   ord=0;
MPRINT(TAEISR):   output;
MPRINT(OUTPUT):   if trtemfl = 'Y' then do;
MPRINT(OUTPUT):   ord=1;


================================================================> Page 17 <================================================================


The SAS System

MPRINT(OUTPUT):   output;
MPRINT(OUTPUT):   end;
MPRINT(TAEISR):  ;
MPRINT(OUTPUT):   if trtemfl = 'Y' and aeser='Y' then do;
MPRINT(OUTPUT):   ord=2;
MPRINT(OUTPUT):   output;
MPRINT(OUTPUT):   end;
MPRINT(TAEISR):  ;
MPRINT(OUTPUT):   if trtemfl = 'Y' and input(aetoxgr, TOXGR.)>=3 then do;
MPRINT(OUTPUT):   ord=3;
MPRINT(OUTPUT):   output;
MPRINT(OUTPUT):   end;
MPRINT(TAEISR):  ;
MPRINT(TAEISR):  *TO BE CHECKED - IRR AEs!!!;
MPRINT(OUTPUT):   if trtemfl = 'Y' and aesdth='Y' then do;
MPRINT(OUTPUT):   ord=6;
MPRINT(OUTPUT):   output;
MPRINT(OUTPUT):   end;
MPRINT(TAEISR):  ;
MPRINT(OUTPUT):   if trtemfl = 'Y' and aerel='RELATED' then do;
MPRINT(OUTPUT):   ord=7;
MPRINT(OUTPUT):   output;
MPRINT(OUTPUT):   end;
MPRINT(TAEISR):  ;
MPRINT(OUTPUT):   if trtemfl = 'Y' and AEREL01 not in ('' 'N') then do;
MPRINT(OUTPUT):   ord=8;
MPRINT(OUTPUT):   output;
MPRINT(OUTPUT):   end;
MPRINT(TAEISR):  ;
MPRINT(OUTPUT):   if trtemfl = 'Y' and aeser='Y' and aerel='RELATED' then do;
MPRINT(OUTPUT):   ord=9;
MPRINT(OUTPUT):   output;
MPRINT(OUTPUT):   end;
MPRINT(TAEISR):  ;
MPRINT(OUTPUT):   if trtemfl = 'Y' and aeacn='DRUG WITHDRAWN' then do;
MPRINT(OUTPUT):   ord=10;
MPRINT(OUTPUT):   output;
MPRINT(OUTPUT):   end;
MPRINT(TAEISR):  ;
MPRINT(OUTPUT):   if trtemfl = 'Y' then do;
MPRINT(OUTPUT):   ord=100;
MPRINT(OUTPUT):   output;
MPRINT(OUTPUT):   end;
MPRINT(TAEISR):  ;
MPRINT(TAEISR):   drop aerel: aeacn: aeser: aesdth aecat;
MPRINT(TAEISR):   run;

NOTE: Invalid argument to function INPUT at line 1718 column 21.
ADECOD=Injection site erythema STUDYID=ARGX-113-2007 USUBJID=ARGX-113-2007-0010161011 ATERM=INJECTION SITE ERYTHEMA ABODSYS=General disorders and administration site conditions
AHLT=Injection site reactions AECAT=NON-AESI TRTEMFL=Y AERELDY=1 AERELTM=0:02:00 AESER=N AETOXGR=Grade 1: Mild AEREL=NOT RELATED AEREL01=Related AEACN=NOT APPLICABLE AESDTH=  lastdate=03JUN2023
startdate=03JUN2023 trtn=7 trt=DUMMY Treatment A ord=100 _ERROR_=1 _N_=2257
NOTE: Invalid argument to function INPUT at line 1718 column 21.
ADECOD=Injection site erythema STUDYID=ARGX-113-2007 USUBJID=ARGX-113-2007-0010161011 ATERM=INJECTION SITE ERYTHEMA ABODSYS=General disorders and administration site conditions
AHLT=Injection site reactions AECAT=NON-AESI TRTEMFL=Y AERELDY=1 AERELTM=0:02:00 AESER=N AETOXGR=Grade 1: Mild AEREL=NOT RELATED AEREL01=Related AEACN=NOT APPLICABLE AESDTH=  lastdate=03JUN2023
startdate=03JUN2023 trtn=900 trt=Overall ord=100 _ERROR_=1 _N_=2258
NOTE: Mathematical operations could not be performed at the following places. The results of the operations have been set to missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      2 at 1718:21


================================================================> Page 18 <================================================================


The SAS System

NOTE: There were 2328 observations read from the data set WORK.AE0D_UNIQ.
      WHERE (AHLT='Injection site reactions') or ((AHLT=' ') and
      (PRXMATCH(('/(RE?ACTION|HEMATOMA|BRUIS(E|ING)|EDEMA|ER[iY]TH?EMA|EXANTHEMA|HYPEREMIA|INFLAMM?ATION|REDNESS|SWELLING|ITCH(Y|INESS|ING)'||'|SORE(NESS)?|PARESTHESIA|PINCHING|RASH|WHEAL|TENDERNESS|D
      ISCOMFORT)/i'), ATERM)>0) and (PRXMATCH(('/(THIGH|ABDOMEN|ABDOMINAL'||')/i'), ATERM)>0) and ((PRXMATCH('/(POST|AFTER ).*(ADMINISTRATION|INJECTION|INFUSION)/i', ATERM)>0) or
      ((PRXMATCH(('/(ADMINISTRATION|INJECTION'||')/i'), ATERM)>0) and (PRXMATCH('/(site|place|area|region)/i', ATERM)>0))));
NOTE: The data set WORK.AE1A has 9716 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.05 seconds


MPRINT(TAEISR):   data ae1;
MPRINT(TAEISR):   set ae1a;
MPRINT(TAEISR):   if ord = 100 then aelabel = '   ' || ADECOD;
MPRINT(TAEISR):   else aelabel = ' ';
MPRINT(TAEISR):   run;

NOTE: There were 9716 observations read from the data set WORK.AE1A.
NOTE: The data set WORK.AE1 has 9716 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.02 seconds


MPRINT(TAEISR):   proc sql noprint;
MPRINT(TAEISR):   create table counts as select distinct count(distinct usubjid) as count, ord, aelabel, trt, trtn from ae1 group by ord, aelabel, trtn, trt order by ord, aelabel, trtn, trt ;
NOTE: Table WORK.COUNTS created, with 202 rows and 5 columns.

MPRINT(TAEISR):   create table aelabels as select distinct ord, aelabel from counts where ord = 100;
NOTE: Table WORK.AELABELS created, with 27 rows and 2 columns.

MPRINT(TAEISR):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds


MPRINT(TAEISR):   proc sql noprint;
MPRINT(TAEISR):   create table events as select distinct count(usubjid) as event, ord, aelabel, trt, trtn from ae1 group by ord, aelabel, trtn, trt order by ord, aelabel, trtn, trt ;
NOTE: Table WORK.EVENTS created, with 202 rows and 5 columns.

MPRINT(TAEISR):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds


MPRINT(TAEISR):   data merged0;
MPRINT(TAEISR):   merge counts events;
MPRINT(TAEISR):   by ord aelabel trtn trt;
MPRINT(TAEISR):   run;

NOTE: There were 202 observations read from the data set WORK.COUNTS.
NOTE: There were 202 observations read from the data set WORK.EVENTS.
NOTE: The data set WORK.MERGED0 has 202 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


================================================================> Page 19 <================================================================


The SAS System



MPRINT(TAEISR):   proc sort data=merged0 out=merged0_s;
MPRINT(TAEISR):   by trtn trt;
MPRINT(TAEISR):   run;

NOTE: There were 202 observations read from the data set WORK.MERGED0.
NOTE: The data set WORK.MERGED0_S has 202 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(TAEISR):   proc sql noprint;
MPRINT(TAEISR):   select max(ceil(log10(max(1,max(event)))),3) into :dec from merged0_s;
MPRINT(TAEISR):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(TAEISR):   option msglevel=I;
MPRINT(TAEISR):   data merged;
MPRINT(TAEISR):   length value1 value2 $200.;
MPRINT(TAEISR):   merge merged0_s (in=a) bigN (keep=trtn trt bigN rename=(bigN=denom)) ;
MPRINT(TAEISR):   by trtn trt;
MPRINT(TAEISR):   if a;
MPRINT(TAEISR):   if ord ne 0 then do;
MPRINT(TAEISR):   if denom > .z then value1=put(count, 4.)||' ('||put((count/denom)*100, 5.1)||')';
MPRINT(TAEISR):   else value1=put(count, 4.)||' (   - )';
MPRINT(TAEISR):   value2=put(event, 4.);
MPRINT(TAEISR):   end;
MPRINT(TAEISR):   else do;
MPRINT(TAEISR):   value1=put(count, 4.);
MPRINT(TAEISR):   value2='-';
MPRINT(TAEISR):   end;
MPRINT(TAEISR):   drop count event;
MPRINT(TAEISR):   run;

NOTE: There were 202 observations read from the data set WORK.MERGED0_S.
NOTE: There were 58 observations read from the data set WORK.BIGN.
NOTE: The data set WORK.MERGED has 202 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(TAEISR):   option msglevel=N;
MPRINT(TAEISR):   *- for consistency checks -*;
MPRINT(TAEISR):   proc freq data=merged0_s;
MPRINT(TAEISR):   table trtn * trt / list missing;
MPRINT(TAEISR):   run;

NOTE: There were 202 observations read from the data set WORK.MERGED0_S.
NOTE: The PROCEDURE FREQ printed page 4.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


================================================================> Page 20 <================================================================


The SAS System



MPRINT(TAEISR):   proc freq data=bigN;
MPRINT(TAEISR):   table trtn * trt / list missing;
MPRINT(TAEISR):   run;

NOTE: There were 58 observations read from the data set WORK.BIGN.
NOTE: The PROCEDURE FREQ printed pages 5-6.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(TAEISR):   proc sql noprint;
MPRINT(TAEISR):   select distinct trtn into :trtn separated by ',' from bigN order by trtn;
MPRINT(TAEISR):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(TAEISR):   data dummy0;
MPRINT(TAEISR):   do trtn=1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,900;
MPRINT(TAEISR):   length label $200.;
MPRINT(TAEISR):   ord=0;
MPRINT(TAEISR):   label='Overall Injection Site Reactions';
MPRINT(TAEISR):   output;
MPRINT(TAEISR):   ord=1;
MPRINT(TAEISR):   label='>=1 TEAE';
MPRINT(TAEISR):   output;
MPRINT(TAEISR):   ord=2;
MPRINT(TAEISR):   label='>=1 Serious TEAE';
MPRINT(TAEISR):   output;
MPRINT(TAEISR):   ord=3;
MPRINT(TAEISR):   label='>=1 TEAE of CTCAE severity grade 3 or higher';
MPRINT(TAEISR):   output;
MPRINT(TAEISR):   ord=6;
MPRINT(TAEISR):   label='>=1 Fatal TEAE';
MPRINT(TAEISR):   output;
MPRINT(TAEISR):   ord=7;
MPRINT(TAEISR):   label='>=1 Treatment-related TEAE according to PI';
MPRINT(TAEISR):   output;
MPRINT(TAEISR):   ord=8;
MPRINT(TAEISR):   label='>=1 Procedure-related TEAE';
MPRINT(TAEISR):   output;
MPRINT(TAEISR):   ord=9;
MPRINT(TAEISR):   label='>=1 Serious treatment-related TEAE';
MPRINT(TAEISR):   output;
MPRINT(TAEISR):   ord=10;
MPRINT(TAEISR):   label='>=1 TEAE for which the study drug was discontinued';
MPRINT(TAEISR):   output;
MPRINT(TAEISR):   ord=99;
MPRINT(TAEISR):   label='TEAE Preferred Terms:';
MPRINT(TAEISR):   output;
MPRINT(TAEISR):   end;
MPRINT(TAEISR):   run;

NOTE: The data set WORK.DUMMY0 has 580 observations and 3 variables.


================================================================> Page 21 <================================================================


The SAS System

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(TAEISR):   data dummy1;
MPRINT(TAEISR):   set aelabels;
MPRINT(TAEISR):   label = aelabel;
MPRINT(TAEISR):   do trtn=1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,900;
MPRINT(TAEISR):   output;
MPRINT(TAEISR):   end;
MPRINT(TAEISR):   run;

NOTE: There were 27 observations read from the data set WORK.AELABELS.
NOTE: The data set WORK.DUMMY1 has 1566 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(UNI_VLENGTH):   *- Harmonize length of character variables in Data= datasets According to the length found in Ref= datasests (if specified) -*;
MPRINT(UNI_VLENGTH):   proc sql noprint;
MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated by " " from (select distinct upcase(LIBNAME) as
LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.DUMMY0" "WORK.DUMMY1" )) then LENGTH else . end )
as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.DUMMY0" "WORK.DUMMY0" "WORK.DUMMY1" ) group by upcase(name)) group by upcase(name), upcase(type) having
sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK.DUMMY0" and TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.DUMMY0" "WORK.DUMMY1" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(UNI_VLENGTH):   alter table WORK.DUMMY0 modify LABEL character(253) ;
NOTE: Table WORK.DUMMY0 has been modified, with 3 columns.
MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated by " " from (select distinct upcase(LIBNAME) as
LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.DUMMY0" "WORK.DUMMY1" )) then LENGTH else . end )
as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.DUMMY1" "WORK.DUMMY0" "WORK.DUMMY1" ) group by upcase(name)) group by upcase(name), upcase(type) having
sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK.DUMMY1" and TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.DUMMY0" "WORK.DUMMY1" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(UNI_VLENGTH):   alter table WORK.DUMMY1 modify AELABEL character(253), LABEL character(253) ;
NOTE: Table WORK.DUMMY1 has been modified, with 4 columns.
MPRINT(UNI_VLENGTH):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.12 seconds
      cpu time            0.13 seconds


MPRINT(TAEISR):  ;
MPRINT(TAEISR):   data dummy;
MPRINT(TAEISR):   set dummy0 dummy1 ;
MPRINT(TAEISR):   run;

NOTE: There were 580 observations read from the data set WORK.DUMMY0.
NOTE: There were 1566 observations read from the data set WORK.DUMMY1.
NOTE: The data set WORK.DUMMY has 2146 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds



================================================================> Page 22 <================================================================


The SAS System


MPRINT(TAEISR):   proc sort data=dummy out=dummy_s;
MPRINT(TAEISR):   by trtn ord aelabel;
MPRINT(TAEISR):   run;

NOTE: There were 2146 observations read from the data set WORK.DUMMY.
NOTE: The data set WORK.DUMMY_S has 2146 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(TAEISR):   proc sort data=merged out=merged_s;
MPRINT(TAEISR):   by trtn ord aelabel;
MPRINT(TAEISR):   run;

NOTE: There were 202 observations read from the data set WORK.MERGED.
NOTE: The data set WORK.MERGED_S has 202 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(TAEISR):   data tab1;
MPRINT(TAEISR):   merge dummy_s merged_s ;
MPRINT(TAEISR):   by trtn ord aelabel;
MPRINT(TAEISR):   drop trt;
MPRINT(TAEISR):   run;

NOTE: There were 2146 observations read from the data set WORK.DUMMY_S.
NOTE: There were 202 observations read from the data set WORK.MERGED_S.
NOTE: The data set WORK.TAB1 has 2146 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(TAEISR):   data tab2;
MPRINT(TAEISR):   merge tab1 bigN;
MPRINT(TAEISR):   by trtn;
MPRINT(TAEISR):   run;

NOTE: There were 2146 observations read from the data set WORK.TAB1.
NOTE: There were 58 observations read from the data set WORK.BIGN.
NOTE: The data set WORK.TAB2 has 2146 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(TAEISR):   proc sort data=tab2 out=tab2_s;
MPRINT(TAEISR):   by trtn ord;
MPRINT(TAEISR):   run;

NOTE: There were 2146 observations read from the data set WORK.TAB2.
NOTE: The data set WORK.TAB2_S has 2146 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds


================================================================> Page 23 <================================================================


The SAS System

      cpu time            0.00 seconds


MPRINT(TAEISR):   data tab3;
MPRINT(TAEISR):   set tab2_s;
MPRINT(TAEISR):   array blanks {*} $200 value1 value2;
MPRINT(TAEISR):   if ord ne 99 then do i=1 to dim(blanks);
MPRINT(TAEISR):   if blanks(i)='' then blanks(i)='  0';
MPRINT(TAEISR):   if find(blanks(i),'100.0')>0 then blanks(i)=tranwrd(blanks(i),'100.0', '100');
MPRINT(TAEISR):   end;
MPRINT(TAEISR):   drop i;
MPRINT(TAEISR):   pagebreak=0;
MPRINT(TAEISR):   if BigN > .z then trt = strip(trt)||"~(N="||strip(put(bigN,best.))||")";
MPRINT(TAEISR):   else trt = strip(trt)||"~(N=Not Avail.)";
MPRINT(TAEISR):   if ord < 100 then level1 = label;
MPRINT(TAEISR):   else do;
MPRINT(TAEISR):   level1 = "TEAE Preferred Terms:";
MPRINT(TAEISR):   level2 = label;
MPRINT(TAEISR):   end;
MPRINT(TAEISR):   run;

NOTE: There were 2146 observations read from the data set WORK.TAB2_S.
NOTE: The data set WORK.TAB3 has 2146 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(TAEISR):   **data manipulation end**;
MPRINT(TAEISR):   proc sort data=tab3 out=report;
MPRINT(TAEISR):   by trtn ord;
MPRINT(TAEISR):   run;

NOTE: There were 2146 observations read from the data set WORK.TAB3.
NOTE: The data set WORK.REPORT has 2146 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(TAEISR):   ** get &footcnt footnotes based on derivation specs of variables used in this program into macro-variables &fline1 to &&fline&footcnt;
MPRINT(VARDRVINFO):   filename adamspec "/lsafshared/SASWorkspaces/.transient/job_taeisr.job-e19492be-402c-4d8d-bc56-04fdf60d0a18/general/biostat/gadam/metadata/argx-adam1.2.xlsx";
MPRINT(VARDRVINFO):   PROC IMPORT OUT= _specs1 (rename=(type=ctype length=clength format=cformat)) DATAFILE= adamspec DBMS=xlsx REPLACE;
MPRINT(VARDRVINFO):   RXLX;
MPRINT(VARDRVINFO):   RANGE="adsl$2A:";
MPRINT(VARDRVINFO):   GETNAMES=YES;
MPRINT(VARDRVINFO):   RUN;

NOTE: One or more variables were converted because the data type is not supported by the V9 engine. For more details, run with options MSGLEVEL=I.
NOTE: The import data set has 165 observations and 15 variables.
NOTE: WORK._SPECS1 data set was successfully created.
NOTE: PROCEDURE IMPORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.05 seconds


MPRINT(VARDRVINFO):   data _specs ;
MPRINT(VARDRVINFO):   set _specs1 ;


================================================================> Page 24 <================================================================


The SAS System

MPRINT(VARDRVINFO):   run;

NOTE: There were 165 observations read from the data set WORK._SPECS1.
NOTE: The data set WORK._SPECS has 165 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VARDRVINFO):   data _tblspec1 ;
MPRINT(VARDRVINFO):   set _specs ;
MPRINT(VARDRVINFO):   if label not in ('[sdtm]' '[adam]' );
MPRINT(VARDRVINFO):   if indexw("SAFFL STUDYID ARM USUBJID STARTDATE LASTDATE" , strip(name) ) ;
MPRINT(VARDRVINFO):   run;

NOTE: There were 165 observations read from the data set WORK._SPECS.
NOTE: The data set WORK._TBLSPEC1 has 1 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VARDRVINFO):   data _dep ;
MPRINT(VARDRVINFO):   set _tblspec1 ;
MPRINT(VARDRVINFO):   if index(dependency,",") = 0 then do;
MPRINT(VARDRVINFO):   name = dependency ;
MPRINT(VARDRVINFO):   output ;
MPRINT(VARDRVINFO):   end;
MPRINT(VARDRVINFO):   else do ;
MPRINT(VARDRVINFO):   do r = 1 to count(dependency,",") + 1 ;
MPRINT(VARDRVINFO):   name = upcase(strip(scan(scan(dependency,r,","),2,".") ));
MPRINT(VARDRVINFO):   output;
MPRINT(VARDRVINFO):   end;
MPRINT(VARDRVINFO):   end;
MPRINT(VARDRVINFO):   run;

NOTE: There were 1 observations read from the data set WORK._TBLSPEC1.
NOTE: The data set WORK._DEP has 1 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(VARDRVINFO):   proc sql noprint;
MPRINT(VARDRVINFO):   create table _level2 as select * from _specs where name in ( select distinct name from _dep ) and label not in ('[adam]' '[sdtm]');
NOTE: Table WORK._LEVEL2 created, with 0 rows and 15 columns.

MPRINT(VARDRVINFO):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VARDRVINFO):   data _tblspec2(index=(name)) ;
MPRINT(VARDRVINFO):   set _tblspec1 _level2 ;
MPRINT(VARDRVINFO):   fline = strip(label) !! ': ' !! strip(source);
MPRINT(VARDRVINFO):   run;



================================================================> Page 25 <================================================================


The SAS System

NOTE: There were 1 observations read from the data set WORK._TBLSPEC1.
NOTE: There were 0 observations read from the data set WORK._LEVEL2.
NOTE: The data set WORK._TBLSPEC2 has 1 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VARDRVINFO):   data _log1;
MPRINT(VARDRVINFO):   infile
"/lsafshared/SASWorkspaces/.transient/job_taeisr.job-e19492be-402c-4d8d-bc56-04fdf60d0a18/clinical/argx-113/x-ind/argx-113-0000/biostat/staging/generic_adam/log/monitor_adsl.txt" dsd dlm='|'
truncover ;
MPRINT(VARDRVINFO):   length var1 $ 200 var2 $200;
MPRINT(VARDRVINFO):   input var1 var2 ;
MPRINT(VARDRVINFO):   if (var1 = "l4g_message" and prxmatch("/(is|are) created./", trim(var2))=0) or (var1 = "l4g_drvvardef") ;
MPRINT(VARDRVINFO):   run;

NOTE: The infile "/lsafshared/SASWorkspaces/.transient/job_taeisr.job-e19492be-402c-4d8d-bc56-04fdf60d0a18/clinical/argx-113/x-ind/argx-113-0000/biostat/staging/generic_adam/log/monitor_adsl.txt" is:
      Filename=/lsafshared/SASWorkspaces/.transient/job_taeisr.job-e19492be-402c-4d8d-bc56-04fdf60d0a18/clinical/argx-113/x-ind/argx-113-0000/biostat/staging/generic_adam/log/monitor_adsl.txt,
      Owner Name=webtrust,Group Name=webtrust,
      Access Permission=-rw-rw-rw-,
      Last Modified=03Jun2023:02:14:48,
      File Size (bytes)=2851

NOTE: 47 records were read from the infile
      "/lsafshared/SASWorkspaces/.transient/job_taeisr.job-e19492be-402c-4d8d-bc56-04fdf60d0a18/clinical/argx-113/x-ind/argx-113-0000/biostat/staging/generic_adam/log/monitor_adsl.txt".
      The minimum record length was 31.
      The maximum record length was 155.
NOTE: The data set WORK._LOG1 has 13 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VARDRVINFO):   data _log2(index=(name)) ;
MPRINT(VARDRVINFO):   length name $32;
MPRINT(VARDRVINFO):   set _log1 ;
MPRINT(LOOP):   *if index(upcase(var2),upcase("%scan(&usedvars,&r, )") ) then output;
MPRINT(LOOP):   if prxmatch("/\bsaffl\b/i", var2) or prxmatch("/\bsaffl\b/i", compress(var2, "()")) then do;
MPRINT(LOOP):   name = "saffl";
MPRINT(LOOP):   fline = var2;
MPRINT(LOOP):   output;
MPRINT(LOOP):   end;
MPRINT(LOOP):   *if index(upcase(var2),upcase("%scan(&usedvars,&r, )") ) then output;
MPRINT(LOOP):   if prxmatch("/\bstudyid\b/i", var2) or prxmatch("/\bstudyid\b/i", compress(var2, "()")) then do;
MPRINT(LOOP):   name = "studyid";
MPRINT(LOOP):   fline = var2;
MPRINT(LOOP):   output;
MPRINT(LOOP):   end;
MPRINT(LOOP):   *if index(upcase(var2),upcase("%scan(&usedvars,&r, )") ) then output;
MPRINT(LOOP):   if prxmatch("/\bARM\b/i", var2) or prxmatch("/\bARM\b/i", compress(var2, "()")) then do;
MPRINT(LOOP):   name = "ARM";
MPRINT(LOOP):   fline = var2;
MPRINT(LOOP):   output;
MPRINT(LOOP):   end;
MPRINT(LOOP):   *if index(upcase(var2),upcase("%scan(&usedvars,&r, )") ) then output;
MPRINT(LOOP):   if prxmatch("/\busubjid\b/i", var2) or prxmatch("/\busubjid\b/i", compress(var2, "()")) then do;
MPRINT(LOOP):   name = "usubjid";


================================================================> Page 26 <================================================================


The SAS System

MPRINT(LOOP):   fline = var2;
MPRINT(LOOP):   output;
MPRINT(LOOP):   end;
MPRINT(LOOP):   *if index(upcase(var2),upcase("%scan(&usedvars,&r, )") ) then output;
MPRINT(LOOP):   if prxmatch("/\bstartdate\b/i", var2) or prxmatch("/\bstartdate\b/i", compress(var2, "()")) then do;
MPRINT(LOOP):   name = "startdate";
MPRINT(LOOP):   fline = var2;
MPRINT(LOOP):   output;
MPRINT(LOOP):   end;
MPRINT(LOOP):   *if index(upcase(var2),upcase("%scan(&usedvars,&r, )") ) then output;
MPRINT(LOOP):   if prxmatch("/\blastdate\b/i", var2) or prxmatch("/\blastdate\b/i", compress(var2, "()")) then do;
MPRINT(LOOP):   name = "lastdate";
MPRINT(LOOP):   fline = var2;
MPRINT(LOOP):   output;
MPRINT(LOOP):   end;
MPRINT(VARDRVINFO):  ;
MPRINT(VARDRVINFO):   run;

NOTE: There were 13 observations read from the data set WORK._LOG1.
NOTE: The data set WORK._LOG2 has 4 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(UNI_VLENGTH):   *- Harmonize length of character variables in Data= datasets According to the length found in Ref= datasests (if specified) -*;
MPRINT(UNI_VLENGTH):   proc sql noprint;
MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated by " " from (select distinct upcase(LIBNAME) as
LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._TBLSPEC2" "WORK._LOG2" )) then LENGTH else . end
) as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._TBLSPEC2" "WORK._TBLSPEC2" "WORK._LOG2" ) group by upcase(name)) group by upcase(name), upcase(type) having
sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK._TBLSPEC2" and TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._TBLSPEC2" "WORK._LOG2" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(UNI_VLENGTH):   alter table WORK._TBLSPEC2 modify ACROSS_STUDIES character(1), CFORMAT character(8), CLENGTH character(6), CODELIST character(10), CORE character(4), CTYPE character(6),
DEPENDENCY character(60), DOMAIN character(4), FLINE character(297), INCLUDE character(1), LABEL character(40), NAME character(32), O character(1), SASCODE character(447), SOURCE character(255) ;
NOTE: Table WORK._TBLSPEC2 has been modified, with 16 columns.
MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated by " " from (select distinct upcase(LIBNAME) as
LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._TBLSPEC2" "WORK._LOG2" )) then LENGTH else . end
) as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._LOG2" "WORK._TBLSPEC2" "WORK._LOG2" ) group by upcase(name)) group by upcase(name), upcase(type) having
sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK._LOG2" and TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._TBLSPEC2" "WORK._LOG2" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(UNI_VLENGTH):   alter table WORK._LOG2 modify FLINE character(297), NAME character(32), VAR1 character(200), VAR2 character(200) ;
NOTE: Table WORK._LOG2 has been modified, with 4 columns.
MPRINT(UNI_VLENGTH):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.13 seconds
      cpu time            0.13 seconds


MPRINT(VARDRVINFO):  ;
MPRINT(VARDRVINFO):   data _tbl_spec_log0(index=(name)) ;
MPRINT(VARDRVINFO):   length name $32;
MPRINT(VARDRVINFO):   set
MPRINT(DSLIST):   work._tblspec2 work._log2
MPRINT(VARDRVINFO):   _null_ ;


================================================================> Page 27 <================================================================


The SAS System

MPRINT(VARDRVINFO):   name = left(upcase(name));
MPRINT(VARDRVINFO):   run;

NOTE: There were 1 observations read from the data set WORK._TBLSPEC2.
NOTE: There were 4 observations read from the data set WORK._LOG2.
NOTE: The data set WORK._TBL_SPEC_LOG0 has 5 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


MPRINT(VARDRVINFO):   data _tbl_spec_log;
MPRINT(VARDRVINFO):   retain _fcnt 0;
MPRINT(VARDRVINFO):   set
MPRINT(VARDRVINFO):   _tbl_spec_log0;
MPRINT(VARDRVINFO):   by name;
MPRINT(VARDRVINFO):   if last.name then do;
MPRINT(VARDRVINFO):   use="Y";
MPRINT(VARDRVINFO):   _fcnt + 1 ;
MPRINT(VARDRVINFO):   call symputx('footcnt', put(_fcnt,best.) ) ;
MPRINT(VARDRVINFO):   call symputx('fline' !! strip(put(_fcnt,best.)) , quote(strip(fline)) , 'G') ;
MPRINT(VARDRVINFO):   end;
MPRINT(VARDRVINFO):   keep name label source fline _fcnt use;
MPRINT(VARDRVINFO):   run;

NOTE: There were 5 observations read from the data set WORK._TBL_SPEC_LOG0.
NOTE: The data set WORK._TBL_SPEC_LOG has 5 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.02 seconds


MPRINT(TAEISR):   ;
MPRINT(VARDRVINFO):   filename adamspec "/lsafshared/SASWorkspaces/.transient/job_taeisr.job-e19492be-402c-4d8d-bc56-04fdf60d0a18/general/biostat/gadam/metadata/argx-adam1.2.xlsx";
MPRINT(VARDRVINFO):   PROC IMPORT OUT= _specs1 (rename=(type=ctype length=clength format=cformat)) DATAFILE= adamspec DBMS=xlsx REPLACE;
MPRINT(VARDRVINFO):   RXLX;
MPRINT(VARDRVINFO):   RANGE="adae$2A:";
MPRINT(VARDRVINFO):   GETNAMES=YES;
MPRINT(VARDRVINFO):   RUN;

NOTE:    Variable Name Change.  macro details -> macro_details
NOTE: One or more variables were converted because the data type is not supported by the V9 engine. For more details, run with options MSGLEVEL=I.
NOTE: The import data set has 135 observations and 14 variables.
NOTE: WORK._SPECS1 data set was successfully created.
NOTE: PROCEDURE IMPORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.05 seconds


MPRINT(VARDRVINFO):   data _specs ;
MPRINT(VARDRVINFO):   set _specs1 ;
MPRINT(VARDRVINFO):   run;

NOTE: There were 135 observations read from the data set WORK._SPECS1.
NOTE: The data set WORK._SPECS has 135 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


================================================================> Page 28 <================================================================


The SAS System



MPRINT(VARDRVINFO):   data _tblspec1 ;
MPRINT(VARDRVINFO):   set _specs ;
MPRINT(VARDRVINFO):   if label not in ('[sdtm]' '[adam]' );
MPRINT(VARDRVINFO):   if indexw("STUDYID USUBJID TRTEMFL AESER AETOXGR AECAT ABODSYS ADECOD AHLT ATERM AERELDY AERELTM AESDTH AEREL AEREL01 AEACN LASTDATE STARTDATE" , strip(name) ) ;
MPRINT(VARDRVINFO):   run;

NOTE: There were 135 observations read from the data set WORK._SPECS.
NOTE: The data set WORK._TBLSPEC1 has 8 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VARDRVINFO):   data _dep ;
MPRINT(VARDRVINFO):   set _tblspec1 ;
MPRINT(VARDRVINFO):   if index(dependency,",") = 0 then do;
MPRINT(VARDRVINFO):   name = dependency ;
MPRINT(VARDRVINFO):   output ;
MPRINT(VARDRVINFO):   end;
MPRINT(VARDRVINFO):   else do ;
MPRINT(VARDRVINFO):   do r = 1 to count(dependency,",") + 1 ;
MPRINT(VARDRVINFO):   name = upcase(strip(scan(scan(dependency,r,","),2,".") ));
MPRINT(VARDRVINFO):   output;
MPRINT(VARDRVINFO):   end;
MPRINT(VARDRVINFO):   end;
MPRINT(VARDRVINFO):   run;

NOTE: There were 8 observations read from the data set WORK._TBLSPEC1.
NOTE: The data set WORK._DEP has 19 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(VARDRVINFO):   proc sql noprint;
MPRINT(VARDRVINFO):   create table _level2 as select * from _specs where name in ( select distinct name from _dep ) and label not in ('[adam]' '[sdtm]');
NOTE: Table WORK._LEVEL2 created, with 4 rows and 14 columns.

MPRINT(VARDRVINFO):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(VARDRVINFO):   data _tblspec2(index=(name)) ;
MPRINT(VARDRVINFO):   set _tblspec1 _level2 ;
MPRINT(VARDRVINFO):   fline = strip(label) !! ': ' !! strip(source);
MPRINT(VARDRVINFO):   run;

NOTE: There were 8 observations read from the data set WORK._TBLSPEC1.
NOTE: There were 4 observations read from the data set WORK._LEVEL2.
NOTE: The data set WORK._TBLSPEC2 has 12 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds



================================================================> Page 29 <================================================================


The SAS System


MPRINT(VARDRVINFO):   data _log1;
MPRINT(VARDRVINFO):   infile
"/lsafshared/SASWorkspaces/.transient/job_taeisr.job-e19492be-402c-4d8d-bc56-04fdf60d0a18/clinical/argx-113/x-ind/argx-113-0000/biostat/staging/generic_adam/log/monitor_adae.txt" dsd dlm='|'
truncover ;
MPRINT(VARDRVINFO):   length var1 $ 200 var2 $200;
MPRINT(VARDRVINFO):   input var1 var2 ;
MPRINT(VARDRVINFO):   if (var1 = "l4g_message" and prxmatch("/(is|are) created./", trim(var2))=0) or (var1 = "l4g_drvvardef") ;
MPRINT(VARDRVINFO):   run;

NOTE: The infile "/lsafshared/SASWorkspaces/.transient/job_taeisr.job-e19492be-402c-4d8d-bc56-04fdf60d0a18/clinical/argx-113/x-ind/argx-113-0000/biostat/staging/generic_adam/log/monitor_adae.txt" is:
      Filename=/lsafshared/SASWorkspaces/.transient/job_taeisr.job-e19492be-402c-4d8d-bc56-04fdf60d0a18/clinical/argx-113/x-ind/argx-113-0000/biostat/staging/generic_adam/log/monitor_adae.txt,
      Owner Name=webtrust,Group Name=webtrust,
      Access Permission=-rw-rw-rw-,
      Last Modified=03Jun2023:02:16:46,
      File Size (bytes)=1830

NOTE: 32 records were read from the infile
      "/lsafshared/SASWorkspaces/.transient/job_taeisr.job-e19492be-402c-4d8d-bc56-04fdf60d0a18/clinical/argx-113/x-ind/argx-113-0000/biostat/staging/generic_adam/log/monitor_adae.txt".
      The minimum record length was 32.
      The maximum record length was 133.
NOTE: The data set WORK._LOG1 has 12 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VARDRVINFO):   data _log2(index=(name)) ;
MPRINT(VARDRVINFO):   length name $32;
MPRINT(VARDRVINFO):   set _log1 ;
MPRINT(LOOP):   *if index(upcase(var2),upcase("%scan(&usedvars,&r, )") ) then output;
MPRINT(LOOP):   if prxmatch("/\bstudyid\b/i", var2) or prxmatch("/\bstudyid\b/i", compress(var2, "()")) then do;
MPRINT(LOOP):   name = "studyid";
MPRINT(LOOP):   fline = var2;
MPRINT(LOOP):   output;
MPRINT(LOOP):   end;
MPRINT(LOOP):   *if index(upcase(var2),upcase("%scan(&usedvars,&r, )") ) then output;
MPRINT(LOOP):   if prxmatch("/\busubjid\b/i", var2) or prxmatch("/\busubjid\b/i", compress(var2, "()")) then do;
MPRINT(LOOP):   name = "usubjid";
MPRINT(LOOP):   fline = var2;
MPRINT(LOOP):   output;
MPRINT(LOOP):   end;
MPRINT(LOOP):   *if index(upcase(var2),upcase("%scan(&usedvars,&r, )") ) then output;
MPRINT(LOOP):   if prxmatch("/\btrtemfl\b/i", var2) or prxmatch("/\btrtemfl\b/i", compress(var2, "()")) then do;
MPRINT(LOOP):   name = "trtemfl";
MPRINT(LOOP):   fline = var2;
MPRINT(LOOP):   output;
MPRINT(LOOP):   end;
MPRINT(LOOP):   *if index(upcase(var2),upcase("%scan(&usedvars,&r, )") ) then output;
MPRINT(LOOP):   if prxmatch("/\baeser\b/i", var2) or prxmatch("/\baeser\b/i", compress(var2, "()")) then do;
MPRINT(LOOP):   name = "aeser";
MPRINT(LOOP):   fline = var2;
MPRINT(LOOP):   output;
MPRINT(LOOP):   end;
MPRINT(LOOP):   *if index(upcase(var2),upcase("%scan(&usedvars,&r, )") ) then output;
MPRINT(LOOP):   if prxmatch("/\baetoxgr\b/i", var2) or prxmatch("/\baetoxgr\b/i", compress(var2, "()")) then do;
MPRINT(LOOP):   name = "aetoxgr";
MPRINT(LOOP):   fline = var2;


================================================================> Page 30 <================================================================


The SAS System

MPRINT(LOOP):   output;
MPRINT(LOOP):   end;
MPRINT(LOOP):   *if index(upcase(var2),upcase("%scan(&usedvars,&r, )") ) then output;
MPRINT(LOOP):   if prxmatch("/\baecat\b/i", var2) or prxmatch("/\baecat\b/i", compress(var2, "()")) then do;
MPRINT(LOOP):   name = "aecat";
MPRINT(LOOP):   fline = var2;
MPRINT(LOOP):   output;
MPRINT(LOOP):   end;
MPRINT(LOOP):   *if index(upcase(var2),upcase("%scan(&usedvars,&r, )") ) then output;
MPRINT(LOOP):   if prxmatch("/\bABODSYS\b/i", var2) or prxmatch("/\bABODSYS\b/i", compress(var2, "()")) then do;
MPRINT(LOOP):   name = "ABODSYS";
MPRINT(LOOP):   fline = var2;
MPRINT(LOOP):   output;
MPRINT(LOOP):   end;
MPRINT(LOOP):   *if index(upcase(var2),upcase("%scan(&usedvars,&r, )") ) then output;
MPRINT(LOOP):   if prxmatch("/\bADECOD\b/i", var2) or prxmatch("/\bADECOD\b/i", compress(var2, "()")) then do;
MPRINT(LOOP):   name = "ADECOD";
MPRINT(LOOP):   fline = var2;
MPRINT(LOOP):   output;
MPRINT(LOOP):   end;
MPRINT(LOOP):   *if index(upcase(var2),upcase("%scan(&usedvars,&r, )") ) then output;
MPRINT(LOOP):   if prxmatch("/\bAHLT\b/i", var2) or prxmatch("/\bAHLT\b/i", compress(var2, "()")) then do;
MPRINT(LOOP):   name = "AHLT";
MPRINT(LOOP):   fline = var2;
MPRINT(LOOP):   output;
MPRINT(LOOP):   end;
MPRINT(LOOP):   *if index(upcase(var2),upcase("%scan(&usedvars,&r, )") ) then output;
MPRINT(LOOP):   if prxmatch("/\bATERM\b/i", var2) or prxmatch("/\bATERM\b/i", compress(var2, "()")) then do;
MPRINT(LOOP):   name = "ATERM";
MPRINT(LOOP):   fline = var2;
MPRINT(LOOP):   output;
MPRINT(LOOP):   end;
MPRINT(LOOP):   *if index(upcase(var2),upcase("%scan(&usedvars,&r, )") ) then output;
MPRINT(LOOP):   if prxmatch("/\baereldy\b/i", var2) or prxmatch("/\baereldy\b/i", compress(var2, "()")) then do;
MPRINT(LOOP):   name = "aereldy";
MPRINT(LOOP):   fline = var2;
MPRINT(LOOP):   output;
MPRINT(LOOP):   end;
MPRINT(LOOP):   *if index(upcase(var2),upcase("%scan(&usedvars,&r, )") ) then output;
MPRINT(LOOP):   if prxmatch("/\baereltm\b/i", var2) or prxmatch("/\baereltm\b/i", compress(var2, "()")) then do;
MPRINT(LOOP):   name = "aereltm";
MPRINT(LOOP):   fline = var2;
MPRINT(LOOP):   output;
MPRINT(LOOP):   end;
MPRINT(LOOP):   *if index(upcase(var2),upcase("%scan(&usedvars,&r, )") ) then output;
MPRINT(LOOP):   if prxmatch("/\baesdth\b/i", var2) or prxmatch("/\baesdth\b/i", compress(var2, "()")) then do;
MPRINT(LOOP):   name = "aesdth";
MPRINT(LOOP):   fline = var2;
MPRINT(LOOP):   output;
MPRINT(LOOP):   end;
MPRINT(LOOP):   *if index(upcase(var2),upcase("%scan(&usedvars,&r, )") ) then output;
MPRINT(LOOP):   if prxmatch("/\baerel\b/i", var2) or prxmatch("/\baerel\b/i", compress(var2, "()")) then do;
MPRINT(LOOP):   name = "aerel";
MPRINT(LOOP):   fline = var2;
MPRINT(LOOP):   output;
MPRINT(LOOP):   end;
MPRINT(LOOP):   *if index(upcase(var2),upcase("%scan(&usedvars,&r, )") ) then output;
MPRINT(LOOP):   if prxmatch("/\baerel01\b/i", var2) or prxmatch("/\baerel01\b/i", compress(var2, "()")) then do;


================================================================> Page 31 <================================================================


The SAS System

MPRINT(LOOP):   name = "aerel01";
MPRINT(LOOP):   fline = var2;
MPRINT(LOOP):   output;
MPRINT(LOOP):   end;
MPRINT(LOOP):   *if index(upcase(var2),upcase("%scan(&usedvars,&r, )") ) then output;
MPRINT(LOOP):   if prxmatch("/\baeacn\b/i", var2) or prxmatch("/\baeacn\b/i", compress(var2, "()")) then do;
MPRINT(LOOP):   name = "aeacn";
MPRINT(LOOP):   fline = var2;
MPRINT(LOOP):   output;
MPRINT(LOOP):   end;
MPRINT(LOOP):   *if index(upcase(var2),upcase("%scan(&usedvars,&r, )") ) then output;
MPRINT(LOOP):   if prxmatch("/\blastdate\b/i", var2) or prxmatch("/\blastdate\b/i", compress(var2, "()")) then do;
MPRINT(LOOP):   name = "lastdate";
MPRINT(LOOP):   fline = var2;
MPRINT(LOOP):   output;
MPRINT(LOOP):   end;
MPRINT(LOOP):   *if index(upcase(var2),upcase("%scan(&usedvars,&r, )") ) then output;
MPRINT(LOOP):   if prxmatch("/\bstartdate\b/i", var2) or prxmatch("/\bstartdate\b/i", compress(var2, "()")) then do;
MPRINT(LOOP):   name = "startdate";
MPRINT(LOOP):   fline = var2;
MPRINT(LOOP):   output;
MPRINT(LOOP):   end;
MPRINT(VARDRVINFO):  ;
MPRINT(VARDRVINFO):   run;

NOTE: There were 12 observations read from the data set WORK._LOG1.
NOTE: The data set WORK._LOG2 has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


MPRINT(UNI_VLENGTH):   *- Harmonize length of character variables in Data= datasets According to the length found in Ref= datasests (if specified) -*;
MPRINT(UNI_VLENGTH):   proc sql noprint;
MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated by " " from (select distinct upcase(LIBNAME) as
LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._TBLSPEC2" "WORK._LOG2" )) then LENGTH else . end
) as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._TBLSPEC2" "WORK._TBLSPEC2" "WORK._LOG2" ) group by upcase(name)) group by upcase(name), upcase(type) having
sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK._TBLSPEC2" and TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._TBLSPEC2" "WORK._LOG2" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(UNI_VLENGTH):   alter table WORK._TBLSPEC2 modify CFORMAT character(8), CLENGTH character(6), CODELIST character(10), CORE character(4), CTYPE character(6), DEPENDENCY character(102), DOMAIN
character(4), FLINE character(726), INCLUDE character(1), LABEL character(46), MACRO_DETAILS character(2181), NAME character(32), SASCODE character(767), SOURCE character(678) ;
NOTE: Table WORK._TBLSPEC2 has been modified, with 15 columns.
MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated by " " from (select distinct upcase(LIBNAME) as
LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._TBLSPEC2" "WORK._LOG2" )) then LENGTH else . end
) as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._LOG2" "WORK._TBLSPEC2" "WORK._LOG2" ) group by upcase(name)) group by upcase(name), upcase(type) having
sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK._LOG2" and TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._TBLSPEC2" "WORK._LOG2" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(UNI_VLENGTH):   alter table WORK._LOG2 modify FLINE character(726), NAME character(32), VAR1 character(200), VAR2 character(200) ;
NOTE: Table WORK._LOG2 has been modified, with 4 columns.
MPRINT(UNI_VLENGTH):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.13 seconds
      cpu time            0.15 seconds



================================================================> Page 32 <================================================================


The SAS System


MPRINT(VARDRVINFO):  ;
MPRINT(VARDRVINFO):   data _tbl_spec_log0(index=(name)) ;
MPRINT(VARDRVINFO):   length name $32;
MPRINT(VARDRVINFO):   set
MPRINT(DSLIST):   work._tblspec2 work._log2
MPRINT(VARDRVINFO):   _null_ ;
MPRINT(VARDRVINFO):   name = left(upcase(name));
MPRINT(VARDRVINFO):   run;

NOTE: There were 12 observations read from the data set WORK._TBLSPEC2.
NOTE: There were 2 observations read from the data set WORK._LOG2.
NOTE: The data set WORK._TBL_SPEC_LOG0 has 14 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


MPRINT(VARDRVINFO):   data _tbl_spec_log;
MPRINT(VARDRVINFO):   retain _fcnt 2;
MPRINT(VARDRVINFO):   set
MPRINT(VARDRVINFO):   _tbl_spec_log0;
MPRINT(VARDRVINFO):   by name;
MPRINT(VARDRVINFO):   if last.name then do;
MPRINT(VARDRVINFO):   use="Y";
MPRINT(VARDRVINFO):   _fcnt + 1 ;
MPRINT(VARDRVINFO):   call symputx('footcnt', put(_fcnt,best.) ) ;
MPRINT(VARDRVINFO):   call symputx('fline' !! strip(put(_fcnt,best.)) , quote(strip(fline)) , 'G') ;
MPRINT(VARDRVINFO):   end;
MPRINT(VARDRVINFO):   keep name label source fline _fcnt use;
MPRINT(VARDRVINFO):   run;

NOTE: There were 14 observations read from the data set WORK._TBL_SPEC_LOG0.
NOTE: The data set WORK._TBL_SPEC_LOG has 14 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.02 seconds


MPRINT(TAEISR):   ;
%titles(type=, tabno=, dummy=0, _ls=138, _ps=43, _orientation=landscape               ,_papersize=               ,resolve=Y, auto_pagenum=N, ods_listing=, ods_escsapechar = "^"
,reporting_data=, title_first=1)
Notice: === TITLES called with params:  _ls=138, _ps=43, _orientation=landscape, _papersize= ===
ODS_LIST_DEST=listing
isblank(tabno): 1
Notice: === TITLES (1): PAPERSIZE=LETTER ORIENTATION=LANDSCAPE TopMargin=0.000 IN BottomMargin=0.000 IN ===
Notice: === TITLES (1):  LeftMargin=0.000 IN RightMargin=0.000 IN LS=200 PS=60 n_TITLES=0 n_FOOTNOTES=0 ===
MPRINT(TITLES):   options nodate NONUMBER nobyline papersize=LETTER orientation=landscape topmargin=0.000 bottommargin=0.000


================================================================> Page 33 <================================================================


The SAS System

leftmargin=0.000 rightmargin=0.000 ps=43 ls=138 nocenter missing=' ';
MPRINT(TITLES):   title1;
Notice: === TITLES (2): PAPERSIZE=LETTER ORIENTATION=LANDSCAPE TopMargin=0.000 IN BottomMargin=0.000 IN ===
Notice: === TITLES (2):  LeftMargin=0.000 IN RightMargin=0.000 IN LS=138 PS=43 n_TITLES=0 n_FOOTNOTES=0 ===
MPRINT(TITLES):   *- ods escapechar needs to be defined in every program that has to run independently on LSAF - include in %titles -*;
MPRINT(TITLES):   ods escapechar="^";
MPRINT(TITLES):   data title;
MPRINT(TITLES):   set repemeta.repeMETA;
MPRINT(TITLES):   where lowcase(strip(sas_program)||'.sas') = strip(lowcase("taeisr.sas")) or lowcase(strip(sas_program)) =
strip(lowcase("taeisr.sas"));
isblank(tabno): 1
MPRINT(TITLES):   tabno_o = tabno;
MPRINT(VARLIST):   Title = strip(resolve(Title));
MPRINT(VARLIST):   put "Resolved " Title= ;
MPRINT(VARLIST):   Num = strip(resolve(Num));
MPRINT(VARLIST):   put "Resolved " Num= ;
MPRINT(VARLIST):   No_ = strip(resolve(No_));
MPRINT(VARLIST):   put "Resolved " No_= ;
MPRINT(VARLIST):   tabno = strip(resolve(tabno));
MPRINT(VARLIST):   put "Resolved " tabno= ;
MPRINT(VARLIST):   outputfilename = strip(resolve(outputfilename));
MPRINT(VARLIST):   put "Resolved " outputfilename= ;
MPRINT(TITLES):   ;
MPRINT(TITLES):   call symputx('title',strip(title));
MPRINT(TITLES):   call symputx('no_',strip(no_));
MPRINT(TITLES):   call symputx('tabno',strip(tabno));
MPRINT(TITLES):   call symputx('outputfilename',strip(outputfilename));
MPRINT(TITLES):   call symput('sasdate', translate(put(datetime(),e8601dt.),' ','T'));
MPRINT(TITLES):   *is 19 characters long;
MPRINT(TITLES):   if cats(type) ^= ' ' then call symputx('type', type);
MPRINT(TITLES):   run;

Resolved Title=Injection Site Reactions AEs by Treatment Arm
Resolved Num=2.8.2
Resolved No_=TABLE 2.8.2
Resolved tabno=2.8.2
Resolved outputfilename=t_2.8.2_taeisr
NOTE: There were 1 observations read from the data set REPEMETA.REPEMETA.
      WHERE (LOWCASE((STRIP(sas_program)||'.sas'))='taeisr.sas') or (LOWCASE(STRIP(sas_program))='taeisr.sas');
NOTE: The data set WORK.TITLE has 1 observations and 11 variables.
NOTE: DATA statement used (Total process time):


================================================================> Page 34 <================================================================


The SAS System

      real time           0.08 seconds
      cpu time            0.10 seconds


(TITLES): Macro-variables have been defined:
  title = Injection Site Reactions AEs by Treatment Arm
  no_ = TABLE 2.8.2
  tabno = 2.8.2
  outputfilename = t_2.8.2_taeisr
  type = Table
  sasdate = 2023-06-03 03:09:07
Notice:(TITLES): Assuming reporting dataset is work.report.
Notice:(TITLES): To specify another dataset, use parameter REPORTING_DATA= or name it "REPORT", "TABLE", "LISTING", "FIGURE" or "FINAL"
Notice:(TITLES): and assign it to &SYSLAST macro-variable, or create it just before calling %titles.
MPRINT(TITLES):   libname repemeta
"/lsafshared/SASWorkspaces/.transient/job_taeisr.job-e19492be-402c-4d8d-bc56-04fdf60d0a18/clinical/argx-113/x-ind/argx-113-0000/biostat/st
aging/generic_adam/documents" compress=YES;
NOTE: Libref REPEMETA was successfully assigned as follows:
      Engine:        V9
      Physical Name:
      /lsafshared/SASWorkspaces/.transient/job_taeisr.job-e19492be-402c-4d8d-bc56-04fdf60d0a18/clinical/argx-113/x-ind/argx-113-0000/biost
      at/staging/generic_adam/documents
MPRINT(TITLES):   *- make library writable -*;
MPRINT(TITLES):   proc sql noprint;
MPRINT(TITLES):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(TITLES):   *- JMB 2021-11-02 - make sure dataset encoding and session encoding do match (needed for %uni_vlength) -*;
MPRINT(TITLES):   data repeMETA_resolved;
MPRINT(TITLES):   set repemeta.repeMETA_resolved;
MPRINT(TITLES):   run;

NOTE: There were 1 observations read from the data set REPEMETA.REPEMETA_RESOLVED.
NOTE: The data set WORK.REPEMETA_RESOLVED has 1 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds



================================================================> Page 35 <================================================================


The SAS System


MPRINT(UNI_VLENGTH):   *- Harmonize length of character variables in Data= datasets According to the length found in Ref= datasests (if
specified) -*;
MPRINT(UNI_VLENGTH):   proc sql noprint;
MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ",
:n_common_vars separated by " " from (select distinct upcase(LIBNAME) as LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME,
upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.REPEMETA_RESOLVED" "WORK.TITLE" )) then LENGTH
else . end ) as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.REPEMETA_RESOLVED"
"WORK.REPEMETA_RESOLVED" "WORK.TITLE" ) group by upcase(name)) group by upcase(name), upcase(type) having
sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK.REPEMETA_RESOLVED" and TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in
("WORK.REPEMETA_RESOLVED" "WORK.TITLE" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(UNI_VLENGTH):   alter table WORK.REPEMETA_RESOLVED modify ANALYSIS_SET character(6), DATASET character(50), LOWCASE_TABNOVAR
character(100), NO_ character(23), NUM character(50), OUTPUTFILENAME character(100), SAS_PROGRAM character(50), SECTION character(3),
TABNO character(50), TABNO_O character(50), TITLE character(400), TYPE character(7) ;
NOTE: Table WORK.REPEMETA_RESOLVED has been modified, with 12 columns.
MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ",
:n_common_vars separated by " " from (select distinct upcase(LIBNAME) as LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME,
upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.REPEMETA_RESOLVED" "WORK.TITLE" )) then LENGTH
else . end ) as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.TITLE" "WORK.REPEMETA_RESOLVED"
"WORK.TITLE" ) group by upcase(name)) group by upcase(name), upcase(type) having
sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK.TITLE" and TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in
("WORK.REPEMETA_RESOLVED" "WORK.TITLE" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(UNI_VLENGTH):   alter table WORK.TITLE modify ANALYSIS_SET character(6), DATASET character(50), NO_ character(23), NUM
character(50), OUTPUTFILENAME character(100), SAS_PROGRAM character(50), SECTION character(3), TABNO character(50), TABNO_O
character(50), TITLE character(400), TYPE character(7) ;
NOTE: Table WORK.TITLE has been modified, with 11 columns.
MPRINT(UNI_VLENGTH):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.13 seconds
      cpu time            0.13 seconds


MPRINT(TITLES):  ;
MPRINT(TITLES):   data repemeta.repeMETA_resolved;
MPRINT(TITLES):   set repeMETA_resolved;


================================================================> Page 36 <================================================================


The SAS System

MPRINT(TITLES):   run;
NOTE: There were 1 observations read from the data set WORK.REPEMETA_RESOLVED.
NOTE: The data set REPEMETA.REPEMETA_RESOLVED has 1 observations and 12 variables.
NOTE: Compressing data set REPEMETA.REPEMETA_RESOLVED increased size by 100.00 percent.
      Compressed is 2 pages; un-compressed would require 1 pages.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(TITLES):   proc sql noprint;
MPRINT(TITLES):   create table repeMETA_resolved0 as select
MPRINT(VARLIST):   case when a.sas_program ^= ' ' then a.Section else b.Section end as Section length=3 label='Section', case when
a.sas_program ^= ' ' then a.Type else b.Type end as Type length=7 label='Type', case when a.sas_program ^= ' ' then a.Num else b.Num end
as Num length=50 label='Num', case when a.sas_program ^= ' ' then a.No_ else b.No_ end as No_ length=23 label='No.', case when
a.sas_program ^= ' ' then a.Title else b.Title end as Title length=400 label='Title', case when a.sas_program ^= ' ' then a.Analysis_Set
else b.Analysis_Set end as Analysis_Set length=6 label='Analysis Set', case when a.sas_program ^= ' ' then a.SAS_Program else
b.SAS_Program end as SAS_Program length=50 label='SAS Program', case when a.sas_program ^= ' ' then a.Dataset else b.Dataset end as
Dataset length=50 label='Dataset', case when a.sas_program ^= ' ' then a.tabno else b.tabno end as tabno length=50 label=" ", case when
a.sas_program ^= ' ' then a.outputfilename else b.outputfilename end as outputfilename length=100 label=" ", case when a.sas_program ^= '
' then a.tabno_o else b.tabno_o end as tabno_o length=50 label=" "
MPRINT(VARLIST):   , b.lowcase_tabnovar
MPRINT(TITLES):   from title as a full join repemeta.repeMETA_resolved as b on lowcase(strip(a.sas_program)) =
lowcase(strip(b.sas_program)) and strip(lowcase(resolve(a.tabno))) = strip(lowcase(b.tabno)) and upcase(cats(a.type)) =
upcase(cats(b.type)) ;
NOTE: Table WORK.REPEMETA_RESOLVED0 created, with 2 rows and 12 columns.

MPRINT(TITLES):   drop table repeMETA_resolved;
NOTE: Table WORK.REPEMETA_RESOLVED has been dropped.
MPRINT(TITLES):   create table repeMETA_resolved as select distinct a.* from repeMETA_resolved0 as a inner join repemeta.repeMETA as b on
lowcase(strip(a.sas_program)) = lowcase(strip(b.sas_program)) and strip(lowcase(a.tabno_o)) = strip(lowcase(b.tabno)) ;
NOTE: Table WORK.REPEMETA_RESOLVED created, with 2 rows and 12 columns.

MPRINT(TITLES):   create table repemeta.repeMETA_resolved as select distinct * from repeMETA_resolved;
NOTE: Compressing data set REPEMETA.REPEMETA_RESOLVED increased size by 100.00 percent.
      Compressed is 2 pages; un-compressed would require 1 pages.
NOTE: Table REPEMETA.REPEMETA_RESOLVED created, with 2 rows and 12 columns.

MPRINT(TITLES):   *- Create view repemeta.vrepemeta as a join between repemeta and repemeta_resolved, if it does not exist -;
MPRINT(TITLES):   quit;
NOTE: PROCEDURE SQL used (Total process time):


================================================================> Page 37 <================================================================


The SAS System

      real time           0.28 seconds
      cpu time            0.29 seconds


MPRINT(TITLES):   libname repemeta
"/lsafshared/SASWorkspaces/.transient/job_taeisr.job-e19492be-402c-4d8d-bc56-04fdf60d0a18/clinical/argx-113/x-ind/argx-113-0000/biostat/st
aging/generic_adam/documents" access=readonly;
NOTE: Libref REPEMETA was successfully assigned as follows:
      Engine:        V9
      Physical Name:
      /lsafshared/SASWorkspaces/.transient/job_taeisr.job-e19492be-402c-4d8d-bc56-04fdf60d0a18/clinical/argx-113/x-ind/argx-113-0000/biost
      at/staging/generic_adam/documents
MPRINT(TITLES):   *- make library read-only again -*;
MPRINT(TITLES):   filename fjson
"/lsafshared/SASWorkspaces/.transient/job_taeisr.job-e19492be-402c-4d8d-bc56-04fdf60d0a18/clinical/argx-113/x-ind/argx-113-0000/biostat/st
aging/generic_adam/documents/repemeta.json";
MPRINT(TITLES):   proc json out=fjson pretty;
MPRINT(TITLES):   export repemeta.vrepemeta / nosastags;
MPRINT(TITLES):   run;

NOTE: PROCEDURE JSON used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(REPEVENTTITLES):   data _null_;
MPRINT(REPEVENTTITLES):   length actdate acttime 8;
MPRINT(REPEVENTTITLES):   actdate = datepart(datetime());
MPRINT(REPEVENTTITLES):   acttime = timepart(datetime());
MPRINT(REPEVENTTITLES):   call symputx("actdate", put(actdate, date9.));
MPRINT(REPEVENTTITLES):   call symputx("acttime", put(acttime, tod5.));
MPRINT(REPEVENTTITLES):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(REPEVENTTITLES):   data _null_;
MPRINT(REPEVENTTITLES):   call symput('dashedline',repeat('-',138-1));
MPRINT(REPEVENTTITLES):   run;


================================================================> Page 38 <================================================================


The SAS System


NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(TITLES):  ;
Notice: === TABLE written to ../output/t_2.8.2_taeisr.lst) ===
sysprinttolist = OF
MPRINT(TITLES):   proc printto print=print;
MPRINT(TITLES):   run;

NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(TITLES):   filename tabo
"/lsafshared/SASWorkspaces/.transient/job_taeisr.job-e19492be-402c-4d8d-bc56-04fdf60d0a18/clinical/argx-113/x-ind/argx-113-0000/biostat/st
aging/generic_adam/output/t_2.8.2_taeisr.lst";
MPRINT(TITLES):   proc printto print=tabo new;
MPRINT(TITLES):   run;

NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


sysprinttolist = TABO
MPRINT(TITLES):   data
MPRINT(VALIDNAME):   rdata.t_2_8_2_taeisr
MPRINT(TITLES):  (label="TABLE 2.8.2: Injection Site Reactions AEs by Treatment Arm");
MPRINT(TITLES):   set work.report;
MPRINT(TITLES):   run;

NOTE: There were 2146 observations read from the data set WORK.REPORT.
NOTE: The data set RDATA.T_2_8_2_TAEISR has 2146 observations and 12 variables.
NOTE: Compressing data set RDATA.T_2_8_2_TAEISR decreased size by 85.71 percent.
      Compressed is 7 pages; un-compressed would require 49 pages.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds


================================================================> Page 39 <================================================================


The SAS System

      cpu time            0.00 seconds


l_right = 0
MPRINT(TITLE_NEXT):   title1 font="courier new" height=9pt J=L 'ARGX-113-0000 - GADAM REPORT
                                             03JUN2023 03:09    ' ;
MPRINT(TITLES):  ;
l_right = 0
MPRINT(TITLE_NEXT):   title2 font="courier new" height=9pt J=L '
                                                     PAGE 1 OF 1' ;
MPRINT(TITLES):  ;
l_right = 0
MPRINT(TITLE_NEXT):   title3 font="courier new" height=9pt J=L 'TABLE 2.8.2: Injection Site Reactions AEs by Treatment Arm
                                                                ' ;
MPRINT(TITLES):  ;
l_right = 0
MPRINT(TITLE_NEXT):   title4 font="courier new" height=9pt J=L
'-----------------------------------------------------------------------------------------------------------------------------------------
-' ;
MPRINT(TITLES):  ;
l_right = 0
MPRINT(TITLE_NEXT):   title5 font="courier new" height=9pt J=L 'ANALYSIS SET: Safety
                                                                ' ;
MPRINT(TITLES):  ;
Notice: === (TITLES): ODS LISTING is now OPEN. ===
Notice: === (TITLES): SYSPRINTTOLIST=TABO =
/lsafshared/SASWorkspaces/.transient/job_taeisr.job-e19492be-402c-4d8d-bc56-04fdf60d0a18/clinical/argx-113/x-ind/argx-113-0000/biostat/sta
ging/generic_adam/output/t_2.8.2_taeisr.lst ===
Current LISTING select list is set to default value (ALL).
Current OVERALL select list is: ALL
MPRINT(ODSDEST):   ODS LISTING show ;
MPRINT(TITLES):   ;
Current LISTING select list is set to default value (ALL).
Current OVERALL select list is: ALL
MPRINT(ODSDEST):   ODS LISTING show ;
MPRINT(TITLES):   ;
MPRINT(TAEISR):  ;
MPRINT(TAEISR):   data report;
MPRINT(TAEISR):   set report;
MPRINT(TAEISR):   trt = SPLITINSERTSEP(trt, 39, "~");
MPRINT(TAEISR):   run;


================================================================> Page 40 <================================================================


The SAS System


NOTE: There were 2146 observations read from the data set WORK.REPORT.
NOTE: The data set WORK.REPORT has 2146 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.29 seconds
      cpu time            0.29 seconds


MPRINT(TAEISR):   footnote;
l_right = 35
MPRINT(FOOTNOTE_NEXT):   footnote1 "Source: AE domain, Study(ies) (last updated): ARGX-113-1501 (2020-10-02), ARGX-113-1603
 " J=R "Program: taeisr.sas, Version: 242.0" ;
MPRINT(FOOTNOTE_NEXT):   footnote2 "        (2022-07-26), ARGX-113-1701 (2020-11-25), ARGX-113-1702 (2018-12-03), ARGX-113-1704
                                    " ;
MPRINT(FOOTNOTE_NEXT):   footnote3 "        (2021-08-27), ARGX-113-1705 (2023-04-14), ARGX-113-1801 (2022-11-28), ARGX-113-1802
                                    " ;
MPRINT(FOOTNOTE_NEXT):   footnote4 "        (2023-06-01), ARGX-113-1803 (2023-06-01), ARGX-113-1901 (2022-04-13), ARGX-113-1902
                                    " ;
MPRINT(FOOTNOTE_NEXT):   footnote5 "        (2023-05-08), ARGX-113-1904 (2023-05-19), ARGX-113-1905 (2023-05-15), ARGX-113-1907
                                    " ;
MPRINT(FOOTNOTE_NEXT):   footnote6 "        (2022-04-13), ARGX-113-2001 (2022-07-05), ARGX-113-2002 (2023-06-02), ARGX-113-2003
                                    " ;
MPRINT(FOOTNOTE_NEXT):   footnote7 "        (2023-05-10), ARGX-113-2004 (2023-06-01), ARGX-113-2005 (2023-05-08), ARGX-113-2006
                                    " ;
MPRINT(FOOTNOTE_NEXT):   footnote8 "        (2023-05-10), ARGX-113-2007 (2023-05-22), ARGX-113-2008 (2023-05-10), ARGX-113-2009
                                    " ;
MPRINT(FOOTNOTE_NEXT):   footnote9 "        (2023-05-30), ARGX-113-2102 (2023-04-13), ARGX-113-2104 (2023-03-30), ARGX-113-Z005
                                    " ;
MPRINT(FOOTNOTE_NEXT):   footnote10 "        (2022-06-15), ARGX-113-Z006 (2022-06-15)
                                     " ;
MPRINT(TAEISR):  ;
MPRINT(TAEISR):   proc report data=report nowindows spacing=1 split='~' missing contents='' formchar(2)='_' style(lines)={height=0.01cm}
NOCOMPLETECOLS SPANROWS;
MPRINT(TAEISR):   ***- Option SPANROWS allows corresponding value of group variables to be printed on 1st row of each page, without being
repeated on subsequent rows -***;
MPRINT(TAEISR):   columns pagebreak ord level1 level2 label_split (trtn trt ,( value1 value2));
MPRINT(TAEISR):   define pagebreak /group order=internal noprint;
MPRINT(TAEISR):   define ord / group order=internal noprint;
MPRINT(TAEISR):   define level1 / group id order=internal noprint;
MPRINT(TAEISR):   define level2 / group id order=internal noprint;
MPRINT(TAEISR):   define label_split / group computed id order=internal width = 50 " " flow ;


================================================================> Page 41 <================================================================


The SAS System

MPRINT(TAEISR):   define trtn / group order=internal across noprint;
MPRINT(TAEISR):   define trt / width = 39 across order=data "" flow;
MPRINT(TAEISR):   define value1 / group center width = 22 "n (%)" ;
MPRINT(TAEISR):   define value2 / group center width = 15 "m" ;
MPRINT(TAEISR):   compute label_split / char length=300;
MPRINT(TAEISR):   *- The following requires all variables to be defined as group, so that a variable is internally set to blank after the
first occurrence of its value in a group. Indentation should reflect the category level and match with header text indentation. -*;
MPRINT(TAEISR):   if 0 then label_split=' ';
MPRINT(TAEISR):   else if level2 ^= ' ' then label_split=SPLITINDENT(cats(level2) , 3, 50);
MPRINT(TAEISR):   else if level1 ^= ' ' then label_split=SPLITINDENT(cats(level1) , 0, 50);
MPRINT(TAEISR):   else label_split=' ';
MPRINT(TAEISR):   endcomp;
MPRINT(TAEISR):   compute before pagebreak;
MPRINT(TAEISR):   line @1 138*'-';
MPRINT(TAEISR):   endcomp;
MPRINT(TAEISR):   compute after;
MPRINT(TAEISR):   *pagebreak;
MPRINT(TAEISR):   line @1 138*' ';
MPRINT(TAEISR):   line @1 "DEFINITIONS: ";
MPRINT(TAEISR):   *line @1 &&fline&r;
l_right = 0
WARNING:(FOOTNOTE_NEXT): Allowed footnotes number exceeded: footnote11.
WARNING:(FOOTNOTE_NEXT): Please try to regroup previous footnote text in fewer FOOTNOTE_NEXT calls and use WRAP=Y (not supported by ODS
LISTING).
MPRINT(FOOTNOTE_NEXT):   "SAFFL is set to Y when at least one IMP in one study.
                          " ;
MPRINT(FOOTNOTE_NEXT):  ;
MPRINT(TAEISR):  ;
MPRINT(TAEISR):   *line @1 &&fline&r;
l_right = 0
WARNING:(FOOTNOTE_NEXT): Allowed footnotes number exceeded: footnote11.
WARNING:(FOOTNOTE_NEXT): Please try to regroup previous footnote text in fewer FOOTNOTE_NEXT calls and use WRAP=Y (not supported by ODS
LISTING).
MPRINT(FOOTNOTE_NEXT):   "lstcndrv/rfpeddif/lstcnsrc/lstcndt variables derived from rfpendtc and lasted dates for usubjid in EX, SV, AE,
VS, LB, EG, DS.            " ;
MPRINT(FOOTNOTE_NEXT):  ;
MPRINT(TAEISR):  ;
MPRINT(TAEISR):   *line @1 &&fline&r;
l_right = 0
WARNING:(FOOTNOTE_NEXT): Allowed footnotes number exceeded: footnote11.
WARNING:(FOOTNOTE_NEXT): Please try to regroup previous footnote text in fewer FOOTNOTE_NEXT calls and use WRAP=Y (not supported by ODS


================================================================> Page 42 <================================================================


The SAS System

LISTING).
MPRINT(FOOTNOTE_NEXT):   "Analysis Body System or Organ Class: AE.AEBODSYS when in AE   MH.MHBODSYS when in MH and not in AE
                          " ;
MPRINT(FOOTNOTE_NEXT):  ;
MPRINT(TAEISR):  ;
MPRINT(TAEISR):   *line @1 &&fline&r;
l_right = 0
WARNING:(FOOTNOTE_NEXT): Allowed footnotes number exceeded: footnote11.
WARNING:(FOOTNOTE_NEXT): Please try to regroup previous footnote text in fewer FOOTNOTE_NEXT calls and use WRAP=Y (not supported by ODS
LISTING).
MPRINT(FOOTNOTE_NEXT):   "Analysis Dictionary-Derived Term: AE.AEDECOD when in AE   MH.MHDECOD when in MH and not in AE
                          " ;
MPRINT(FOOTNOTE_NEXT):  ;
MPRINT(TAEISR):  ;
MPRINT(TAEISR):   *line @1 &&fline&r;
l_right = 0
WARNING:(FOOTNOTE_NEXT): Allowed footnotes number exceeded: footnote11.
WARNING:(FOOTNOTE_NEXT): Please try to regroup previous footnote text in fewer FOOTNOTE_NEXT calls and use WRAP=Y (not supported by ODS
LISTING).
MPRINT(FOOTNOTE_NEXT):   "Relation to Study Procedure: Causality of ITEM01, derived from SUPPAE.QVAL(where=(QNAM= 'AERELPRC')
                          " ;
MPRINT(FOOTNOTE_NEXT):  ;
MPRINT(TAEISR):  ;
MPRINT(TAEISR):   *line @1 &&fline&r;
l_right = 0
WARNING:(FOOTNOTE_NEXT): Allowed footnotes number exceeded: footnote11.
WARNING:(FOOTNOTE_NEXT): Please try to regroup previous footnote text in fewer FOOTNOTE_NEXT calls and use WRAP=Y (not supported by ODS
LISTING).
MPRINT(FOOTNOTE_NEXT):   "Number of Days from Treatment Dose to AE start: if ASTDTC contains a full date then AERELDY = ASTDT-DOSSDT+1
                          " ;
MPRINT(FOOTNOTE_NEXT):  ;
MPRINT(TAEISR):  ;
MPRINT(TAEISR):   *line @1 &&fline&r;
l_right = 0
WARNING:(FOOTNOTE_NEXT): Allowed footnotes number exceeded: footnote11.
WARNING:(FOOTNOTE_NEXT): Please try to regroup previous footnote text in fewer FOOTNOTE_NEXT calls and use WRAP=Y (not supported by ODS
LISTING).
MPRINT(FOOTNOTE_NEXT):   "AERELTM is the minimum time between DOS(SorE)DTM and ASTDTM. AERELTMU=SECONDS.
                          " ;
MPRINT(FOOTNOTE_NEXT):  ;
MPRINT(TAEISR):  ;


================================================================> Page 43 <================================================================


The SAS System

MPRINT(TAEISR):   *line @1 &&fline&r;
l_right = 0
WARNING:(FOOTNOTE_NEXT): Allowed footnotes number exceeded: footnote11.
WARNING:(FOOTNOTE_NEXT): Please try to regroup previous footnote text in fewer FOOTNOTE_NEXT calls and use WRAP=Y (not supported by ODS
LISTING).
MPRINT(FOOTNOTE_NEXT):   "Analysis High Level Term: AE.AEHLT when in AE   MH.MHHLT when in MH and not in AE
                          " ;
MPRINT(FOOTNOTE_NEXT):  ;
MPRINT(TAEISR):  ;
MPRINT(TAEISR):   *line @1 &&fline&r;
l_right = 0
WARNING:(FOOTNOTE_NEXT): Allowed footnotes number exceeded: footnote11.
WARNING:(FOOTNOTE_NEXT): Please try to regroup previous footnote text in fewer FOOTNOTE_NEXT calls and use WRAP=Y (not supported by ODS
LISTING).
MPRINT(FOOTNOTE_NEXT):   "Analysis Start Date: ASTDTC converted to SAS date and imputed when partial or missing   1) If no study exposure
during 'uncertainty       " ;
MPRINT(FOOTNOTE_NEXT):   ;
MPRINT(FOOTNOTE_NEXT):   line @1 "period': earliest date  2) If a same treatment is taken one or more times during 'uncertainty period':
imputed to the first exposure date " ;
MPRINT(FOOTNOTE_NEXT):   ;
MPRINT(FOOTNOTE_NEXT):   line @1 "3) If more than one distinct treatments are taken during 'uncertainty period':    a) if active
treatment(s) is (are) taken then imputed   " ;
MPRINT(FOOTNOTE_NEXT):   ;
MPRINT(FOOTNOTE_NEXT):   line @1 "to first active treatment exposure start date with highest dose   b) if no active treatment is taken
then imputed to first treatment      " ;
MPRINT(FOOTNOTE_NEXT):   ;
MPRINT(FOOTNOTE_NEXT):   line @1 "exposure start date with highest dose
                                  " ;
MPRINT(FOOTNOTE_NEXT):  ;
MPRINT(TAEISR):  ;
MPRINT(TAEISR):   *line @1 &&fline&r;
l_right = 0
WARNING:(FOOTNOTE_NEXT): Allowed footnotes number exceeded: footnote11.
WARNING:(FOOTNOTE_NEXT): Please try to regroup previous footnote text in fewer FOOTNOTE_NEXT calls and use WRAP=Y (not supported by ODS
LISTING).
MPRINT(FOOTNOTE_NEXT):   "Analysis Start Date/Time of Adverse Event: AE.AESTDTC when in AE   MH.MHSTDTC when in MH and not in AE
                          " ;
MPRINT(FOOTNOTE_NEXT):  ;
MPRINT(TAEISR):  ;
MPRINT(TAEISR):   *line @1 &&fline&r;
l_right = 0


================================================================> Page 44 <================================================================


The SAS System

WARNING:(FOOTNOTE_NEXT): Allowed footnotes number exceeded: footnote11.
WARNING:(FOOTNOTE_NEXT): Please try to regroup previous footnote text in fewer FOOTNOTE_NEXT calls and use WRAP=Y (not supported by ODS
LISTING).
MPRINT(FOOTNOTE_NEXT):   "Analysis Start Datetime: ASTDTC converted to SAS datetime and imputed when missing or partial, same rule as for
ASTDT                     " ;
MPRINT(FOOTNOTE_NEXT):  ;
MPRINT(TAEISR):  ;
MPRINT(TAEISR):   *line @1 &&fline&r;
l_right = 0
WARNING:(FOOTNOTE_NEXT): Allowed footnotes number exceeded: footnote11.
WARNING:(FOOTNOTE_NEXT): Please try to regroup previous footnote text in fewer FOOTNOTE_NEXT calls and use WRAP=Y (not supported by ODS
LISTING).
MPRINT(FOOTNOTE_NEXT):   "Analysis Reported Term for the Adverse Event: AE.AETERM when in AE   MH.MHTERM when in MH and not in AE
                          " ;
MPRINT(FOOTNOTE_NEXT):  ;
MPRINT(TAEISR):  ;
MPRINT(TAEISR):   *line @1 &&fline&r;
l_right = 0
WARNING:(FOOTNOTE_NEXT): Allowed footnotes number exceeded: footnote11.
WARNING:(FOOTNOTE_NEXT): Please try to regroup previous footnote text in fewer FOOTNOTE_NEXT calls and use WRAP=Y (not supported by ODS
LISTING).
MPRINT(FOOTNOTE_NEXT):   "Name of Treatment at AE start: EXTRT = EXTRT before ASTDTC
                          " ;
MPRINT(FOOTNOTE_NEXT):  ;
MPRINT(TAEISR):  ;
MPRINT(TAEISR):   *line @1 &&fline&r;
l_right = 0
WARNING:(FOOTNOTE_NEXT): Allowed footnotes number exceeded: footnote11.
WARNING:(FOOTNOTE_NEXT): Please try to regroup previous footnote text in fewer FOOTNOTE_NEXT calls and use WRAP=Y (not supported by ODS
LISTING).
MPRINT(FOOTNOTE_NEXT):   "TRTEMFL=Y is defined as AE starting on or after first administration of any study drug.
                          " ;
MPRINT(FOOTNOTE_NEXT):  ;
MPRINT(TAEISR):  ;
l_right = 0
WARNING:(FOOTNOTE_NEXT): Allowed footnotes number exceeded: footnote11.
WARNING:(FOOTNOTE_NEXT): Please try to regroup previous footnote text in fewer FOOTNOTE_NEXT calls and use WRAP=Y (not supported by ODS
LISTING).
MPRINT(FOOTNOTE_NEXT):   "n = number of patients with event, m = number of events, TEAE = treatment-emergent adverse event
                          " ;
MPRINT(FOOTNOTE_NEXT):  ;


================================================================> Page 45 <================================================================


The SAS System

MPRINT(TAEISR):  ;
MPRINT(TAEISR):   endcomp;
MPRINT(TAEISR):   run;

3           "SAFFL is set to Y when at least one IMP in one study.
            ______________________________________________________________________________________________________________________________
            180
3        !              " ;
4           "lstcndrv/rfpeddif/lstcnsrc/lstcndt variables derived from rfpendtc and lasted dates for usubjid in EX, SV, AE, VS, LB, EG,
            ____________________________________________________________________________________________________________________________
            180
4        ! DS.            " ;
5           "Analysis Body System or Organ Class: AE.AEBODSYS when in AE   MH.MHBODSYS when in MH and not in AE
            ______________________________________________________________________________________________________________________________
            180
5        !              " ;
6           "Analysis Dictionary-Derived Term: AE.AEDECOD when in AE   MH.MHDECOD when in MH and not in AE
            ______________________________________________________________________________________________________________________________
            180
6        !              " ;
7           "Relation to Study Procedure: Causality of ITEM01, derived from SUPPAE.QVAL(where=(QNAM= 'AERELPRC')
            ______________________________________________________________________________________________________________________________
            180
7        !              " ;
8           "Number of Days from Treatment Dose to AE start: if ASTDTC contains a full date then AERELDY = ASTDT-DOSSDT+1
            ______________________________________________________________________________________________________________________________
            180
8        !              " ;
9           "AERELTM is the minimum time between DOS(SorE)DTM and ASTDTM. AERELTMU=SECONDS.
            ______________________________________________________________________________________________________________________________
            180
9        !              " ;
10          "Analysis High Level Term: AE.AEHLT when in AE   MH.MHHLT when in MH and not in AE
            ______________________________________________________________________________________________________________________________
            180
10       !              " ;
11          "Analysis Start Date: ASTDTC converted to SAS date and imputed when partial or missing   1) If no study exposure during
            ________________________________________________________________________________________________________________________
            180
11       ! 'uncertainty       " ;
16          "Analysis Start Date/Time of Adverse Event: AE.AESTDTC when in AE   MH.MHSTDTC when in MH and not in AE


================================================================> Page 46 <================================================================


The SAS System

            ______________________________________________________________________________________________________________________________
            180
16       !              " ;
17          "Analysis Start Datetime: ASTDTC converted to SAS datetime and imputed when missing or partial, same rule as for ASTDT
            ______________________________________________________________________________________________________________________________
            180
17       !              " ;
18          "Analysis Reported Term for the Adverse Event: AE.AETERM when in AE   MH.MHTERM when in MH and not in AE
            ______________________________________________________________________________________________________________________________
            180
18       !              " ;
19          "Name of Treatment at AE start: EXTRT = EXTRT before ASTDTC
            ______________________________________________________________________________________________________________________________
            180
19       !              " ;
20          "TRTEMFL=Y is defined as AE starting on or after first administration of any study drug.
            ______________________________________________________________________________________________________________________________
            180
20       !              " ;
21         ;; "n = number of patients with event, m = number of events, TEAE = treatment-emergent adverse event
              ____________________________________________________________________________________________________________________________
              180
21       !                " ;
ERROR 180-322: Statement is not valid or it is used out of proper order.

NOTE: The preceding messages refer to the COMPUTE block for RBREAK AFTER .
NOTE: Will not run due to compilation errors.
NOTE: The SAS System stopped processing this step because of errors.
NOTE: There were 2146 observations read from the data set WORK.REPORT.
NOTE: PROCEDURE REPORT used (Total process time):
      real time           0.06 seconds
      cpu time            0.07 seconds

MPRINT(MULTI):  ;
MPRINT(PROGRAMEND):   ;
MPRINT(PROGRAMEND):  *';
MPRINT(PROGRAMEND):  *";
MPRINT(PROGRAMEND):  */;
MPRINT(PROGRAMEND):  *);
MPRINT(PROGRAMEND):  run;
MPRINT(PROGRAMEND):  quit;


================================================================> Page 47 <================================================================


The SAS System

MPRINT(PROGRAMEND):  ;
MPRINT(PROGRAMEND):   option nosyntaxcheck obs=max;
MPRINT(PROGRAMEND):   option LS=180 PS=60;
MPRINT(PROGRAMEND):   option VALIDVARNAME=V7;
Notice:(PROGRAMEND): ods_dest parameter value #DEFAULT# was interpreted as: ODS_DEST=PDF.
Attempting to assign LIBNAME __parwrk to /saswork/sas_tmp/SAS_work774E003C9B61_xar08auv.vsp.sas.com/SAS_work3E77003C9B61_xar08auv.vsp.sas.com: RC=0
_PARENTJOB_WRK_=/saswork/sas_tmp/SAS_work774E003C9B61_xar08auv.vsp.sas.com/SAS_work3E77003C9B61_xar08auv.vsp.sas.com PARWRK_LIBREF_ASSIGNED=1
MPRINT(PROGRAMEND):   options nosymbolgen nomlogic;
sbg=NOSYMBOLGEN
MPRINT(PROGRAMEND):   * seconds ;
MPRINT(PROGRAMEND):   * convert seconds to days ;
MPRINT(PROGRAMEND):   * subtract days from run time ;


=================================================================================================================
SAS PROGRAM : /clinical/argx-113/x-ind/argx-113-0000/biostat/staging/generic_adam/programs/taeisr.sas
RUN ENVIRONMENT: repository  -  SYSMEXECDEPTH:2  - DEBUG: 0
SAS LOG     : /clinical/argx-113/x-ind/argx-113-0000/biostat/staging/generic_adam/log/t_2.8.2_taeisr.log
PRINTTO LOG : LOGF =  /clinical/argx-113/x-ind/argx-113-0000/biostat/staging/generic_adam/log/t_2.8.1_taeisr.log
SAS OUTPUT  : /clinical/argx-113/x-ind/argx-113-0000/biostat/staging/generic_adam/output/t_2.8.2_taeisr.lst
PRINTTO LIST: TABO =  /clinical/argx-113/x-ind/argx-113-0000/biostat/staging/generic_adam/output/t_2.8.2_taeisr.lst
-----------------------------------------------------------------------------------------------------------------
USER                                  : jbodart
SAS VERSION                           : 9.04.01M7P08052020
PLATFORM                              : Linux LIN X64 4.18.0-305.19.1.el8_4.x86_64 #1 SMP Tue Sep 7 07:07:31 EDT 2021 x86_64 Red Hat Enterprise Linux release 8.4 (Ootpa)
HOSTNAME                              : xar08auv
ENCODING                              : utf-8
JOBID                                 : 4132195
START DATE AND TIME OF EXECUTION      : Saturday, 3 June 2023 at 03:08:56
COMPLETION DATE AND TIME OF EXECUTION : Saturday, 3 June 2023 at 03:09:08
COMPUTATION TIME                      : 0 days 0 hours 0 minutes 11.3 seconds
=================================================================================================================


MPRINT(PROGRAMEND):   options NOSYMBOLGEN NOMLOGIC;

Notice: === (PROGRAMEND): Starting, 2023-06-03T03:09:07.74 - SYSMEXECDEPTH: 2 - DEBUG: 0 ===
Notice: === (PROGRAMEND): OUTPUTFILENAME=t_2.8.2_taeisr TYPE= ===
Notice: === (PROGRAMEND): ODS LISTING is now OPEN. ===
Notice: === (PROGRAMEND): SYSPRINTTOLIST=TABO =
/lsafshared/SASWorkspaces/.transient/job_taeisr.job-e19492be-402c-4d8d-bc56-04fdf60d0a18/clinical/argx-113/x-ind/argx-113-0000/biostat/staging/generic_adam/output/t_2.8.2_taeisr.ls
t ===
Notice: === (PROGRAMEND): SYSPRINTTOLOG=LOGF =
/lsafshared/SASWorkspaces/.transient/job_taeisr.job-e19492be-402c-4d8d-bc56-04fdf60d0a18/clinical/argx-113/x-ind/argx-113-0000/biostat/staging/generic_adam/log/t_2.8.1_taeisr.log
===
MPRINT(PROGRAMEND):   ods listing;
Notice: === (PROGRAMEND): ODS LISTING is now OPEN. ===
Current LISTING select list is set to default value (ALL).
Current OVERALL select list is: ALL
MPRINT(ODSDEST):   ODS LISTING show ;
MPRINT(PROGRAMEND):   ;
MPRINT(PROGRAMEND):   ods rtf close;
MPRINT(PROGRAMEND):   ods pdf close;

MPRINT(PROGRAMEND):   proc printto print=print;
MPRINT(PROGRAMEND):   run;
NOTE: At least one W.D format was too small for the number to be printed. The decimal may be shifted by the "BEST" format.
NOTE: PROCEDURE PRINTTO used (Total process time):


================================================================> Page 48 <================================================================


The SAS System

      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(PROGRAMEND):   footnote;
MPRINT(PROGRAMEND):   *- resetting the footnotes so they do not appear in the Synopsis of Program Execution -*;
Notice:(PROGRAMEND): Undefined output &TYPE, set to T according to OUTPUTFILENAME=t_2.8.2_taeisr.
(PROGRAMEND): TYPE=T
MPRINT(PROGRAMEND):   *- For Tables and Listings, systematically generate a TXT and a PDF file -*;
filesize = 0
fname = t_2.8.2_taeisr.lst
MPRINT(PROGRAMEND):  ;
ndatetime = 2001380947
fdatetime = 2023-06-03T03:09:07.000
fname = t_2.8.2_taeisr.lst
MPRINT(PROGRAMEND):  ;
WARNING:(PROGRAMEND): SKIPPING empty listing output (size: 0) dated 2023-06-03T03:09:07.000:
/lsafshared/SASWorkspaces/.transient/job_taeisr.job-e19492be-402c-4d8d-bc56-04fdf60d0a18/clinical/argx-113/x-ind/argx-113-0000/biostat/staging/generic_adam/output/t_2.8.2_taeisr.ls
t.
MPRINT(PROGRAMEND):   option nomautolocdisplay;
MPRINT(PROGRAMEND):   option nosyntaxcheck obs=max;
DEBUG=0 RUNENVIRONMENT=repository
MPRINT(PROGRAMEND):   proc printto log=log;
MPRINT(PROGRAMEND):   run;
