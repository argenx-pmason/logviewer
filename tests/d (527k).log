NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

50         
51         options _last_=_null_ source source2;
52         
53         /*  WARNING: Some punctuation in the _SDDPRC_ value below has been replaced with underscores.  */
54         %let _SDDPRC_=%bquote(Process: mysdd_ae_meddra_w_flag_generation_v1.sas-<version not available>_/lillyce/qa/multi_compound/gps/general_safety/programs_ from SAS Drug Development Domain
54       ! dated Mon Mar 07 21:06:51 GMT 2016);
55         
56         ;*';*";*/;*);run;quit;
57         
58         /****************************************************
59           Starting Process run....
60             Process: mysdd_ae_meddra_w_flag_generation_v1.sas-<version not available>(/lillyce/qa/multi_compound/gps/general_safety/programs) from SAS Drug Development Domain dated Mon Mar 07
60       ! 21:06:51 GMT 2016
61         *****************************************************/
62         
63         
64         
65         /*****************************************/
66         /*   Process Parameter Macro Assignments */
67         /*****************************************/
68         
69         
70         
71         /*  Assign parameter macro: DICT (Data Dictionary Folder)
72             Parameter type: FOLDER (Folder)
73             Selected file: current-<version not available>(/lillyce/prd/dictionaries) from SAS Drug Development Domain dated <date not available>  */
74         %let DICT = /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp1;
75         
76         /*  Assign parameter macro: OUTPATH (Folder)
77             Parameter type: FOLDER (Folder)
15                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

78             Selected file: tfl_output-<version not available>(/lillyce/qa/multi_compound/gps/general_safety/programs) from SAS Drug Development Domain dated <date not available>  */
79         %let OUTPATH = /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp2;
80         
81         /*  Assign parameter macro: MEDDRADICT (Folder)
82             Parameter type: FOLDER (Folder)
83             Selected file: current-<version not available>(/lillyce/prd/dictionaries) from SAS Drug Development Domain dated <date not available>  */
84         %let MEDDRADICT = /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp3;
85         
86         /*  Assign parameter macro: MEDDRAPATH (Folder)
87             Parameter type: FOLDER (Folder)
88             Selected file: ae_meddra-<version not available>(/lillyce/qa/multi_compound/gps/general_safety/data/custom) from SAS Drug Development Domain dated <date not available>  */
89         %let MEDDRAPATH = /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp4;
90         
91         /*  Assign parameter macro: BUMLIB (Folder)
92             Parameter type: FOLDER (Folder)
93             Selected file: macro_library-<version not available>(/lillyce/prd/general/bums) from SAS Drug Development Domain dated <date not available>  */
94         %let BUMLIB = /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp5;
95         
96         /*  Assign parameter macro: UTILPATH (Folder)
97             Parameter type: FOLDER (Folder)
98             Selected file: author_component_modules-<version not available>(/lillyce/qa/multi_compound/gps/general_safety/programs) from SAS Drug Development Domain dated <date not available>  */
99         %let UTILPATH = /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp6;
100        
101        /*  Assign parameter macro: STUDYPATH (Folder)
102            Parameter type: FOLDER (Folder)
103            Selected file: sdtm_ff-<version not available>(/lillyce/qa/multi_compound/gps/general_safety/data/custom) from SAS Drug Development Domain dated <date not available>  */
104        %let STUDYPATH = /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp7;
16                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

105        
106        
107        
108        /****************************************/
109        /*          Process Source Code         */
110        /****************************************/
111        
112        /********** Set SAS options *************************/
113        options NOSYMBOLGEN NOMPRINT _last_=_null_ notes source source2;
114        
115        
17                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

116        /****************************************************************************/
117        /*                                                                          */
118        /*         PROGRAM NAME: MedDRA at a Glance Panel                           */
119        /*                                                                          */
120        /*          DESCRIPTION: Find subject counts per arm for each adverse event */
121        /*                        at each MedDRA level                              */
122        /*                       Find risk difference, relative risk, and Fisher's  */
123        /*                        exact test p-value for each pair of arms          */
124        /*                       Creates an Excel XML output file which allows      */
125        /*                        users to compare arms and highlight terms with    */
126        /*                        statistics above user-set thresholds              */
127        /*                                                                          */
128        /*      EVALUATION TYPE: Safety                                             */
129        /*                                                                          */
130        /*               AUTHOR: David Kretch (david.kretch@us.ibm.com)	          */
131        /*                                                                          */
132        /*                 DATE: February 15, 2011                                  */
133        /*                                                                          */
134        /*  EXTERNAL FILES USED: ae_setup.sas -- Merges AE, DM, and EX              */
135        /*                       ae_meddra.sas -- Does the analysis                 */
136        /*                       ae_meddra_output.sas -- Creates the output         */
137        /*                       xml_output.sas -- XML formatting macros            */
138        /*                       data_checks.sas -- Generic variable checks         */
139        /*                       sl_gs_output.sas -- Script Launcher settings output*/
140        /*                       err_output.sas -- Error output when missing vars   */
141        /*                       mdhier_x_y.sas7bdat -- MedDRA hierarchy ver. X.Y   */
142        /*                       dme.sas7bdat -- Designated Medical Events list     */
143        /*                                                                          */
144        /*  PARAMETERS REQUIRED: saspath -- location of external panel SAS programs */
145        /*                       utilpath -- location of external util SAS programs */
146        /*                       meddrapath -- location of MedDRA hierachy datasets */
147        /*                       dmepath -- location of the DME list dataset        */
148        /*                       aemedout -- file and path of output                */
149        /*                                                                          */
150        /*                       ver -- MedDRA version                              */
151        /*                       study_lag -- window in days after last exposure    */
152        /*                                    where AEs should be kept in analysis  */
153        /*                       cc -- continuity correction value                  */
154        /*                                                                          */
155        /*           LOCAL ONLY: outpath -- location of the output                  */
156        /*                       studypath -- location of the drug study datasets   */
157        /*                                                                          */
158        /*   VARIABLES REQUIRED: AE -- AEBODSYS                                     */
159        /*                             AEDECOD                                      */
160        /*                             USUBJID                                      */
161        /*                       DM -- ACTARM or ARM                                */
162        /*                             USUBJID                                      */
163        /*                       EX -- USUBJID                                      */
164        /*                                                                          */
165        /*       VARIABLES USED: AE -- AESTDTC                                      */
166        /*       WHEN AVAILABLE  DM -- RFSTDTC                                      */
167        /*                             RFENDTC                                      */
168        /*                             ARMCD                                        */
169        /*                       EX -- EXSTDTC                                      */
170        /*                             EXENDTC                                      */
171        /*                                                                          */
172        /*            MADE WITH: SAS 9.2                                            */
173        /*                                                                          */
18                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

174        /*                NOTES:                                                    */
175        /*                                                                          */
176        /****************************************************************************/
177        
178        /* REVISIONS */
179        /*"&utilpath"
180        2011-03-27  DK  Adding SL to SAS parameter mapping
181                        Run location handling
182        2011-05-07	DK  Changed lines 1827-1829 in ae_meddra_output to make the arm count
183                        a comma formatted number stored in a character variable
184        2011-05-08  DK  Added handling for errors in case DM has no subjects
185        
186        */
187        
188        options MAUTOSOURCE sasautos=("&bumlib"  sasautos) symbolgen mprint source2;
189        
190        libname inlib "&studypath.";
SYMBOLGEN:  Macro variable STUDYPATH resolves to /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp7
NOTE: Libref INLIB was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp7
191        libname outlib "&outpath ";
SYMBOLGEN:  Macro variable OUTPATH resolves to /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp2
NOTE: Libref OUTLIB was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp2
192        libname meddra "&meddrapath.";
SYMBOLGEN:  Macro variable MEDDRAPATH resolves to /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp4
NOTE: Libref MEDDRA was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp4
193        libname dme "&meddrapath.";
SYMBOLGEN:  Macro variable MEDDRAPATH resolves to /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp4
NOTE: Libname DME refers to the same physical library as MEDDRA.
NOTE: Libref DME was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp4
SYMBOLGEN:  Macro variable UTILPATH resolves to /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp6
194        
195        %include "&utilpath./ae_setup.sas"; 	
NOTE: %INCLUDE (level 1) file /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp6/ae_setup.sas is file 
      /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp6/ae_setup.sas.
196       +/*******************************************/
197       +/* ADVERSE EVENT PANEL SETUP               */
198       +/* 	                                       */
199       +/* 1. validate subjects and adverse events */
200       +/* 2. merge AE, DM, and EX 	               */
201       +/* 3. look up MedDRA terms and DMEs        */
202       +/*******************************************/
203       +
204       +/* REVISION HISTORY */
205       +/*
206       +2011-05-08  DK  Added handling for errors in case DM has no subjects
207       +
208       +2011-05-31  DK  Modified the SQL that creates macro variables for 
209       +                the number of AEs in the safety pop in the rpt_setup macro
210       +                to handle the case of 0 AEs (previously would return a 0)
211       +
19                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

212       +2011-06-18  DK  Changed the date validation to compare start and end separately
213       +				in order to handle dates with missing days better
214       +
215       +2011-06-19  DK  Added a check for long character strings in arm names
216       +                and broke up those separated by slashes with an additional space
217       +
218       +2015-08-13  DC  Program now uses only Preferred term to make the MedDRA hierarchy (line 465)
219       +
220       +*/
221       +
222       +/* sets up datasets for aggregation */
223       +/* finds safety population and adverse events during study */
224       +%macro setup(mdhier=N,dme=N);
225       +
226       +	/* if data validation switch doesn't exist, set it to on */
227       +	%if not %symexist(vld_sw) %then %let vld_sw = 1;
228       +
229       +	/* if there is no study lag defined, set it to 30 days */
230       +	%if not %symexist(study_lag) %then %let study_lag = 30;
231       +
232       +
233       +	/**************************/
234       +	/* preliminary datachecks */
235       +	/**************************/
236       +
237       +	%log_msg(DATA CHECKS);
238       +
239       +	/* check that there are subjects in DM */
240       +	%chk_dm_subj_gt0;
241       +
242       +
243       +	/* required variables */
244       +	%chk_var(ds=ae,var=aebodsys);
245       +	%chk_var(ds=ae,var=aedecod);
246       +	%chk_var(ds=ae,var=usubjid);
247       +
248       +	%chk_var(ds=dm,var=usubjid);
249       +
250       +	%chk_var(ds=ex,var=usubjid);
251       +
252       +	data rpt_chk_var_req;
253       +		set rpt_chk_var;
254       +	run;
255       +
256       +	/* actual arm or planned arm */
257       +	%chk_var(ds=dm,var=actarm);
258       +	%chk_var(ds=dm,var=arm);
259       +
260       +	/* insert a row into RPT_CHK_VAR_REQ indicating whether actual arm OR arm exists */
261       +	proc sql noprint;
262       +		insert into rpt_chk_var_req
263       +		set chk = 'VAR',
264       +		    ds = 'DM',
265       +			var = 'ACTARM or ARM',
266       +			condition = 'EXISTS',
267       +			ind = %sysfunc(ifc(&dm_actarm. or &dm_arm.,1,0));
268       +	quit; 
269       +
20                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

270       +	/* store which arm variable to use */
271       +	%global arm_var;
272       +	%if &dm_actarm. %then %let arm_var = ACTARM;
273       +	%else %if &dm_arm. %then %let arm_var = ARM;
274       +	%else %let arm_var = ;
275       +
276       +	/* set a flag indicating whether all required variables are present */
277       +	%global setup_req_var;
278       +	%if &ae_aebodsys.
279       +	    and &ae_aedecod.
280       +		and &ae_usubjid.
281       +        and (&dm_actarm. or &dm_arm.)
282       +        and &dm_usubjid. 
283       +        and &ex_usubjid. %then %let setup_req_var = 1;
284       +	%else %let setup_req_var = 0;
285       +
286       +	%if not &dm_subj_gt0. or not &setup_req_var. %then %goto setup_exit;
287       +
288       +	/* optional variables */
289       +	%chk_var(ds=ae,var=aestdtc);
290       +	%chk_var(ds=ae,var=aeser); 
291       +	%chk_var(ds=ae,var=aesev);
292       +	%chk_var(ds=ae,var=aetoxgr);
293       +	%chk_var(ds=dm,var=rfstdtc); 
294       +	%chk_var(ds=dm,var=rfendtc);
295       +	%chk_var(ds=dm,var=armcd);
296       +	%chk_var(ds=ex,var=exstdtc);
297       +	%chk_var(ds=ex,var=exendtc);
298       +
299       +	%let ex_exdtc = /*&ex_exstdtc.*/ %sysfunc(ifc(&ex_exstdtc. and &ex_exendtc.,1,0));
300       +	%let dm_rfdtc = %sysfunc(ifc(&dm_rfstdtc. and &dm_rfendtc.,1,0));
301       +
302       +	/* if no dates are available, turn off the AE validation */
303       +	%if not (&ae_aestdtc. and (&ex_exdtc. or &dm_rfdtc.)) %then %do;
304       +		%let vld_sw = 0;
305       +		%put;
306       +		%put WARNING: AE data validation has been turned off because required variables are missing;
307       +		%put;
308       +	%end;
309       +
310       +
311       +	/***********************************/
312       +	/* subjects from demographics (DM) */
313       +	/***********************************/
314       +
315       +	%log_msg(%str(DEMOGRAPHICS DOMAIN (DM)));
316       +
317       +	data all_dm;
318       +		set dm(keep=usubjid &arm_var. 
319       +		            %if &dm_armcd. %then armcd;
320       +                    %if &vld_sw. and &dm_rfdtc. %then rfstdtc rfendtc;
321       +               );
322       +
323       +		/* set the arm variable (either actual arm or planned arm) to ARM */
324       +		arm = &arm_var.;
325       +
326       +		/* exclude screen failures and unassigned subjects */
327       +		%if &dm_armcd. %then %do;
21                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

328       +			if upcase(armcd) in ('SCRNFAIL' 'NOTASSGN') then delete;
329       +		%end;
330       +
331       +		/* convert the subject reference character date fields to numeric */
332       +		%if &vld_sw. and &dm_rfdtc. %then %do;
333       +			length rfstdt 8. rfendt 8.;
334       +			format rfstdt e8601da. rfendt e8601da.;
335       +			label rfstdt='Subject Reference Start Date' rfendt='Subject Reference End Date';
336       +			call missing(rfstdt,rfendt);
337       +
338       +			rfstdt_len = length(trim(rfstdtc));
339       +			if rfstdt_len >= 10 then rfstdt = input(substr(rfstdtc,1,10),?? e8601da.);
340       +			else if rfstdt_len >= 7 then rfstdt = input(substr(rfstdtc,1,7)||'-01',?? e8601da.);
341       +
342       +			rfendt_len = length(trim(rfendtc));
343       +			if rfendt_len >= 10 then rfendt = input(substr(rfendtc,1,10),?? e8601da.);
344       +			else if rfendt_len >= 7 then rfendt = input(substr(rfendtc,1,7)||'-01',?? e8601da.);
345       +
346       +		%end;
347       +	run;
348       +
349       +	proc sort data=all_dm; by usubjid; run;
350       +
351       +
352       +	/****************************************/
353       +	/* safety population from exposure (EX) */
354       +	/****************************************/
355       +
356       +	%log_msg(%str(EXPOSURE DOMAIN (EX)));
357       +
358       +	proc sql noprint;
359       +		create table all_ex(drop=null) as
360       +		select distinct usubjid,  /* Added "distinct" 11/13/2015 by PG. Removes duplicate records from dataset all_ex if variable exstdtc is removed from ex for analysis. */
361       +		       %if &vld_sw. /*and &ex_exdtc.*/ %then %do; 
362       +			      /* find the min and max treatment dates in EX */
363       +			      /* in order to use max(exstdtc,exendtc) as treatment end date, */
364       +			      /* comment out line 175 and ex_exdtc condition on line 163 and uncomment lines 173-174 */
365       +			      %if &ex_exstdtc. %then %do;
366       +                     min(input(substr(exstdtc,1,10),? e8601da.)) as exstdt format=e8601da. 
367       +                                                                           label='Treatment Start Date',
368       +			         10 as exstdt_len,
369       +			      %end;
370       +			      %if &ex_exstdtc. and &ex_exendtc. %then %do;
371       +                     max(max(input(substr(exstdtc,1,10),? e8601da.)),
372       +                         max(input(substr(exendtc,1,10),? e8601da.)))
373       +/*				     max(input(substr(exendtc,1,10),? e8601da.))*/
374       +                        as exendt format=e8601da. label='Treatment End Date', 
375       +			         10 as exendt_len,
376       +			      %end;
377       +				  %else %if &ex_exstdtc. %then %do;	
378       +                     max(input(substr(exstdtc,1,10),? e8601da.)) as exendt format=e8601da. 
379       +                                                                           label='Treatment End Date',
380       +			         10 as exendt_len,
381       +				  %end;
382       +			   %end;
383       +			   . as null
384       +		from ex
385       +		group by usubjid
22                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

386       +		order by usubjid;
387       +	quit;
388       +
389       +	/**********************************************************/
390       +	/* all subjects in the safety population assigned to arms */
391       +	/**********************************************************/
392       +
393       +	%log_msg(%str(SUBJECTS IN SAFETY POPULATION (DM & EX)));
394       +
395       +	data all_dm_ex(keep=arm usubjid %if &vld_sw. %then trtstdt trtstdt_len trtendt trtendt_len;)
396       +	     err_dm_ex;
397       +		merge all_dm(in=a)
398       +              all_ex(in=b);
399       +		by usubjid;
400       +
401       +		length err_type $10;
402       +
403       +		/* if the subject is in both DM and EX, then output */
404       +		if a and b then output = 1;
405       +		else if a then do;;
406       +			output = 0; 
407       +			err_type = 'ex';
408       +		end;
409       +		else delete;
410       +
411       +		%if &vld_sw. %then %do;
412       +			if output then do;
413       +				format trtstdt e8601da. trtendt e8601da.;
414       +				label trtstdt='Subject Treatment Start Date' trtendt='Subject Treatment End Date';
415       +				call missing(trtstdt,trtendt);
416       +
417       +				/* use the treatment start and end dates from EX if available */
418       +				%if &ex_exdtc. %then %do;
419       +					if not missing(exstdt) and not missing(exendt) then do;
420       +						trtstdt = exstdt;
421       +						trtstdt_len = exstdt_len;
422       +						trtendt = exendt;
423       +						trtendt_len = exendt_len;
424       +					end;
425       +				%end;
426       +				/* otherwise use the subject reference start and end dates from DM */
427       +				%if &dm_rfdtc. %then %do;
428       +					if not missing(rfstdt) and not missing(rfendt) and missing(trtstdt) and missing(trtendt) then do;
429       +						trtstdt = rfstdt;
430       +						trtstdt_len = rfstdt_len;
431       +						trtendt = rfendt;
432       +						trtendt_len = rfendt_len;
433       +					end;
434       +				%end;
435       +				
436       +				/* if the subject does not have valid start and end dates, then do not output */
437       +				if missing(trtstdt) or missing(trtendt) then do;
438       +					output = 0;
439       +					err_type = 'dt';
440       +				end;
441       +			end;
442       +		%end;
443       +
23                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

444       +		if output then output all_dm_ex;
445       +		else output err_dm_ex;
446       +	run; 
447       +
448       +	/* get counts of subjects per arm */
449       +	proc sql noprint;
450       +		create table all_arm as
451       +		select arm, count(distinct usubjid) as count
452       +		from all_dm_ex
453       +		group by arm
454       +		order by arm;
455       +
456       +		/* get maximum arm name length */
457       +		%global max_arm_nm_len;
458       +		select max(length(arm)) into: max_arm_nm_len
459       +		from all_arm;
460       +	quit;
461       +
462       +	data all_arm;
463       +		set all_arm end=eof;
464       +
465       +		arm_num = _n_;
466       +
467       +		retain total;
468       +		total = sum(total,count);
469       +
470       +		call symputx('arm_'||put(_n_,8. -L),put(count,8. -L),'g');
471       +
472       +		if eof then do;	
473       +			call symputx('arm_count',put(_n_,8. -L),'g');
474       +			call symputx('arm_total',put(total,8. -L),'g');
475       +		end; 
476       +	run; 
477       +
478       +	/* assign arm numbers */
479       +	data all_dm_ex;
480       +		set all_dm_ex;
481       +
482       +		if _n_ = 1 then do;
483       +			declare hash h(dataset:'all_arm');
484       +			h.definekey('arm');
485       +			h.definedata('arm_num');
486       +			h.definedone();
487       +		end;
488       +
489       +		length arm_num 8.;
490       +		label arm_num='Arm Number';
491       +		call missing(arm_num);
492       +		rc = h.find();
493       +		drop rc;
494       +	run;
495       +
496       +	/**************************************/
497       +	/* import adverse events (AE) dataset */
498       +	/**************************************/
499       +
500       +	%log_msg(%str(ADVERSE EVENTS DOMAIN (AE)));
501       +
24                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

502       +	data all_ae;
503       +		retain usubjid aebodsys aedecod aeseq aestdtc;
504       +		set ae(keep=usubjid aebodsys aedecod aeseq
505       +		            %if &ae_aeser. %then aeser;
506       +					%if &ae_aesev. %then aesev;
507       +					%if &ae_aetoxgr. %then aetoxgr;
508       +                    %if &vld_sw. %then aestdtc;
509       +					aeendtc
510       +               );
511       +
512       +		/* change adverse event descriptions variables to proper noun case */
513       +		if not anylower(aebodsys) then aebodsys = propcase(aebodsys);
514       +		if not anylower(aedecod) then aedecod = propcase(aedecod);
515       +
516       +		/* validate AETOXGR */
517       +		%if &ae_aetoxgr. %then %do;
518       +			%if %symexist(toxgr_min) and %symexist(toxgr_max) %then %do;
519       +				/* convert from character to numeric if necessary */
520       +				%if &ae_aetoxgr_type. = C %then %do;
521       +					if not notdigit(aetoxgr) then aetoxgr_num = input(aetoxgr,8.);
522       +				%end;
523       +				%else %do;
524       +					aetoxgr_num = aetoxgr;
525       +				%end;
526       +
527       +				if not (&toxgr_min. <= aetoxgr_num <= &toxgr_max.) then aetoxgr_num = .;
528       +				drop aetoxgr;
529       +				rename aetoxgr_num = aetoxgr;
530       +			%end;
531       +		%end;
532       +		%else %do;
533       +			call missing(aetoxgr);
534       +		%end;
535       +
536       +		/* convert the character start date/time of the AE to numeric */
537       +		%if &vld_sw. %then %do;
538       +			format aestdt e8601da.;
539       +			label aestdt='Adverse Event Start Date';
540       +			call missing(aestdt);
541       +
542       +			aestdt_len = length(trim(aestdtc));
543       +
544       +			if aestdt_len >= 10 then aestdt = input(substr(aestdtc,1,10),?? e8601da.);
545       +			else if aestdt_len >= 7 
546       +				then aestdt = mdy(input(substr(aestdtc,6,2),2.),1,input(substr(aestdtc,1,4),4.));
547       +		%end;
548       +	run;
549       +
550       +	proc sort data=all_ae; by usubjid aebodsys aedecod aeseq; run;
551       +
552       +
553       +	/******************************************************/
554       +	/* find all adverse events whose subject              */
555       +	/* is assigned to an arm and in the safety population */
556       +	/******************************************************/
557       +	
558       +	%log_msg(%str(ADVERSE EVENTS FOR SUBJECTS IN SAFETY POPULATION (AE, DM, & EX)));
559       +
25                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

560       +	data all_ae_dm_ex;
561       +		merge all_dm_ex(in=a)
562       +              all_ae(in=b)
563       +		      ;
564       +		by usubjid;
565       +		if a and b;
566       +	run;
567       +
568       +	/* keep only those adverse events that took place during the study analysis period */
569       +	/* keep counts of adverse events included and excluded in a reporting dataset */
570       +	data ds_base(drop=err: %if &vld_sw. %then aestdt aestdt_len trtstdt: trtendt:;)
571       +	     err_base(drop=total);
572       +		set all_ae_dm_ex end=eof;
573       +
574       +		total = 'Total'; /* for aggregating over all adverse events */
575       +
576       +		length err 8 err_type $10 err_desc $50;
577       +		call missing(err,err_type,err_desc);
578       +
579       +		/* do data validation if data validation switch is on */
580       +		%if &vld_sw. = 1 %then %do;
581       +
582       +			if missing(aestdt) then do;
583       +				output = 0;	
584       +				err_type = 'dt';
585       +				err = 1; err_desc = '1. Date missing or incomplete';
586       +			end;
587       +			else do; 
588       +				/* compare the AE start date to the treatment start date */
589       +				stdt_len = min(aestdt_len,trtstdt_len);
590       +
591       +				if (10 <= stdt_len and not (aestdt >= trtstdt))
592       +				or (7 <= stdt_len < 10 and not (mdy(month(aestdt),1,year(aestdt)) 
593       +                                                >= mdy(month(trtstdt),1,year(trtstdt))))
594       +				then do;
595       +					output = 0;
596       +					err_type = 'dt';
597       +					err = 2; err_desc = '2. Date before study analysis period';
598       +				end;
599       +				
600       +				/* compare the AE start date to the treatment end date */
601       +				endt_len = min(aestdt_len,trtstdt_len);
602       +
603       +				if (10 <= endt_len and not (intnx('day',trtendt,&study_lag.) >= aestdt))
604       +				or (7 <= endt_len < 10 and not (intnx('month',mdy(month(trtendt),1,year(trtendt)),floor(&study_lag./30))
605       +                                                >= mdy(month(aestdt),1,year(aestdt))))
606       +				then do;
607       +					output = 0;
608       +					err_type = 'dt';
609       +					err = 3; err_desc = '3. Date after study analysis period';
610       +				end;
611       +
612       +				if output ne 0 then output = 1;
613       +			end;
614       +
615       +			/* flag records with missing AEBODSYS or AEDECOD descriptions */
616       +			if aebodsys = '' or aedecod = '' then do;
617       +				output = 0;
26                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

618       +				err_type = 'desc';
619       +				err = 4; err_desc = '4. Description missing';
620       +			end;
621       +		%end;
622       +		%else %do;
623       +			output = 1;
624       +		%end;
625       +
626       +		if output then output ds_base;
627       +		else output err_base;
628       +	run;
629       +
630       +	proc sort data=ds_base; by aebodsys aedecod; run; 
631       +
632       +
633       +	/****************************************/
634       +	/* MEDDRA AND DESIGNATED MEDICAL EVENTS */
635       +	/****************************************/
636       +
637       +	%if &mdhier. = Y %then %do;
638       +
639       +		%log_msg(LOOK UP MEDDRA TERMS);
640       +
641       +		/* The below data step was added 11/20/2015 by Peter Glass as part of effort to use only AEDECOD to look up MedDRA terms (line 465) */;
642       +
643       +		data meddra_primary_soc; 
644       +			set meddra.mdhier_%sysfunc(translate(&ver.,'_','.'));
645       +			if primary_soc_fg = 'Y';
646       +		run;
647       +
648       +		/* merge by-subject/preferred term adverse events with */
649       +		/* the appropriate version of the MedDRA hierarchy */
650       +		data ds_base_meddra(drop=aebodsys aedecod)
651       +		     err_base_meddra;
652       +			set ds_base(drop=output);
653       +
654       +			aebodsys = upcase(aebodsys);
655       +			aedecod = upcase(aedecod);
656       +
657       +			if _n_ = 1 then do;
658       +				declare hash h(dataset:"meddra_primary_soc");
659       +				*h.definekey('aebodsys','aedecod');
660       +				h.definekey('aedecod');
661       +				h.definedata('soc_name','hlgt_name','hlt_name','pt_name');
662       +				h.definedone();
663       +			end;
664       +
665       +			length soc_name $100 hlgt_name $100 hlt_name $100 pt_name $100;
666       +			label soc_name='System Organ Class'
667       +                  hlgt_name='High-Level Group Term'
668       +                  hlt_name='High-Level Term'
669       +                  pt_name='Preferred Term';
670       +			call missing(soc_name,hlgt_name,hlt_name,pt_name);
671       +
672       +			rc = h.find();
673       +			if rc = 0 then output = 1;
674       +			else output = 0;
675       +			drop rc;
27                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

676       +
677       +			/* add designated medical event flag */
678       +			%if &dme. = Y %then %do;
679       +
680       +				if _n_ = 1 then do;
681       +					declare hash i(dataset:'dme.dme(rename=(llt_name=pt_name))');
682       +					i.definekey('pt_name');
683       +					i.definedata('dme');
684       +					i.definedone();
685       +				end;
686       +
687       +				length dme $1;
688       +				label dme='Designated Medical Event';
689       +				call missing(dme);
690       +
691       +				rc = i.find();
692       +				drop rc;
693       +			%end;
694       +
695       +			if output then output ds_base_meddra;
696       +			else output err_base_meddra;
697       +		run;
698       +
699       +
700       +		/* MedDRA matching report */
701       +		/* get the counts of each term without a matching MedDRA description and number of subjects affected */
702       +		proc sql noprint;
703       +			/* store count and proportion of adverse events that were matched with MedDRA terms */
704       +			create table rpt_meddra as
705       +			select "MedDRA hierarchy version &ver." as meddra_ver, 
706       +				   meddra_cnt,
707       +			       err_cnt,
708       +				   100*meddra_cnt/(meddra_cnt+err_cnt) as meddra_pct
709       +			from (select count(1) as meddra_cnt from ds_base_meddra),
710       +                 (select count(1) as err_cnt from err_base_meddra);	
711       +
712       +			%global meddra_pct meddra;
713       +			select meddra_pct
714       +	               into : meddra_pct
715       +			from rpt_meddra;
716       +
717       +			create table rpt_meddra_term as
718       +			select (case when a.aebodsys is missing then b.aebodsys else a.aebodsys end) as aebodsys
719       +			        label='Body System or Organ Class',
720       +	               (case when a.aedecod is missing then b.aedecod else a.aedecod end) as aedecod
721       +			        label='Dictionary-Derived Term',
722       +	               subj_count, event_count
723       +			from (select aebodsys, aedecod, count(distinct usubjid) as subj_count label='No Matching MedDRA Description Subject Count'
724       +			      from err_base_meddra
725       +				  group by aebodsys, aedecod) a,
726       +				 (select aebodsys, aedecod, count(1) as event_count label='No Matching MedDRA Description Event Count'
727       +				  from err_base_meddra
728       +				  group by aebodsys, aedecod) b
729       +			where a.aebodsys = b.aebodsys
730       +			and a.aedecod = b.aedecod;
731       +		quit;
732       +
733       +		data rpt_meddra_term;
28                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

734       +			set rpt_meddra_term;
735       +			aebodsys = propcase(aebodsys);
736       +			aedecod = propcase(aedecod);
737       +		run;
738       +
739       +	%end;
740       +
741       +	/* write out arms into macro variables in propcase form */
742       +	data all_arm;
743       +		set all_arm end=eof;
744       +
745       +		/* put words into propcase, leave acronyms and abbreviations as-is */
746       +		arm_display = arm;
747       +		if arm_display ne '' and not anylower(arm_display) then do;
748       +			length arm_word $50;
749       +			i = 1;
750       +			arm_word = scan(arm_display,i);
751       +			do while (arm_word ne '');
752       +				if length(arm_word) > 3 and not anydigit(compress(arm_word)) 
753       +						then substr(arm_display,index(arm_display,compress(arm_word)),length(compress(arm_word))) = propcase(compress(arm_word));
754       +				if compress(arm_word) in ('UP') 
755       +					then substr(arm_display,index(arm_display,compress(arm_word)),length(compress(arm_word))) = propcase(arm_word);
756       +				if compress(arm_word) in ('MG' 'KG') 
757       +					then substr(arm_display,index(arm_display,compress(arm_word)),length(compress(arm_word))) = lowcase(arm_word);
758       +				if compress(arm_word) = ('ML') 
759       +					then substr(arm_display,index(arm_display,compress(arm_word)),length(compress(arm_word))) = 'mL';
760       +				i = i + 1;
761       +				arm_word = scan(arm_display,i);
762       +			end;
763       +		end;
764       +
765       +		/* if the arm name has long character strings broken only by slashes, add spaces */
766       +		if index(arm_display,'/') then do;
767       +			i = 1;
768       +			arm_word = scan(arm_display,i,' ');
769       +			do while (arm_word ne '');
770       +				if length(arm_word) > 40 and index(arm_word,'/') then longword = 1;
771       +				i = i + 1; 
772       +				arm_word = scan(arm_display,i,' ');
773       +			end;
774       +			if longword = 1 then arm_display = tranwrd(arm_display,'/','/ ');
775       +		end;
776       +
777       +		call symputx('arm_name_'||put(_n_,8. -L),arm_display,'g');
778       +
779       +		drop arm_word i;
780       +	run; 		
781       +	
782       +	/* create setup reporting datasets */
783       +	%rpt_setup;
784       +
785       +	%setup_exit: %global setup_success;
786       +                 %if not &dm_subj_gt0. or not &setup_req_var. %then %do;
787       +				 	%if not &dm_subj_gt0. %then %put ERROR: There are no subjects in DM;
788       +	                %if not &setup_req_var. %then %put ERROR: Some variables required for AE setup are missing;
789       +                    %let setup_success = 0;
790       +	             %end;
791       +				 %else %let setup_success = 1;
29                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

792       +
793       +%mend setup;
794       +
795       +
796       +/* reporting info on data validation and MedDRA matching */
797       +%macro rpt_setup;
798       +
799       +	/* DEMOGRAPHICS */
800       +	/* subject validation */
801       +
802       +	%log_msg(SUBJECT VALIDATION REPORT);
803       +
804       +	data all_dm_ex;
805       +	set all_dm_ex;
806       +	rename arm = &arm_var.;
807       +	run;
808       +
809       +	/* get counts of the subjects removed before arriving at the set of subjects */
810       +	/* used in the analysis */
811       +	proc sql;
812       +		create table rpt_dm(drop=order) as
813       +
814       +		/* Subjects in demographics (DM) */
815       +		select 1 as order, '1. Subjects in demographics (DM)' as desc,
816       +		       %do i = 1 %to &arm_count.;
817       +			      sum(case 
818       +                      when compress(upcase(&arm_var.)) = compress(upcase("&&&arm_name_&i.")) 
819       +                           then 1 
820       +                           else 0 
821       +                      end) 
822       +				  as arm&i._count,
823       +			   %end;
824       +			   count(1) as total_count
825       +		from dm
826       +
827       +		union
828       +
829       +		/* Subjects removed - unassigned/screen failure */
830       +		select 2 as order, '2. Subjects removed - unassigned/screen failure' as desc,
831       +               %if &dm_armcd. %then %do;
832       +			       %do i = 1 %to &arm_count.;
833       +				      sum(case 
834       +	                      when compress(upcase(&arm_var.)) = compress(upcase("&&&arm_name_&i.")) 
835       +                               and upcase(armcd) in ('SCRNFAIL','NOTASSGN')
836       +	                           then 1 
837       +	                           else 0 
838       +	                      end) 
839       +                      as arm&i._count,
840       +				   %end;
841       +				   sum(case when upcase(armcd) in ('SCRNFAIL','NOTASSGN')then 1 else 0 end) as total_count
842       +			   %end;
843       +			   %else %do;
844       +			       %do i = 1 %to &arm_count.;
845       +				      0 as arm&i._count,
846       +				   %end;
847       +				   0 as total_count
848       +			   %end;
849       +		from dm
30                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

850       +
851       +		union
852       +
853       +		/* Subjects removed - not in safety population */
854       +		select 3 as order, '3. Subjects removed - not in safety population' as desc,
855       +		       %do i = 1 %to &arm_count.;
856       +			      (case when arm&i._count is missing then 0 else arm&i._count end) as arm&i._count,
857       +			   %end;
858       +			   total_count
859       +		from (select %do i = 1 %to &arm_count.;
860       +			            sum(case 
861       +                            when compress(upcase(&arm_var.)) = compress(upcase("&&&arm_name_&i.")) 
862       +                                 then 1 
863       +                                 else 0 
864       +                            end) 
865       +                        as arm&i._count,
866       +			         %end;
867       +					 count(1) as total_count
868       +              from err_dm_ex
869       +		      where err_type = 'ex')
870       +
871       +		union
872       +
873       +		/* Subjects removed - no treatment/reference dates */
874       +		select 4 as order, '4. Subjects removed - no treatment/reference dates' as desc,
875       +		       %do i = 1 %to &arm_count.; 
876       +                  (case when arm&i._count is missing then 0 else arm&i._count end) as arm&i._count, 
877       +               %end; 
878       +               total_count
879       +		from (select %do i = 1 %to &arm_count.; 
880       +                        sum(case 
881       +                            when compress(upcase(&arm_var.)) = compress(upcase("&&&arm_name_&i.")) 
882       +                                 then 1 
883       +                                 else 0 
884       +                            end) 
885       +                        as arm&i._count, 
886       +                     %end; 
887       +					 count(1) as total_count
888       +              from err_dm_ex
889       +			  where err_type = 'dt')
890       +
891       +		union
892       +
893       +		/* Subjects used in analysis */
894       +		select 5 as order, '5. Subjects used in analysis' as desc,
895       +		       %do i = 1 %to &arm_count.;
896       +			      sum(case 
897       +                      when compress(upcase(&arm_var.)) = compress(upcase("&&&arm_name_&i.")) 
898       +                           then 1 
899       +                           else 0 
900       +                      end) 
901       +                  as arm&i._count,
902       +			   %end;
903       +			   count(1) as total_count
904       +		from all_dm_ex;
905       +	quit;
906       +
907       +	/* add percentages of the original arm subject counts */
31                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

908       +	data rpt_dm;
909       +		retain desc %do i = 1 %to &arm_count.; arm&i._count arm&i._pct %end;;
910       +		set rpt_dm;
911       +
912       +		%do i = 1 %to &arm_count.;
913       +			retain dm_arm&i._count;
914       +			if _n_ = 1 then dm_arm&i._count = arm&i._count;
915       +			arm&i._pct = 100*arm&i._count/dm_arm&i._count;
916       +			drop dm_arm&i._count;
917       +		%end;
918       +
919       +		retain dm_total_count;
920       +		if _n_ = 1 then dm_total_count = total_count;
921       +		total_pct = 100*total_count/dm_total_count;
922       +		drop dm_total_count;
923       +	run;		
924       +
925       +	/* ADVERSE EVENTS */
926       +
927       +	%log_msg(ADVERSE EVENT DATA VALIDATION REPORT);
928       +
929       +	/* write out number of adverse events in safety population */
930       +	%global naes_sp;
931       +	%let dsid = %sysfunc(open(all_ae_dm_ex));
932       +	%let naes_sp = %sysfunc(attrn(&dsid.,nobs));
933       +	%let rc = %sysfunc(close(&dsid.));
934       +
935       +	/* and for each arm */
936       +	%do i = 1 %to &arm_count.; %global naes_sp_&i.; %end;;
937       +	proc sql noprint;
938       +		select %do i = 1 %to &arm_count.; sum(case when arm_num = &i. then 1 else 0 end) as sum_&i., %end;	
939       +               0 as null
940       +          into %do i = 1 %to &arm_count.; : naes_sp_&i., %end; : null
941       +		from all_ae_dm_ex;
942       +	quit;
943       +
944       +	/* write out number of validated adverse events in safety population */
945       +	%global naes_spv;
946       +	%let dsid = %sysfunc(open(ds_base));
947       +	%let naes_spv = %sysfunc(attrn(&dsid.,nobs));
948       +	%let rc = %sysfunc(close(&dsid.));
949       +
950       +	/* create table of counts of each kind of error (e.g. invalid dates) */
951       +	proc sql noprint;
952       +		create table rpt_err(drop=err null) as
953       +		select err, err_desc, 
954       +               %do i = 1 %to &arm_count.;
955       +			      arm&i._err_count, 100*arm&i._err_count/arm&i._count as arm&i._err_pct,
956       +			   %end;
957       +			   0 as null
958       +		from (select err, err_desc, 
959       +                     %do i = 1 %to &arm_count.; 
960       +                        sum(case when arm_num = &i. then 1 else 0 end) as arm&i._err_count, 
961       +                     %end; 
962       +              0 as null
963       +		      from err_base
964       +			  group by err, err_desc) a,
965       +			 (select %do i = 1 %to &arm_count.; 
32                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

966       +                        sum(case when arm_num = &i. then 1 else 0 end) as arm&i._count, 
967       +                     %end;
968       +			         0 as null
969       +			  from all_ae_dm_ex) b;
970       +	quit;
971       +
972       +	/* get counts per arm of each term that got thrown out due to invalid data */
973       +	proc sql noprint;
974       +		create table rpt_err_term_x as
975       +		select aebodsys, aedecod, arm_num, count(1) as count
976       +		from err_base
977       +		group by aebodsys, aedecod, arm_num;
978       +	quit;
979       +
980       +	proc transpose data=rpt_err_term_x out=rpt_err_term(drop=_name_) prefix=arm;
981       +		by aebodsys aedecod;
982       +		id arm_num;
983       +	run;
984       +
985       +	data rpt_err_term;
986       +		retain aebodsys aedecod %do i = 1 %to &arm_count.; arm&i. %end;;
987       +		set rpt_err_term;
988       +
989       +		%do i = 1 %to &arm_count.;
990       +			if arm&i. = . then arm&i. = 0;
991       +
992       +			label arm&i. = "&&&arm_name_&i. Event Count";
993       +		%end;
994       +
995       +		if aebodsys = '' then aebodsys = 'Missing';
996       +		if aedecod = '' then aedecod = 'Missing';
997       +	run;
998       +
999       +	proc datasets library=work nolist nodetails; delete rpt_err_term_x; quit;
1000      +
1001      +%mend rpt_setup;
1002      +
1003      +
1004      +/* print a text message with a box around it to the log */
1005      +%macro log_msg(text);
1006      +
1007      +	options nonotes;
1008      +
1009      +	data _null_;
1010      +		length = length("&text.");
1011      +
1012      +		length string $100 separator $100;
1013      +
1014      +		do i = 1 to length + 4;
1015      +			separator =  trim(left(separator))||"*";
1016      +		end;
1017      +
1018      +		string = '* '||trim("&text.")||' *';
1019      +
1020      +		put separator;
1021      +		put string;
1022      +		put separator;
1023      +	run;
33                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

1024      +
1025      +	options notes;
1026      +
1027      +%mend log_msg;
NOTE: %INCLUDE (level 1) ending.
SYMBOLGEN:  Macro variable UTILPATH resolves to /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp6
1028       %include "&utilpath./ae_meddra_output.sas";
NOTE: %INCLUDE (level 1) file /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp6/ae_meddra_output.sas is file 
      /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp6/ae_meddra_output.sas.
1029      +%let wbtitle = MedDRA at a Glance Comparison Analysis;
1030      +
1031      +/* length of the XML string */
1032      +/* must be wide enough to contain the longest string to be output */
1033      +%global strlen;
1034      +%let strlen = 1000;
1035      +
1036      +*%include "&utilpath.\xml_output.sas";
1037      +
1038      +
1039      +/*********************************************************/
1040      +/* MedDRA AT A GLANCE COMPARISON ANALYSIS COVER SHEET */
1041      +/*********************************************************/
1042      +%macro out_cover;
1043      +
1044      +	%let ds = cover;
1045      +	%let wstitle = Front Page;
1046      +
1047      +	%let nkeys = 1;
1048      +	%let nkeycols = 1;
1049      +	%let nvars = 1;
1050      +
1051      +	/* set up worksheet beginning and end sections */
1052      +	data ws_&ds._start;
1053      +		length string $&strlen.;
1054      +		string = '<Worksheet ss:Name="'||"&wstitle."||'">'; output; 
1055      +	run;
1056      +
1057      +	data ws_&ds._end; 
1058      +		length string $&strlen.; 
1059      +		string = '</Worksheet>'; output;
1060      +	run;
1061      +
1062      +	/* set up the column widths */
1063      +	data ws_&ds._table_start; 
1064      +		length string $&strlen.; 
1065      +		string = '<Table>'; output;
1066      +		string = '<Column ss:Width="16"/>'; output;
1067      +		string = '<Column ss:Width="125"/>'; output;
1068      +		string = '<Column ss:Width="21"/>'; output;
1069      +		do i = 1 to 5;
1070      +			string = '<Column ss:Width="13"/>'; output;
1071      +		end;
1072      +		do i = 1 to 2;
1073      +			do j = 1 to 2;
1074      +				string = ifc(j=1,'<Column ss:Width="50"/>','<Column ss:Width="35"/>'); output;
1075      +			end;
1076      +		end; 
1077      +		do i = 1 to 3;
34                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

1078      +			string = '<Column ss:Width="55"/>'; output;
1079      +		end;
1080      +		string = '<Column ss:Width="16"/>'; output;
1081      +		drop i j;
1082      +	run; 
1083      +
1084      +	data ws_&ds._table_end;
1085      +		length string $&strlen.; 
1086      +		string = '</Table>'; output;
1087      +	run;
1088      +
1089      +	/* make part 1 of the cover sheet */
1090      +	data ws_&ds._1_data; 
1091      +		length text $5000;
1092      +		text = ''; output;
1093      +
1094      +		text = 'MedDRA at a Glance Comparison Analysis Front Page'; output;
1095      +
1096      +		text = ''; output;
1097      +
1098      +		text = 'NDA/BLA: '||"&ndabla."; output;
1099      +		text = 'Study: '||"&studyid."; output;
1100      +		text = "Analysis run date: &rundate."; output;
1101      +
1102      +		text = ''; output;
1103      +
1104      +		text = 'This analysis shows all system organ class, high-level group term, high-level '||
1105      +               'term, and preferred term MedDRA levels corresponding to the adverse events that '||
1106      +               'appear in the study. It allows you to choose which two arms to compare and '||
1107      +               'shows you subject counts and percentages (risks) for each chosen arm, the '||
1108      +               'risk difference and relative risk between the two arms, and a negative log p-value, '||
1109      +               'which ranks how noteworthy the association between the arms and the adverse event is. '||
1110      +               'Terms that exhibit signals are highlighted, where a signal is a risk difference, '||
1111      +               'relative risk, or negative log p-value  above a threshold value, which you '||
1112      +               'can also set.'; output;
1113      +
1114      +		text = ''; output; 
1115      +
1116      +		text = 'This analysis is for data exploration only. It should not be used for statistical inference.'; output;
1117      +
1118      +		%if &arm_count. = 1 %then %do;
1119      +			text = ''; output; 
1120      +
1121      +			text = 'You are examining a one-arm study. The comparison functions of this report are '||
1122      +                   'not available.'; output;
1123      +		%end;
1124      +
1125      +		text = ''; output; 
1126      +
1127      +		text = 'How To Use This Report'; output;
1128      +
1129      +		text = '1. On the next tab, choose which arms you want to compare by selecting them '||
1130      +               'from the drop down menus that appear when you click in the yellow input cells for treatment '||
1131      +               'arm and control arm.'; output;
1132      +
1133      +		text = ''; output; 
1134      +
1135      +		text = '2. You can also choose what thresholds you want by typing in their respective yellow input cells. '||
35                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

1136      +               'A blank threshold means do not use that statistic; for example, if you only want to highlight '||
1137      +               'terms with risk differences above 5%, put 5 in the risk difference threshold (%) cell and '||
1138      +               'blank out the other two thresholds.'; output;
1139      +
1140      +		text = ''; output; 
1141      +
1142      +		text = '3. Once you have chosen your arms and thresholds, scroll down to see which terms are highlighted '||
1143      +               'to show that they have signals at your current threshold levels. You can also sort and filter '||
1144      +               'by each column using the drop-down menus on that column. When you filter a column, the arrow on '||
1145      +               'the drop-down button will turn from black to blue.'; output;
1146      +
1147      +		text = ''; output; 
1148      +
1149      +		text = 'Look for red arrows in the upper right corner of cells for hints on usage and '||
1150      +               'explanations of abbreviations.'; output;
1151      +
1152      +		text = ''; output; 
1153      +
1154      +		text = 'Here is an example line from the report. Each element is given a letter and explained below.'; output;
1155      +
1156      +		text = ''; output;
1157      +	run;
1158      +
1159      +	%annotate(ws_&ds._1_data,ws_&ds._1_note);
1160      +
1161      +	data ws_&ds._1_note;
1162      +		set ws_&ds._1_note;
1163      +
1164      +		if _n_ ne 1 then MergeAcross = 15; MergeDown = .;
1165      +		Height = max(1,ceil(length(Data)/135)) * 13.5;
1166      +
1167      +		StyleID = 'Default10Wrap';
1168      +
1169      +		if Data = 'MedDRA at a Glance Comparison Analysis Front Page' then do;
1170      +			StyleID = 'Header';
1171      +			Height = 15;
1172      +		end;
1173      +		else if Data in ('How To Use This Report'
1174      +                         'Toxicity Grade Summary'
1175      +                         'Preferred Term Analysis by Toxicity Grade') then StyleID = 'SubHeader';
1176      +	run;
1177      +
1178      +	%markup(ws_&ds._1_note,ws_&ds._1); 
1179      +
1180      +	/* make part 2 of the cover sheet, the example */
1181      +	data ws_&ds._2_note;
1182      +		retain Row;
1183      +		%xml_tag_def;
1184      +		%xml_init;
1185      +
1186      +		/* column header */
1187      +		StyleID = 'ColumnOutline';
1188      +		Type='String';
1189      +
1190      +		/* row 1 */
1191      +		Row = 1;
1192      +		Height = 13.5;
1193      +		MergeAcross = .; MergeDown = 2;
36                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

1194      +		StyleID = 'ColumnOutlineRotateCtr';
1195      +		Data = 'Level'; output;
1196      +
1197      +		StyleID = 'ColumnOutline';
1198      +		Data = 'System Organ Class'; output; 
1199      +
1200      +		StyleID = 'ColumnOutlineRotateCtr';
1201      +		MergeAcross = .; MergeDown = 2;	
1202      +		Data = 'DME'; output;
1203      +		Data = 'Signal'; output;
1204      +
1205      +		StyleID = 'ColumnOutline';
1206      +		MergeAcross = 3; MergeDown = .;
1207      +		Data = 'Signal At'; output;
1208      +
1209      +		MergeAcross = 1; MergeDown = .;
1210      +		Data = "Treatment:"; output;
1211      +		Data = "Control:"; output;
1212      +		MergeAcross = .;
1213      +
1214      +		StyleID = 'ColumnOutline';
1215      +		MergeAcross = .; MergeDown = 2;
1216      +		Data = 'Risk Difference'; output; 
1217      +		Data = 'Relative Risk'; output;
1218      +		Data = 'Negative Log&#10;P-value'; output;
1219      +
1220      +		Data = 'Sort Order'; StyleID = 'OR'; output;
1221      +
1222      +		/* row 2 */
1223      +		Row = 2;
1224      +		StyleID = 'ColumnOutlineRotateCtr';
1225      +		Height = 20;
1226      +		MergeAcross = .; MergeDown = 1;
1227      +		Index = 5;
1228      +		Data = 'SOC'; output;
1229      +		Index = .;
1230      +		Data = 'HLGT'; output;
1231      +		Data = 'HLT'; output;
1232      +		Data = 'PT'; output;
1233      +
1234      +		StyleID = 'ColumnOutline';
1235      +		MergeAcross = 1; MergeDown = .;
1236      +		Data = 'Arm 1'; output;
1237      +		Index = .;
1238      +		Data = 'Arm 2'; output;
1239      +		Formula = ''; MergeAcross = .;
1240      +
1241      +		/* row 3 */
1242      +		Row = 3;
1243      +		Height = 30;
1244      +		MergeAcross = .; MergeDown = .;
1245      +		%do i = 1 %to 2;
1246      +			Index = %sysfunc(ifc(&i.=1,9,.));
1247      +			Data = 'Subject Count'; output;
1248      +			Index = .;
1249      +			Data = '%'; output;
1250      +		%end;
1251      +
37                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

1252      +		/* example data row */
1253      +		Row = 4;
1254      +		Height = 11.25;	
1255      +		Type = 'Number'; StyleID = 'DataCenterBottom'; 
1256      +		Data = '1'; output;
1257      +		Type = 'String'; StyleID = 'DataBottom'; 
1258      +		Data = 'Blood and lymphatic system disorders'; output; 
1259      +		StyleID = 'DataCenterBottom';
1260      +		Data = '~!'; output;
1261      +		StyleID = 'Gray'; Data = 'Y'; output;
1262      +		StyleID = 'Red'; Data = 'Y'; output;
1263      +		StyleID = 'Peach'; Data = 'Y'; output;
1264      +		StyleID = 'Peach'; Data = 'Y'; output;
1265      +		StyleID = 'DataCenterBottom'; Data = ''; output;
1266      +		Type = 'Number';
1267      +		StyleID = 'D0_R2_BLB';
1268      +		Data = '100'; output;
1269      +		StyleID = 'D1_R1_BRB';
1270      +		Data = '20'; output;
1271      +		StyleID = 'D0_R2_BLB';
1272      +		Data = '50'; output;
1273      +		StyleID = 'D1_R1_BRB';
1274      +		Data = '10'; output;
1275      +		StyleID = 'D1_R2BR_BLRB';
1276      +		Data = '10'; output;
1277      +		StyleID = 'D1_R2_BLRB';
1278      +		Data = '2'; output;
1279      +		StyleID = 'D1_R2BR_BLRB';
1280      +		Data = '11.305077292'; output;
1281      +		StyleID = 'OW_BLRB';
1282      +		Data = ''; output;
1283      +
1284      +		Row = 5;
1285      +		Height = 3; StyleID = 'D_B'; Data = ''; output;
1286      +
1287      +		/* explanation numbers row */
1288      +		Row = 6;
1289      +		Type = 'String'; Height = 13.5; StyleID = 'B10O'; 
1290      +		Data = 'A'; output;	
1291      +		Data = 'B'; output;	
1292      +		Data = 'C'; output;	
1293      +		Data = 'D'; output;	
1294      +		Data = 'E'; MergeAcross = 3; output;	
1295      +		Data = 'F'; MergeAcross = 3; output;	
1296      +		Data = 'G'; MergeAcross = 2; output;	
1297      +		Data = 'H'; MergeAcross = .; output;
1298      +	run;
1299      +
1300      +	%markup(ws_&ds._2_note,ws_&ds._2); 
1301      +
1302      +	/* this step can be improved */
1303      +	/* it is several sections put together and as such the formatting code is rather confused */
1304      +	data ws_&ds._3_data;
1305      +		%xml_tag_def;
1306      +		%xml_init;
1307      +
1308      +		Row = %let row = 1; &row.;
1309      +		Data = ''; output; 
38                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

1310      +
1311      +		Row = %let row = %eval(&row. + 1); &row.;
1312      +		Data = 'A'; output;
1313      +		Data = 'The MedDRA hierarchy level. Level 1 is system organ class; 2 is high-'||
1314      +               'level group term; 3 is high-level term; 4 is preferred term.'; output;
1315      +
1316      +		Row = %let row = %eval(&row. + 1); &row.;
1317      +		Data = ''; output; 
1318      +
1319      +		Row = %let row = %eval(&row. + 1); &row.;
1320      +		Data = 'B'; output;
1321      +		Data = 'The MedDRA description of the adverse event.'; output;
1322      +
1323      +		Row = %let row = %eval(&row. + 1); &row.;
1324      +		Data = ''; output; 
1325      +
1326      +		Row = %let row = %eval(&row. + 1); &row.;
1327      +		Data = 'C'; output;
1328      +		Data = 'An indicator for designated medical events.'; output;
1329      +
1330      +		Row = %let row = %eval(&row. + 1); &row.;
1331      +		Data = ''; output; 
1332      +
1333      +		Row = %let row = %eval(&row. + 1); &row.;
1334      +		Data = 'D'; MergeDown = 7; output;
1335      +		MergeDown = .;
1336      +		Data = 'An indicator for whether the adverse event term had a signal, or if not, a signal '||
1337      +               'above or below. This column is color coded:'; output;
1338      +
1339      +		Row = %let row = %eval(&row. + 1); &row.;
1340      +		Index = 2;
1341      +		Data = ''; output; 
1342      +
1343      +		Row = %let row = %eval(&row. + 1); &row.;
1344      +		Index = 4; StyleID = 'DG'; Data = ''; output;
1345      +		Index = 6; StyleID = ''; MergeAcross = 10; 
1346      +		Data = 'There is a signal at this term'; output;
1347      +		Index = .; MergeAcross = .;
1348      +
1349      +		Row = %let row = %eval(&row. + 1); &row.;
1350      +		Index = 4; StyleID = 'LG'; Data = ''; output;
1351      +		Index = 6; StyleID = ''; MergeAcross = 10; 
1352      +		Data = 'There is a signal above and/or below this term in the MedDRA hierarchy'; output;
1353      +		Index = .; MergeAcross = .;
1354      +
1355      +		Index = 2;
1356      +
1357      +		Row = %let row = %eval(&row. + 1); &row.;
1358      +		Data = ''; output; 
1359      +
1360      +		Row = %let row = %eval(&row. + 1); &row.;
1361      +		Data = 'This term of the MedDRA hierarchy had a signal so it is dark gray. '||
1362      +               'If it did not have a signal but there was a signal above or below it, it would be light gray. '||
1363      +               'Otherwise, the cell in this column will be blank.'; output;
1364      +
1365      +		Row = %let row = %eval(&row. + 1); &row.;
1366      +		Data = ''; output; 
1367      +
39                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

1368      +		Row = %let row = %eval(&row. + 1); &row.;
1369      +		Data = 'This column also has codes (which are not visible) that allow you to filter terms '||
1370      +               'based on where signals lie in the MedDRA hierarchy. If you want to view all terms '||
1371      +               'with a signal and their parent terms, click the drop-down menu for the signal column, '||
1372      +               'choose Custom, and show rows equal to Y (a signal is present) or containing B '||
1373      +               '(a signal is present at a term below it).'; output;
1374      +
1375      +		Index = .;
1376      +
1377      +		Row = %let row = %eval(&row. + 1); &row.;
1378      +		Data = ''; output; 
1379      +
1380      +		Row = %let row = %eval(&row. + 1); &row.;
1381      +		Data = 'E'; MergeDown = 5; output;
1382      +		MergeDown = .;
1383      +		Data = 'Four columns indicating which levels have signals. These columns are color coded as follows:';
1384      +        output;
1385      +
1386      +		Row = %let row = %eval(&row. + 1); &row.;
1387      +		Index = 2; Data = ''; output;
1388      +
1389      +		Row = %let row = %eval(&row. + 1); &row.;
1390      +		Index = 4; StyleID = 'R'; Data = ''; output;
1391      +		Index = 5; StyleID = ''; MergeAcross = 11; 
1392      +		Data = 'There is a signal at this term at the MedDRA level whose column this color appears in'; output;
1393      +		Index = .; MergeAcross = .;
1394      +
1395      +		Row = %let row = %eval(&row. + 1); &row.;
1396      +		Index = 4; StyleID = 'P'; Data = ''; output;
1397      +		Index = 5; StyleID = ''; MergeAcross = 11; 
1398      +		Data = 'There is a signal at another MedDRA level whose column this color appears in'; output;
1399      +		Index = .; MergeAcross = .;
1400      +
1401      +		Row = %let row = %eval(&row. + 1); &row.;
1402      +		Index = 2; Data = ''; output;
1403      +
1404      +		Row = %let row = %eval(&row. + 1); &row.;
1405      +		Index = 2;
1406      +		Data = 'This term had a signal (at SOC) and there were signals at the HLGT and HLT levels as well.'; output;
1407      +
1408      +		Index = .;
1409      +
1410      +		Row = %let row = %eval(&row. + 1); &row.;
1411      +		Data = ''; output; 
1412      +
1413      +		Row = %let row = %eval(&row. + 1); &row.;
1414      +		Data = 'F'; output;
1415      +		Data = 'Subject counts and percentages for the treatment arm and control arm you have chosen.'; output;
1416      +
1417      +		Row = %let row = %eval(&row. + 1); &row.;
1418      +		Data = ''; output; 
1419      +
1420      +		Row = %let row = %eval(&row. + 1); &row.;
1421      +		Data = 'G'; output;
1422      +		Data = 'The statistics comparing the treatment and control arms. Those that are above '||
1423      +               'thresholds are highlighted in red.'; output;
1424      +
1425      +		Row = %let row = %eval(&row. + 1); &row.;
40                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

1426      +		Data = ''; output; 
1427      +
1428      +		Row = %let row = %eval(&row. + 1); &row.;
1429      +		Data = 'H'; output;
1430      +		Data = 'A column that allows you to restore the original MedDRA hierarchy sort order '||
1431      +               "using the Sort Ascending option in this column's drop-down menu."; output;
1432      +
1433      +		Row = %let row = %eval(&row. + 1); &row.;
1434      +		Data = ''; output; Data = ''; output; 
1435      +	run; 
1436      +
1437      +	data ws_&ds._3_data;
1438      +		set ws_&ds._3_data;	
1439      +		by Row;
1440      +		order = _n_;
1441      +
1442      +		Type = 'String';
1443      +
1444      +		if first.Row and Data ne '' and Index = . then StyleID = 'B10O';
1445      +		else if (not first.Row or Index = 2) and MergeAcross = . then MergeAcross = 14;
1446      +		if StyleID = '' then StyleID = 'I10';
1447      +	run;
1448      +
1449      +	proc sql noprint;
1450      +		create table ws_&ds._3_note(drop=order) as
1451      +		select a.*, b.Height
1452      +		from ws_&ds._3_data(drop=Height) a
1453      +		left join (select Row, max(1,ceil(maxlen/130)) * 13.5 as Height
1454      +		           from (select Row, max(length(Data)) as maxlen
1455      +                         from ws_&ds._3_data
1456      +		                 where Data is not missing
1457      +		                 group by Row)) b
1458      +		on a.Row = b.Row
1459      +		order by order;
1460      +	quit;
1461      +
1462      +	%markup(ws_&ds._3_note,ws_&ds._3); 
1463      +
1464      +	/* method and calculations introduction */
1465      +	data ws_&ds._mc_note;
1466      +		%xml_tag_def;
1467      +		%xml_init;
1468      +
1469      +		%let row = 0;
1470      +
1471      +		Row = %let row = %eval(&row. + 1); &row.;
1472      +		Data = ''; output; Data = ''; output; 
1473      +
1474      +		Row = %let row = %eval(&row. + 1); &row.;
1475      +		Data = 'Method and Calculations'; output; 
1476      +
1477      +		Row = %let row = %eval(&row. + 1); &row.;
1478      +		Data = 'An adverse event is determined by the system organ class, high-level group '||
1479      +               'term, high-level term, and preferred term corresponding to the '||
1480      +               'dictionary-defined term (AEDECOD) from the adverse event (AE) dataset.'||
1481      +			   %if &vld_sw. %then %do;
1482      +               "Only adverse events starting between subjects' first exposure and "||
1483      +               %sysfunc(ifc(&study_lag. ne 0,"&study_lag. days after ",''))||
41                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

1484      +               "subjects' last exposure are included in the analysis. "||
1485      +			   'Exposure dates are taken from variables EXSTDTC and EXENDTC in the exposure (EX) dataset; '||
1486      +               "if these dates are not available, subjects' reference start and end dates "||
1487      +               '(RFSTDTC and RFENDTC) from the demographics (DM) dataset are used instead. '||
1488      +			   %end;
1489      +               'Each adverse event is counted only once per subject. Treatment arm is determined '||
1490      +               'using the '||ifc(&dm_actarm.,'actual treatment arm (ACTARM)',
1491      +                                             'planned treatment arm (ARM)')||' from DM.'; output;
1492      +
1493      +		Row = %let row = %eval(&row. + 1); &row.;
1494      +		Data = ''; output;
1495      +
1496      +		Row = %let row = %eval(&row. + 1); &row.;
1497      +		Data = 'The following is a 2x2 contingency table which shows the quantities, '||
1498      +               'represented by the letters in the cells, used in the calculation of the '||
1499      +               'statistics in this report.'; output;
1500      +
1501      +		Row = %let row = %eval(&row. + 1); &row.;
1502      +		Data = ''; output;
1503      +	run;
1504      +
1505      +	data ws_&ds._mc_note;
1506      +		set ws_&ds._mc_note;
1507      +
1508      +		if Data = 'Method and Calculations' then StyleID = 'SubHeader';
1509      +		else StyleID = 'Default10Wrap';
1510      +		MergeAcross = 14;
1511      +
1512      +		Height = max(1,ceil(length(trim(Data))/108)) * 13.5;
1513      +	run; 
1514      +
1515      +	%markup(ws_&ds._mc_note,ws_&ds._mc); 
1516      +
1517      +	/* make part 4 of the cover sheet, 2x2 contingency table example */
1518      +	data ws_&ds._4_note;
1519      +		%xml_tag_def;
1520      +		%xml_init;
1521      +
1522      +		Type = 'String';
1523      +		Height = 25;
1524      +
1525      +		Row = 1;  
1526      +		StyleID = '';
1527      +		Data = ''; output; Data = ''; output;
1528      +		MergeAcross = 5;
1529      +		Data = ''; output; 	
1530      +		StyleID = 'Table';
1531      +		MergeAcross = 1; 
1532      +		Data = 'Arm 1'; output;
1533      +		Data = 'Arm 2'; output;
1534      +
1535      +		Row = 2;  
1536      +		MergeAcross = .;
1537      +		StyleID = '';
1538      +		Data = ''; output; Data = ''; output;
1539      +		StyleID = 'Table';
1540      +		MergeAcross = 5;
1541      +		Data = 'Adverse event'; output;  
42                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

1542      +		MergeAcross = 1;
1543      +		Data = 'a'; output;
1544      +		Data = 'c'; output;
1545      +
1546      +		Row = 3;    
1547      +		MergeAcross = .;
1548      +		StyleID = '';
1549      +		Data = ''; output; Data = ''; output;
1550      +		StyleID = 'Table';
1551      +		MergeAcross = 5;
1552      +		Data = 'No adverse event'; output; 	
1553      +		MergeAcross = 1;
1554      +		Data = 'b'; output;
1555      +		Data = 'd'; output;
1556      +	run;
1557      +
1558      +	%markup(ws_&ds._4_note,ws_&ds._4); 
1559      +
1560      +	/* make part 5 of the cover sheet -- calculation definitions */
1561      +	data ws_&ds._5_data;
1562      +		length raw $5000;
1563      +		raw = 
1564      +			",;
1565      +			Arm 1,;
1566      +			AE subject count:,a;
1567      +			Subject count:,a+b;
1568      +			AE % (risk):,a / (a+b);
1569      +			,;
1570      +			Arm 2,;
1571      +			AE subject count:,c;
1572      +			Subject count:,c+d;
1573      +			AE % (risk):,c / (c+d);
1574      +		    ,;
1575      +			Risk difference:,a/(a+b) - c/(c+d);
1576      +			Relative risk:,(a/(a+b)) / (c/(c+d));
WARNING: The quoted string currently being processed has become more than 262 characters long.  You may have unbalanced quotation marks.
1577      +			Negative log p-value:,-log(Fisher's exact test p-value);"; output;
1578      +	run;
1579      +
1580      +	data ws_&ds._5_data;
1581      +		set ws_&ds._5_data;
1582      +		length line $1000 desc $250 calc $250;
1583      +		i = 1;
1584      +		line = scan(raw,i,';');
1585      +		do while (line ne '');
1586      +			desc = '~!~!~!'||left(scan(line,1,','));
1587      +			calc = left(scan(line,2,','));
1588      +			output;
1589      +			i = i+1;
1590      +			line = compress(scan(raw,i,';'),,'c');
1591      +		end;
1592      +
1593      +		keep desc calc;
1594      +	run;
1595      +
1596      +	%annotate(ws_&ds._5_data,ws_&ds._5_note);
1597      +
1598      +	data ws_&ds._5_note;
43                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

1599      +		set ws_&ds._5_note;
1600      +		StyleID = 'Default10';
1601      +		if varname = 'desc' then MergeAcross = 1;
1602      +	run;
1603      +
1604      +	%markup(ws_&ds._5_note,ws_&ds._5); 
1605      +
1606      +	/* make a note about continuity correction and p-value (note added 12/28/2015 by PG)*/
1607      +	data ws_&ds._cc_data;
1608      +		length text $5000;
1609      +
1610      +		length cc $50;
1611      +		select (&cc_sw.);
1612      +			when (1) cc = "&cc.";
1613      +			when (2) cc = 'the reciprocal of the opposite arm subject count';
1614      +			otherwise cc = 'no continuity correction';
1615      +		end;
1616      +
1617      +		if (cc ne 'no continuity correction') then do;
1618      +			text = ''; output; 
1619      +
1620      +			text = 'For terms where the control arm had zero subjects with an adverse event, a continuity '||
1621      +                   'correction of '||trim(cc)||' has been added to the quantities in each cell of the '||
1622      +                   'contingency table  before calculating relative risk. This avoids undefined relative risk '||
1623      +                   'values that would result when dividing by zero. Use caution with these results, since '||
1624      +                   'different continuity corrections yield different results and a notable relative risk '||
1625      +                   'statistic may only be an artifact of the correction used.'; 
1626      +			text = compbl(text); output;
1627      +
1628      +		end;
1629      +
1630      +		/* start of p-value note */
1631      +
1632      +			text = ''; output;
1633      +
1634      +			text = 'The negative log p value gives the relationship, between treatment and control, a number '|| 
1635      +				   'value that is easier to understand than a p-value and does not suggest '||'"statistical '||
1636      +				   'significance'||'". A stronger p-value (for example, 0.05) will have a higher negative log '||
1637      +				   'than a weak p-value (for example, 0.5). The higher the negative log p-value, the stronger '|| 
1638      +				   'the argument that there is a signal.';
1639      +		    text = compbl(text); output;
1640      +
1641      +		/* end of p-value note */
1642      +
1643      +		keep text;
1644      +	run;
1645      +
1646      +	%annotate(ws_&ds._cc_data,ws_&ds._cc_note);
1647      +
1648      +	data ws_&ds._cc_note;
1649      +		set ws_&ds._cc_note;
1650      +
1651      +		MergeAcross = 15; MergeDown = .;
1652      +		Height = max(1,ceil(length(Data)/135)) * 13.5;
1653      +
1654      +		StyleID = 'Default10Wrap';
1655      +	run;
1656      +
44                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

1657      +	%markup(ws_&ds._cc_note,ws_&ds._cc); 
1658      +
1659      +	/* make part 6 of the cover sheet */
1660      +	data ws_&ds._6_data;
1661      +		length desc $250 setting $250;
1662      +
1663      +		desc = ''; setting = ''; output; desc = ''; setting = ''; output;
1664      +
1665      +		desc = 'Report Settings'; output;
1666      +
1667      +		desc = '~!~!~!NDA/BLA:'; setting = "&ndabla."; output;
1668      +		desc = '~!~!~!Study:'; setting = "&studyid."; output;
1669      +		desc = '~!~!~!Analysis run date:'; setting = "&rundate."; output;
1670      +
1671      +		desc = ''; setting = ''; output;
1672      +
1673      +		desc = '~!~!~!Custom datasets:'; setting = ifc("&sl_custom_ds." ne '',"&sl_custom_ds.",'None'); output;
1674      +		desc = '~!~!~!Grouping/subsetting:'; setting = ifc("&sl_gs_desc." ne '',"&sl_gs_desc.",'None'); output;
1675      +		%if &sl_group_nobs. or &sl_subset_nobs. %then %do;
1676      +			desc = ''; setting = 'For more information, see the Grouping and Subsetting tab '||
1677      +                                 'at the end of this workbook'; output;
1678      +		%end;
1679      +
1680      +		desc = ''; setting = ''; output;
1681      +
1682      +		desc = '~!~!~!Study analysis period: '; %if &vld_sw. %then %do;
1683      +												setting = "Subject first exposure date to last exposure date"||
1684      +                                                          ifc(&study_lag.>0," + &study_lag. days",''); output;
1685      +												%end;
1686      +												%else %do;
1687      +												setting = 'Necessary date variables were not available; '||
1688      +												          'all adverse events used in analysis'; output;
1689      +												%end;
1690      +
1691      +		desc = '~!~!~!MedDRA version: '; setting = "&ver."; output;
1692      +		desc = '~!~!~!Continuity correction:'; select (&cc_sw.);
1693      +												when (1) setting = "&cc.";
1694      +												when (2) setting = 'The reciprocal of the opposite arm subject count';
1695      +												otherwise setting = 'No continuity correction';
1696      +											   end;	output;
1697      +
1698      +		desc = ''; setting = ''; output;
1699      +		desc = ''; setting = ''; output;
1700      +
1701      +		desc = 'Note that for cross-over studies, the analysis by arm in this report can only be used '||
1702      +               'to examine treatment sequences and not individual treatments because the analysis uses '||
1703      +               'planned treatment arm and not the timing of actual treatments.'; output;
1704      +	run; 
1705      +
1706      +	%annotate(ws_&ds._6_data,ws_&ds._6_note);
1707      +
1708      +	data ws_&ds._6_note;
1709      +		set ws_&ds._6_note;
1710      +
1711      +		if varname = 'desc' then MergeAcross = 1;
1712      +
1713      +		StyleID = 'Default10';
1714      +		if Data in ('Report Settings') then StyleID = 'SubHeader';
45                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

1715      +		else if bottom then do; StyleID = 'Default10RedWrap'; MergeAcross = 15; Height = 40.5; end;
1716      +	run;
1717      +
1718      +	%markup(ws_&ds._6_note,ws_&ds._6); 
1719      +
1720      +	/* define the print area */
1721      +	data ws_&ds._names;
1722      +		length string $&strlen.; 
1723      +		string = '<Names>'; output;
1724      +		string = '<NamedRange ss:Name="Print_Area" ss:RefersTo="='||"'Front Page'"||'!R1C1:R100C16"/>'; output;
1725      +		string = '</Names>'; output;
1726      +	run;
1727      +
1728      +	/* set up the worksheet settings */
1729      +	data ws_&ds._settings; 
1730      +		length string $&strlen.; 
1731      +		string = '<WorksheetOptions xmlns="urn:schemas-microsoft-com:office:excel">'; output;
1732      +		string = '<PageSetup>'; output;
1733      +		string = '<Header x:Data="&amp;L'||'MedDRA at a Glance Comparison Analysis Front Page'||
1734      +                 '&amp;R'||"NDA/BLA &ndabla.&#10;Study &studyid."||'"/>'; output;
1735      +		string = '<Footer x:Data="Page &amp;P of &amp;N"/>'; output;
1736      +		string = '</PageSetup>'; output;
1737      +		string = '<Print>'; output;
1738      +		string = '<ValidPrinterInfo/>'; output;
1739      +		string = '<Scale>82</Scale>'; output;
1740      +		string = '<HorizontalResolution>600</HorizontalResolution>'; output;
1741      +		string = '<VerticalResolution>0</VerticalResolution>'; output;
1742      +       	string = '</Print>'; output;
1743      +		string = '</WorksheetOptions>'; output;
1744      +	run;
1745      +
1746      +	data ws_&ds.;
1747      +		set ws_&ds._start
1748      +			ws_&ds._names
1749      +		    ws_&ds._table_start
1750      +			ws_&ds._1
1751      +			ws_&ds._2 
1752      +			ws_&ds._3
1753      +			ws_&ds._mc
1754      +			ws_&ds._4
1755      +			ws_&ds._5
1756      +			ws_&ds._cc
1757      +			ws_&ds._6
1758      +			ws_&ds._table_end
1759      +			ws_&ds._settings
1760      +			ws_&ds._end;
1761      +	run;
1762      +
1763      +	proc datasets library=work nolist nodetails; delete ws_&ds._:; quit;
1764      +
1765      +%mend out_cover;
1766      +
1767      +
1768      +/******************************/
1769      +/* MEDDRA COMPARISON ANALYSIS */
1770      +/******************************/
1771      +%macro out_meddra_cmp;
1772      +
46                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

1773      +	%let ds = meddra_cmp_output; 
1774      +	%let wstitle = MedDRA Comparison Analysis;
1775      +
1776      +	/* get number of variables, observations, and by variables */
1777      +	%let dsid = %sysfunc(open(&ds.));
1778      +	%let nobs = %sysfunc(attrn(&dsid.,nobs));
1779      +	%let nvars = %sysfunc(attrn(&dsid.,nvars));
1780      +	%let rc = %sysfunc(close(&dsid.));
1781      +
1782      +	%let nkeys = 4;
1783      +	%let nkeycols = 4;
1784      +	%let fmt = N;
1785      +
1786      +	data ws_&ds._start;
1787      +		length string $&strlen.;
1788      +		string = '<Worksheet ss:Name="'||"&wstitle."||'">'; output; 
1789      +	run;
1790      +
1791      +	data ws_&ds._end; 
1792      +		length string $&strlen.; 
1793      +		string = '</Worksheet>'; output;
1794      +	run;
1795      +
1796      +	/* set up the column widths */
1797      +	/* sysfunc-ifc calls hide columns that are empty when dealing with one-arm studies */
1798      +	data ws_&ds._table_start; 
1799      +		length string $&strlen.; 
1800      +		string = '<Table>'; output;
1801      +		/* MedDRA hierarchy level code */
1802      +		string = '<Column ss:Width="13"/>'; output;
1803      +		/* MedDRA hierarchy levels */
1804      +		do i = 1 to 4;
1805      +			string = '<Column ss:Width="120"/>'; output;
1806      +		end;
1807      +		/* designated medical event column */
1808      +		string = '<Column ss:Width="21"/>'; output;
1809      +		/* signal columns */
1810      +		do i = 1 to 5;
1811      +			string = '<Column ss:Width="13"'||%sysfunc(ifc(&arm_count.=1,' ss:Hidden="1"',''))||'/>'; output;
1812      +		end; 
1813      +		/* treatment arm */
1814      +		string = '<Column ss:Width="50"/>'; output;
1815      +		string = '<Column ss:Width="35"/>'; output;
1816      +		/* control arm */
1817      +		string = '<Column ss:Width="50"'||%sysfunc(ifc(&arm_count.=1,' ss:Hidden="1"',''))||'/>'; output;
1818      +		string = '<Column ss:Width="35"'||%sysfunc(ifc(&arm_count.=1,' ss:Hidden="1"',''))||'/>'; output;
1819      +		/* risk difference, relative risk, and negative log p-value */
1820      +		string = '<Column ss:Width="53"'||%sysfunc(ifc(&arm_count.=1,' ss:Hidden="1"',''))||'/>'; output;
1821      +		/* if the user has chosen to use continuity correction, show column headers for RR and CC */
1822      +		/* otherwise show only the column header for RR */
1823      +		%if &cc_sw. %then %do;
1824      +		string = '<Column ss:Width="43"'||%sysfunc(ifc(&arm_count.=1,' ss:Hidden="1"',''))||'/>'; output;
1825      +		string = '<Column ss:Width="13"'||%sysfunc(ifc(&arm_count.=1,' ss:Hidden="1"',''))||'/>'; output;
1826      +		%end;
1827      +		%else %do;
1828      +		string = '<Column ss:Width="53"'||%sysfunc(ifc(&arm_count.=1,' ss:Hidden="1"',''))||'/>'; output;
1829      +		%end;
1830      +		string = '<Column ss:Width="53"'||%sysfunc(ifc(&arm_count.=1,' ss:Hidden="1"',''))||'/>'; output;
47                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

1831      +		/* original MedDRA hierarchy sort order */
1832      +		string = '<Column ss:Width="13"/>'; output;
1833      +		drop i;
1834      +	run; 
1835      +
1836      +	data ws_&ds._table_end;
1837      +		length string $&strlen.; 
1838      +		string = '</Table>'; output;
1839      +	run;
1840      +
1841      +	/* make the header */
1842      +	data ws_&ds._header_data;
1843      +		%xml_tag_def;
1844      +		%xml_init;
1845      +
1846      +		Type = 'String';
1847      +
1848      +		%let row = 0;
1849      +
1850      +		Row = %let row = %eval(&row. + 1); &row.;
1851      +		Data = ''; output;
1852      +		
1853      +		Row = %let row = %eval(&row. + 1); &row.;
1854      +		StyleID = 'Header'; 
1855      +		Data = 'MedDRA at a Glance Comparison Analysis';
1856      +		output;
1857      +
1858      +		/* store the title for future use */
1859      +		call symputx('wstitle_long',Data);
1860      +
1861      +		%if (&sl_group_nobs. or &sl_subset_nobs.) %then %do;
1862      +			Row = %let row = %eval(&row. + 1); &row.;
1863      +			Data = "&sl_gs_desc."; StyleID = 'Default10'; output;
1864      +		%end;
1865      +	run;
1866      +
1867      +	%markup(ws_&ds._header_data,ws_&ds._header);
1868      +
1869      +	/* make the footer */
1870      +	data ws_&ds._footer_data; 
1871      +		retain group;
1872      +		length data $1000;
1873      +
1874      +		group = 'note';
1875      +		data = 'NOTES:'; output;
1876      +		data = '1 This report is for data exploration only and should not be used for '||
1877      +               'statistical inference'; output;	
1878      +		data = '2 This analysis uses the safety population '||
1879      +		       %if &vld_sw. %then %do;
1880      +               "and only counts adverse events that start between a subject's "|| 
1881      +               'first exposure and '||
1882      +               ifc(&study_lag.>0,"&study_lag. days after the subject's ",'')||'last exposure'||
1883      +			   %end;
1884      +               ''; output;
1885      +		%if (&cc_sw. ne  0 and &arm_count. > 1) %then %do;
1886      +			data = '* Relative risk for the indicated term has been calculated after adjusting subject counts '||
1887      +	               'with a continuity correction of '||
1888      +	               ifc(&cc_sw.=2,'the reciprocal of the opposite arm subject count ',"&cc. ")||
48                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

1889      +	               'to avoid dividing by zero'; output;
1890      +			data = '* Use caution with these results, since different continuity corrections yield different '||
1891      +                   'results and a notable relative risk statistic may only be an artifact of the correction '||
1892      +                   'used'; output;
1893      +		%end;
1894      +	run; 
1895      +
1896      +	%wsheader(ws_&ds._footer_data,ws_&ds._footer);
1897      +
1898      +	/* define the part of the header where the user can specify thresholds */
1899      +	data ws_&ds._select_data;
1900      +		%xml_tag_def;
1901      +		%xml_init;
1902      +
1903      +		Type = 'String';
1904      +
1905      +		Row = 0;
1906      +		Index = 6;	Type = 'String'; MergeAcross = 10;
1907      +		StyleID = 'TBT';
1908      +		Data = ''; output;
1909      +		Index = .; MergeAcross = .; StyleID = '';
1910      +
1911      +		Row = 1;
1912      +		Height = 13.5;
1913      +		Data = ''; output;
1914      +		StyleID = 'DefaultRight';
1915      +		Data = 'Treatment arm:'; 
1916      +		output;
1917      +		StyleID = 'I';
1918      +		MergeAcross = 1;
1919      +		Data = "&arm_name_1."; 
1920      +		Comment = 'Choose the treatment arm and control arm from the drop-down menus.';
1921      +		output;
1922      +		MergeAcross = .;
1923      +		Comment = ''; 
1924      +		StyleID = '';
1925      +
1926      +		/* explanatory text box */
1927      +		Index = 6;	Type = 'String'; MergeAcross = 10;
1928      +		StyleID = 'TBM';
1929      +		Data = 'Choose your arms and type in your thresholds in the yellow input cells'; output;
1930      +		Index = .; MergeAcross = .; StyleID = '';
1931      +
1932      +		Row = 2; 
1933      +		Height = 13.5;
1934      +		Data = ''; output;
1935      +		StyleID = 'DefaultRight';
1936      +		Data = 'Control arm:';
1937      +		output;	
1938      +		Comment = '';
1939      +		StyleID = 'I';
1940      +		MergeAcross = 1;
1941      +		Data = "&arm_name_2."; 
1942      +		output;	
1943      +		MergeAcross = .;
1944      +		StyleID = '';
1945      +
1946      +		/* explanatory text box */
49                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

1947      +		Index = 6;	Type = 'String'; StyleID = 'TBM'; MergeAcross = 10;
1948      +		Data = 'Look below to see which terms have signals; you may have to scroll down'; output;
1949      +		Index = .; StyleID = ''; MergeAcross = .; 
1950      +
1951      +		Row = 3;
1952      +		Height = 13.5;
1953      +		Data = ''; output;
1954      +
1955      +		/* explanatory text box */
1956      +		Index = 6;	Type = 'String'; StyleID = 'TBM'; MergeAcross = 10;
1957      +		Data = 'The colors in the signal columns tell you about the signal:'; output;
1958      +		Index = .; StyleID = ''; MergeAcross = .; 
1959      +
1960      +		Row = 4;
1961      +		Height = 13.5; 
1962      +		Type = 'String';
1963      +		Data = ''; output;
1964      +		StyleID = 'DefaultRight';
1965      +		Data = 'Risk difference threshold (%):'; 
1966      +		output;	
1967      +		Type = 'Number'; 
1968      +		StyleID = 'I';
1969      +		Data = "&rd_th."; 
1970      +		Comment = 'Set thresholds by typing in numbers here.';
1971      +		output;  
1972      +		Comment = ''; 
1973      +		StyleID = '';
1974      +
1975      +		/* explanatory text box */
1976      +		Index = 6;	Type = 'String';
1977      +		StyleID = 'TBL'; Data = ''; output;
1978      +		Index = .;
1979      +		StyleID = 'DG'; Data = ''; output;
1980      +		StyleID = 'R'; Data = ''; output;
1981      +		StyleID = ''; Data = ''; output;
1982      +		StyleID = 'TBR'; MergeAcross = 6; Data = 'This term shows a signal'; output;
1983      +		StyleID = ''; MergeAcross = .; 
1984      +
1985      +		Row = 5;
1986      +		Height = 13.5; 
1987      +		Type = 'String';
1988      +		Data = ''; output;
1989      +		StyleID = 'DefaultRight';
1990      +		Data = 'Relative risk threshold:'; output;
1991      +		Type = 'Number'; 
1992      +		StyleID = 'I';
1993      +		Data = "&rr_th."; output; 
1994      +		StyleID = '';
1995      +
1996      +		/* explanatory text box */
1997      +		Index = 6;	Type = 'String';
1998      +		StyleID = 'TBL'; Data = ''; output;
1999      +		Index = .;
2000      +		StyleID = 'LG'; Data = ''; output;
2001      +		StyleID = 'P'; Data = ''; output;
2002      +		StyleID = ''; Data = ''; output;
2003      +		StyleID = 'TBR'; MergeAcross = 6; Data = 'A term above or below in MedDRA shows a signal'; output;
2004      +		StyleID = ''; MergeAcross = .; 
50                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

2005      +
2006      +		Row = 6;
2007      +		Height = 13.5; 
2008      +		Type = 'String';
2009      +		Data = ''; output;
2010      +		StyleID = 'DefaultRight';
2011      +		Data = 'Negative log p-value threshold:'; output;
2012      +		Type = 'Number'; 
2013      +		StyleID = 'I';
2014      +		Data = "&pv_th."; output; 
2015      +		StyleID = '';
2016      +
2017      +		/* explanatory text box */
2018      +		Index = 6;	Type = 'String'; StyleID = 'TBB'; MergeAcross = 10;
2019      +		Data = ''; output;
2020      +		Index = .; StyleID = ''; MergeAcross = .; 
2021      +
2022      +		Row = 7; Height = .; Type = 'String'; Data = ''; output;
2023      +	run;
2024      +
2025      +	%markup(ws_&ds._select_data,ws_&ds._select);
2026      +
2027      +	/* when dealing with one-arm studies, hide selection rows */
2028      +	%if &arm_count. = 1 %then %do;
2029      +		data ws_&ds._select;
2030      +			set ws_&ds._select nobs=nobs;
2031      +			if string =: '<Row' and _n_ < nobs-3 then string = tranwrd(string,'>',' ss:Hidden="1">');
2032      +		run;
2033      +	%end;
2034      +
2035      +	/* open the dataset to retrieve column numbers of variables */
2036      +	%let dsid = %sysfunc(open(&ds.));
2037      +
2038      +	/* column headers */
2039      +	data ws_&ds._col_data;
2040      +		retain Row;
2041      +		%xml_tag_def;
2042      +		%xml_init;
2043      +
2044      +		StyleID = 'ColumnOutline';
2045      +		Type='String';
2046      +
2047      +		/* row 1 */
2048      +		Row = 1;
2049      +		Height = 13.5;
2050      +		MergeAcross = .; MergeDown = 2;
2051      +		StyleID = 'ColumnOutlineRotateCtr';
2052      +		Data = 'Level'; 
2053      +		Comment = '1 - SOC&#10;2 - HLGT&#10;3 - HLT&#10;4 - PT';
2054      +		output;
2055      +		Comment = '';
2056      +
2057      +		StyleID = 'ColumnOutline';
2058      +		Data = 'System Organ Class'; output; 
2059      +		Data = 'High-Level Group Term'; output;
2060      +		Data = 'High-Level Term'; output;
2061      +		Data = 'Preferred Term'; output;
2062      +
51                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

2063      +		StyleID = 'ColumnOutlineRotateCtr';
2064      +		MergeAcross = .; MergeDown = 2;	
2065      +		Data = 'DME'; 
2066      +		Comment = 'Designated Medical Event';
2067      +		output;  
2068      +		Comment = '';
2069      +		Data = 'Signal'; 
2070      +		Comment = 'Y - Signal&#10;A - Above&#10;AB - Above & Below&#10;B - Below';
2071      +		output;  
2072      +		Comment = '';
2073      +
2074      +		StyleID = 'ColumnOutline';
2075      +		MergeAcross = 3; MergeDown = .;
2076      +		Data = 'Signal At'; output;
2077      +
2078      +		MergeAcross = 1; MergeDown = .;
2079      +		Data = "Treatment:"; output;
2080      +		Data = "Control:"; output;
2081      +		MergeAcross = .;
2082      +
2083      +		StyleID = 'ColumnOutline';
2084      +		MergeAcross = .; MergeDown = 2;
2085      +		Data = 'Risk Difference'; output; 
2086      +		MergeAcross = .; MergeDown = 2;
2087      +		StyleID = 'ColumnOutline';
2088      +		Data = 'Relative Risk'; %if &cc_sw. %then Data = trim(Data)||'*';; output;
2089      +		%if &cc_sw. %then %do;
2090      +		MergeAcross = .; MergeDown = 2;
2091      +		StyleID = 'COR';
2092      +		Data = 'Cont Corr'; 
2093      +		Comment = 'Continuity Correction';
2094      +		output;
2095      +		%end;
2096      +		StyleID = 'ColumnOutline';
2097      +		MergeAcross = .; MergeDown = 2;
2098      +		Data = 'Negative Log&#10;P-value'; 
2099      +		Comment = 'Negative log p-value ranks how strongly adverse events are associated with the arms';
2100      +		output;
2101      +		Comment = '';
2102      +
2103      +		Data = 'Sort Order'; StyleID = 'OR'; Comment = 'Restore original MedDRA hierarchy sort order'; output;
2104      +		Comment = '';
2105      +
2106      +		/* row 2 */
2107      +		Row = 2;
2108      +		StyleID = 'ColumnOutlineRotateCtr';
2109      +		Height = (ceil(&max_arm_nm_len./9)+1) * 13.5;
2110      +		MergeAcross = .; MergeDown = 1;
2111      +		Index = %sysfunc(varnum(&dsid.,sgnl_soc));
2112      +		Data = 'SOC'; output;
2113      +		Index = .;
2114      +		Data = 'HLGT'; output;
2115      +		Data = 'HLT'; output;
2116      +		Data = 'PT'; output;
2117      +
2118      +		StyleID = 'ColumnOutline';
2119      +		MergeAcross = 1; MergeDown = .;
2120      +		Data = ''; Formula='=exp_name&&quot;&#10;N=&quot;&index(armn,exp)'; output;
52                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

2121      +		Index = .;
2122      +		Data = ''; Formula='=ctl_name&&quot;&#10;N=&quot;&index(armn,ctl)'; output;
2123      +		Formula = ''; MergeAcross = .;
2124      +
2125      +		/* row 3 */
2126      +		Row = 3;
2127      +		Height = 27;
2128      +		MergeAcross = .; MergeDown = .;
2129      +		%do i = 1 %to 2;
2130      +			Index = %sysfunc(ifc(&i.=1,%sysfunc(varnum(&dsid.,arm_exp_count)),.));
2131      +			Data = 'Subject Count'; output;
2132      +			Index = .;
2133      +			Data = '%'; output;
2134      +		%end;
2135      +	run;
2136      +
2137      +	%let rc = %sysfunc(close(&dsid.));
2138      +
2139      +	%markup(ws_&ds._col_data,ws_&ds._columns);
2140      +
2141      +	/* data rows */
2142      +	%annotate(&ds.,ws_&ds._data_note);
2143      +
2144      +	/* add level name and number by row */
2145      +	data ws_&ds._data_note;
2146      +		set ws_&ds._data_note; 
2147      +		by Row;
2148      +
2149      +		/* look up the MedDRA level name and number */
2150      +		if _n_ = 1 then do;
2151      +			declare hash h(dataset:"&ds._row");
2152      +			h.definekey('Row');
2153      +			h.definedata('lvl_nm','lvl_no');
2154      +			h.definedone();
2155      +		end;
2156      +
2157      +		length lvl_nm $4 lvl_no 8;
2158      +		call missing(lvl_nm,lvl_no);
2159      +		rc = h.find();
2160      +		drop rc;
2161      +
2162      +		if varname in ('rd' 'rr' 'cc' 'pv' 'row') or varname =: 'arm' then do;
2163      +			if varname in ('rd' 'pv') then StyleID = 'D1_R2_BLR';
2164      +			else if varname = 'rr' then do;
2165      +				if &cc_sw. then StyleID = 'D1_R1_BL';
2166      +				else StyleID = 'D1_R2_BLR';
2167      +			end;
2168      +			else if varname = 'cc' then StyleID = 'IB_BR';
2169      +			else if varname = 'row' then StyleID = 'OW_BLR';
2170      +			else if index(varname,'count') then StyleID = 'D0_R2_BL';
2171      +			else if index(varname,'pct') then StyleID = 'D1_R1_BR';
2172      +			if bottom then StyleID = trim(StyleID)||'B';
2173      +		end;
2174      +		else do;
2175      +			StyleID = 'D';
2176      +			if varname in ('level','dme','sgnl','sgnl_soc','sgnl_hlgt','sgnl_hlt','sgnl_pt') then StyleID = 'DC';
2177      +			if bottom then StyleID = trim(StyleID)||'B';
2178      +		end;
53                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

2179      +
2180      +		select (varname);
2181      +			when ('arm_exp_count') 
2182      +				Formula = '=INDEX(INDIRECT(&quot;ae'||trim(lvl_nm)||'&quot;&amp;exp),'||compress(lvl_no)||',1)';
2183      +			when ('arm_exp_pct') 
2184      +				Formula = '=INDEX(INDIRECT(&quot;ae'||trim(lvl_nm)||'&quot;&amp;exp),'||compress(lvl_no)||',2)';
2185      +			when ('arm_ctl_count') 
2186      +				Formula = '=INDEX(INDIRECT(&quot;ae'||trim(lvl_nm)||'&quot;&amp;ctl),'||compress(lvl_no)||',1)';
2187      +			when ('arm_ctl_pct') 
2188      +				Formula = '=INDEX(INDIRECT(&quot;ae'||trim(lvl_nm)||'&quot;&amp;ctl),'||compress(lvl_no)||',2)';
2189      +			when ('sgnl') 
2190      +				Formula = '=INDEX(ae'||trim(lvl_nm)||'scd,'||compress(lvl_no)||')';
2191      +			when ('sgnl_soc') 
2192      +				Formula = '=INDEX(ae'||trim(lvl_nm)||'s,'||compress(lvl_no)||',1)';
2193      +			when ('sgnl_hlgt') 
2194      +				Formula = '=INDEX(ae'||trim(lvl_nm)||'s,'||compress(lvl_no)||',2)';
2195      +			when ('sgnl_hlt') 
2196      +				Formula = '=INDEX(ae'||trim(lvl_nm)||'s,'||compress(lvl_no)||',3)';
2197      +			when ('sgnl_pt') 
2198      +				Formula = '=INDEX(ae'||trim(lvl_nm)||'s,'||compress(lvl_no)||',4)';
2199      +			when ('rd') 
2200      +				Formula = '=INDEX(ae'||trim(lvl_nm)||'c,'||compress(lvl_no)||',1)';
2201      +			when ('rr') 
2202      +				Formula = '=INDEX(ae'||trim(lvl_nm)||'c,'||compress(lvl_no)||',2)';
2203      +			%if &cc_sw. ne 0 %then %do;
2204      +				when ('cc') 
2205      +					Formula = '=INDEX(ae'||trim(lvl_nm)||'cc,'||compress(lvl_no)||')';
2206      +			%end;
2207      +			when ('pv') 
2208      +				Formula = '=INDEX(ae'||trim(lvl_nm)||'c,'||compress(lvl_no)||',3)';
2209      +			otherwise;
2210      +		end;
2211      +
2212      +		/* correct for Excel cell overflow into DME column */
2213      +		/* ~! is changed to a space by the markup macro */
2214      +		if varname = 'dme' and Data = '' then Data = '~!';
2215      +
2216      +	run;
2217      +
2218      +	%markup(ws_&ds._data_note,ws_&ds._data);
2219      +
2220      +	/* get the row numbers for the first and last data rows */
2221      +	data _null_;
2222      +		set ws_&ds._header
2223      +			ws_&ds._select
2224      +		    ws_&ds._columns end=eof;
2225      +		retain count;
2226      +		if string in ('<Row/>' '</Row>') then count + 1;
2227      +		if eof then do;	
2228      +			firstrow = count + 1;
2229      +			lastrow =  firstrow + &nobs. - 1;
2230      +			call symputx('firstrow',put(firstrow,8. -L));
2231      +			call symputx('lastrow',put(lastrow,8. -L));
2232      +		end;
2233      +	run; 
2234      +
2235      +	/* get the number of the first row for the user input cells */
2236      +	data _null_;
54                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

2237      +		set ws_&ds._header end=eof;
2238      +		retain count;
2239      +		if string in ('<Row/>' '</Row>') then count + 1;
2240      +		if eof then do;
2241      +			rownum = count + 2;
2242      +			call symputx('input_firstrow',put(rownum,8. -L));
2243      +		end;
2244      +	run;
2245      +
2246      +	/* get the column number for the signal variable */
2247      +	data _null_;
2248      +		dsid = open("&ds.");
2249      +		varnum = varnum(dsid,'sgnl');
2250      +		rc = close(dsid);
2251      +		call symputx('sgnl_varnum',varnum);
2252      +	run;
2253      +
2254      +	/* set up the worksheet settings for conditional formatting and autofilter */
2255      +	data ws_&ds._settings; 
2256      +		length string $&strlen.; 
2257      +
2258      +		string = '<WorksheetOptions xmlns="urn:schemas-microsoft-com:office:excel">'; output;
2259      +
2260      +		string = '<PageSetup>'; output;
2261      +		string = '<Layout x:Orientation="Landscape"/>'; output;
2262      +		string = '<Header x:Data="&amp;L'||"&wstitle_long."||
2263      +                 '&amp;R'||"NDA/BLA &ndabla.&#10;Study &studyid."||'"/>'; output;
2264      +		string = '<Footer x:Data="Page &amp;P of &amp;N"/>'; output;
2265      +		string = '</PageSetup>'; output;
2266      +		string = '<FitToPage/>'; output;
2267      +		string = '<Print>'; output;
2268      +        string = '<FitHeight>100</FitHeight>'; output;
2269      +       	string = '</Print>'; output;
2270      +
2271      +		/* frozen panes settings */
2272      +		string = '<Selected/>'; output;
2273      +       	string = '<FreezePanes/>'; output;
2274      +       	string = '<FrozenNoSplit/>'; output;
2275      +       	string = '<SplitHorizontal>'||compress(%eval(&firstrow.-1))||'</SplitHorizontal>'; output;
2276      +       	string = '<TopRowBottomPane>'||compress(%eval(&firstrow.-1))||'</TopRowBottomPane>'; output;
2277      +		string = '<ActivePane>2</ActivePane>'; output;
2278      +
2279      +		/* selected cell */
2280      +		string = '<Panes>'; output;
2281      +		string = '<Pane>'; output;
2282      +		string = '<Number>2</Number>'; output;
2283      +		string = '<ActiveRow>'||compress(%eval(&input_firstrow.-1))||'</ActiveRow>'; output;
2284      +		string = '<ActiveCol>2</ActiveCol>'; output;
2285      +		string = '<RangeSelection>R'||compress(%eval(&input_firstrow.))||'C3:'||
2286      +                 'R'||compress(%eval(&input_firstrow.))||'C4</RangeSelection>'; output;
2287      +		string = '</Pane>'; output;
2288      +		string = '</Panes>'; output;
2289      +
2290      +		string = '</WorksheetOptions>'; output;
2291      +
2292      +		/* open the dataset so we can extract the variable numbers of columns by name */
2293      +		%let dsid = %sysfunc(open(&ds.));
2294      +
55                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

2295      +		string = '<AutoFilter x:Range="'||'R'||compress(%eval(&firstrow.-1))||'C1:R'||
2296      +                 compress(%eval(&firstrow.-1))||"C&nvars."||'" '||
2297      +                 'xmlns="urn:schemas-microsoft-com:office:excel">'; output;
2298      +		string = '</AutoFilter>'; output;
2299      +
2300      +		/* highlight columns or cells when there is a signal present */
2301      +		/* term description columns */
2302      +		string = '<ConditionalFormatting xmlns="urn:schemas-microsoft-com:office:excel">'; output;
2303      +		string = "<Range>R&firstrow.C1:R&lastrow.C"||compress(%sysfunc(varnum(&dsid.,pt_name)))||'</Range>'; output;
2304      +		string = '<Condition>'; output;
2305      +		string = '<Value1>IF(RC'||"&sgnl_varnum."||'=&quot;&quot;,1,0)</Value1>'; output;
2306      +		string = "<Format Style='color:silver'/>"; output;
2307      +		string = '</Condition>'; output;
2308      +		string = '<Condition>'; output;
2309      +		string = '<Value1>IF(OR(RC'||"&sgnl_varnum."||'=&quot;A&quot;,RC'||"&sgnl_varnum."||'=&quot;AB&quot;,RC'||"&sgnl_varnum."||'=&quot;B&quot;),1,0)</Value1>'; output;
2310      +		string = "<Format Style='color:gray'/>"; output;
2311      +		string = '</Condition>'; output;
2312      +		string = '</ConditionalFormatting>'; output;
2313      +
2314      +		/* any signal indicator column */
2315      +		string = '<ConditionalFormatting xmlns="urn:schemas-microsoft-com:office:excel">'; output;
2316      +		string = "<Range>R&firstrow.C"||"&sgnl_varnum."||
2317      +                 ":R&lastrow.C"||"&sgnl_varnum."||"</Range>"; output;
2318      +		string = '<Condition>'; output;
2319      +		string = '<Qualifier>Equal</Qualifier>'; output;
2320      +		string = '<Value1>&quot;Y&quot;</Value1>'; output;
2321      +		string = "<Format Style='color:gray;background:gray'/>"; output;
2322      +		string = '</Condition>'; output;
2323      +		string = '<Condition>'; output;
2324      +		string = '<Value1>IF(OR(RC'||"&sgnl_varnum."||'=&quot;A&quot;,RC'||"&sgnl_varnum."||'=&quot;AB&quot;,RC'||"&sgnl_varnum."||'=&quot;B&quot;),1,0)</Value1>'; output;
2325      +		string = "<Format Style='color:silver;background:silver'/>"; output;
2326      +		string = '</Condition>'; output;
2327      +		string = '</ConditionalFormatting>'; output; 
2328      +
2329      +		/* level-specific signal indicator columns */
2330      +		string = '<ConditionalFormatting xmlns="urn:schemas-microsoft-com:office:excel">'; output;
2331      +		string = "<Range>R&firstrow.C"||compress(%sysfunc(varnum(&dsid.,sgnl_soc)))||
2332      +                 ":R&lastrow.C"||compress(%sysfunc(varnum(&dsid.,sgnl_pt)))||"</Range>"; output;
2333      +		string = '<Condition>'; output;
2334      +		string = '<Value1>IF(RC=&quot;Y&quot;,1,0)</Value1>'; output;
2335      +		string = "<Format Style='color:#FFCC99;background:#FFCC99'/>"; output;
2336      +		string = '</Condition>'; output;
2337      +		string = '<Condition>'; output;
2338      +		string = '<Value1>IF(AND(RC=&quot;Y&quot;,COLUMN()-COLUMN(RC'||"&sgnl_varnum."||')=RC1),1,0)</Value1>'; output;
2339      +		string = "<Format Style='color:red;background:red'/>"; output;
2340      +		string = '</Condition>'; output;
2341      +		string = '</ConditionalFormatting>'; output; 
2342      +
2343      +		/* subject counts and percentage columns */
2344      +		string = '<ConditionalFormatting xmlns="urn:schemas-microsoft-com:office:excel">'; output;
2345      +		string = "<Range>R&firstrow.C"||compress(%sysfunc(varnum(&dsid.,arm_exp_count)))||":R&lastrow.C"||
2346      +                 compress(%sysfunc(varnum(&dsid.,arm_ctl_pct)))||"</Range>"; output;
2347      +		string = '<Condition>'; output;
2348      +		string = '<Value1>IF(RC'||"&sgnl_varnum."||'=&quot;&quot;,1,0)</Value1>'; output;
2349      +		string = "<Format Style='color:silver'/>"; output;
2350      +		string = '</Condition>'; output;
2351      +		string = '<Condition>'; output;
2352      +		string = '<Value1>IF(OR(RC'||"&sgnl_varnum."||'=&quot;A&quot;,RC'||"&sgnl_varnum."||'=&quot;AB&quot;,RC'||"&sgnl_varnum."||'=&quot;B&quot;),1,0)</Value1>'; output;
56                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

2353      +		string = "<Format Style='color:gray'/>"; output;
2354      +		string = '</Condition>'; output;
2355      +		string = '</ConditionalFormatting>'; output;
2356      +
2357      +		/* rd column */
2358      +		string = '<ConditionalFormatting xmlns="urn:schemas-microsoft-com:office:excel">'; output;
2359      +		string = "<Range>R&firstrow.C"||compress(%sysfunc(varnum(&dsid.,rd)))||":R&lastrow.C"||
2360      +                 compress(%sysfunc(varnum(&dsid.,rd)))||"</Range>"; output;
2361      +		string = '<Condition>'; output;
2362      +		string = '<Value1>IF(RC'||"&sgnl_varnum."||'=&quot;&quot;,1,0)</Value1>'; output;
2363      +		string = "<Format Style='color:silver'/>"; output;
2364      +		string = '</Condition>'; output;
2365      +		string = '<Condition>'; output;
2366      +		string = '<Value1>IF(OR(RC'||"&sgnl_varnum."||'=&quot;A&quot;,RC'||"&sgnl_varnum."||'=&quot;AB&quot;,RC'||"&sgnl_varnum."||'=&quot;B&quot;),1,0)</Value1>'; output;
2367      +		string = "<Format Style='color:gray'/>"; output;
2368      +		string = '</Condition>'; output;
2369      +		string = '<Condition>'; output;
2370      +		string = '<Qualifier>Greater</Qualifier>'; output;
2371      +		string = '<Value1>rd</Value1>'; output;
2372      +		string = "<Format Style='color:red;font-weight:700'/>"; output;
2373      +		string = '</Condition>'; output;
2374      +		string = '</ConditionalFormatting>'; output;
2375      +
2376      +		/* rr column */
2377      +		string = '<ConditionalFormatting xmlns="urn:schemas-microsoft-com:office:excel">'; output;
2378      +		string = "<Range>R&firstrow.C"||compress(%sysfunc(varnum(&dsid.,rr)))||":R&lastrow.C"||
2379      +                 compress(%sysfunc(varnum(&dsid.,rr)))||"</Range>"; output;
2380      +		string = '<Condition>'; output;
2381      +		string = '<Value1>IF(RC'||"&sgnl_varnum."||'=&quot;&quot;,1,0)</Value1>'; output;
2382      +		string = "<Format Style='color:silver'/>"; output;
2383      +		string = '</Condition>'; output;
2384      +		string = '<Condition>'; output;
2385      +		string = '<Value1>IF(OR(RC'||"&sgnl_varnum."||'=&quot;A&quot;,RC'||"&sgnl_varnum."||'=&quot;AB&quot;,RC'||"&sgnl_varnum."||'=&quot;B&quot;),1,0)</Value1>'; output;
2386      +		string = "<Format Style='color:gray'/>"; output;
2387      +		string = '</Condition>'; output;
2388      +		string = '<Condition>'; output;
2389      +		string = '<Value1>IF(AND(RC&gt;rr,RC&lt;&gt;&quot;.&quot;),1,0)</Value1>'; output;
2390      +		string = "<Format Style='color:red;font-weight:700'/>"; output;
2391      +		string = '</Condition>'; output;
2392      +		string = '</ConditionalFormatting>'; output;
2393      +
2394      +		%if &cc_sw. %then %do;
2395      +		/* continuity correction indicator column */
2396      +		string = '<ConditionalFormatting xmlns="urn:schemas-microsoft-com:office:excel">'; output;
2397      +		string = "<Range>R&firstrow.C"||compress(%sysfunc(varnum(&dsid.,cc)))||":R&lastrow.C"||
2398      +                 compress(%sysfunc(varnum(&dsid.,cc)))||'</Range>'; output;
2399      +		string = '<Condition>'; output;
2400      +		string = '<Value1>IF(RC'||"&sgnl_varnum."||'=&quot;&quot;,1,0)</Value1>'; output;
2401      +		string = "<Format Style='color:silver'/>"; output;
2402      +		string = '</Condition>'; output;
2403      +		string = '<Condition>'; output;
2404      +		string = '<Value1>IF(OR(RC'||"&sgnl_varnum."||'=&quot;A&quot;,RC'||"&sgnl_varnum."||'=&quot;AB&quot;,RC'||"&sgnl_varnum."||'=&quot;B&quot;),1,0)</Value1>'; output;
2405      +		string = "<Format Style='color:gray'/>"; output;
2406      +		string = '</Condition>'; output;
2407      +		string = '</ConditionalFormatting>'; output;
2408      +		%end;
2409      +
2410      +		/* pv column */
57                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

2411      +		string = '<ConditionalFormatting xmlns="urn:schemas-microsoft-com:office:excel">'; output;
2412      +		string = "<Range>R&firstrow.C"||compress(%sysfunc(varnum(&dsid.,pv)))||":R&lastrow.C"||
2413      +                 compress(%sysfunc(varnum(&dsid.,pv)))||"</Range>"; output;
2414      +		string = '<Condition>'; output;
2415      +		string = '<Value1>IF(RC'||"&sgnl_varnum."||'=&quot;&quot;,1,0)</Value1>'; output;
2416      +		string = "<Format Style='color:silver'/>"; output;
2417      +		string = '</Condition>'; output;
2418      +		string = '<Condition>'; output;
2419      +		string = '<Value1>IF(OR(RC'||"&sgnl_varnum."||'=&quot;A&quot;,RC'||"&sgnl_varnum."||'=&quot;AB&quot;,RC'||"&sgnl_varnum."||'=&quot;B&quot;),1,0)</Value1>'; output;
2420      +		string = "<Format Style='color:gray'/>"; output;
2421      +		string = '</Condition>'; output;
2422      +		string = '<Condition>'; output;
2423      +		string = '<Value1>IF(AND(RC&gt;pv,RC&lt;&gt;&quot;.&quot;),1,0)</Value1>'; output;
2424      +		string = "<Format Style='color:red;font-weight:700'/>"; output;
2425      +		string = '</Condition>'; output;
2426      +		string = '</ConditionalFormatting>'; output; 
2427      +
2428      +		%let rc = %sysfunc(close(&dsid.));
2429      +	run;
2430      +
2431      +	/* removes settings for the initial cell selected when using one-arm studies */
2432      +	%if &arm_count. = 1 %then %do;
2433      +		data ws_&ds._settings;
2434      +			set ws_&ds._settings;
2435      +			retain panes 0;
2436      +			if string = '<Panes>' then panes = 1;
2437      +
2438      +			lag_string = lag1(string);
2439      +			if lag_string = '</Panes>' then panes = 0;
2440      +
2441      +			if panes then delete;
2442      +			keep string;
2443      +		run;
2444      +	%end;
2445      +
2446      +	/* set up the named ranges for user input cells */
2447      +	data wb_&ds._names;
2448      +		length string $&strlen.;
2449      +		string = '<NamedRange ss:Name="exp_name" ss:RefersTo="='||"'"||"&wstitle."||"'!"||
2450      +                 'R'||compress(%eval(&input_firstrow.))||'C3"/>'; output; 	
2451      +		string = '<NamedRange ss:Name="ctl_name" ss:RefersTo="='||"'"||"&wstitle."||"'!"||
2452      +                 'R'||compress(%eval(&input_firstrow.+1))||'C3"/>'; output; 	
2453      +		string = '<NamedRange ss:Name="rdn" ss:RefersTo="='||"'"||"&wstitle."||"'!"||
2454      +                 'R'||compress(%eval(&input_firstrow.+3))||'C3"/>'; output; 	
2455      +		string = '<NamedRange ss:Name="rrn" ss:RefersTo="='||"'"||"&wstitle."||"'!"||
2456      +                 'R'||compress(%eval(&input_firstrow.+3+1))||'C3"/>'; output; 
2457      +		string = '<NamedRange ss:Name="pvn" ss:RefersTo="='||"'"||"&wstitle."||"'!"||
2458      +                 'R'||compress(%eval(&input_firstrow.+3+2))||'C3"/>'; output; 
2459      +	run;
2460      +
2461      +	/* worksheet specific named range */
2462      +	/* repeat column headers on successive printed pages */
2463      +	/* consider making this pick up the rows at run time */
2464      +	data ws_&ds._names;
2465      +		length string $&strlen.;
2466      +		string = '<Names>'; output;
2467      +		string = '<NamedRange ss:Name="Print_Titles" '||
2468      +                 'ss:RefersTo="='||"'"||"&wstitle."||"'"||'!R11:R13"/>'; output;
58                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

2469      +		string = '</Names>'; output;
2470      +	run;
2471      +
2472      +	/* set up data validation for user input cells */
2473      +	data ws_&ds._vld;
2474      +		length string $&strlen.;
2475      +
2476      +		string = '<DataValidation xmlns="urn:schemas-microsoft-com:office:excel">'; output;
2477      +		string = "<Range>R&input_firstrow.C3,R"||compress(%eval(&input_firstrow.+1))||"C3</Range>"; output;
2478      +		string = '<Type>List</Type>'; output;
2479      +		string = '<Value>wbinfo_arminfo_1</Value>'; output;
2480      +		string = '</DataValidation>'; output;
2481      +	run;
2482      +	
2483      +	/* put the worksheet together */
2484      +	data ws_&ds.;
2485      +		set ws_&ds._start
2486      +			ws_&ds._names
2487      +		    ws_&ds._table_start
2488      +			ws_&ds._header
2489      +			ws_&ds._select
2490      +		    ws_&ds._columns
2491      +			ws_&ds._data
2492      +			ws_&ds._footer
2493      +			ws_&ds._table_end
2494      +			ws_&ds._settings
2495      +			ws_&ds._vld
2496      +			ws_&ds._end;
2497      +	run;
2498      +
2499      +	proc datasets library=work nolist nodetails; delete ws_&ds._:; quit;
2500      +
2501      +%mend out_meddra_cmp;
2502      +
2503      +
2504      +/* hidden data worksheet */
2505      +/* referenced by the visible 'interface' worksheet */
2506      +%macro out_meddra_cmp_data;
2507      +
2508      +	%let ds = meddra_cmp_data; 
2509      +	%let wstitle = MedDRA Comparison Data;
2510      +
2511      +	%let nvars = 1;
2512      +	%let nkeycols = 0;
2513      +	%let fmt = N;
2514      +
2515      +	data ws_&ds._start;
2516      +		length string $&strlen.;
2517      +		string = '<Worksheet ss:Name="'||"&wstitle."||'">'; output; 
2518      +	run;
2519      +
2520      +	data ws_&ds._end; 
2521      +		length string $&strlen.; 
2522      +		string = '<WorksheetOptions xmlns="urn:schemas-microsoft-com:office:excel">'; output;
2523      +		string = '<Visible>SheetHidden</Visible>'; output;
2524      +		string = '<ProtectObjects>False</ProtectObjects>'; output;
2525      +		string = '<ProtectScenarios>False</ProtectScenarios>'; output;
2526      +		string = '</WorksheetOptions>'; output;
59                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

2527      +		string = '</Worksheet>'; output;
2528      +	run;
2529      +
2530      +	data ws_&ds._table_start; 
2531      +		length string $&strlen.; 
2532      +		string = '<Table>'; output;
2533      +	run; 
2534      +
2535      +	data ws_&ds._table_end;
2536      +		length string $&strlen.; 
2537      +		string = '</Table>'; output;
2538      +	run;
2539      +
2540      +	%annotate(&ds.,ws_&ds._data_note);
2541      +
2542      +	/* add level name and number by row */
2543      +	data ws_&ds._data_note;
2544      +		set ws_&ds._data_note;
2545      +		by Row;
2546      +
2547      +		/* look up the MedDRA level name and number */
2548      +		if _n_ = 1 then do;
2549      +			declare hash h(dataset:"&ds._row");
2550      +			h.definekey('Row');
2551      +			h.definedata('lvl_nm','lvl_no','soc','hlgt','hlt','pt');
2552      +			h.definedone();
2553      +		end;
2554      +
2555      +		length lvl_nm $4 lvl_no 8 soc 8 hlgt 8 hlt 8 pt 8;
2556      +		call missing(lvl_nm,lvl_no,soc,hlgt,hlt,pt);
2557      +		rc = h.find();
2558      +		drop rc;
2559      +
2560      +		/* missing, undefined, and infinite values */
2561      +		if substr(varname,1,min(length(trim(varname)),2)) in ('rd' 'rr' 'pv') then do;
2562      +			*if Data = 'I' and Type  = 'Number' then Type = 'String';
2563      +			if Data = '' and Type = 'Number' then do;
2564      +				Data = '.'; Type = 'String';
2565      +			end;
2566      +		end;
2567      +
2568      +		%let dsid = %sysfunc(open(&ds.));
2569      +
2570      +		/* assign formulas for the arm comparison cells */
2571      +		/* look at the cmp named cell specifying which two arms to use */
2572      +		/* and pick out the corresponding cell in the named range for that set of arms e.g. cmp12 */
2573      +		select (varname);
2574      +			when ('rd') 
2575      +				Formula = '=INDEX(INDIRECT(&quot;aecmp&quot;&amp;cmp),'||compress(row)||',1)';
2576      +			when ('rr') 
2577      +				Formula = '=INDEX(INDIRECT(&quot;aecmp&quot;&amp;cmp),'||compress(row)||',2)';
2578      +			when ('pv') 
2579      +				Formula = '=INDEX(INDIRECT(&quot;aecmp&quot;&amp;cmp),'||compress(row)||',3)';
2580      +			%if &cc_sw. %then %do;
2581      +				when ('cc') 
2582      +					Formula = '=INDEX(INDIRECT(&quot;ccind&quot;&amp;cmp),'||compress(row)||')';
2583      +			%end;
2584      +			when ('sgnl')
60                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

2585      +				Formula = '=IF(OR(RC'||compress(%sysfunc(varnum(&dsid.,rd)))||'&gt;rd,
2586      +                                  AND(RC'||compress(%sysfunc(varnum(&dsid.,rr)))||'&lt;&gt;&quot;.&quot;,
2587      +                                      RC'||compress(%sysfunc(varnum(&dsid.,rr)))||'&gt;rr),
2588      +                                  AND(RC'||compress(%sysfunc(varnum(&dsid.,pv)))||'&lt;&gt;&quot;.&quot;,
2589      +                                      RC'||compress(%sysfunc(varnum(&dsid.,pv)))||'&gt;pv)),
2590      +                               &quot;Y&quot;,
2591      +                               &quot;&quot;)';
2592      +			otherwise;
2593      +		end;
2594      +
2595      +		/* assign formulas for the signal cells */
2596      +		/* look up, over, or down depending on the level */
2597      +		select (lvl_nm);
2598      +			when ('soc') do;
2599      +				select (varname);
2600      +					when ('sgnl_soc') Formula = '=RC[-1]';
2601      +					when ('sgnl_hlgt') do;
2602      +						Formula = '=IF(ISNA(MATCH(&quot;Y&quot;,IF(gs='||compress(soc)||
2603      +                                  ',OFFSET(gs,0,'||
2604      +                                  compress(%sysfunc(varnum(&dsid.,sgnl_hlgt))-%sysfunc(varnum(&dsid.,soc)))||
2605      +                                  '),),0)),&quot;&quot;,&quot;Y&quot;)';
2606      +						ArrayRange = 'RC';
2607      +					end;
2608      +					when ('sgnl_hlt') do;
2609      +						Formula = '=IF(ISNA(MATCH(&quot;Y&quot;,IF(gs='||compress(soc)||
2610      +                                  ',OFFSET(gs,0,'||
2611      +                                  compress(%sysfunc(varnum(&dsid.,sgnl_hlt))-%sysfunc(varnum(&dsid.,soc)))||
2612      +                                  '),),0)),&quot;&quot;,&quot;Y&quot;)';
2613      +						ArrayRange = 'RC';
2614      +					end;
2615      +					when ('sgnl_pt') do;
2616      +						Formula = '=IF(ISNA(MATCH(&quot;Y&quot;,IF(gs='||compress(soc)||
2617      +                                  ',OFFSET(gs,0,'||
2618      +                                  compress(%sysfunc(varnum(&dsid.,sgnl_pt))-%sysfunc(varnum(&dsid.,soc)))||
2619      +                                  '),),0)),&quot;&quot;,&quot;Y&quot;)';
2620      +						ArrayRange = 'RC';
2621      +					end;
2622      +					otherwise;
2623      +				end;
2624      +			end;
2625      +			when ('hlgt') do;
2626      +				select (varname);
2627      +					when ('sgnl_soc') Formula = '=INDEX(aesocs,'||compress(soc)||',1)';
2628      +					when ('sgnl_hlgt') Formula = '=RC[-2]';
2629      +					when ('sgnl_hlt') do;
2630      +						Formula = '=IF(ISNA(MATCH(&quot;Y&quot;,IF(hg='||compress(hlgt)||
2631      +                                  ',OFFSET(hg,0,'||
2632      +                                  compress(%sysfunc(varnum(&dsid.,sgnl_hlt))-%sysfunc(varnum(&dsid.,hlgt)))||
2633      +                                  '),),0)),&quot;&quot;,&quot;Y&quot;)';
2634      +						ArrayRange = 'RC';
2635      +					end;
2636      +					when ('sgnl_pt') do;
2637      +						Formula = '=IF(ISNA(MATCH(&quot;Y&quot;,IF(hg='||compress(hlgt)||
2638      +                                  ',OFFSET(hg,0,'||
2639      +                                  compress(%sysfunc(varnum(&dsid.,sgnl_pt))-%sysfunc(varnum(&dsid.,hlgt)))||
2640      +                                  '),),0)),&quot;&quot;,&quot;Y&quot;)';
2641      +						ArrayRange = 'RC';
2642      +					end;
61                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

2643      +					otherwise;
2644      +				end;
2645      +			end;
2646      +			when ('hlt') do;
2647      +				select (varname);
2648      +					when ('sgnl_soc') Formula = '=INDEX(aesocs,'||compress(soc)||',1)';
2649      +					when ('sgnl_hlgt') Formula = '=INDEX(aehlgts,'||compress(hlgt)||',2)';
2650      +					when ('sgnl_hlt') Formula = '=RC[-3]';
2651      +					when ('sgnl_pt') do;
2652      +						Formula = '=IF(ISNA(MATCH(&quot;Y&quot;,IF(ph='||compress(hlt)||
2653      +                                  ',OFFSET(ph,0,'||
2654      +                                  compress(%sysfunc(varnum(&dsid.,sgnl_pt))-%sysfunc(varnum(&dsid.,hlt)))||
2655      +                                  '),),0)),&quot;&quot;,&quot;Y&quot;)';
2656      +						ArrayRange = 'RC';
2657      +					end;
2658      +					otherwise;
2659      +				end;
2660      +			end;
2661      +			when ('pt') do;
2662      +				select (varname);
2663      +					when ('sgnl_soc') Formula = '=INDEX(aesocs,'||compress(soc)||',1)';
2664      +					when ('sgnl_hlgt') Formula = '=INDEX(aehlgts,'||compress(hlgt)||',2)';
2665      +					when ('sgnl_hlt')Formula = '=INDEX(aehlts,'||compress(hlt)||',3)';
2666      +					when ('sgnl_pt') Formula = '=RC[-4]';
2667      +					otherwise;
2668      +				end;
2669      +			end;
2670      +			otherwise;
2671      +		end;
2672      +
2673      +		/* assign formulas for the cell indicating a signal at any level */
2674      +		/* Y -> signal at this level; A -> signal above; B -> signal below */
2675      +		if varname = 'sgnl_any' then select (lvl_nm);
2676      +			when ('soc') Formula = '=IF(RC[-4]=&quot;Y&quot;,&quot;Y&quot;,'||
2677      +                                   'IF(OR(RC[-3]=&quot;Y&quot;,'||
2678      +                                   'RC[-2]=&quot;Y&quot;,RC[-1]=&quot;Y&quot;),'||
2679      +                                   '&quot;B&quot;,&quot;&quot;))';
2680      +			when ('hlgt') Formula = '=IF(RC[-3]=&quot;Y&quot;,&quot;Y&quot;,'||
2681      +                                    'IF(RC[-4]=&quot;Y&quot;,&quot;A&quot;,&quot;&quot;)&amp;'||
2682      +                                    'IF(OR(RC[-2]=&quot;Y&quot;,RC[-1]=&quot;Y&quot;),'||
2683      +                                    '&quot;B&quot;,&quot;&quot;))';
2684      +			when ('hlt') Formula =  '=IF(RC[-2]=&quot;Y&quot;,&quot;Y&quot;,'||
2685      +                                    'IF(OR(RC[-4]=&quot;Y&quot;,RC[-3]=&quot;Y&quot;),&quot;A&quot;,&quot;&quot;)&amp;'||
2686      +                                    'IF(RC[-1]=&quot;Y&quot;,'||
2687      +                                    '&quot;B&quot;,&quot;&quot;))';
2688      +			when ('pt') Formula =   '=IF(RC[-1]=&quot;Y&quot;,&quot;Y&quot;,'||
2689      +                                    'IF(OR(RC[-4]=&quot;Y&quot;,RC[-3]=&quot;Y&quot;,RC[-2]=&quot;Y&quot;),'||
2690      +                                    '&quot;A&quot;,&quot;&quot;))';
2691      +			otherwise;
2692      +		end;
2693      +
2694      +		%let rc = %sysfunc(close(&dsid.));
2695      +	run;
2696      +
2697      +	%markup(ws_&ds._data_note,ws_&ds._data);
2698      +
2699      +	/* put the worksheet together */
2700      +	data ws_&ds.;
62                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

2701      +		set ws_&ds._start
2702      +		    ws_&ds._table_start
2703      +			ws_&ds._data
2704      +			ws_&ds._table_end
2705      +			ws_&ds._end;
2706      +	run;
2707      +
2708      +	/* set up named ranges for each section of the hidden overview data worksheet */
2709      +	/* first get the start and end row numbers for each section (soc, hlgt, hlt, pt) */
2710      +	data _null_;
2711      +		set meddra_cmp_data_row;
2712      +		by lvl_nm notsorted;
2713      +		if first.lvl_nm then do; 
2714      +			group + 1;
2715      +			call symputx('row'||compress(group)||'s',row);
2716      +		end;
2717      +		if last.lvl_nm then call symputx('row'||compress(group)||'e',row);
2718      +	run;
2719      +
2720      +	/* open dataset to extract column numbers for variables */
2721      +	%let dsid = %sysfunc(open(&ds.));
2722      +
2723      +	/* create named ranges for each respective section of the hidden data sheet */
2724      +	data wb_&ds._names;
2725      +		length string $&strlen.;
2726      +		%do i = 1 %to &arm_count.;
2727      +			%do j = 1 %to 4;
2728      +				%let lvl = %scan(soc hlgt hlt pt,&j.);
2729      +				/* AE counts and rates for each arm, split up by MedDRA hierarchy level */
2730      +				/* e.g. soc1 is the set of counts/rates for the SOC term in arm 1 */
2731      +				string = '<NamedRange ss:Name="'||"ae&lvl.&i."||'" ss:RefersTo="='||"'"||"&wstitle."||"'"||
2732      +		                 '!R'||compress("&&&row&j.s.")||'C'||compress(%sysfunc(varnum(&dsid.,arm&i._count)))||':'||
2733      +		                 'R'||compress("&&&row&j.e.")||'C'||compress(%sysfunc(varnum(&dsid.,arm&i._pct)))||'"/>'; output; 
2734      +			%end;
2735      +		%end;
2736      +		%do i = 1 %to 4;
2737      +			%let lvl = %scan(soc hlgt hlt pt,&i.); 
2738      +
2739      +			/* comparison values (rd, rr, pv) on the hidden data sheet */
2740      +			/* used to determine whether there is a signal at any given term */
2741      +			string = '<NamedRange ss:Name="'||"ae&lvl."||'c" ss:RefersTo="='||"'"||"&wstitle."||"'"||
2742      +		             '!R'||compress("&&&row&i.s.")||'C'||compress(%sysfunc(varnum(&dsid.,rd)))||':'||
2743      +		             'R'||compress("&&&row&i.e.")||'C'||compress(%sysfunc(varnum(&dsid.,pv)))||'"/>'; output; 
2744      +
2745      +			/* continuity correction indicator column */
2746      +			string = '<NamedRange ss:Name="'||"ae&lvl."||'cc" ss:RefersTo="='||"'"||"&wstitle."||"'"||
2747      +		             '!R'||compress("&&&row&i.s.")||'C'||compress(%sysfunc(varnum(&dsid.,cc)))||':'||
2748      +		             'R'||compress("&&&row&i.e.")||'C'||compress(%sysfunc(varnum(&dsid.,cc)))||'"/>'; output; 
2749      +
2750      +			/* signal columns identifying whether a given term has signals */
2751      +			/* at each of the four levels of the MedDRA hierarchy */
2752      +			/* signal at SOC --> column 1 'Y', etc. */
2753      +			string = '<NamedRange ss:Name="'||"ae&lvl."||'s" ss:RefersTo="='||"'"||"&wstitle."||"'"||
2754      +		             '!R'||compress("&&&row&i.s.")||'C'||compress(%sysfunc(varnum(&dsid.,sgnl_soc)))||':'||
2755      +		             'R'||compress("&&&row&i.e.")||'C'||compress(%sysfunc(varnum(&dsid.,sgnl_pt)))||'"/>'; output; 
2756      +
2757      +			/* column identifying whether a term has a signal at any level */
2758      +			/* Y -> signal at term level; A -> signal above; B -> signal below */
63                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

2759      +			string = '<NamedRange ss:Name="'||"ae&lvl."||'scd" ss:RefersTo="='||"'"||"&wstitle."||"'"||
2760      +		             '!R'||compress("&&&row&i.s.")||'C'||compress(%sysfunc(varnum(&dsid.,sgnl_any)))||':'||
2761      +		             'R'||compress("&&&row&i.e.")||'C'||compress(%sysfunc(varnum(&dsid.,sgnl_any)))||'"/>'; output; 
2762      +
2763      +		%end;
2764      +		/* id columns for the superior MedDRA hierarchy level for each level below SOC */
2765      +		/* e.g. the numeric SOC IDs for all HLGT terms */
2766      +		/* used to find whether there is a signal in any of the terms below a given term */
2767      +		string = '<NamedRange ss:Name="gs" ss:RefersTo="='||"'"||"&wstitle."||"'"||
2768      +		         '!R'||compress("&row2s.")||'C'||compress(%sysfunc(varnum(&dsid.,soc)))||':'||
2769      +		         'R'||compress("&row2e.")||'C'||compress(%sysfunc(varnum(&dsid.,soc)))||'"/>'; output; 
2770      +		string = '<NamedRange ss:Name="hg" ss:RefersTo="='||"'"||"&wstitle."||"'"||
2771      +		         '!R'||compress("&row3s.")||'C'||compress(%sysfunc(varnum(&dsid.,hlgt)))||':'||
2772      +		         'R'||compress("&row3e.")||'C'||compress(%sysfunc(varnum(&dsid.,hlgt)))||'"/>'; output; 
2773      +		string = '<NamedRange ss:Name="ph" ss:RefersTo="='||"'"||"&wstitle."||"'"||
2774      +		         '!R'||compress("&row4s.")||'C'||compress(%sysfunc(varnum(&dsid.,hlt)))||':'||
2775      +		         'R'||compress("&row4e.")||'C'||compress(%sysfunc(varnum(&dsid.,hlt)))||'"/>'; output; 
2776      +	run; 
2777      +
2778      +	%let dsid = %sysfunc(close(&dsid.));
2779      +
2780      +	/* named ranges for the calculations (rd, rr, pv) */
2781      +	data wb_&ds._calcnm; 
2782      +		length string $&strlen.;
2783      +
2784      +		dsid = open("&ds.");
2785      +
2786      +		%do i = 1 %to &arm_count.;
2787      +			%do j = 1 %to &arm_count.;
2788      +				%if &i. ne &j. %then %do;
2789      +
2790      +			/* values for rd, rr, pv for each comparison */
2791      +			/* e.g. cmp12 is the set of values for arm 1 compared to arm 2 */
2792      +			string = '<NamedRange ss:Name="'||"aecmp&i.&j."||'" ss:RefersTo="='||"'"||"&wstitle."||"'"||
2793      +	                 '!R'||compress(1)||'C'||compress(varnum(dsid,"rd&i.&j."))||':'||
2794      +	                 'R'||compress(&row4e.)||'C'||compress(varnum(dsid,"pv&i.&j."))||'"/>'; output; 
2795      +
2796      +			/* and for the continuity correction indicator columns */
2797      +			%if &cc_sw. %then %do;
2798      +				string = '<NamedRange ss:Name="'||"ccind&i.&j."||'" ss:RefersTo="='||"'"||"&wstitle."||"'"||
2799      +		                 '!R'||compress(1)||'C'||compress(varnum(dsid,"cc&i.&j."))||':'||
2800      +		                 'R'||compress(&row4e.)||'C'||compress(varnum(dsid,"cc&i.&j."))||'"/>'; output; 
2801      +			%end;
2802      +
2803      +				%end;
2804      +			%end;
2805      +		%end;
2806      +
2807      +		/* empty named range for arm to self comparisons */
2808      +		string = '<NamedRange ss:Name="cmp0" ss:RefersTo="='||"'"||"&wstitle."||"'"||
2809      +	                 '!R'||compress(1)||'C'||compress(attrn(dsid,'nvars')+1)||':'||
2810      +	                 'R'||compress(&row4e.)||'C'||compress(attrn(dsid,'nvars')+3)||'"/>'; output; 
2811      +
2812      +		%if &cc_sw. ne 0 %then %do;
2813      +			string = '<NamedRange ss:Name="ccind0" ss:RefersTo="='||"'"||"&wstitle."||"'"||
2814      +		                 '!R'||compress(1)||'C'||compress(attrn(dsid,'nvars')+1)||':'||
2815      +		                 'R'||compress(&row4e.)||'C'||compress(attrn(dsid,'nvars')+1)||'"/>'; output; 
2816      +		%end;
64                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

2817      +
2818      +		rc = close(dsid);
2819      +
2820      +		keep string;
2821      +	run; 
2822      +
2823      +	data wb_&ds._names;
2824      +		set wb_&ds._names wb_&ds._calcnm;
2825      +	run;
2826      +
2827      +	proc datasets library=work nolist nodetails; delete ws_&ds._:; quit;
2828      +
2829      +%mend out_meddra_cmp_data;
2830      +
2831      +
2832      +
2833      +/* hidden parameters worksheet */
2834      +%macro wbinfo;
2835      +
2836      +	%let ds = wbinfo;
2837      +	%let wstitle = Workbook Information;
2838      +
2839      +	/* set up worksheet */
2840      +	data ws_&ds._start;
2841      +		length string $&strlen.;
2842      +		string = '<Worksheet ss:Name="'||"&wstitle."||'">'; output; 
2843      +	run;
2844      +
2845      +	data ws_&ds._end; 
2846      +		length string $&strlen.; 
2847      +		string = '<WorksheetOptions xmlns="urn:schemas-microsoft-com:office:excel">'; output;
2848      +		string = '<Visible>SheetHidden</Visible>'; output;
2849      +		string = '<ProtectObjects>False</ProtectObjects>'; output;
2850      +		string = '<ProtectScenarios>False</ProtectScenarios>'; output;
2851      +		string = '</WorksheetOptions>'; output;
2852      +		string = '</Worksheet>'; output;
2853      +	run;
2854      +
2855      +	data ws_&ds._table_start; 
2856      +		length string $&strlen.; 
2857      +		string = '<Table>'; output;
2858      +	run;
2859      +
2860      +	data ws_&ds._table_end;
2861      +		length string $&strlen.; 
2862      +		string = '</Table>'; output;
2863      +	run;
2864      +
2865      +	/* prepare the data for the worksheet */
2866      +	data ws_&ds._arminfo_data;
2867      +		retain arm_display arm_num count;
2868      +		set all_arm(keep=arm_display arm_num count rename=(count=countn));
2869      +		count = put(countn,comma.);
2870      +		drop countn;
2871      +	run;
2872      +
2873      +	%annotate(ws_&ds._arminfo_data,ws_&ds._arminfo_note);
2874      +
65                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

2875      +	%markup(ws_&ds._arminfo_note,ws_&ds._arminfo);
2876      +
2877      +	data ws_&ds._lkp_note;
2878      +		%xml_tag_def;
2879      +		%xml_init;
2880      +
2881      +		Row = 1;
2882      +		/* treatment (experiment) number, control number, treatment & control numbers */
2883      +		Formula = '=VLOOKUP(exp_name,wbinfo_arminfo_2,2,FALSE)'; output;
2884      +		Formula = '=VLOOKUP(ctl_name,wbinfo_arminfo_2,2,FALSE)'; output;
2885      +		Formula = '=IF(exp&lt;&gt;ctl,exp&amp;ctl,0)'; output; 
2886      +
2887      +		Row = 2;
2888      +		/* make blank thresholds equal to positive infinity */
2889      +		/* then, only non-blank thresholds will contribute to AE highlighting */
2890      +		Formula = '=IF(ISBLANK(rdn),&quot;I&quot;,rdn)'; output;
2891      +		Formula = '=IF(ISBLANK(rrn),&quot;I&quot;,rrn)'; output;
2892      +		Formula = '=IF(ISBLANK(pvn),&quot;I&quot;,pvn)'; output;
2893      +
2894      +	run;
2895      +
2896      +	%markup(ws_&ds._lkp_note,ws_&ds._lkp);
2897      +
2898      +	data ws_&ds.;
2899      +		set ws_&ds._start
2900      +		    ws_&ds._table_start
2901      +			ws_&ds._arminfo
2902      +			ws_&ds._lkp
2903      +			ws_&ds._table_end
2904      +			ws_&ds._end;
2905      +	run;
2906      +
2907      +	data wb_&ds._names;
2908      +		length string $&strlen.;
2909      +		string = '<NamedRange ss:Name="wbinfo_arminfo_1" ss:RefersTo="='||
2910      +                 "'Workbook Information'"||'!R1C1:R'||"&arm_count."||'C1"/>'; output;
2911      +		string = '<NamedRange ss:Name="wbinfo_arminfo_2" ss:RefersTo="='||
2912      +                 "'Workbook Information'"||'!R1C1:R'||"&arm_count."||'C2"/>'; output;
2913      +		string = '<NamedRange ss:Name="armn" ss:RefersTo="='||
2914      +                 "'Workbook Information'"||'!R1C3:R'||"&arm_count."||'C3"/>'; output;
2915      +		/* numeric arm number & comparison number identifiers */
2916      +		string = '<NamedRange ss:Name="exp" ss:RefersTo="='||"'"||"&wstitle."||"'!"||
2917      +                 'R'||compress(%eval(&arm_count.+1))||'C1"/>'; output; 	
2918      +		string = '<NamedRange ss:Name="ctl" ss:RefersTo="='||"'"||"&wstitle."||"'!"||
2919      +                 'R'||compress(%eval(&arm_count.+1))||'C2"/>'; output; 	
2920      +		string = '<NamedRange ss:Name="cmp" ss:RefersTo="='||"'"||"&wstitle."||"'!"||
2921      +                 'R'||compress(%eval(&arm_count.+1))||'C3"/>'; output; 	
2922      +		/* rd, rr, and pv thresholds */
2923      +		string = '<NamedRange ss:Name="rd" ss:RefersTo="='||"'"||"&wstitle."||"'!"||
2924      +                 'R'||compress(%eval(&arm_count.+2))||'C1"/>'; output; 	
2925      +		string = '<NamedRange ss:Name="rr" ss:RefersTo="='||"'"||"&wstitle."||"'!"||
2926      +                 'R'||compress(%eval(&arm_count.+2))||'C2"/>'; output; 	
2927      +		string = '<NamedRange ss:Name="pv" ss:RefersTo="='||"'"||"&wstitle."||"'!"||
2928      +                 'R'||compress(%eval(&arm_count.+2))||'C3"/>'; output; 	
2929      +
2930      +	run;
2931      +
2932      +	proc datasets library=work nolist nodetails; delete ws_&ds._:; quit;
66                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

2933      +
2934      +%mend wbinfo;
2935      +
2936      +
2937      +/**********************/
2938      +/* DATA CHECK SUMMARY */
2939      +/**********************/
2940      +%macro out_err;
2941      +
2942      +	/* set up worksheet */
2943      +	data ws_err_start;
2944      +		length string $&strlen.;
2945      +		string = '<Worksheet ss:Name="'||"Data Check Summary"||'">'; output; 
2946      +	run;
2947      +
2948      +	data ws_err_end; 
2949      +		length string $&strlen.; 
2950      +		string = '</Worksheet>'; output;
2951      +	run;
2952      +
2953      +	data ws_err_table_start; 
2954      +		length string $&strlen.; 
2955      +		string = '<Table>'; output;
2956      +		string = '<Column ss:Width="266"/>'; output;
2957      +	run;
2958      +
2959      +	data ws_err_table_end;
2960      +		length string $&strlen.; 
2961      +		string = '</Table>'; output;
2962      +	run;
2963      +
2964      +	/* make worksheet header */
2965      +	data ws_err_header_data;
2966      +		%xml_tag_def;
2967      +		%xml_init;
2968      +
2969      +		Type = 'String';
2970      +
2971      +		%let row = 0;
2972      +
2973      +		Row = %let row = %eval(&row. + 1); &row.;
2974      +		Data = ''; output;
2975      +		
2976      +		Row = %let row = %eval(&row. + 1); &row.;
2977      +		StyleID = 'Header'; 
2978      +		Data = 'Adverse Events Analysis Data Check Summary';
2979      +		output;
2980      +
2981      +		%if (&sl_group_nobs. or &sl_subset_nobs.) %then %do;
2982      +			Row = %let row = %eval(&row. + 1); &row.;
2983      +			Data = "&sl_gs_desc."; StyleID = 'Default10'; output;
2984      +		%end;
2985      +
2986      +		Row = %let row = %eval(&row. + 1); &row.;
2987      +		Data = ''; StyleID = ''; output;
2988      +
2989      +		StyleID = 'Default8'; 
2990      +
67                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

2991      +		Row = %let row = %eval(&row. + 1); &row.;
2992      +		Data = "NDA/BLA: &ndabla."; output;
2993      +		Row = %let row = %eval(&row. + 1); &row.;
2994      +		Data = "Study: &studyid."; output;
2995      +		Row = %let row = %eval(&row. + 1); &row.;
2996      +		Data = "Analysis run date: &rundate."; output;
2997      +
2998      +		Row = %let row = %eval(&row. + 1); &row.;
2999      +		Data = ''; StyleID = ''; output;
3000      +	run;
3001      +
3002      +	%markup(ws_err_header_data,ws_err_header);
3003      +
3004      +	/* empty row for separating sections of the data check summary */
3005      +	data ws_null;
3006      +		length string $&strlen.;
3007      +		string = '<Row/>';
3008      +	run;
3009      +
3010      +
3011      +	/****************************/
3012      +	/* SUBJECT VALIDATION TABLE */
3013      +	/****************************/
3014      +	/* make section header */
3015      +	data ws_rpt_dm_header_data;
3016      +		%xml_tag_def;
3017      +		%xml_init;
3018      +
3019      +		MergeAcross = 6;
3020      +
3021      +		%let row = 0;
3022      +
3023      +		Row = %let row = %eval(&row. + 1); &row.;
3024      +		Data = ''; output;
3025      +
3026      +		Row = %let row = %eval(&row. + 1); &row.;
3027      +		StyleID = 'SubHeader';
3028      +		Data = "Subject Validation"; output;
3029      +
3030      +		Row = %let row = %eval(&row. + 1); &row.;
3031      +		Data = ''; output;
3032      +		
3033      +		Row = %let row = %eval(&row. + 1); &row.;
3034      +		StyleID = 'Default10Wrap';
3035      +		Data = "Subjects are validated before their adverse events are used in this report's analysis. "||
3036      +               'Subjects are excluded if they fail screening or are unassigned to an arm, '||
3037      +               'are not in the safety population, or are missing treatment and reference start and '||
3038      +               'end dates. The following table shows how many subjects were in the demographics (DM) dataset, '||
3039      +               'how many were removed for each of these reasons, and how many remained whose adverse events '||
3040      +               'were used in the analysis.';
3041      +		output;
3042      +
3043      +		Row = %let row = %eval(&row. + 1); &row.;
3044      +		Data = ''; output;
3045      +	run;
3046      +
3047      +	data ws_rpt_dm_header_data;
3048      +		set ws_rpt_dm_header_data;
68                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

3049      +		Height = max(1,ceil(length(trim(Data))/130))*13.5;
3050      +	run;
3051      +
3052      +	%markup(ws_rpt_dm_header_data,ws_rpt_dm_header);
3053      +
3054      +	/* subject validation column headers */
3055      +	data ws_rpt_dm_columns_data;
3056      +		%xml_tag_def;
3057      +		%xml_init;
3058      +
3059      +		Type = 'String';
3060      +		StyleID = 'ColumnOutline';
3061      +
3062      +		Row = 1;
3063      +		Height = 35;
3064      +		MergeAcross = 2*(&arm_count.+1);
3065      +		Data = 'Subject Validation Summary'; output;
3066      +		MergeAcross = .;
3067      +
3068      +		Row = 2;
3069      +		Height = 13.75 + max(1,round(&max_arm_nm_len./12,1))*13.75;
3070      +		MergeDown = 1;
3071      +		Data = 'Subject Validation Step'; output; 
3072      +		MergeDown = .; MergeAcross = 1;
3073      +		%do i = 1 %to &arm_count.;
3074      +			Data = "&&&arm_name_&i."; output;
3075      +		%end;
3076      +		Data = 'Total'; output;
3077      +
3078      +		Row = 3;
3079      +		Height = 27;
3080      +		Index = 2;
3081      +		MergeAcross = .;
3082      +		%do i = 1 %to &arm_count.;
3083      +			Data = "Subject Count"; output;
3084      +			Index = .;
3085      +			Data = "%"; output;
3086      +		%end;
3087      +		Data = "Subject Count"; output;
3088      +		Data = "%"; output;
3089      +
3090      +	run;
3091      +
3092      +	%markup(ws_rpt_dm_columns_data,ws_rpt_dm_columns);
3093      +
3094      +	/* subject validation data table */
3095      +	%annotate(rpt_dm,ws_rpt_dm_data);
3096      +
3097      +	data ws_rpt_dm_data;
3098      +		set ws_rpt_dm_data;
3099      +		by Row;	
3100      +
3101      +		if varname = 'desc' then StyleID = 'D_BLR';
3102      +		else if index(varname,'count') then StyleID = 'D0_R1_BL';
3103      +		else if index(varname,'pct') then StyleID = 'D1_R1_BR';
3104      +
3105      +		if bottom then StyleID = trim(StyleID)||'B';
3106      +	run;
69                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

3107      +
3108      +	%markup(ws_rpt_dm_data,ws_rpt_dm);
3109      +
3110      +
3111      +	/*************************/
3112      +	/* DATA VALIDATION TABLE */
3113      +	/*************************/
3114      +
3115      +	/* find out whether there were any adverse events excluded during validation */
3116      +	%let dsid = %sysfunc(open(rpt_err));
3117      +	%if %sysfunc(attrn(&dsid.,nobs)) %then %let vld_err = Y;
3118      +	%else %let vld_err = N;
3119      +	%let rc = %sysfunc(close(&dsid.));
3120      +
3121      +	/* make section header */
3122      +	data ws_rpt_err_header_data;
3123      +		%xml_tag_def;
3124      +		%xml_init;
3125      +
3126      +		MergeAcross = 7;
3127      +
3128      +		%let row = 0;
3129      +
3130      +		Row = %let row = %eval(&row. + 1); &row.;
3131      +		Data = ''; output;
3132      +
3133      +		Row = %let row = %eval(&row. + 1); &row.;
3134      +		Data = ''; output;
3135      +
3136      +		Row = %let row = %eval(&row. + 1); &row.;
3137      +		StyleID = 'SubHeader';
3138      +		Data = "Adverse Events Data Validation"; output;
3139      +
3140      +		Row = %let row = %eval(&row. + 1); &row.;
3141      +		Data = ''; output;
3142      +		
3143      +		Row = %let row = %eval(&row. + 1); &row.;
3144      +		StyleID = 'Default10Wrap';
3145      +		Data = "Data validation is performed on all adverse events experienced by validated subjects, "||
3146      +		       "of which there were "||trim(put(&naes_sp.,comma7. -L))||" "||
3147      +               'in this study. Adverse events can be excluded for the following reasons:'; output;
3148      +
3149      +		Row = %let row = %eval(&row. + 1); &row.;
3150      +		Data = ''; output;
3151      +
3152      +		Row = %let row = %eval(&row. + 1); &row.;
3153      +		Data = '~!~!~!1. The start date of the adverse event was missing or could not be interpreted '||
3154      +               'as a date with at least month and year'; output;
3155      +		Row = %let row = %eval(&row. + 1); &row.;
3156      +		Data = "~!~!~!2. The start date of the adverse event was not between the subject's first "||
3157      +               'exposure date and last exposure date '||ifc(&study_lag. ne 0,"+ &study_lag. days",''); 
3158      +               output;
3159      +		Row = %let row = %eval(&row. + 1); &row.;
3160      +		Data = '~!~!~!3. The body system or organ class (AEBODSYS) or dictionary-derived term (AEDECOD) '||
3161      +               'was blank'; output;
3162      +
3163      +		%if &vld_sw. %then %do;
3164      +			%if &vld_err. = N %then %do;
70                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

3165      +				Row = %let row = %eval(&row. + 1); &row.;
3166      +				Data = ''; output;
3167      +				Row = %let row = %eval(&row. + 1); &row.;
3168      +				Data = 'No adverse events were excluded during data validation.'; output;
3169      +			%end;
3170      +			%else %do;
3171      +				Row = %let row = %eval(&row. + 1); &row.;
3172      +				Data = ''; output;
3173      +				Row = %let row = %eval(&row. + 1); &row.;
3174      +				Data = 'The counts in the following two tables are counts of events and not of subjects. '||
3175      +	                   'A subject can have for example an adverse event anaemia that '||
3176      +	                   'passed validation and two that did not. That subject is counted '||
3177      +	                   'in the subject count for anaemia on comparison analysis tab, and the two adverse events '||
3178      +	                   'that were excluded are counted here individually.'; output;
3179      +			%end;
3180      +		%end;
3181      +		%else %do;
3182      +				Row = %let row = %eval(&row. + 1); &row.;
3183      +				Data = ''; output;
3184      +				Row = %let row = %eval(&row. + 1); &row.;
3185      +				Data = 'Data validation was not done because necessary date variables '||
3186      +                       'were not available. All adverse events were used in the analysis.'; output;
3187      +		%end;
3188      +
3189      +		Row = %let row = %eval(&row. + 1); &row.;
3190      +		Data = ''; output;
3191      +	run;
3192      +
3193      +	data ws_rpt_err_header_data;
3194      +		set ws_rpt_err_header_data;
3195      +		Height = max(1,ceil(length(trim(Data))/130))*13.5;
3196      +	run;
3197      +
3198      +	%markup(ws_rpt_err_header_data,ws_rpt_err_header);
3199      +
3200      +	/* if there were excluded AEs, then include a summary table */
3201      +	/* and a table listing them by term */
3202      +	%if &vld_err. = Y %then %do;
3203      +
3204      +		/* SUMMARY */
3205      +		data ws_rpt_err_columns_data;
3206      +			%xml_tag_def;
3207      +			%xml_init;
3208      +
3209      +
3210      +			Type = 'String';
3211      +			StyleID = 'ColumnOutline';
3212      +
3213      +			Row = 1;
3214      +			Height = 35;
3215      +			MergeAcross = 2*&arm_count.;
3216      +			Data = 'Adverse Events Data Validation Summary'; output;
3217      +			MergeAcross = .;
3218      +
3219      +			Row = 2;
3220      +			Height = 13.75 + max(1,round(&max_arm_nm_len./10,1))*13.75;
3221      +			MergeDown = 1;
3222      +			Data = 'Reason for Exclusion'; output; 
71                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

3223      +			MergeDown = .;
3224      +			MergeAcross = 1;
3225      +			%do i = 1 %to &arm_count.;
3226      +				Data = "&&&arm_name_&i."||'&#10;'||'N='||put(&&&naes_sp_&i.,comma7. -L); output;
3227      +			%end;
3228      +			MergeAcross = .;
3229      +
3230      +			Row	= 3;
3231      +			Height = 27;
3232      +			Index = 2;
3233      +			%do i = 1 %to &arm_count.;
3234      +				Data = 'Event Count'; output;
3235      +				Index = .;
3236      +				Data = '%'; output;
3237      +			%end;
3238      +		run;
3239      +
3240      +		%markup(ws_rpt_err_columns_data,ws_rpt_err_columns);
3241      +
3242      +		%annotate(rpt_err,ws_rpt_err_data);
3243      +
3244      +		data ws_rpt_err_data;
3245      +			set ws_rpt_err_data;
3246      +			by Row;	
3247      +
3248      +			if varname = 'err_desc' then StyleID = 'D_BLR';
3249      +			else if index(varname,'count') then StyleID = 'D0_R1_BL';
3250      +			else if index(varname,'pct') then StyleID = 'D1_R1_BR';
3251      +
3252      +			if bottom then StyleID = trim(StyleID)||'B';
3253      +		run;
3254      +
3255      +		%markup(ws_rpt_err_data,ws_rpt_err);
3256      +
3257      +		/* DATA VALIDATION BY TERM */
3258      +		data ws_rpt_err_term_columns_data;
3259      +			%xml_tag_def;
3260      +			%xml_init;
3261      +
3262      +			Type = 'String';
3263      +			StyleID = 'ColumnOutline';
3264      +
3265      +			Row = 1;
3266      +			Height = 25;
3267      +			MergeAcross = 5 + 2*&arm_count.;
3268      +			Data = 'Adverse Events Data Validation by Term'; output;
3269      +			MergeAcross = .;
3270      +
3271      +			Row = 2;
3272      +			Height = (ceil(&max_arm_nm_len./10)+1)*13.5;
3273      +			Data = 'Body System or Organ Class'; output;
3274      +			MergeAcross = 4;
3275      +			Data = 'Dictionary-Derived Term'; output;
3276      +			MergeAcross = .;
3277      +			MergeAcross = 1;
3278      +			%do i = 1 %to &arm_count.;
3279      +				Data = "&&&arm_name_&i."||'&#10;'||'Event Count'; output;		
3280      +			%end;
72                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

3281      +			MergeAcross = .;
3282      +		run;
3283      +
3284      +		%markup(ws_rpt_err_term_columns_data,ws_rpt_err_term_columns);
3285      +
3286      +		%annotate(rpt_err_term,ws_rpt_err_term_data);
3287      +
3288      +		data ws_rpt_err_term_data;
3289      +			set ws_rpt_err_term_data;
3290      +
3291      +			StyleID = 'Data';
3292      +			if bottom then StyleID = trim(StyleID)||'Bottom';
3293      +			if upcase(varname) = 'AEDECOD' then MergeAcross = 4;
3294      +			else if upcase(varname) in (%do i = 1 %to &arm_count.; "ARM&i."  %end;) then MergeAcross = 1;
3295      +			else MergeAcross = .;
3296      +		run;
3297      +
3298      +		%markup(ws_rpt_err_term_data,ws_rpt_err_term);
3299      +	%end;
3300      +
3301      +
3302      +	/*******************/
3303      +	/* MEDDRA MATCHING */
3304      +	/*******************/
3305      +
3306      +	/* make section header */
3307      +	data ws_rpt_meddra_header_data; 
3308      +		%xml_tag_def;
3309      +		%xml_init;
3310      +
3311      +		MergeAcross = 7;
3312      +
3313      +		%let row = 0;
3314      +
3315      +		Row = %let row = %eval(&row. + 1); &row.;
3316      +		Data = ''; output;
3317      +
3318      +		Row = %let row = %eval(&row. + 1); &row.;
3319      +		StyleID = 'SubHeader';
3320      +		Data = "MedDRA Matching"; output;
3321      +
3322      +		Row = %let row = %eval(&row. + 1); &row.;
3323      +		Data = ''; output;
3324      +		
3325      +		Row = %let row = %eval(&row. + 1); &row.;
3326      +		StyleID = 'Default10Wrap';
3327      +		Data = 'MedDRA matching is performed on all adverse events which passed data validation, '||
3328      +		       'of which there were '||trim(put(&naes_spv.,comma7. -L))||' in this study.'; output;
3329      +
3330      +		Row = %let row = %eval(&row. + 1); &row.;
3331      +		Data = ''; output;
3332      +	run;
3333      +
3334      +	data ws_rpt_meddra_header_data;
3335      +		set ws_rpt_meddra_header_data;
3336      +		Height = max(1,ceil(length(trim(Data))/130))*13.5;
3337      +	run;
3338      +
73                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

3339      +	%markup(ws_rpt_meddra_header_data,ws_rpt_meddra_header);
3340      +
3341      +	/* summary */
3342      +	data ws_rpt_meddra_columns_data;
3343      +		%xml_tag_def;
3344      +		%xml_init;
3345      +
3346      +		Type = 'String';
3347      +		StyleID = 'ColumnOutline';
3348      +
3349      +		Row = 1;
3350      +		Height = 35;
3351      +		MergeAcross = 3;
3352      +		Data = 'MedDRA Matching Summary'||'&#10;'||"N="||put(&naes_spv.,comma7. -L); output;
3353      +		MergeAcross = .;
3354      +
3355      +		Row = 2;
3356      +		Height = 40;
3357      +		Data = 'MedDRA Version'; output;
3358      +		Data = 'Match Count'; output;
3359      +		Data = 'Non-Match Count'; output;
3360      +		Data = 'Match %'; output;
3361      +	run;
3362      +
3363      +	%markup(ws_rpt_meddra_columns_data,ws_rpt_meddra_columns);
3364      +
3365      +	%annotate(rpt_meddra,ws_rpt_meddra_data);
3366      +
3367      +	data ws_rpt_meddra_data;
3368      +		set ws_rpt_meddra_data;
3369      +		by Row;
3370      +
3371      +		StyleID = 'Data';
3372      +		if index(varname,'pct') then StyleID = trim(StyleID)||'Dec1'; 
3373      +		if not first.Row then StyleID = trim(StyleID)||'Center';
3374      +		if bottom then StyleID = trim(StyleID)||'Bottom';
3375      +	run;
3376      +
3377      +	%markup(ws_rpt_meddra_data,ws_rpt_meddra);
3378      +
3379      +	/* per-term counts */
3380      +	%if %sysfunc(floor(&meddra_pct.)) < 100 %then %do;
3381      +		data ws_rpt_err_meddra_columns_data;
3382      +			%xml_tag_def;
3383      +			%xml_init;
3384      +
3385      +			Type = 'String';
3386      +			StyleID = 'ColumnOutline';
3387      +
3388      +			Row = 1;
3389      +			Height = 25;
3390      +			MergeAcross = 7;
3391      +			Data = 'Adverse Events Without Matching MedDRA Terms'; output;
3392      +			MergeAcross = .;
3393      +
3394      +			Row = 2;
3395      +			Height = 30;
3396      +			Data = 'Body System or Organ Class'; output;
74                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

3397      +			MergeAcross = 4;
3398      +			Data = 'Dictionary-Derived Term'; output;
3399      +			MergeAcross = .; 
3400      +			Data = 'Subject Count'; output;
3401      +			Data = 'Event Count'; output;
3402      +		run;
3403      +
3404      +		%markup(ws_rpt_err_meddra_columns_data,ws_rpt_err_meddra_columns);
3405      +		
3406      +		%annotate(rpt_meddra_term,ws_rpt_err_meddra_data);
3407      +
3408      +		data ws_rpt_err_meddra_data;
3409      +			set ws_rpt_err_meddra_data;
3410      +
3411      +			StyleID = 'Data';
3412      +			if bottom then StyleID = trim(StyleID)||'Bottom';
3413      +			if upcase(varname) = upcase('aedecod') then MergeAcross = 4;
3414      +		run;
3415      +
3416      +		%markup(ws_rpt_err_meddra_data,ws_rpt_err_meddra);
3417      +	%end;	
3418      +
3419      +	
3420      +	/*********************/
3421      +	/* ASSEMBLE WORKBOOK */
3422      +	/*********************/
3423      +	data ws_err_table;
3424      +		set ws_err_header
3425      +			ws_rpt_dm_header
3426      +			ws_rpt_dm_columns
3427      +			ws_rpt_dm
3428      +			ws_rpt_err_header
3429      +			%if &vld_err. = Y %then %do;
3430      +				ws_rpt_err_columns
3431      +				ws_rpt_err
3432      +				ws_null
3433      +				ws_rpt_err_term_columns
3434      +				ws_rpt_err_term
3435      +				ws_null
3436      +			%end;
3437      +			ws_rpt_meddra_header
3438      +			ws_rpt_meddra_columns
3439      +			ws_rpt_meddra
3440      +			%if %sysfunc(floor(&meddra_pct.)) < 100 %then %do;
3441      +				ws_null
3442      +				ws_rpt_err_meddra_columns
3443      +				ws_rpt_err_meddra
3444      +			%end;
3445      +			ws_null
3446      +			;
3447      +	run; 
3448      +
3449      +	/* settings for alternating row highlighting */
3450      +	/* get the info on the first and last rows for the data validation by term */
3451      +	/* and the MedDRA matching by term in order to set up alternate row highlighting */
3452      +	%if &vld_err. = Y %then %do;
3453      +		%let dsid = %sysfunc(open(rpt_err_term));
3454      +		%let nobs = %sysfunc(attrn(&dsid.,nobs));
75                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

3455      +		%let rc = %sysfunc(close(&dsid.));
3456      +
3457      +		data _null_;
3458      +			set ws_err_header
3459      +				ws_rpt_dm_header
3460      +				ws_rpt_dm_columns
3461      +				ws_rpt_dm
3462      +				ws_rpt_err_header
3463      +				ws_rpt_err_columns
3464      +				ws_rpt_err
3465      +				ws_null
3466      +				ws_rpt_err_term_columns
3467      +	            end=eof;
3468      +			retain count;
3469      +			if string in ('<Row/>' '</Row>') then count + 1;
3470      +			if eof then do;
3471      +				firstrow = count + 1;
3472      +				lastrow =  firstrow + &nobs. - 1;
3473      +				call symputx('err_firstrow',put(firstrow,8. -L));
3474      +				call symputx('err_lastrow',put(lastrow,8. -L));
3475      +			end;
3476      +		run;
3477      +	%end;
3478      +
3479      +	%if %sysfunc(floor(&meddra_pct.)) < 100 %then %do;
3480      +		%let dsid = %sysfunc(open(rpt_meddra_term));
3481      +		%let nobs = %sysfunc(attrn(&dsid.,nobs));
3482      +		%let rc = %sysfunc(close(&dsid.));
3483      +
3484      +		data _null_;
3485      +			set ws_err_header
3486      +				ws_rpt_dm_header
3487      +				ws_rpt_dm_columns
3488      +				ws_rpt_dm
3489      +				ws_rpt_err_header
3490      +				%if &vld_err. = Y %then %do;
3491      +					ws_rpt_err_columns
3492      +					ws_rpt_err
3493      +					ws_null
3494      +					ws_rpt_err_term_columns
3495      +					ws_rpt_err_term
3496      +					ws_null
3497      +				%end;
3498      +				ws_rpt_meddra_header
3499      +				ws_rpt_meddra_columns
3500      +				ws_rpt_meddra
3501      +				ws_null
3502      +				ws_rpt_err_meddra_columns
3503      +				end=eof;
3504      +
3505      +			retain count;
3506      +			if string in ('<Row/>' '</Row>') then count + 1;
3507      +			if eof then do;
3508      +				firstrow = count + 1;
3509      +				lastrow =  firstrow + &nobs. - 1;
3510      +				call symputx('meddra_firstrow',put(firstrow,8. -L));
3511      +				call symputx('meddra_lastrow',put(lastrow,8. -L));
3512      +			end;
76                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

3513      +		run;
3514      +	%end;
3515      +
3516      +	data ws_err_settings;
3517      +		length string $&strlen.; 
3518      +		string = '<WorksheetOptions xmlns="urn:schemas-microsoft-com:office:excel">'; output;
3519      +		string = '<PageSetup>'; output;
3520      +		string = '<Layout x:Orientation="Landscape"/>'; output;
3521      +		string = '<Footer x:Data="Page &amp;P of &amp;N"/>'; output;
3522      +		string = '</PageSetup>'; output; 
3523      +		string = '<FitToPage/>'; output;
3524      +		string = '<Print>'; output;
3525      +        string = '<FitHeight>100</FitHeight>'; output;
3526      +       	string = '</Print>'; output;
3527      +		string = '</WorksheetOptions>'; output;
3528      +		%if &vld_err. = Y %then %do;
3529      +			string = '<ConditionalFormatting xmlns="urn:schemas-microsoft-com:office:excel">'; output;
3530      +			string = "<Range>R&err_firstrow.C1:R&err_lastrow.C"||
3531      +	                  compress(%eval(6+2*&arm_count.))||"</Range>"; output;
3532      +			string = '<Condition>'; output;
3533      +			string = '<Value1>MOD(ROW(),2)-'||trim(put(%sysfunc(mod(&err_firstrow.,2)),8. -l))||'</Value1>'; 
3534      +			output;
3535      +			string = "<Format Style='background:silver'/>"; output;
3536      +			string = '</Condition>'; output;
3537      +			string = '</ConditionalFormatting>'; output;
3538      +		%end;
3539      +		%if %sysfunc(floor(&meddra_pct.)) < 100 %then %do;
3540      +			string = '<ConditionalFormatting xmlns="urn:schemas-microsoft-com:office:excel">'; output;
3541      +			string = "<Range>R&meddra_firstrow.C1:R&meddra_lastrow.C8</Range>"; output;
3542      +			string = '<Condition>'; output;
3543      +			string = '<Value1>MOD(ROW(),2)-'||trim(put(%sysfunc(mod(&meddra_firstrow.,2)),8. -l))||'</Value1>'; 
3544      +			output;
3545      +			string = "<Format Style='background:silver'/>"; output;
3546      +			string = '</Condition>'; output;
3547      +			string = '</ConditionalFormatting>'; output;
3548      +		%end;
3549      +	run;
3550      +
3551      +	data ws_err;
3552      +		set ws_err_start
3553      +			ws_err_table_start
3554      +			ws_err_table
3555      +			ws_err_table_end 
3556      +			ws_err_settings
3557      +			ws_err_end;
3558      +	run;
3559      +
3560      +	proc datasets library=work nolist nodetails; delete ws_err_: ws_rpt_:; quit;
3561      +
3562      +%mend out_err;
3563      +
3564      +
3565      +/* create the XML styles used in this workbook */
3566      +%macro out_aem_styles;
3567      +
3568      +	data wb_aem_styles_data;
3569      +		%xml_style_dcl;	
3570      +		ID = 'D'; output;
77                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

3571      +
3572      +		ID = 'D0_R1'; NumFmt = '0'; HA = 'Right'; Indent = 1; output; 
3573      +		ID = 'D0_R2'; NumFmt = '0'; HA = 'Right'; Indent = 2; output; 
3574      +		ID = 'D0_R3'; NumFmt = '0'; HA = 'Right'; Indent = 3; output; 
3575      +		ID = 'D0_R4'; NumFmt = '0'; HA = 'Right'; Indent = 4; output;
3576      +		ID = 'D1_R0'; NumFmt = '0.0'; HA = 'Right'; Indent = .; output;
3577      +		ID = 'D1_R1'; NumFmt = '0.0'; HA = 'Right'; Indent = 1; output;
3578      +		ID = 'D1_R2'; NumFmt = '0.0'; HA = 'Right'; Indent = 2; output;
3579      +		ID = 'D1_R3'; NumFmt = '0.0'; HA = 'Right'; Indent = 3; output;
3580      +		ID = 'D2_R1'; NumFmt = '0.00'; HA = 'Right'; Indent = 1; output;
3581      +		ID = 'D2_R2'; NumFmt = '0.00'; HA = 'Right'; Indent = 2; output;
3582      +		ID = 'D2_R3'; NumFmt = '0.00'; HA = 'Right'; Indent = 3; output;
3583      +		NumFmt = ''; HA = ''; Indent = .;
3584      +
3585      +		ID = 'IB'; NumFmt = '[=0]&quot;&quot;;General';	HA = 'Left'; output;
3586      +	run;
3587      +	
3588      +	data wb_aem_styles_data;
3589      +		set wb_aem_styles_data; 
3590      +		length ParentID $50;
3591      +
3592      +		ParentID = ID;
3593      +
3594      +		do BL = 0 to 1;
3595      +			do BR = 0 to 1;
3596      +				do BB = 0 to 1;
3597      +					ID = trim(left(ParentID))||'_B'; 
3598      +					if BL then ID = trim(left(ID))||'L';
3599      +					if BR then ID = trim(left(ID))||'R';
3600      +					if BB then ID = trim(left(ID))||'B';
3601      +					if BL or BR or BB then BWt = 1;
3602      +					output;
3603      +				end;
3604      +			end;
3605      +		end;
3606      +	run;
3607      +
3608      +	data wb_aem_styles_o_data;
3609      +		%xml_style_dcl;
3610      +		do i = 1 to 100;
3611      +			output;
3612      +		end;
3613      +	run;
3614      +
3615      +	data wb_aem_styles_o_data;
3616      +		set wb_aem_styles_o_data;
3617      +		%let si = 0;
3618      +
3619      +		/* Data and DataCenter styles */
3620      +		if _n_ = %let si = %eval(&si. + 1); &si. then do;
3621      +			ID = 'D'; VA = 'Top'; Wrap = 0; BL = 1; BR = 1; BWt = 1;
3622      +		end; 
3623      +		if _n_ = %let si = %eval(&si. + 1); &si. then do;
3624      +			ID = 'DC'; HA = 'Center'; VA = 'Top'; Wrap = 0; BL = 1; BR = 1; BWt = 1;
3625      +		end; 
3626      +		if _n_ = %let si = %eval(&si. + 1); &si. then do;
3627      +			ID = 'DB'; VA = 'Top'; Wrap = 0; BL = 1; BR = 1; BB = 1; BWt = 1;
3628      +		end; 
78                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

3629      +		if _n_ = %let si = %eval(&si. + 1); &si. then do;
3630      +			ID = 'DCB'; HA = 'Center'; VA = 'Top'; Wrap = 0; BL = 1; BR = 1; BB = 1; BWt = 1;
3631      +		end; 
3632      +
3633      +		if _n_ = %let si = %eval(&si. + 1); &si. then do;
3634      +			ID = 'I'; HA = 'Left'; VA = 'Center'; IntClr = 'FFFF99'; BT = 1; BL = 1; BR = 1; BB = 1; BWt = .;
3635      +		end; 
3636      +		if _n_ = %let si = %eval(&si. + 1); &si. then do;
3637      +			ID = 'TBT'; HA = 'Left'; Indent = 1; VA = 'Center'; BT = 1; BL = 1; BR = 1; BWt = .;
3638      +		end; 
3639      +		if _n_ = %let si = %eval(&si. + 1); &si. then do;
3640      +			ID = 'TBM'; HA = 'Left'; Indent = 1; VA = 'Center'; BL = 1; BR = 1; BWt = .;
3641      +		end; 
3642      +		if _n_ = %let si = %eval(&si. + 1); &si. then do;
3643      +			ID = 'TBL'; HA = 'Left'; Indent = 1; VA = 'Center'; BL = 1; BWt = .;
3644      +		end; 
3645      +		if _n_ = %let si = %eval(&si. + 1); &si. then do;
3646      +			ID = 'TBR'; HA = 'Left'; VA = 'Center'; BR = 1; BWt = .;
3647      +		end; 
3648      +		if _n_ = %let si = %eval(&si. + 1); &si. then do;
3649      +			ID = 'TBB'; HA = 'Left'; Indent = 1; VA = 'Center'; BL = 1; BR = 1; BB = 1; BWt = .;
3650      +		end; 
3651      +		if _n_ = %let si = %eval(&si. + 1); &si. then do;
3652      +			ID = 'D1_R2BR_BLRB'; NumFmt = '0.0'; FontSize = 8; FontColor = 'FF0000'; Bold = 1; 
3653      +			HA = 'Right'; Indent = 2; 
3654      +            BL = 1; BR = 1; BB = 1; BWt = 1;
3655      +		end;
3656      +		if _n_ = %let si = %eval(&si. + 1); &si. then do;
3657      +			ID = 'I10'; FontSize = 10; HA = 'Left'; VA = 'Top'; Wrap = 1; Indent = 1;
3658      +		end;
3659      +		if _n_ = %let si = %eval(&si. + 1); &si. then do;
3660      +			ID = 'B10O'; FontSize = 10; Bold = 1; HA = 'Center'; VA = 'Top'; IntClr = 'C0C0C0';
3661      +			BT = 1; BL = 1; BR = 1; BB = 1; BWt = 1; BLS = 'Dash';
3662      +		end;
3663      +		if _n_ = %let si = %eval(&si. + 1); &si. then do;
3664      +			ID = 'DG'; IntClr = '808080';
3665      +			BT = 1; BL = 1; BR = 1; BB = 1; BWt = 1;
3666      +		end;
3667      +		if _n_ = %let si = %eval(&si. + 1); &si. then do;
3668      +			ID = 'LG'; IntClr = 'C0C0C0';
3669      +			BT = 1; BL = 1; BR = 1; BB = 1; BWt = 1;
3670      +		end;
3671      +		if _n_ = %let si = %eval(&si. + 1); &si. then do;
3672      +			ID = 'R'; IntClr = 'FF0000';
3673      +			BT = 1; BL = 1; BR = 1; BB = 1; BWt = 1;
3674      +		end;
3675      +		if _n_ = %let si = %eval(&si. + 1); &si. then do;
3676      +			ID = 'P'; IntClr = 'FFCC99';
3677      +			BT = 1; BL = 1; BR = 1; BB = 1; BWt = 1;
3678      +		end;
3679      +		if _n_ = %let si = %eval(&si. + 1); &si. then do;
3680      +			ID = 'OR'; HA = 'Center'; VA = 'Center'; Rotate = 90;
3681      +			BT = 1; BL = 1; BR = 1; BB = 1; BWt = .;
3682      +		end;
3683      +		if _n_ = %let si = %eval(&si. + 1); &si. then do;
3684      +			ID = 'OW_BLR'; NumFmt = '&quot;&quot;'; FontColor = 'FFFFFF'; FontSize = 8;
3685      +			BL = 1; BR = 1; BWt = .;
3686      +		end;
79                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

3687      +		if _n_ = %let si = %eval(&si. + 1); &si. then do;
3688      +			ID = 'OW_BLRB'; NumFmt = '&quot;&quot;'; FontColor = 'FFFFFF'; FontSize = 8;
3689      +			BL = 1; BR = 1; BB = 1; BWt = .;
3690      +		end;
3691      +
3692      +		if _n_ = %let si = %eval(&si. + 1); &si. then do;
3693      +			ID = 'COR'; FontColor = 'FFFFFF'; FontSize = 8;	IntClr = '333399';
3694      +			HA = 'Center'; VA = 'Center'; Wrap = 1;	Rotate = 90;
3695      +			BT = 1; BL = 1; BR = 1; BB = 1; BWt = 1;
3696      +		end;
3697      +
3698      +		if ID = '' then delete;
3699      +	run;
3700      +
3701      +	data wb_aem_styles_data;
3702      +		set wb_aem_styles_data wb_aem_styles_o_data;
3703      +	run;
3704      +
3705      +	%xml_style_markup(wb_aem_styles_data,wb_aem_styles);
3706      +
3707      +	proc datasets library=work nolist nodetails; delete wb_aem_styles_:; quit;
3708      +
3709      +%mend out_aem_styles;
3710      +
3711      +
3712      +/************************/
3713      +/* begin running output */
3714      +/************************/
3715      +%macro out_med;
3716      +
3717      +	/* print current activity to the log */
3718      +	data _null_;
3719      +		title = "MAKING EXCEL XML OUTPUT FOR AE MEDDRA COMPARISON REPORT";
3720      +		titlen = length(title);
3721      +		length separator $100;
3722      +		do i = 1 to titlen;
3723      +			separator =  trim(left(separator))||"*";
3724      +		end;
3725      +
3726      +		put separator;
3727      +		put;
3728      +		put title;
3729      +		put;
3730      +		put separator;
3731      +	run;
3732      +
3733      +	/* create analysis run date macro variable */
3734      +	data _null_;
3735      +		call symputx('rundate',compbl(put(date(),e8601da.)||' '||put(time(),timeampm11.)),'g');
3736      +	run;
3737      +
3738      +	/* create grouping & subsetting output */
3739      +	%group_subset_pp;
3740      +	%group_subset_xml_out;
3741      +
3742      +	%wb;
3743      +	%styles(size=8);
3744      +	%out_aem_styles;
80                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

3745      +
3746      +	data wb_styles;
3747      +		set wb_styles 
3748      +            wb_aem_styles end=eof;
3749      +		if string = '</Styles>' then delete;
3750      +		keep string;
3751      +		output;
3752      +		if eof then do; string = '</Styles>'; output; end;
3753      +	run;
3754      +
3755      +	%out_cover;
3756      +	%out_err;
3757      +
3758      +	%out_meddra_cmp;
3759      +	%out_meddra_cmp_data;
3760      +	%wbinfo;
3761      +
3762      +
3763      +	data wb_names_start;
3764      +		length string $&strlen.;
3765      +		string = '<Names>';
3766      +	run;
3767      +
3768      +	data wb_names_end;
3769      +		length string $&strlen.;
3770      +		string = '</Names>';
3771      +	run;
3772      +
3773      +	/* collect all named ranges */
3774      +	data wb_names;
3775      +		set wb_names_start 
3776      +	        wb_meddra_cmp_output_names
3777      +	        wb_meddra_cmp_data_names
3778      +			wb_wbinfo_names
3779      +	        wb_names_end;
3780      +	run;
3781      +
3782      +
3783      +	data wb;
3784      +		set wb_start
3785      +		    wb_styles 
3786      +			wb_names
3787      +			ws_cover
3788      +			ws_meddra_cmp_output
3789      +			ws_err 
3790      +			%if %sysfunc(exist(ws_sl_gs)) %then ws_sl_gs;
3791      +			ws_meddra_cmp_data
3792      +			ws_wbinfo
3793      +			wb_end;
3794      +	run;
3795      +
3796      +	/*proc datasets library=work nolist nodetails; delete wb_:; quit;*/
3797      +
3798      +	data _null_;
3799      +		set wb;
3800      +		file "&aemedout." ls=32767;
3801      +		put string;
3802      +	run;
81                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

3803      +
3804      +%mend out_med;
NOTE: %INCLUDE (level 1) ending.
SYMBOLGEN:  Macro variable UTILPATH resolves to /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp6
3805       %include "&utilpath./data_checks.sas";
NOTE: %INCLUDE (level 1) file /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp6/data_checks.sas is file 
      /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp6/data_checks.sas.
3806      +%let miss = MISSING;
3807      +
3808      +/****************************************************/
3809      +/* checks whether variable VAR exists in dataset DS */
3810      +/* and sets macro variable DS_VAR as follows        */
3811      +/* DS_VAR = 1  if VAR exists                        */
3812      +/* DS_VAR = 0  if VAR does not exist                */
3813      +/* also inserts a record into RPT_CHK_VAR           */
3814      +/*                                                  */
3815      +/* sets DS_VAR_TYPE to variable type                */
3816      +/* and DS_VAR_LEN to variable length                */
3817      +/****************************************************/
3818      +%macro chk_var(lib=work,ds=,var=);
3819      +
3820      +	%global &ds._&var.;
3821      +
3822      +	data chk_var_&ds._&var.;
3823      +		length chk $12 ds $32 var $36 type $1 len 8. condition $200 ind 8.;
3824      +		chk = 'VAR';
3825      +		ds = upcase("&ds.");
3826      +		var = upcase("&var.");
3827      +		condition = 'EXISTS';
3828      +
3829      +		dsid = open("&lib..&ds.");
3830      +		if dsid then do;
3831      +			ind = ifn(varnum(dsid,upcase("&var."))>0,1,0);
3832      +			if ind then do;
3833      +				type = vartype(dsid,varnum(dsid,upcase("&var.")));
3834      +				len = varlen(dsid,varnum(dsid,upcase("&var.")));
3835      +			end;
3836      +			else do;
3837      +				type = '';
3838      +				len = -1;
3839      +			end;
3840      +			rc = close(dsid);
3841      +			drop rc;
3842      +		end;
3843      +		else do; 
3844      +			/*ind = -1;*/
3845      +			ind = 0;
3846      +			type = ''; 
3847      +			len = -1;
3848      +		end;
3849      +
3850      +		drop dsid;
3851      +
3852      +		call symputx("&ds._&var.",ind,'g');	
3853      +		call symputx("&ds._&var._type",type,'g');
3854      +		call symputx("&ds._&var._len",len,'g');
3855      +	run;
3856      +
82                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

3857      +	data rpt_chk_var;
3858      +		merge %if %sysfunc(exist(rpt_chk_var)) %then rpt_chk_var; chk_var_&ds._&var.;
3859      +		by ds var;
3860      +	run;
3861      +
3862      +	proc datasets library=work nolist nodetails; delete chk_var_&ds._&var.; quit;
3863      +
3864      +%mend chk_var;
3865      +
3866      +
3867      +/*****************************************************/
3868      +/* check whether DM has any subjects                 */
3869      +/* sets the macro variable DM_SUBJ_GT0 as follows    */
3870      +/* DM_SUBJ_GT0 = 1 if there are more than 0 subjects */
3871      +/* DM_SUBJ_GT0 = 0 if there are 0 subjects           */
3872      +/*****************************************************/
3873      +%macro chk_dm_subj_gt0;
3874      +
3875      +	data _null_;
3876      +		dsid = open('dm');
3877      +		if dsid then do;
3878      +			nobs = attrn(dsid,'nobs');
3879      +			nvars = attrn(dsid,'nvars');
3880      +		end;
3881      +		call symputx('dm_subj_gt0',ifc(nobs>0 and nvars>0,'1','0'),'g');
3882      +		rc = close(dsid);
3883      +	run;
3884      +
3885      +%mend chk_dm_subj_gt0;
3886      +
3887      +
3888      +/****************************************************************************/
3889      +/* checks whether dataset DS has values VAL1-VAL15 in variable VAR          */
3890      +/* and sets macro variable DS_VAR_VAL as follows:                           */
3891      +/* DS_VAR_VAL = 1 if VAL is present                                         */
3892      +/* DS_VAR_VAL = 0 if VAL is not present                                     */
3893      +/* DS_VAR_VAL = -1 if DS does not exist or VAR does not exist               */
3894      +/*                                                                          */
3895      +/* the macro will also insert a record into RPT_CHK_VAL for each value      */
3896      +/* with the appropriate indicator depending upon the presence or absence of */
3897      +/* the value in variable VAR                                                */
3898      +/*                                                                          */
3899      +/* argument CS makes the macro use case sensitive variable values           */
3900      +/* argument COUNT makes the macro find counts instead of indicators         */
3901      +/*                                                                          */
3902      +/* tbd: macro variable DS_VAR_MISSING, 	                                    */
3903      +/*      macro will fail if DS_VAR_VAL is too long                           */
3904      +/****************************************************************************/
3905      +%macro chk_val(lib,ds,var,
3906      +               val1, val2, val3, val4, val5,
3907      +               val6, val7, val8, val9, val10, 
3908      +               val11,val12,val13,val14,val15,
3909      +               val16,val17,val18,val19,val20,
3910      +               val21,val22,val23,val24,val25,
3911      +               cs=F,count=F);
3912      +
3913      +	%if not %symexist(miss) %then %let miss = MISSING;
3914      +
83                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

3915      +	%let cs = %upcase(&cs.); %let count = %upcase(&count.);
3916      +
3917      +	/* find the number of values to look up */
3918      +	%let i = 1;
3919      +	%do %while (%symexist(val&i.));
3920      +		%if (&&&val&i. = ) %then %goto max_arg;
3921      +		%let i = %eval(&i. + 1);
3922      +	%end;
3923      +	%max_arg: %let max_arg = %eval(&i. - 1);
3924      +
3925      +	%if %symexist(vals) %then %symdel vals;
3926      +
3927      +	/* get the data type and length of VAR */
3928      +	%let dsid = %sysfunc(open(&lib..&ds.));
3929      +	%if &dsid. > 0 %then %do;
3930      +		%let varnum = %sysfunc(varnum(&dsid.,&var.));
3931      +		%if &varnum. > 0 %then %do;
3932      +			%let type = %sysfunc(vartype(&dsid.,&varnum.));
3933      +			%let len = %sysfunc(varlen(&dsid.,&varnum.));
3934      +		%end;
3935      +		%let rc = %sysfunc(close(&dsid.));
3936      +	%end;
3937      +
3938      +	/* if the macro was able to determine the length and type of the variable */
3939      +	/* then set a success code. otherwise, set a failure code and go to the end */
3940      +	%if %symexist(type) and %symexist(len) %then %let success = 1;
3941      +	%else %do; 
3942      +		%let success = 0;
3943      +		%let type = C;
3944      +		%let len = 200;
3945      + 	%end;
3946      +
3947      + 	/* look for missing keyword and replace with missing */
3948      +	%do i = 1 %to &max_arg.;
3949      +		%if %upcase(&&&val&i.) = &miss. %then %let val&i. = %sysfunc(ifc(&type.=C,,.));
3950      +	%end;
3951      +
3952      +	/* create the list of values to look up */
3953      +	data _null_;
3954      +		vals = %do i = 1 %to &max_arg.; 
3955      +                ifc("&type." = 'C',"%str(%')&&&val&i.%str(%')","&&&val&i.")||
3956      +                ifc("&i." ne "&max_arg.",',','')|| 
3957      +               %end;
3958      +               '';
3959      +		if "&cs." ne 'T' then vals=upcase(vals);
3960      +
3961      +		call symputx('vals',vals);
3962      +	run;
3963      +
3964      +	/* create a dummy dataset for joining */
3965      +	data dual; call missing(dummy); run;
3966      +
3967      +	/* a list of all values sought */
3968      +	/* counts of those appearing in the dataset will be joined to these */
3969      +	/* those not appearing in the dataset will get an appropriate indicator */
3970      +	data chk_val_&ds._&var._val;
3971      +		length &var. %sysfunc(ifc(&type.=C,$,))&len.;
3972      +		%do i = 1 %to &max_arg.;
84                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

3973      +			&var. = ifc("&cs." ne 'T',upcase("&&&val&i."),"&&&val&i.");	output;
3974      +		%end;
3975      +	run;
3976      +
3977      +	proc sql noprint;
3978      +		create table chk_val_&ds._&var. as
3979      +		select "VAL" length=12 as chk,
3980      +               upcase("&ds.") length=32 as ds,
3981      +			   upcase("&var.") length=36 as var,
3982      +               %sysfunc(ifc(&type.=C,a.&var.,put(a.&var.,8.7 -L))) length=200 as val, 
3983      +			   %if &count. ne T	%then %do;
3984      +				   "PRESENT" length=200 as condition,
3985      +	               (case 
3986      +                       when count > 0 then 1
3987      +					   when count = -1 then -1
3988      +                       else 0 
3989      +                    end) as ind
3990      +			   %end;
3991      +			   %else %do;
3992      +				   "COUNT" length=200 as condition,
3993      +	               (case when count is not missing then count else 0 end) as ind
3994      +			   %end;
3995      +		from chk_val_&ds._&var._val	a
3996      +
3997      +		/* if the variable exists, find the counts of the requested values */
3998      +		%if &success. %then %do;
3999      +			left join (select &var., count(1) as count
4000      +					   from &lib..&ds.
4001      +					   where %sysfunc(ifc(&type.=C and &cs. ne T,upcase(&var.),&var.)) in (&vals.)
4002      +					   group by &var.) b
4003      +	        on a.&var. = b.&var.
4004      +		%end;
4005      +
4006      +		/* else set all indicators to -1 */
4007      +		%else %do;
4008      +			left join (select -1 as count
4009      +			           from dual) b
4010      +			on 1=1
4011      +		%end;
4012      +		;
4013      +	quit;
4014      +
4015      +	/* set missing values to 'MISSING' */
4016      +	data chk_val_&ds._&var.;
4017      +		set chk_val_&ds._&var.;
4018      +		if "&type." = 'C' and val = ''
4019      +		or "&type." = 'N' and val in ('','.')
4020      +		then val = 'MISSING';
4021      +	run;
4022      +
4023      +	proc sort data=chk_val_&ds._&var.; by ds var val condition; run;
4024      +
4025      +	data rpt_chk_val;
4026      +		merge %if %sysfunc(exist(rpt_chk_val)) %then rpt_chk_val; chk_val_&ds._&var.(in=a);
4027      +		by ds var val condition;
4028      +		if a then call symputx(compress(ds)||'_'||compress(var)||'_'||
4029      +                               compress(translate(trim(val),'_',' '),'_','ak')||
4030      +					           ifc("&count."='T','_cnt',''),ind,'g');
85                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

4031      +	run;
4032      +
4033      +	proc datasets library=work nolist nodetails; delete chk_val_&ds._&var.: dual; quit;
4034      +
4035      +	/* if dataset DS or variable VAR do not exist, then print an error */
4036      +	%if not &success. %then %do;
4037      +		%put ERROR: Dataset &ds. or variable &var. does not exist;
4038      +	%end;
4039      +
4040      +%mend chk_val;
4041      +
4042      +
4043      +/****************************************************************/
4044      +/* determine which values of VAR1 in DS1 are not in VAR2 of DS2 */
4045      +/* and vice versa                                               */
4046      +/****************************************************************/
4047      +%macro chk_cmp(lib=,ds1=,var1=,ds2=,var2=);
4048      +
4049      +	/* put ds1 and ds2 in alphabetical order */
4050      +	/*data _null_;
4051      +		if upcase("&ds1.") <= upcase("&ds2.") then do;
4052      +			ds1 = upcase("&ds1."); ds2 = upcase("&ds2.");
4053      +			var1 = upcase("&var1."); var2 = upcase("&var2.");
4054      +		end;
4055      +		else do;
4056      +			ds1 = upcase("&ds2."); ds2 = upcase("&ds1.");
4057      +			var1 = upcase("&var2."); var2 = upcase("&var1.");
4058      +		end;
4059      +		call symputx('ds1',ds1); call symputx('ds2',ds2);
4060      +		call symputx('var1',var1); call symputx('var2',var2);
4061      +	run; */
4062      +
4063      +	/* determine data types */
4064      +	data _null_;
4065      +		length type1 $1 type2 $1;
4066      +
4067      +		dsid = open("&lib..&ds1.");
4068      +		if dsid then do;
4069      +			type1 = vartype(dsid,varnum(dsid,"&var1."));
4070      +			rc = close(dsid);
4071      +		end;
4072      +
4073      +		dsid = open("&lib..&ds2.");
4074      +		if dsid then do;
4075      +			type2 = vartype(dsid,varnum(dsid,"&var2."));
4076      +			rc = close(dsid);
4077      +		end;
4078      +
4079      +		if type1 ne '' and type2 ne '' and type1 = type2 then call symputx('success','1');
4080      +		else call symputx('success','0');
4081      +	run;
4082      +
4083      +	%if not &success. %then %goto exit;
4084      +
4085      +	proc sql noprint;
4086      +		create table chk_cmp_ds1 as
4087      +		select distinct &var1., 1 as ds1
4088      +		from &lib..&ds1.
86                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

4089      +		order by &var1.;
4090      +
4091      +		create table chk_cmp_ds2 as
4092      +		select distinct &var2., 1 as ds2
4093      +		from &lib..&ds2.
4094      +		order by &var2.;
4095      +
4096      +		create table rpt_cmp_&ds1._&ds2. as
4097      +		select "&ds1." length=32 as ds1,
4098      +		       "&ds2." length=32 as ds2,
4099      +               (case when ds1 then "&ds1." else "&ds2." end) length=32 as in, 
4100      +               (case when ds1 then a.&var1. else b.&var2. end) as var
4101      +		from chk_cmp_ds1 a
4102      +		full join chk_cmp_ds2 b
4103      +		on a.&var1. = b.&var2.
4104      +		where not (ds1 and ds2);
4105      +	quit;
4106      +
4107      +	proc datasets library=work nolist nodetails; delete chk_cmp_ds1 chk_cmp_ds2; quit;
4108      +
4109      +	%exit: 
4110      +	%if not &success. %then %do;
4111      +		%put ERROR: One or more of dataset &ds1. or &ds2. or variable &var1. or &var2. does not exist;
4112      +		%put ERROR: or &var1. and &var2. are not of the same type;
4113      +	%end;
4114      +
4115      +%mend chk_cmp;
NOTE: %INCLUDE (level 1) ending.
SYMBOLGEN:  Macro variable UTILPATH resolves to /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp6
4116       %include "&utilpath./err_output.sas";
NOTE: %INCLUDE (level 1) file /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp6/err_output.sas is file 
      /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp6/err_output.sas.
4117      +/****************************************************************************/
4118      +/*         PROGRAM NAME: Generic Panel Error Output                         */
4119      +/*                                                                          */
4120      +/*          DESCRIPTION: Create an Excel XML workbook with the settings     */
4121      +/*                        the user chose for a panel                        */
4122      +/*                                                                          */
4123      +/*               AUTHOR: David Kretch (david.kretch@us.ibm.com)	            */
4124      +/*                                                                          */
4125      +/*                 DATE: March 28, 2011                                     */
4126      +/*                                                                          */
4127      +/*  EXTERNAL FILES USED: xml_output.sas -- XML formatting macros            */
4128      +/*                       sl_gs_output.sas -- Script Launcher settings output*/
4129      +/*                                                                          */
4130      +/*  PARAMETERS REQUIRED: utilpath -- location of the external SAS programs  */
4131      +/*                       err_file -- filename and path of the output        */
4132      +/*                                                                          */
4133      +/*            MADE WITH: SAS 9.2                                            */
4134      +/*                                                                          */
4135      +/*                NOTES:                                                    */
4136      +/*                                                                          */
4137      +/*            REVISIONS: ---                                                */
4138      +/*                                                                          */
4139      +/****************************************************************************/
4140      +
4141      +/* REVISION HISTORY */
4142      +/*
87                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

4143      +2011-05-08  DK  Added support for errors in case there are no subjects in DM
4144      +
4145      +2011-06-08  DK  Added an argument to turn on or off setting the error status
4146      +                Also previously added the errsummaryrun macro to indicate
4147      +                that it has already run
4148      +*/
4149      +
4150      +
4151      +*%let ndabla = 12345;
4152      +*%let studyid = 123;	
4153      +
4154      +
4155      +*%let utilpath = C:\Documents and Settings\MATTOK\Desktop\SL_SAS_Progs\ZZ_Utilities;
4156      +
4157      +
4158      +*%include "&utilpath.\xml_output.sas";
4159      +
4160      +%macro error_summary(err_file=,err_nosubj=0,err_missvar=0,err_seterr=1,err_desc=);
4161      +
4162      +	%let wbtitle = &panel_title. Error Summary;	
4163      +
4164      +	%if &err_nosubj. %then %do;
4165      +		/* get the required variable check dataset ready for output */
4166      +		%put PANEL NO SUBJECTS ERROR PREPROCESSING;
4167      +
4168      +		proc sql noprint;
4169      +			select count(1) into: sl_subset_count
4170      +			from sl_subset;
4171      +		quit;
4172      +
4173      +		%if &sl_subset_count. > 0 %then %do;
4174      +
4175      +			proc sql noprint;
4176      +				select lowcase(outer_operator) into: operator
4177      +		        from sl_subset;
4178      +
4179      +				select distinct name into: sl_subset_desc separated by " &operator. "
4180      +				from sl_subset;
4181      +			quit;
4182      +
4183      +		%end;
4184      +		%else %let sl_subset_desc = ;
4185      +	%end;
4186      +
4187      +	%if &err_missvar. %then %do;
4188      +		/* get the required variable check dataset ready for output */
4189      +		%put PANEL MISSING VARIABLE ERROR PREPROCESSING;
4190      +
4191      +		data err_missing_var;
4192      +			set rpt_chk_var_req;
4193      +			where ind ne 1;
4194      +			keep ds var;
4195      +		run;
4196      +	%end;
4197      +
4198      +	/* create the output */
4199      +	%put SCRIPT LAUNCHER ERROR SUMMARY OUTPUT;
4200      +
88                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

4201      +	%let ds = err;
4202      +
4203      +	%wb;
4204      +	%styles;
4205      +
4206      +	/* set up worksheet start and end datasets */
4207      +	data ws_&ds._start;
4208      +		length string $&strlen.;
4209      +		string = '<Worksheet ss:Name="Error Summary">'; output;
4210      +	run;
4211      +
4212      +	data ws_&ds._end;
4213      +		length string $&strlen.;
4214      +		string = '</Worksheet>'; output;
4215      +	run;
4216      +
4217      +	data ws_&ds._table_start;
4218      +		length string $&strlen.;
4219      +		string = '<Table>'; output;
4220      +		/* define column widths */
4221      +		string = '<Column ss:Width="150"/>'; output;
4222      +		string = '<Column ss:Width="250"/>'; output;
4223      +		string = '<Column/>'; output;
4224      +	run;
4225      +
4226      +	data ws_&ds._table_end;
4227      +		length string $&strlen.;
4228      +		string = '</Table>'; output;
4229      +	run;
4230      +
4231      +	/* make the top of the worksheet with the title and run info */
4232      +	data ws_&ds._header_data;
4233      +		%xml_tag_def;
4234      +		%xml_init;
4235      +
4236      +		Type = 'String';
4237      +
4238      +		%let row = 0;
4239      +
4240      +		Row = %let row = %eval(&row. + 1); &row.;
4241      +		Data = ''; output;
4242      +		
4243      +		Row = %let row = %eval(&row. + 1); &row.;
4244      +		Data = "&panel_title. Error Summary"; StyleID = 'Header'; output;
4245      +
4246      +		Row = %let row = %eval(&row. + 1); &row.;
4247      +		Data = ''; StyleID = ''; output;
4248      +
4249      +		StyleID = 'Default10';
4250      +
4251      +		Row = %let row = %eval(&row. + 1); &row.;
4252      +		Data = "NDA/BLA: &ndabla."; output;
4253      +		Row = %let row = %eval(&row. + 1); &row.;
4254      +		Data = "Study: &studyid."; output;
4255      +		Row = %let row = %eval(&row. + 1); &row.;
4256      +		Data = 'Analysis run date: '||put(date(),e8601da.)||' '||put(time(),timeampm11.); output;
4257      +		Row = %let row = %eval(&row. + 1); &row.;
4258      +
89                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

4259      +		Row = %let row = %eval(&row. + 1); &row.;
4260      +		Data = ''; StyleID = ''; output;
4261      +
4262      +		/* output the panel description if there is one */
4263      +		%if %length(&panel_desc.) > 0 %then %do;
4264      +
4265      +			StyleID = 'Default10Wrap';
4266      +
4267      +			Row = %let row = %eval(&row. + 1); &row.;
4268      +			Data = "&panel_desc.";
4269      +			MergeAcross = 6;
4270      +			Height = ceil(length(trim("&panel_desc."))/150)*12.75;
4271      +			output;	
4272      +
4273      +			Row = %let row = %eval(&row. + 1); &row.;
4274      +			Data = ''; StyleID = ''; output;
4275      +
4276      +		%end;
4277      +
4278      +		/* output the error description */
4279      +		StyleID = 'Default10Wrap';
4280      +
4281      +		Row = %let row = %eval(&row. + 1); &row.;
4282      +		MergeAcross = 6;
4283      +		Height = ceil(length(trim(Data))/130)*12.75;
4284      +
4285      +		/* custom error message */
4286      +		%if %length(&err_desc.) > 0 %then %do;
4287      +			Row = %let row = %eval(&row. + 1); &row.;
4288      +			Data = "&err_desc."; output;
4289      +
4290      +			Row = %let row = %eval(&row. + 1); &row.;
4291      +			Data = ''; StyleID = ''; Height = 12.75; output;
4292      +		%end;
4293      +
4294      +		/* no subjects in DM error */
4295      +		%if &err_nosubj. %then %do;
4296      +			Row = %let row = %eval(&row. + 1); &row.;
4297      +			Data = 'There are no subjects in the demographics domain (DM) dataset'||
4298      +                   %if %length(&sl_subset_desc.) > 0 %then %do; " after subsetting by &sl_subset_desc"|| %end;
4299      +                   '.';  output;
4300      +
4301      +			Row = %let row = %eval(&row. + 1); &row.;
4302      +			Data = ''; StyleID = ''; Height = 12.75; output;
4303      +		%end;
4304      +
4305      +		/* missing variable error */
4306      +		%if &err_missvar. %then %do;
4307      +			Row = %let row = %eval(&row. + 1); &row.;
4308      +			Data = 'Some variables that are required by this panel are missing. These variables are shown '||
4309      +                   'in the following table.';  output;
4310      +		%end;
4311      +
4312      +		Row = %let row = %eval(&row. + 1); &row.;
4313      +		Data = ''; StyleID = ''; Height = 12.75; output;
4314      +	run;
4315      +
4316      +	%markup(ws_&ds._header_data,ws_&ds._header);
90                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

4317      +
4318      +	/* missing variable information data table */
4319      +	%if &err_missvar. %then %do;
4320      +
4321      +		/* make the missing variable table column headers */
4322      +		data ws_&ds._missing_cols_data;
4323      +			%xml_tag_def;
4324      +			%xml_init;
4325      +
4326      +			Type = 'String';
4327      +			StyleID = 'ColumnOutline';
4328      +
4329      +			Row = 1;
4330      +			Height = 30;
4331      +			Data = 'Domain/Dataset'; output;
4332      +			Data = 'Variable'; output;
4333      +		run;
4334      +
4335      +		%markup(ws_&ds._missing_cols_data,ws_&ds._missing_cols);
4336      +
4337      +		%annotate(err_missing_var,ws_&ds._missing_data);
4338      +
4339      +		data ws_&ds._missing_data;
4340      +			set ws_&ds._missing_data;
4341      +			StyleID = 'Table';
4342      +		run;
4343      +
4344      +		%markup(ws_&ds._missing_data,ws_&ds._missing);
4345      +
4346      +	%end;
4347      +
4348      +	data ws_&ds._settings;
4349      +		length string $&strlen.;
4350      +		string = '<WorksheetOptions xmlns="urn:schemas-microsoft-com:office:excel">'; output;
4351      +		string = '<PageSetup>'; output;
4352      +		string = '<Layout x:Orientation="Landscape"/>'; output;
4353      +		string = '<Header x:Data="&amp;L'||"panel_title."||
4354      +                 '&amp;R'||"NDA/BLA &ndabla.&#10;Study &studyid."||'"/>'; output;
4355      +		string = '<Footer x:Data="Page &amp;P of &amp;N"/>'; output;
4356      +		string = '</PageSetup>'; output;
4357      +		string = '<FitToPage/>'; output;
4358      +		string = '<Print>'; output;
4359      +		string = '<FitHeight>100</FitHeight>'; output;
4360      +		string = '<ValidPrinterInfo/>'; output;
4361      +		string = '<Scale>78</Scale>'; output;
4362      +		string = '<HorizontalResolution>600</HorizontalResolution>'; output;
4363      +		string = '<VerticalResolution>0</VerticalResolution>'; output;
4364      +		string = '</Print>'; output;
4365      +		string = '</WorksheetOptions>'; output;
4366      +	run;
4367      +
4368      +	data wb;
4369      +		set wb_start
4370      +		    wb_styles
4371      +			ws_&ds._start
4372      +		    ws_&ds._table_start	
4373      +			ws_&ds._header
4374      +			%if &err_missvar. %then %do;
91                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

4375      +				ws_&ds._missing_cols
4376      +				ws_&ds._missing
4377      +			%end;
4378      +		    ws_&ds._table_end	
4379      +			ws_&ds._settings
4380      +			ws_&ds._end
4381      +			wb_end
4382      +			;
4383      +	run;
4384      +
4385      +	data _null_;
4386      +		set wb;
4387      +		file "&err_file." ls=32767;
4388      +		put string;
4389      +	run;
4390      +
4391      +	/*proc datasets library=work nolist nodetails; delete ws_&ds.:; quit;*/
4392      +
4393      +	/* set the error status so Script Launcher can determine there was an error */
4394      +	%if &err_seterr. = 1 %then %do;
4395      +		%let errstatus = 5;
4396      +	%end;
4397      +
4398      +%mend error_summary;
4399      +/******PACMAN****** DO NOT EDIT BELOW THIS LINE ******PACMAN******/
4400      +/*<?xml version="1.0" encoding="UTF-8"?>*/
4401      +/*<process sessionid="554698f8:153172056f6:3f38" sddversion="3.5" cdvoption="N" parseroption="B">*/
4402      +/* <parameters>*/
4403      +/*  <parameter canlinktobasepath="N" dependsaction="ENABLE" id="ERR_FILE" cdvenable="Y" cdvrequired="Y" advanced="N" enable="Y" obfuscate="N" maxlength="256" tabname="Parameters"
4403     !+resolution="INPUT" protect="N" label="Text field" required="Y"*/
4404      +/*   type="TEXT" order="1">*/
4405      +/*  </parameter>*/
4406      +/*  <parameter canlinktobasepath="N" dependsaction="ENABLE" id="ERR_NOSUBJ" cdvenable="Y" cdvrequired="Y" advanced="N" enable="Y" obfuscate="N" maxlength="256" tabname="Parameters"
4406     !+resolution="INPUT" protect="N" label="Text field" required="Y"*/
4407      +/*   type="TEXT" order="2">*/
4408      +/*  </parameter>*/
4409      +/*  <parameter canlinktobasepath="N" dependsaction="ENABLE" id="ERR_MISSVAR" cdvenable="Y" cdvrequired="Y" advanced="N" enable="Y" obfuscate="N" maxlength="256" tabname="Parameters"
4409     !+resolution="INPUT" protect="N" label="Text field" required="Y"*/
4410      +/*   type="TEXT" order="3">*/
4411      +/*  </parameter>*/
4412      +/*  <parameter canlinktobasepath="N" dependsaction="ENABLE" id="ERR_SETERR" cdvenable="Y" cdvrequired="Y" advanced="N" enable="Y" obfuscate="N" maxlength="256" tabname="Parameters"
4412     !+resolution="INPUT" protect="N" label="Text field" required="Y"*/
4413      +/*   type="TEXT" order="4">*/
4414      +/*  </parameter>*/
4415      +/*  <parameter canlinktobasepath="N" dependsaction="ENABLE" id="ERR_DESC" cdvenable="Y" cdvrequired="Y" advanced="N" enable="Y" obfuscate="N" maxlength="256" tabname="Parameters"
4415     !+resolution="INPUT" protect="N" label="Text field" required="Y"*/
4416      +/*   type="TEXT" order="5">*/
4417      +/*  </parameter>*/
4418      +/*  <parameter id="WBTITLE" resolution="INTERNAL" type="TEXT" order="6">*/
4419      +/*  </parameter>*/
4420      +/*  <parameter canlinktobasepath="N" dependsaction="ENABLE" id="PANEL_TITLE" cdvenable="Y" cdvrequired="Y" advanced="N" enable="Y" obfuscate="N" maxlength="256" tabname="Parameters"
4420     !+resolution="INPUT" protect="N" label="Text field" required="Y"*/
4421      +/*   type="TEXT" order="7">*/
4422      +/*  </parameter>*/
4423      +/*  <parameter canlinktobasepath="N" dependsaction="ENABLE" id="SL_SUBSET_COUNT" cdvenable="Y" cdvrequired="Y" advanced="N" enable="Y" obfuscate="N" maxlength="256" tabname="Parameters"
4423     !+resolution="INPUT" protect="N" label="Text field" required="Y"*/
4424      +/*   type="TEXT" order="8">*/
4425      +/*  </parameter>*/
92                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

4426      +/*  <parameter canlinktobasepath="N" dependsaction="ENABLE" id="OPERATOR" cdvenable="Y" cdvrequired="Y" advanced="N" enable="Y" obfuscate="N" maxlength="256" tabname="Parameters"
4426     !+resolution="INPUT" protect="N" label="Text field" required="Y"*/
4427      +/*   type="TEXT" order="9">*/
4428      +/*  </parameter>*/
4429      +/*  <parameter id="DS" resolution="INTERNAL" type="TEXT" order="10">*/
4430      +/*  </parameter>*/
4431      +/*  <parameter canlinktobasepath="N" dependsaction="ENABLE" id="STRLEN" cdvenable="Y" cdvrequired="Y" advanced="N" enable="Y" obfuscate="N" maxlength="256" tabname="Parameters"
4431     !+resolution="INPUT" protect="N" label="Text field" required="Y" type="TEXT"*/
4432      +/*   order="11">*/
4433      +/*  </parameter>*/
4434      +/*  <parameter id="ROW" resolution="INTERNAL" type="TEXT" order="12">*/
4435      +/*  </parameter>*/
4436      +/*  <parameter canlinktobasepath="N" dependsaction="ENABLE" id="NDABLA" cdvenable="Y" cdvrequired="Y" advanced="N" enable="Y" obfuscate="N" maxlength="256" tabname="Parameters"
4436     !+resolution="INPUT" protect="N" label="Text field" required="Y" type="TEXT"*/
4437      +/*   order="13">*/
4438      +/*  </parameter>*/
4439      +/*  <parameter canlinktobasepath="N" dependsaction="ENABLE" id="STUDYID" cdvenable="Y" cdvrequired="Y" advanced="N" enable="Y" obfuscate="N" maxlength="256" tabname="Parameters"
4439     !+resolution="INPUT" protect="N" label="Text field" required="Y" type="TEXT"*/
4440      +/*   order="14">*/
4441      +/*  </parameter>*/
4442      +/*  <parameter canlinktobasepath="N" dependsaction="ENABLE" id="PANEL_DESC" cdvenable="Y" cdvrequired="Y" advanced="N" enable="Y" obfuscate="N" maxlength="256" tabname="Parameters"
4442     !+resolution="INPUT" protect="N" label="Text field" required="Y"*/
4443      +/*   type="TEXT" order="15">*/
4444      +/*  </parameter>*/
4445      +/*  <parameter canlinktobasepath="N" dependsaction="ENABLE" id="SL_SUBSET_DESC" cdvenable="Y" cdvrequired="Y" advanced="N" enable="Y" obfuscate="N" maxlength="256" tabname="Parameters"
4445     !+resolution="INPUT" protect="N" label="Text field" required="Y"*/
4446      +/*   type="TEXT" order="16">*/
4447      +/*  </parameter>*/
4448      +/*  <parameter id="ERRSTATUS" resolution="INTERNAL" type="TEXT" order="17">*/
4449      +/*  </parameter>*/
4450      +/* </parameters>*/
4451      +/*</process>*/
4452      +/**/
4453      +/******PACMAN******************************************PACMAN******/
NOTE: %INCLUDE (level 1) ending.
SYMBOLGEN:  Macro variable UTILPATH resolves to /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp6
4454       %include "&utilpath./sl_gs_output.sas";
NOTE: %INCLUDE (level 1) file /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp6/sl_gs_output.sas is file 
      /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp6/sl_gs_output.sas.
4455      +/****************************************************************************/
4456      +/*         PROGRAM NAME: Grouping and Subsetting Output                     */
4457      +/*                                                                          */
4458      +/*          DESCRIPTION: Create output for grouping and subsetting          */
4459      +/*                       Contains three macros:                             */
4460      +/*                          group_subset_pp -- Preprocessing to create      */
4461      +/*                                             output datasets              */
4462      +/*                          group_subset_xls_out -- XLS template output     */
4463      +/*                          group_subset_xml_out -- Excel XML output        */
4464      +/*                                                                          */
4465      +/*               AUTHOR: David Kretch (david.kretch@us.ibm.com)	            */
4466      +/*                                                                          */
4467      +/*                 DATE: March 4, 2011                                      */
4468      +/*                                                                          */
4469      +/*  EXTERNAL FILES USED: ae_xml_output.sas -- XML formatting macros         */
4470      +/*                       XLS template if using xls_out macro                */
4471      +/*                                                                          */
4472      +/*  PARAMETERS REQUIRED: (group_subset_xls_out) GS_FILE -- template file    */
4473      +/*                                                         and path         */
93                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

4474      +/*                                                                          */
4475      +/*    DATASETS REQUIRED: SL_GROUP                                           */
4476      +/*                       SL_SUBSET                                          */
4477      +/*                       SL_DATASETS                                        */
4478      +/*                                                                          */
4479      +/*            MADE WITH: SAS 9.2                                            */
4480      +/*                                                                          */
4481      +/*                NOTES:                                                    */
4482      +/*                                                                          */
4483      +/*            REVISIONS: ---                                                */
4484      +/*                                                                          */
4485      +/****************************************************************************/
4486      +
4487      +/*****************************************/
4488      +/* GROUPING AND SUBSETTING PREPROCESSING */
4489      +/*****************************************/
4490      +%macro group_subset_pp;
4491      +
4492      +	%put SL GROUPING/SUBSETTING PREPROCESSING;
4493      +
4494      +	data _null_;
4495      +		dsid = open('sl_group');
4496      +		if dsid then nobs = attrn(dsid,'nobs');
4497      +		else nobs = 0;
4498      +		call symputx('sl_group_nobs',put(nobs,8. -l),'g');
4499      +		rc = close(dsid);
4500      +
4501      +		dsid = open('sl_subset');
4502      +		if dsid then nobs = attrn(dsid,'nobs');
4503      +		else nobs = 0;
4504      +		call symputx('sl_subset_nobs',put(nobs,8. -l),'g');
4505      +		rc = close(dsid);
4506      +	run;
4507      +
4508      +	/****************************************/
4509      +	/* GROUPING AND SUBSETTING DESCRIPTIONS */
4510      +	/****************************************/
4511      +
4512      +	/* grouping */
4513      +	%global sl_group_desc;
4514      +	
4515      +	/* if grouping was used, make a description */
4516      +	%if &sl_group_nobs. %then %do;
4517      +
4518      +		proc sql noprint;
4519      +			select distinct group_name into: sl_group_desc separated by ', '
4520      +			from sl_group;
4521      +
4522      +			select count(distinct group_name) into: group_count
4523      +			from sl_group;
4524      +		quit;
4525      +
4526      +		data _null_;
4527      +			length group_desc $5000;
4528      +
4529      +			group_desc = "&sl_group_desc.";
4530      +			group_count = &group_count.;
4531      +
94                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

4532      +			if group_count = 2 then group_desc = tranwrd(group_desc,', ',' and ');
4533      +			else if group_count > 2 then do;
4534      +				index = length(trim(group_desc)) - index(left(reverse(group_desc)),',') + 1;
4535      +				group_desc = substr(group_desc,1,index)||' and'||substr(group_desc,index+1);
4536      +			end;
4537      +
4538      +			group_desc = 'Grouped by '||group_desc;
4539      +
4540      +			call symputx('sl_group_desc',group_desc,'g');
4541      +		run;
4542      +
4543      +	%end;
4544      +	%else %do;
4545      +		%let sl_group_desc = No grouping;
4546      +	%end;
4547      +
4548      +
4549      +	/* subsetting */
4550      +	%global sl_subset_desc sl_subset_operator;
4551      +
4552      +	%if &sl_subset_nobs. %then %do;
4553      +
4554      +		proc sql noprint;
4555      +			select distinct lowcase(outer_operator) into: sl_subset_outer separated by ','
4556      +			from sl_subset;
4557      +
4558      +			select count(distinct outer_operator) - 1 into: sl_subset_outer_err
4559      +			from sl_subset;
4560      +
4561      +			select distinct name into: sl_subset_desc separated by " &sl_subset_outer. "
4562      +			from sl_subset;
4563      +		quit;
4564      +
4565      +		%let sl_subset_desc = Subset by &sl_subset_desc.;
4566      +
4567      +		/* create description of subsetting outer operator */
4568      +		proc sql noprint;
4569      +			select count(distinct name)	into: sl_subset_count
4570      +			from sl_subset;
4571      +		quit;
4572      +
4573      +		data _null_;
4574      +			length sl_subset_operator $500;
4575      +			if &sl_subset_count. > 1 then select ("&sl_subset_outer.");
4576      +				when ('and') sl_subset_operator = 'ALL of the following rules must be true '||
4577      +                                                  'for a subject to be included in the analysis.';
4578      +				when ('or') sl_subset_operator  = 'ANY of the following rules must be true '||
4579      +                                                  'for a subject to be included in the analysis.';
4580      +				otherwise sl_subset_operator = '';
4581      +			end;
4582      +			else do;
4583      +				sl_subset_operator = '';
4584      +			end;
4585      +
4586      +			call symputx('sl_subset_operator',sl_subset_operator,'g');
4587      +		run;
4588      +
4589      +	%end;
95                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

4590      +	%else %do;
4591      +		%let sl_subset_desc = No subsetting;
4592      +		%let sl_subset_operator = N/A;
4593      +	%end;
4594      +
4595      +	%put &sl_group_desc.;
4596      +	%put &sl_subset_desc.;
4597      +
4598      +
4599      +	/* single line description */
4600      +	%global sl_gs_desc;
4601      +
4602      +	%if &sl_group_nobs. and &sl_subset_nobs. %then
4603      +		%let sl_gs_desc = &sl_group_desc.%str(;) &sl_subset_desc.;
4604      +	%else %if &sl_group_nobs. %then
4605      +		%let sl_gs_desc = &sl_group_desc.;
4606      +	%else %if &sl_subset_nobs. %then
4607      +		%let sl_gs_desc = &sl_subset_desc.;
4608      +	%else 
4609      +		%let sl_gs_desc = ;
4610      +
4611      +	%put &sl_gs_desc.;
4612      +
4613      +
4614      +	/*******************************************************/
4615      +	/* GROUPING AND SUBSETTING DETAILED DESCRIPTION TABLES */
4616      +	/*******************************************************/
4617      +
4618      +	/****************/
4619      +	/* group detail */
4620      +	/****************/
4621      +
4622      +	%put GROUP DETAIL;
4623      +
4624      +	proc sort data=sl_group; by group_name partition var_name dsvg_grp_name var_value; run;
4625      +
4626      +	/* find whether any of the grouped variables were partitioned */
4627      +	proc sql noprint;
4628      +		select count(1)	into: sl_group_part_ind
4629      +		from (select distinct domain
4630      +		      from sl_datasets a,
4631      +			       sl_group b
4632      +			  where a.datatype = b.domain
4633      +	            and a.partition_variable is not missing);
4634      +	quit;
4635      +
4636      +	data sl_out_group;
4637      +		retain group_name domain partition_desc var_desc placeholder var_value dsvg_grp_name;
4638      +		set sl_group end=eof;
4639      +		by group_name var_name partition dsvg_grp_name var_value;
4640      +
4641      +		/* placeholder for the merged column in the template */
4642      +		call missing(placeholder);
4643      +
4644      +		length varlabel $256;
4645      +		call missing(varlabel);
4646      +
4647      +		/* variable description */
96                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

4648      +		if first.group_name then do;
4649      +			dsid = open(domain);
4650      +			retain varlabel;
4651      +			if dsid then do;
4652      +				varnum = varnum(dsid,upcase(var_name));
4653      +				if varnum then varlabel = varlabel(dsid,varnum);
4654      +			end;
4655      +		end;
4656      +		if last.group_name then do;
4657      +			rc = close(dsid);
4658      +		end;
4659      +
4660      +		length var_desc $300;
4661      +		if not missing(varlabel) then var_desc = trim(varlabel)||' ('||trim(var_name)||')';
4662      +		else var_desc = trim(var_name);
4663      +
4664      +
4665      +		/* partition description */
4666      +		/* look up partition variables */
4667      +		length partition_desc $300;
4668      +		call missing(partition_desc);
4669      +
4670      +		/* commented out due to exclusive use of Lab Test to partition in task order 4 */
4671      +		/*%if &sl_group_part_ind. %then %do;
4672      +
4673      +			datatype = domain;
4674      +
4675      +			if _n_ = 1 then do;
4676      +				declare hash h(dataset:'sl_datasets');
4677      +				h.definekey('datatype');
4678      +				h.definedata('partition_variable');
4679      +				h.definedone();
4680      +			end;
4681      +
4682      +			length partition_variable $32;
4683      +			call missing(partition_variable);
4684      +			rc = h.find();
4685      +			drop rc;
4686      +
4687      +			if not missing(partition_variable) then do;
4688      +				dsid = open(domain);
4689      +				if dsid then partition_varlabel = varlabel(dsid,varnum(dsid,upcase(partition_variable)));
4690      +				rc = close(dsid);
4691      +				
4692      +				if partition_varlabel ne '' then do;
4693      +					partition_desc = trim(partition_varlabel)||' ('||upcase(trim(partition_variable))||')'||
4694      +	                                 " '"||trim(partition)||"'";
4695      +				end;
4696      +				else do;
4697      +					partition_desc = upcase(trim(partition_variable))||''||" '"||trim(partition)||"'";
4698      +				end;
4699      +
4700      +			end;
4701      +
4702      +		%end; */
4703      +
4704      +		if not missing(partition) then partition_desc = partition;
4705      +		else partition_desc = 'N/A';
97                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

4706      +
4707      +
4708      +		/* format for output */
4709      +		if not first.group_name then do;
4710      +			group_name = '';
4711      +			domain = '';
4712      +		end;
4713      +
4714      +		if not first.partition then partition_desc = '';
4715      +
4716      +		if not first.var_name then var_desc = '';
4717      +
4718      +		if not first.dsvg_grp_name then do;
4719      +			dsvg_grp_name = '';
4720      +		end;
4721      +
4722      +		label group_name = 'Grouping Rule Name'
4723      +		      domain = 'Domain'
4724      +			  partition_desc = 'For Observations Where...'
4725      +			  var_desc = 'Variable'
4726      +			  var_value = 'Original Variable Value'
4727      +			  dsvg_grp_name = 'Grouped Variable Value'
4728      +			  ;
4729      +
4730      +		keep group_name domain partition_desc placeholder var_desc var_value dsvg_grp_name;
4731      +	run;
4732      +
4733      +
4734      +	/*****************/
4735      +	/* subset detail */
4736      +	/*****************/
4737      +
4738      +	%put SUBSET DETAIL;
4739      +
4740      +	proc sort data=sl_subset; by name domain partition var_name var_value; run;
4741      +
4742      +	/* find whether any of the subset rules used partitioned variables */
4743      +	proc sql noprint;
4744      +		select count(1)	into: sl_subset_part_ind
4745      +		from (select distinct domain
4746      +		      from sl_datasets a,
4747      +			       sl_subset b
4748      +			  where a.datatype = b.domain
4749      +	            and a.partition_variable is not missing);
4750      +	quit;
4751      +
4752      +	/* find the number of conditions per subset rule */
4753      +	proc sql noprint;
4754      +		create table sl_subset_condition as
4755      +		select name as subset_name, count(1) as condition_count
4756      +		from (select distinct name, partition, var_name
4757      +	          from sl_subset)
4758      +		group by name;
4759      +	quit;
4760      +
4761      +	data sl_out_subset;
4762      +		retain subset_name domain partition_desc  var_desc condition var_value operator;
4763      +		set sl_subset(rename=(name=subset_name)) end=eof;
98                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

4764      +		by subset_name domain partition var_name var_value;
4765      +
4766      +		length varlabel $256;
4767      +		call missing(varlabel);
4768      +
4769      +		/* variable description */
4770      +		if first.var_name then do;
4771      +			dsid = open(domain); 
4772      +			retain varlabel;
4773      +			if dsid then do;
4774      +				varnum = varnum(dsid,upcase(var_name));
4775      +				if varnum then varlabel = varlabel(dsid,varnum);
4776      +			end;
4777      +		end;
4778      +		if last.subset_name then do;
4779      +			rc = close(dsid);
4780      +		end;
4781      +
4782      +		length var_desc $300;
4783      +		if not missing(varlabel) then var_desc = trim(varlabel)||' ('||trim(var_name)||')';
4784      +		else var_desc = var_name;
4785      +
4786      +		
4787      +		/* condition number */
4788      +		/* numbers each condition in each subset rule */
4789      +		length condition $10;
4790      +		retain condition_no condition_sub_no;
4791      +		if first.subset_name then do;
4792      +			condition_no + 1;
4793      +			condition_sub_no = 0;
4794      +		end;
4795      +		if first.partition or first.var_name then condition_sub_no + 1;
4796      +		condition = trim(put(condition_no,8. -l))||'.'||trim(put(condition_sub_no,8. -l));
4797      +
4798      +
4799      +		/* partition description */
4800      +		/* look up partition variables */
4801      +		length partition_desc $300;
4802      +		call missing(partition_desc);
4803      +
4804      +		/* commented out due to exclusive use of Lab Test to partition in task order 4 */
4805      +		/*%if &sl_subset_part_ind. %then %do;
4806      +
4807      +			datatype = domain;
4808      +
4809      +			if _n_ = 1 then do;
4810      +				declare hash h1(dataset:'sl_datasets');
4811      +				h1.definekey('datatype');
4812      +				h1.definedata('partition_variable');
4813      +				h1.definedone();
4814      +			end;
4815      +
4816      +			length partition_variable $32;
4817      +			call missing(partition_variable);
4818      +			rc = h1.find();
4819      +			drop rc;
4820      +
4821      +			if not missing(partition_variable) then do;
99                                                                                           The SAS System                                                                 14:02 Tuesday, March 8, 2016

4822      +				dsid = open(domain);
4823      +				if dsid then do;
4824      +					partition_varlabel = varlabel(dsid,varnum(dsid,upcase(partition_variable)));
4825      +				end;
4826      +				rc = close(dsid);
4827      +				
4828      +				if partition_varlabel ne '' then do;
4829      +					partition_desc = trim(partition_varlabel)||' ('||upcase(trim(partition_variable))||')'||
4830      +	                                 " '"||trim(partition)||"'";
4831      +				end;
4832      +				else do;
4833      +					partition_desc = upcase(trim(partition_variable))||''||" '"||trim(partition)||"'";
4834      +				end;
4835      +			end;
4836      +
4837      +		%end; */
4838      +
4839      +		if not missing(partition) then partition_desc = partition;
4840      +		else partition_desc = 'N/A';
4841      +
4842      +
4843      +		/* operator description */
4844      +		length operator $50;
4845      +		call missing(operator);
4846      +		
4847      +		if first.subset_name then do;
4848      +			if _n_ = 1 then do;
4849      +				declare hash h2(dataset:'sl_subset_condition');
4850      +				h2.definekey('subset_name');
4851      +				h2.definedata('condition_count');
4852      +				h2.definedone();
4853      +			end;
4854      +
4855      +			length condition_count 8.;
4856      +			call missing(condition_count);
4857      +			rc = h2.find();
4858      +			drop rc;
4859      +
4860      +			if inner_operator ne '' then do;
4861      +				do i = 1 to condition_count;
4862      +					operator = left(trim(operator))||' '||trim(put(condition_no,8. -l))||'.'||
4863      +	                           trim(put(i,8. -l))||' '||ifc(i<condition_count,upcase(inner_operator),'');
4864      +				end;
4865      +				select(inner_operator);
4866      +					when ('OR') operator = 'Condition '||operator;
4867      +					when ('AND') operator = 'Conditions '||operator;
4868      +					otherwise;
4869      +				end;
4870      +				operator = compbl(operator);
4871      +			end;
4872      +			else operator = 'N/A';
4873      +		end;
4874      +
4875      +
4876      +		/* format for output */
4877      +		if not first.subset_name then do;
4878      +			subset_name = '';
4879      +		end;
100                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

4880      +
4881      +		if not first.domain then domain = '';
4882      +
4883      +		if not first.partition then partition_desc = '';
4884      +
4885      +		if not first.var_name then do;
4886      +			var_desc = ''; 
4887      +			condition = '';
4888      +		end;
4889      +
4890      +		label subset_name = 'Subset Rule Name'
4891      +		      domain = 'Domain'
4892      +			  partition_desc = 'For Observations Where...'
4893      +			  var_desc = 'Variable'
4894      +			  condition_no = 'Condition Number'
4895      +			  var_value = 'Variable Value'
4896      +		      operator = 'Which Conditions Apply?'
4897      +			  ;
4898      +
4899      +		keep subset_name domain partition_desc var_desc condition var_value operator;
4900      +	run;
4901      +
4902      +	proc datasets library=work nolist nodetails; delete sl_subset_condition; quit;
4903      +
4904      +
4905      +	/*******************/
4906      +	/* CUSTOM DATASETS */
4907      +	/*******************/
4908      +
4909      +	%put CUSTOM DATASETS;
4910      +
4911      +	%global sl_custom_ds;
4912      +
4913      +	proc sql noprint;
4914      +		select datatype into: sl_custom_ds separated by ', '
4915      +		from sl_datasets
4916      +		where default = 'N';
4917      +	quit;
4918      +
4919      +%mend group_subset_pp;
4920      +
4921      +
4922      +/*****************************/
4923      +/* EXCEL XLS TEMPLATE OUTPUT */
4924      +/*****************************/
4925      +%macro group_subset_xls_out(gs_file=);
4926      +
4927      +	%put GROUPING/SUBSETTING EXCEL TEMPLATE OUTPUT;
4928      +
4929      +	proc sql noprint;
4930      +		select put(count(1),8. -l) into: sl_group_row_count
4931      +		from sl_out_group;
4932      +	
4933      +		select put(count(1),8. -l) into: sl_subset_row_count
4934      +		from sl_out_subset;
4935      +	quit;
4936      +
4937      +	/* grouping and subsetting info */
101                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

4938      +	data sl_out_group_subset_info;
4939      +		length val_desc $25 val $500;
4940      +
4941      +		val_desc = 'Grouped by';
4942      +		val = "&sl_group_desc.";
4943      +		output;
4944      +
4945      +		val_desc = 'Subset by';
4946      +		val = "&sl_subset_desc.";
4947      +		output;
4948      +		
4949      +		val_desc = 'Group row count';
4950      +		val = "&sl_group_row_count.";
4951      +		output;
4952      +
4953      +		val_desc = 'Subset row count';
4954      +		val = "&sl_subset_row_count.";
4955      +		output;	
4956      +
4957      +		val_desc = 'Subset operator';
4958      +		val = "&sl_subset_operator.";
4959      +		output;	
4960      +
4961      +		val_desc = 'Note';
4962      +		if not (&sl_group_row_count. and &sl_subset_row_count.) then do;
4963      +			if not &sl_group_row_count. and &sl_subset_row_count. then val = 'No grouping was used.';
4964      +			else if &sl_group_row_count. and not &sl_subset_row_count. then val = 'No subsetting was used.';
4965      +			else val = 'Neither grouping nor subsetting were used.';
4966      +		end;
4967      +		else val = '';
4968      +		output;
4969      +
4970      +		val_desc = 'GS description';
4971      +		val = "&sl_gs_desc.";
4972      +		output;
4973      +	run;
4974      +
4975      +	%put &run_location.;
4976      +
4977      +	/* local runs use the Microsoft Jet database-based Excel LIBNAME engine */
4978      +	%if %upcase(&run_location.) = LOCAL %then %do;
4979      +		*libname xls excel "&gs_file." ver=2003; *Output function changed due to SAS 9.3(64bit) and Excel 2010(32bit) incompatability;
4980      +	libname xls pcfiles path="&gs_file."; 
4981      +	%end;
4982      +	/* Script Launcher runs use the PCFILES LIBNAME Engine */
4983      +	%else %do;
4984      +		/* the server appears to require a waiting period */
4985      +		/* sleep for one second before opening the library */
4986      +		data _null_;
4987      +			rc = sleep(1);
4988      +		run;
4989      +
4990      +		libname xls pcfiles path="&gs_file."; 
4991      +	%end;
4992      +
4993      +	proc datasets library=xls nolist nodetails;
4994      +		delete group_detail
4995      +               subset_detail
102                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

4996      +               group_subset_info;
4997      +	quit; 
4998      +
4999      +	data xls.group_detail;
5000      +		set sl_out_group;
5001      +	run;
5002      +
5003      +	data xls.subset_detail;
5004      +		set sl_out_subset;
5005      +	run;
5006      +
5007      +	data xls.group_subset_info;
5008      +		set sl_out_group_subset_info;
5009      +	run;
5010      +	
5011      +	libname xls clear;
5012      +
5013      +%mend group_subset_xls_out;
5014      +
5015      +
5016      +/******************************************/
5017      +/* GROUPING & SUBSETTING EXCEL XML OUTPUT */
5018      +/******************************************/
5019      +%macro group_subset_xml_out(delete_im=Y);
5020      +
5021      +	%put SL GROUPING/SUBSETTING EXCEL XML OUTPUT;
5022      +
5023      +	%let ds = sl_gs;
5024      +	%let wstitle = Grouping and Subsetting;
5025      +
5026      +	/* set up worksheet start and end datasets */
5027      +	data ws_&ds._start;
5028      +		length string $&strlen.;
5029      +		string = '<Worksheet ss:Name="'||"&wstitle."||'">'; output; 
5030      +	run;
5031      +
5032      +	data ws_&ds._end; 
5033      +		length string $&strlen.; 
5034      +		string = '</Worksheet>'; output;
5035      +	run;
5036      +
5037      +	data ws_&ds._table_start; 
5038      +		length string $&strlen.; 
5039      +		string = '<Table>'; output;
5040      +		/* define column widths */
5041      +		string = '<Column ss:Width="162"/>'; output;
5042      +		string = '<Column ss:Width="48"/>'; output;
5043      +		string = '<Column ss:Width="162"/>'; output;
5044      +		string = '<Column ss:Width="162"/>'; output;
5045      +		string = '<Column ss:Width="50.5"/>'; output;
5046      +		string = '<Column ss:Width="162"/>'; output;
5047      +		string = '<Column ss:Width="162"/>'; output;
5048      +		string = '<Column/>'; output;
5049      +	run;
5050      +
5051      +	data ws_&ds._table_end;
5052      +		length string $&strlen.; 
5053      +		string = '</Table>'; output;
103                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

5054      +	run;
5055      +
5056      +	/* make the top of the worksheet with the title and run info */
5057      +	data ws_&ds._header_data;
5058      +		%xml_tag_def;
5059      +		%xml_init;
5060      +
5061      +		Type = 'String';
5062      +
5063      +		%let row = 0;
5064      +
5065      +		Row = %let row = %eval(&row. + 1); &row.;
5066      +		Data = ''; output;
5067      +		
5068      +		Row = %let row = %eval(&row. + 1); &row.;
5069      +		Data = 'Grouping and Subsetting Summary'; StyleID = 'Header'; output;
5070      +
5071      +		Row = %let row = %eval(&row. + 1); &row.;
5072      +		Data = ''; StyleID = ''; output;
5073      +
5074      +		StyleID = 'Default8'; 
5075      +
5076      +		Row = %let row = %eval(&row. + 1); &row.;
5077      +		Data = "NDA/BLA: &ndabla."; output;
5078      +		Row = %let row = %eval(&row. + 1); &row.;
5079      +		Data = "Study: &studyid."; output;
5080      +		Row = %let row = %eval(&row. + 1); &row.;
5081      +		Data = 'Analysis run date: '||put(date(),e8601da.)||' '||put(time(),timeampm11.); output;
5082      +	run;
5083      +
5084      +	%markup(ws_&ds._header_data,ws_&ds._header);
5085      +
5086      +	%if &sl_group_nobs. or &sl_subset_nobs. %then %do;
5087      +
5088      +		/* find the number of rows to merge down for each of the grouping and subsetting tables */
5089      +		%macro gs_rows(ds=,varlist=);
5090      +
5091      +			%let n = %eval(%sysfunc(countc(%sysfunc(compbl(&varlist.)),,s))+1);
5092      +
5093      +			data sl_fmt_&ds._row(keep=row)
5094      +				 %do i = 1 %to &n.; 
5095      +					%let var = %scan(&varlist.,&i.);
5096      +				    sl_fmt_&ds._&var.(keep=&var._row &var._n rename=(&var._row=row)) 
5097      +				 %end;
5098      +				 ;
5099      +				set sl_&ds.%if &ds. = subset %then (rename=(name=subset_name));;
5100      +				by &varlist.;
5101      +
5102      +				row + 1;
5103      +				output sl_fmt_&ds._row;
5104      +
5105      +				%do i = 1 %to &n.;
5106      +					%let var = %scan(&varlist.,&i.);
5107      +					retain &var._row &var._n;
5108      +
5109      +					if first.&var. then do;
5110      +						&var._row = row;
5111      +						&var._n = 0;
104                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

5112      +					end;
5113      +					else &var._n + 1;
5114      +
5115      +					if last.&var. then output sl_fmt_&ds._&var.;
5116      +				%end;
5117      +			run;
5118      +
5119      +			data sl_fmt_&ds.;
5120      +				merge sl_fmt_&ds._row(in=a)
5121      +				      %do i = 1 %to &n.; sl_fmt_&ds._%scan(&varlist.,&i.) %end;
5122      +					  ;
5123      +				by row;
5124      +			run;
5125      +
5126      +			proc datasets library=work nolist nodetails; delete sl_fmt_&ds._:; quit;
5127      +
5128      +		%mend gs_rows;
5129      +
5130      +		/************/
5131      +		/* GROUPING */
5132      +		/************/
5133      +		%if &sl_group_nobs. %then %do;
5134      +
5135      +			%put GROUPING;
5136      +
5137      +			/* make the section text */
5138      +			data ws_&ds._group_text_data;
5139      +				%xml_tag_def;
5140      +				%xml_init;
5141      +
5142      +				Type = 'String';
5143      +
5144      +				%let row = 0;
5145      +
5146      +				Row = %let row = %eval(&row. + 1); &row.;
5147      +				Data = ''; StyleID = ''; output;
5148      +
5149      +				Row = %let row = %eval(&row. + 1); &row.;
5150      +				Data = ''; StyleID = ''; output;
5151      +
5152      +				Row = %let row = %eval(&row. + 1); &row.;
5153      +				Data = "&sl_group_desc."; StyleID = 'SubHeader'; output;
5154      +
5155      +				Row = %let row = %eval(&row. + 1); &row.;
5156      +				Data = ''; StyleID = ''; output;
5157      +
5158      +				StyleID = 'Default10Wrap'; MergeAcross = 6;
5159      +
5160      +				Row = %let row = %eval(&row. + 1); &row.;
5161      +				Height = 50;
5162      +				Data = 'The table below shows the rules used for grouping values together. Each grouping '||
5163      +                       'applies to a single domain and variable. The values of that variable can be put into '||
5164      +                       'more than one group. For example, if four arms from the planned arm (ARM) variable in '||
5165      +                       'domain DM are put into two groups -- one with the control arm and the other with the '||
5166      +                       'three other arms -- this table would show four values in the Original Value column '||
5167      +                       'mapped onto two values in the Grouped Value column.'; output;
5168      +
5169      +				Row = %let row = %eval(&row. + 1); &row.;
105                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

5170      +				Height = 12.75;
5171      +				Data = 'If a grouping for the LB or VS domain has a non-empty cell in the Test column, that '||
5172      +                       'grouping is applied only to lab or vital sign tests of the kind stated in the Test column. '; 
5173      +                output;	
5174      +
5175      +				Row = %let row = %eval(&row. + 1); &row.;
5176      +				Data = ''; StyleID = ''; output;
5177      +			run;
5178      +
5179      +			%markup(ws_&ds._group_text_data,ws_&ds._group_text);
5180      +
5181      +			/* make the grouping data table column headers */
5182      +			data ws_&ds._group_cols_data;
5183      +				%xml_tag_def;
5184      +				%xml_init;
5185      +
5186      +				Type = 'String';
5187      +				StyleID = 'ColumnOutline';
5188      +
5189      +				Row = 1;
5190      +				Height = 30;
5191      +				Data = 'Grouping Name'; output;
5192      +				Data = 'Domain'; output;
5193      +				Data = 'Test'; output;
5194      +				Data = 'Variable'; MergeAcross = 1; output;
5195      +				MergeAcross = .;
5196      +				Data = 'Original Value'; output;
5197      +				Data = 'Grouped Value'; output;
5198      +			run;
5199      +
5200      +			%markup(ws_&ds._group_cols_data,ws_&ds._group_cols);
5201      +
5202      +
5203      +			/* make a dataset containing the number of rows to merge down for each grouping */
5204      +			%gs_rows(ds=group,varlist=group_name partition var_name dsvg_grp_name);
5205      +
5206      +			/* find the variable numbers */
5207      +			proc sql noprint;
5208      +				create table sl_fmt_group_varnum as
5209      +				select name, varnum
5210      +				from dictionary.columns
5211      +				where libname = 'WORK'
5212      +				  and memtype = 'DATA'
5213      +				  and memname = 'SL_OUT_GROUP';
5214      +			quit;
5215      +
5216      +
5217      +			/* mark up the grouping data table */
5218      +			%annotate(sl_out_group,ws_&ds._group_data_note);
5219      +
5220      +			data ws_&ds._group_data_note;
5221      +				set ws_&ds._group_data_note;
5222      +
5223      +				if upcase(varname) = 'PLACEHOLDER' then delete;
5224      +
5225      +				/* look up row info for merging cells */
5226      +				if _n_ = 1 then do;
5227      +					declare hash h1(dataset:'sl_fmt_group');
106                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

5228      +					h1.definekey('row');
5229      +					h1.definedata('group_name_n','partition_n','var_name_n','dsvg_grp_name_n');
5230      +					h1.definedone();
5231      +				end;
5232      +
5233      +				call missing(group_name_n,var_name_n,partition_n,dsvg_grp_name_n);
5234      +				rc = h1.find();
5235      +				drop rc;
5236      +
5237      +				/* look up column info */
5238      +				if _n_ = 1 then do;
5239      +					declare hash h2(dataset:'sl_fmt_group_varnum(rename=(name=varname))');
5240      +					h2.definekey('varname');
5241      +					h2.definedata('varnum');
5242      +					h2.definedone();
5243      +				end;
5244      +
5245      +				call missing(varnum);
5246      +				rc = h2.find();
5247      +				drop rc;
5248      +
5249      +				lag_varnum = lag(varnum);
5250      +
5251      +				if varnum > 1 and varnum - lag_varnum ne 1 then Index = varnum;
5252      +
5253      +				if varname = 'var_desc' then MergeAcross = 1;
5254      +
5255      +				if varname in ('group_name','domain','partition_desc','var_desc') then do;
5256      +					if group_name_n ne . then MergeDown = group_name_n;
5257      +					else delete;
5258      +				end;
5259      +				if varname = 'dsvg_grp_name' then do;
5260      +					if dsvg_grp_name_n ne . then MergeDown = dsvg_grp_name_n;
5261      +					else delete;
5262      +				end;
5263      +
5264      +				if varname not in ('var_value') then StyleID = 'GS_BTLRB';
5265      +				else do;
5266      +					if dsvg_grp_name_n ne . then StyleID = 'GS_BTLR';
5267      +					else StyleID = 'GS_BLR';
5268      +					if bottom then StyleID = trim(StyleID)||'B';
5269      +				end;
5270      +
5271      +			run;
5272      +
5273      +			%markup(ws_&ds._group_data_note,ws_&ds._group_data);
5274      +
5275      +			data ws_&ds._group;
5276      +				set ws_&ds._group_text
5277      +				    ws_&ds._group_cols
5278      +					ws_&ds._group_data;
5279      +			run;
5280      +
5281      +		%end;
5282      +		%else %do;
5283      +
5284      +			%put NO GROUPING;
5285      +
107                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

5286      +			/* make the section text */
5287      +			data ws_&ds._group_data;
5288      +				%xml_tag_def;
5289      +				%xml_init;
5290      +
5291      +				Type = 'String';
5292      +
5293      +				%let row = 0;
5294      +
5295      +				Row = %let row = %eval(&row. + 1); &row.;
5296      +				Data = ''; StyleID = ''; output;
5297      +
5298      +				Row = %let row = %eval(&row. + 1); &row.;
5299      +				Data = ''; StyleID = ''; output;
5300      +
5301      +				Row = %let row = %eval(&row. + 1); &row.;
5302      +				Data = "&sl_group_desc."; StyleID = 'SubHeader'; output;
5303      +			run;
5304      +
5305      +			%markup(ws_&ds._group_data,ws_&ds._group);
5306      +
5307      +		%end;
5308      +
5309      +		/**************/
5310      +		/* SUBSETTING */
5311      +		/**************/
5312      +		%if &sl_subset_nobs. %then %do;
5313      +
5314      +			%put SUBSETTING;
5315      +
5316      +			/* make the section text */
5317      +			data ws_&ds._subset_text_data;
5318      +				%xml_tag_def;
5319      +				%xml_init;
5320      +
5321      +				Type = 'String';
5322      +
5323      +				%let row = 0;
5324      +
5325      +				Row = %let row = %eval(&row. + 1); &row.;
5326      +				Data = ''; StyleID = ''; output;
5327      +
5328      +				Row = %let row = %eval(&row. + 1); &row.;
5329      +				Data = ''; StyleID = ''; output;
5330      +
5331      +				Row = %let row = %eval(&row. + 1); &row.;
5332      +				Data = "&sl_subset_desc."; StyleID = 'SubHeader'; output;
5333      +
5334      +				Row = %let row = %eval(&row. + 1); &row.;
5335      +				Data = ''; StyleID = ''; output;
5336      +
5337      +				StyleID = 'Default10Wrap'; MergeAcross = 6;
5338      +
5339      +				Row = %let row = %eval(&row. + 1); &row.;
5340      +				Height = 50;
5341      +				Data = "The table below shows the rules for subsetting subjects and those subjects' "||
5342      +                       'observations in other domains. For a subject to be included in the subset and used '||
5343      +                       'in analysis, they must have at least one value in the Value column for the associated '||
108                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

5344      +                       'variable in the Variable column. For example, if the Value column has values 5 through '||
5345      +                       '10 for domain LB and variable LBSTRESN, a subject must have at least one lab test in LB '||
5346      +                       'with LBSTRESN from 5 and 10.'; output;
5347      +
5348      +				Row = %let row = %eval(&row. + 1); &row.;
5349      +				Height = 50;
5350      +				Data = 'Each subset can be made up of several conditions and these are numbered in the Condition '||
5351      +                       "No. column. The 'Which Conditions Apply? (AND vs OR)' column states whether for a given "||
5352      +                       'subset, all its conditions must be true for a subject to be included in the subset, or '||
5353      +                       'any one of them being true will suffice. If all must be true, this column will list out '||
5354      +                       "all the subset's conditions separated by an 'AND'. If only one must be true, the "||
5355      +                       "subset's conditions will be separated by an 'OR'.'"; 
5356      +                output;	
5357      +
5358      +				Row = %let row = %eval(&row. + 1); &row.; 
5359      +				Height = 50;
5360      +				Data = 'If a subset using the LB or VS domain has a non-empty cell in the Test column, only lab '||
5361      +                       'or vital sign tests of the kind stated in the Test column are used to determine whether a subject '||
5362      +                       'should be included in the subset. For example, if the domain is LB and lab test is '||
5363      +                       'ALBUMIN and variable LBSTRESN must have values from 5 to 10, only subjects with albumin '||
5364      +                       'lab test results from 5 to 10 are included in the subset and used in subsequent analysis.';
5365      +				output;	
5366      +
5367      +				Row = %let row = %eval(&row. + 1); &row.;
5368      +				Height = 12.75;
5369      +				Data = "&sl_subset_operator."; StyleID = 'SubHeader'; output;
5370      +
5371      +				Row = %let row = %eval(&row. + 1); &row.;
5372      +				Height = 12.75;
5373      +				Data = ''; StyleID = ''; output;
5374      +			run;
5375      +
5376      +			%markup(ws_&ds._subset_text_data,ws_&ds._subset_text);
5377      +
5378      +			/* make the subseting data table column headers */
5379      +			data ws_&ds._subset_cols_data;
5380      +				%xml_tag_def;
5381      +				%xml_init;
5382      +
5383      +				Type = 'String';
5384      +				StyleID = 'ColumnOutline';
5385      +
5386      +				Row = 1;
5387      +				Height = 30;
5388      +				Data = 'Subset Name'; output;
5389      +				Data = 'Domain'; output;
5390      +				Data = 'Test'; output;
5391      +				Data = 'Variable'; output;
5392      +				Data = 'Condition No.'; output;
5393      +				Data = 'Value'; output;
5394      +				Data = 'Which Conditions Apply?&#10;(AND vs OR)'; output;
5395      +			run;
5396      +
5397      +			%markup(ws_&ds._subset_cols_data,ws_&ds._subset_cols);
5398      +
5399      +
5400      +			/* make a dataset containing the number of rows to merge down for each subseting */
5401      +			%gs_rows(ds=subset,varlist=subset_name domain partition var_name);
109                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

5402      +
5403      +			/* find the variable numbers */
5404      +			proc sql noprint;
5405      +				create table sl_fmt_subset_varnum as
5406      +				select name, varnum
5407      +				from dictionary.columns
5408      +				where libname = 'WORK'
5409      +				  and memtype = 'DATA'
5410      +				  and memname = 'SL_OUT_SUBSET';
5411      +			quit;
5412      +
5413      +
5414      +			/* mark up the subseting data table */
5415      +			%annotate(sl_out_subset,ws_&ds._subset_data_note);
5416      +
5417      +			data ws_&ds._subset_data_note;
5418      +				set ws_&ds._subset_data_note;
5419      +
5420      +				/* look up row info for merging cells */
5421      +				if _n_ = 1 then do;
5422      +					declare hash h1(dataset:'sl_fmt_subset');
5423      +					h1.definekey('row');
5424      +					h1.definedata('subset_name_n','domain_n','partition_n','var_name_n');
5425      +					h1.definedone();
5426      +				end;
5427      +
5428      +				call missing(subset_name_n,domain_n,partition_n,var_name_n);
5429      +				rc = h1.find();
5430      +				drop rc;
5431      +
5432      +				/* look up column info */
5433      +				if _n_ = 1 then do;
5434      +					declare hash h2(dataset:'sl_fmt_subset_varnum(rename=(name=varname))');
5435      +					h2.definekey('varname');
5436      +					h2.definedata('varnum');
5437      +					h2.definedone();
5438      +				end;
5439      +
5440      +				call missing(varnum);
5441      +				rc = h2.find();
5442      +				drop rc;
5443      +
5444      +				/* merge cells down depending on the variable */
5445      +				select (varname);
5446      +					when ('subset_name','operator') do;
5447      +						if subset_name_n ne . then MergeDown = subset_name_n;
5448      +					    else delete;
5449      +					end;
5450      +					when ('domain') do;
5451      +						if domain_n ne . then MergeDown = domain_n;
5452      +					    else delete;
5453      +					end;
5454      +					when ('partition_desc') do;
5455      +						if partition_n ne . then MergeDown = partition_n;
5456      +					    else delete;
5457      +					end;
5458      +					when ('var_desc','condition') do;
5459      +						if var_name_n ne . then MergeDown = var_name_n;
110                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

5460      +					    else delete;
5461      +					end;
5462      +					otherwise;
5463      +				end;
5464      +
5465      +				lag_varnum = lag(varnum);
5466      +
5467      +				if varnum > 1 and varnum - lag_varnum ne 1 then Index = varnum;
5468      +
5469      +				if varname = 'condition' then StyleID = 'GSC_BTLRB';
5470      +				else if varname not in ('var_value') then StyleID = 'GS_BTLRB';
5471      +				else do;
5472      +					if var_name_n ne . then StyleID = 'GS_BTLR';
5473      +					else StyleID = 'GS_BLR';
5474      +					if bottom then StyleID = trim(StyleID)||'B';
5475      +				end;
5476      +
5477      +			run;
5478      +
5479      +			%markup(ws_&ds._subset_data_note,ws_&ds._subset_data);
5480      +			
5481      +			data ws_&ds._subset;
5482      +				set ws_&ds._subset_text
5483      +				    ws_&ds._subset_cols
5484      +					ws_&ds._subset_data;
5485      +			run;
5486      +
5487      +		%end;
5488      +		%else %do;
5489      +
5490      +			%put NO SUBSETTING;
5491      +
5492      +			/* make the section text */
5493      +			data ws_&ds._subset_data;
5494      +				%xml_tag_def;
5495      +				%xml_init;
5496      +
5497      +				Type = 'String';
5498      +
5499      +				%let row = 0;
5500      +
5501      +				Row = %let row = %eval(&row. + 1); &row.;
5502      +				Data = ''; StyleID = ''; output;
5503      +
5504      +				Row = %let row = %eval(&row. + 1); &row.;
5505      +				Data = ''; StyleID = ''; output;
5506      +
5507      +				Row = %let row = %eval(&row. + 1); &row.;
5508      +				Data = "&sl_subset_desc."; StyleID = 'SubHeader'; output;
5509      +			run;
5510      +
5511      +			%markup(ws_&ds._subset_data,ws_&ds._subset);
5512      +
5513      +		%end;
5514      +
5515      +	%end;
5516      +	%else %do;
5517      +
111                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

5518      +		%put NO GROUPING OR SUBSETTING;
5519      +
5520      +		/* make the section text */
5521      +		data ws_&ds._group_data;
5522      +			%xml_tag_def;
5523      +			%xml_init;
5524      +
5525      +			Type = 'String';
5526      +
5527      +			%let row = 0;
5528      +
5529      +			Row = %let row = %eval(&row. + 1); &row.;
5530      +			Data = ''; StyleID = ''; output;
5531      +
5532      +			Row = %let row = %eval(&row. + 1); &row.;
5533      +			Data = ''; StyleID = ''; output;
5534      +
5535      +			Row = %let row = %eval(&row. + 1); &row.;
5536      +			Data = 'Neither grouping nor subsetting were used'; StyleID = 'SubHeader'; output;
5537      +		run;
5538      +
5539      +		%markup(ws_&ds._group_data,ws_&ds._group);
5540      +
5541      +		data ws_&ds._subset;
5542      +			length string $&strlen.;
5543      +			call missing(string);
5544      +		run;
5545      +
5546      +	%end;
5547      +
5548      +	data ws_&ds._settings;
5549      +		length string $&strlen.;
5550      +		string = '<WorksheetOptions xmlns="urn:schemas-microsoft-com:office:excel">'; output;
5551      +		string = '<PageSetup>'; output;
5552      +		string = '<Layout x:Orientation="Landscape"/>'; output;
5553      +		string = '<Header x:Data="&amp;LGrouping and Subsetting Summary'||
5554      +                 '&amp;R'||"NDA/BLA &ndabla.&#10;Study &studyid."||'"/>'; output;
5555      +		string = '<Footer x:Data="Page &amp;P of &amp;N"/>'; output;
5556      +		string = '</PageSetup>'; output;
5557      +		string = '<FitToPage/>'; output;
5558      +		string = '<Print>'; output;
5559      +		string = '<FitHeight>100</FitHeight>'; output;
5560      +		string = '<ValidPrinterInfo/>'; output;
5561      +		string = '<Scale>78</Scale>'; output;
5562      +		string = '<HorizontalResolution>600</HorizontalResolution>'; output;
5563      +		string = '<VerticalResolution>0</VerticalResolution>'; output;
5564      +		string = '</Print>'; output;
5565      +		string = '</WorksheetOptions>'; output;
5566      +	run;
5567      +
5568      +	%put COMBINE AND OUTPUT;
5569      +
5570      +	data ws_&ds.;
5571      +		set ws_&ds._start
5572      +		    ws_&ds._table_start
5573      +			ws_&ds._header 
5574      +			ws_&ds._group
5575      +			ws_&ds._subset
112                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

5576      +			ws_&ds._table_end
5577      +			ws_&ds._settings
5578      +			ws_&ds._end
5579      +			;
5580      +	run;
5581      +
5582      +	%if &delete_im. = Y %then %do;
5583      +		proc datasets library=work nolist nodetails; delete ws_&ds._:; quit;
5584      +	%end;
5585      +
5586      +%mend group_subset_xml_out;
NOTE: %INCLUDE (level 1) ending.
SYMBOLGEN:  Macro variable UTILPATH resolves to /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp6
5587       %include "&utilpath./xml_output.sas";
NOTE: %INCLUDE (level 1) file /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp6/xml_output.sas is file 
      /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp6/xml_output.sas.
5588      +/****************************************************************************/
5589      +/*                                                                          */
5590      +/*         PROGRAM NAME: Excel XML Output Macros                            */
5591      +/*                                                                          */
5592      +/*          DESCRIPTION: Macros for creating Excel XML workbooks            */
5593      +/*                       %wb -- create start and end markup of a workbook   */
5594      +/*                       %styles -- a collection of fixed styles            */
5595      +/*                       %xml_tag_def & %xml_init -- declare XML variables  */
5596      +/*                       %annotate -- annotate a dataset in prep. for XML   */
5597      +/*                       %markup -- turn annotated dataset into XML         */
5598      +/*                       %xml_style_dcl -- declare XML style variables      */
5599      +/*                       %xml_style_markup -- turn style vars into styles   */
5600      +/*                                                                          */
5601      +/*                       The following are deprecated but in use in places: */
5602      +/*                       %wsheader -- create headers/footers                */
5603      +/*                       %wsdata -- mark up a dataset with default styling  */
5604      +/*                       %ws_rowcount -- find the count of XML rows         */
5605      +/*                                                                          */
5606      +/*               AUTHOR: David Kretch (david.kretch@us.ibm.com)	            */
5607      +/*                                                                          */
5608      +/*                 DATE: February 15, 2011                                  */
5609      +/*                                                                          */
5610      +/*            MADE WITH: SAS 9.2                                            */
5611      +/*                                                                          */
5612      +/*                NOTES:                                                    */
5613      +/*                                                                          */
5614      +/*            REVISIONS: ---                                                */
5615      +/*                                                                          */
5616      +/****************************************************************************/
5617      +
5618      +/* length for the string variable, which stores the XML code */
5619      +/* should be set by each panel to minimize string length */
5620      +%sysfunc(ifc(not %symexist(strlen),%nrstr(%global strlen; %let strlen = 2000;),));
5621      +
5622      +%put XML TEXT STRING LENGTH: &strlen.;
SYMBOLGEN:  Macro variable STRLEN resolves to 1000
XML TEXT STRING LENGTH: 1000
5623      +
5624      +
5625      +/* workbook information */
5626      +/* first and last sets of tags in a workbook */
5627      +/* establishes title, author, and document type */
113                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

5628      +%macro wb(title);
5629      +
5630      +	data wb_start;
5631      +		length string $&strlen.;
5632      +		string = '<?xml version="1.0"?>'; output;
5633      +		string = '<?mso-application progid="Excel.Sheet"?>'; output;
5634      +		string = '<Workbook xmlns="urn:schemas-microsoft-com:office:spreadsheet" '||
5635      +				   'xmlns:o="urn:schemas-microsoft-com:office:office" '||
5636      +				   'xmlns:x="urn:schemas-microsoft-com:office:excel" '||
5637      +				   'xmlns:ss="urn:schemas-microsoft-com:office:spreadsheet" '||
5638      +				   'xmlns:html="http://www.w3.org/TR/REC-html40">'; output;
5639      +		string = '<DocumentProperties xmlns="urn:schemas-microsoft-com:office:office">'; output;
5640      +		string = '<Title>'||"&wbtitle."||'</Title>'; output;
5641      +		string = '<Author>US Food &amp; Drug Administration</Author>'; output;
5642      +		string = '<Created>'||put(date(),YYMMDDd10.)||'T'||put(time(),TIME.)||'</Created>'; output;
5643      + 		string = '</DocumentProperties>'; output;
5644      +		string = '<ExcelWorkbook xmlns="urn:schemas-microsoft-com:office:excel">'; output;
5645      +		string = '</ExcelWorkbook>'; output;
5646      +	run;
5647      +
5648      +	data wb_end;
5649      +		length string $&strlen.;
5650      +		string = '</Workbook>'; output;
5651      +	run;
5652      +
5653      +%mend wb;
5654      +
5655      +
5656      +/* style information */
5657      +/* defines styles for cells in a worksheet */
5658      +/* eg font size, borders, etc. */
5659      +%macro styles(size=9);
5660      +
5661      +	data wb_styles;
5662      +		length string $&strlen.;
5663      +		string = '<Styles>'; output; 
5664      +
5665      +			/* default style */
5666      +			string = '<Style ss:ID="Default" ss:Name="Normal">'; output;
5667      +	   		string = '<Font ss:Size="'||"&size."||'"/>'; output;
5668      +	   		string = '<Interior ss:Pattern="Solid"/>'; output;
5669      +	  		string = '</Style>'; output;  
5670      +
5671      +			/* default style with left alignment */
5672      +			string = '<Style ss:ID="DefaultLeft" ss:Parent="Default">'; output;
5673      +			string = '<Alignment ss:Horizontal="Left" ss:Vertical="Top" ss:WrapText="0"/>'; output;
5674      +			string = '</Style>'; output;
5675      +
5676      +			/* default style with right alignment */
5677      +			string = '<Style ss:ID="DefaultRight" ss:Parent="Default">'; output;
5678      +			string = '<Alignment ss:Horizontal="Right" ss:Vertical="Top" ss:WrapText="0"/>'; output;
5679      +			string = '</Style>'; output;
5680      +
5681      +			/* default style with white text */
5682      +			string = '<Style ss:ID="DefaultWhite" ss:Parent="Default">'; output;
5683      +	   		string = '<Font ss:Color="#FFFFFF"/>'; output;
5684      +			string = '</Style>'; output;
5685      +
114                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

5686      +			/* default style with 10 pt font */
5687      +			string = '<Style ss:ID="Default10" ss:Parent="Default">'; output;
5688      +			string = '<Alignment ss:Vertical="Top" ss:WrapText="0"/>'; output;
5689      +	   		string = '<Font ss:Size="10"/>'; output;
5690      +			string = '</Style>'; output;
5691      +
5692      +			/* default style with 10 pt font and word wrap */
5693      +			string = '<Style ss:ID="Default10Wrap" ss:Parent="Default10">'; output;
5694      +			string = '<Alignment ss:Vertical="Top" ss:WrapText="1"/>'; output;
5695      +			string = '</Style>'; output;
5696      +
5697      +			/* default style with 10 pt red and italic font and word wrapping */
5698      +			string = '<Style ss:ID="Default10RedWrap" ss:Parent="Default">'; output;
5699      +			string = '<Alignment ss:Vertical="Top" ss:WrapText="1"/>'; output;
5700      +	   		string = '<Font ss:Color="#FF0000" ss:Size="10" ss:Italic="1"/>'; output;
5701      +			string = '</Style>'; output;
5702      +
5703      +			/* default style with 10 pt font and right alignment */
5704      +			string = '<Style ss:ID="Default10Right" ss:Parent="Default10">'; output;
5705      +			string = '<Alignment ss:Horizontal="Right" ss:Vertical="Top" ss:WrapText="0"/>'; output;
5706      +			string = '</Style>'; output;
5707      +
5708      +			/* default style with 8 pt font */
5709      +			string = '<Style ss:ID="Default8" ss:Parent="Default">'; output;
5710      +			string = '<Alignment ss:Vertical="Top" ss:WrapText="0"/>'; output;
5711      +	   		string = '<Font ss:Size="8"/>'; output;
5712      +			string = '</Style>'; output;
5713      +
5714      +			/* header style */
5715      +			string = '<Style ss:ID="Header">'; output;
5716      +			string = '<Alignment/>'; output;
5717      +	   		string = '<Font ss:Size="12" ss:Bold="1" ss:Italic="1"/>'; output;
5718      +	  		string = '</Style>'; output;
5719      +
5720      +			/* subheader style */
5721      +			string = '<Style ss:ID="SubHeader">'; output;
5722      +			string = '<Alignment ss:Vertical="Top"/>'; output;
5723      +	   		string = '<Font ss:Size="10" ss:Bold="1" ss:Italic="0"/>'; output;
5724      +	  		string = '</Style>'; output;
5725      +
5726      +			/* column header style */
5727      +			string = '<Style ss:ID="Column">'; output;
5728      +			string = '<Alignment ss:Horizontal="Center" ss:Vertical="Center" ss:WrapText="1"/>'; output;	
5729      +			string = '<Interior ss:Color="#333399" ss:Pattern="Solid"/>'; output;
5730      +			string = '<Font ss:Size="10" ss:Color="#FFFFFF" ss:Bold="1"/>'; output;
5731      +			string = '</Style>'; output;
5732      +
5733      +			/* column header outline style */
5734      +			string = '<Style ss:ID="ColumnOutline" ss:Parent="Column">'; output;
5735      +			string = '<Borders>'; output;
5736      +			string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5737      +    		string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5738      +    		string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5739      +    		string = '<Border ss:Position="Top" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5740      +			string = '</Borders>'; output;
5741      +			string = '</Style>'; output;  
5742      +
5743      +			/* column header outline style with small text */
115                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

5744      +			string = '<Style ss:ID="ColumnOutlineSmall" ss:Parent="ColumnOutline">'; output;
5745      +			string = '<Font ss:Size="8" ss:Color="#FFFFFF" ss:Bold="1"/>'; output;
5746      +			string = '</Style>'; output;
5747      +
5748      +			/* column header outline style with italic text */
5749      +			string = '<Style ss:ID="ColumnOutlineItalic" ss:Parent="ColumnOutline">'; output;
5750      +			string = '<Font ss:Size="10" ss:Color="#FFFFFF" ss:Bold="1" ss:Italic="1"/>'; output;
5751      +			string = '</Style>'; output; 
5752      +
5753      +			/* column header outline style with rotated text vertically aligned to the top */
5754      +			string = '<Style ss:ID="ColumnOutlineRotateTop" ss:Parent="ColumnOutline">'; output;
5755      +			string = '<Alignment ss:Horizontal="Center" ss:Vertical="Top" ss:Rotate="90" ss:WrapText="1"/>'; output;
5756      +			string = '</Style>'; output;
5757      +
5758      +			/* column header outline style with rotated text vertically aligned to the center */
5759      +			string = '<Style ss:ID="ColumnOutlineRotateCtr" ss:Parent="ColumnOutline">'; output;
5760      +			string = '<Alignment ss:Horizontal="Center" ss:Vertical="Center" ss:Rotate="90" ss:WrapText="1"/>'; output;
5761      +			string = '</Style>'; output;
5762      +
5763      +			/* data header row style */
5764      +			string = '<Style ss:ID="DataHeader">'; output;
5765      +			string = '<Alignment ss:Horizontal="Left" ss:Vertical="Center" ss:WrapText="0"/>'; output;	
5766      +			string = '<Interior ss:Color="#C0C0C0" ss:Pattern="Solid"/>'; output;
5767      +			string = '<Borders>'; output;
5768      +			string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5769      +    		string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5770      +    		string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5771      +    		string = '<Border ss:Position="Top" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5772      +			string = '</Borders>'; output;
5773      +			string = '<Font ss:Size="10" ss:Bold="1"/>'; output;
5774      +			string = '</Style>'; output;
5775      +
5776      +			/* simple table style */
5777      +			string = '<Style ss:ID="Table">'; output;
5778      +			string = '<Alignment ss:Horizontal="Center" ss:Vertical="Center" ss:WrapText="0"/>'; output;
5779      +			string = '<Borders>'; output;
5780      +			string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5781      +			string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5782      +	    	string = '<Border ss:Position="Top" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5783      +			string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5784      +			string = '</Borders>'; output;
5785      +	   		string = '<Font ss:Size="10"/>'; output;
5786      +			string = '</Style>'; output;
5787      +
5788      +			/* data parent style */
5789      +			string = '<Style ss:ID="Data">'; output;
5790      +			string = '<Alignment ss:Vertical="Top" ss:WrapText="0"/>'; output;
5791      +			string = '<Borders>'; output;
5792      +			string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5793      +			string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5794      +			string = '</Borders>'; output;
5795      +			string = '</Style>'; output;
5796      +
5797      +			/* data style with word-wrapping */
5798      +			string = '<Style ss:ID="DataWrap" ss:Parent="Data">'; output;
5799      +			string = '<Alignment ss:Vertical="Top" ss:WrapText="1"/>'; output;
5800      +			string = '</Style>'; output;
5801      +
116                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

5802      +			/* data style with right-alignment */
5803      +			string = '<Style ss:ID="DataRight" ss:Parent="Data">'; output;
5804      +			string = '<Alignment ss:Horizontal="Right" ss:Vertical="Top" ss:WrapText="0"/>'; output;
5805      +			string = '</Style>'; output;
5806      +
5807      +			/* highlighted data style with right-alignment */
5808      +			string = '<Style ss:ID="DataRightHighlight" ss:Parent="DataRight">'; output;
5809      +			string = '<Interior ss:Color="#CCCCFF" ss:Pattern="Solid"/>'; output;
5810      +			string = '</Style>'; output;  
5811      +
5812      +			/* data style with center-alignment */
5813      +			string = '<Style ss:ID="DataCenter" ss:Parent="Data">'; output;
5814      +			string = '<Alignment ss:Horizontal="Center" ss:Vertical="Top" ss:WrapText="0"/>'; output;
5815      +			string = '</Style>'; output;
5816      +
5817      +			/* zero decimal place number format style */
5818      +			string = '<Style ss:ID="DataDec0" ss:Parent="Data">'; output;
5819      +			string = '<Alignment ss:Horizontal="Right" ss:Vertical="Top"/>'; output;
5820      +			string = '<NumberFormat ss:Format="0"/>'; output;
5821      +			string = '</Style>'; output;
5822      +
5823      +			/* centered zero decimal place number format style */
5824      +			string = '<Style ss:ID="DataDec0Center" ss:Parent="DataDec0">'; output;
5825      +			string = '<Alignment ss:Horizontal="Center" ss:Vertical="Top" ss:WrapText="0"/>'; output;
5826      +			string = '</Style>'; output;
5827      +
5828      +			/* highlighted zero decimal place number format style */
5829      +			string = '<Style ss:ID="DataDec0Highlight" ss:Parent="DataDec0">'; output;
5830      +			string = '<Interior ss:Color="#CCCCFF" ss:Pattern="Solid"/>'; output;
5831      +			string = '</Style>'; output;  
5832      +
5833      +			/* one decimal place number format style */
5834      +			string = '<Style ss:ID="DataDec1" ss:Parent="Data">'; output;
5835      +			string = '<Alignment ss:Horizontal="Right" ss:Vertical="Top"/>'; output;
5836      +			string = '<NumberFormat ss:Format="0.0"/>';	output;
5837      +			string = '</Style>'; output;
5838      +
5839      +			/* centered one decimal place number format style */
5840      +			string = '<Style ss:ID="DataDec1Center" ss:Parent="DataDec1">'; output;
5841      +			string = '<Alignment ss:Horizontal="Center" ss:Vertical="Top" ss:WrapText="0"/>'; output;
5842      +			string = '</Style>'; output;
5843      +
5844      +			/* highlighted one decimal place number format style */
5845      +			string = '<Style ss:ID="DataDec1Highlight" ss:Parent="DataDec1">'; output;
5846      +			string = '<Interior ss:Color="#CCCCFF" ss:Pattern="Solid"/>'; output;
5847      +			string = '</Style>'; output; 
5848      +
5849      +			/* two decimal place number format style */
5850      +			string = '<Style ss:ID="DataDec2" ss:Parent="Data">'; output;
5851      +			string = '<Alignment ss:Horizontal="Right" ss:Vertical="Top"/>'; output;
5852      +			string = '<NumberFormat ss:Format="0.00"/>';	output;
5853      +			string = '</Style>'; output;
5854      +
5855      +			/* centered two decimal place number format style */
5856      +			string = '<Style ss:ID="DataDec2Center" ss:Parent="DataDec2">'; output;
5857      +			string = '<Alignment ss:Horizontal="Center" ss:Vertical="Top" ss:WrapText="0"/>'; output;
5858      +			string = '</Style>'; output;
5859      +
117                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

5860      +			/* highlighted two decimal place number format style */
5861      +			string = '<Style ss:ID="DataDec2Highlight" ss:Parent="DataDec2">'; output;
5862      +			string = '<Interior ss:Color="#CCCCFF" ss:Pattern="Solid"/>'; output;
5863      +			string = '</Style>'; output; 
5864      +
5865      +			/* scientific notation number format style */
5866      +			string = '<Style ss:ID="DataSN" ss:Parent="Data">'; output;
5867      +			string = '<Alignment ss:Horizontal="Right" ss:Vertical="Top"/>'; output;
5868      +			string = '<NumberFormat ss:Format="0.00E+00"/>';	output;
5869      +			string = '</Style>'; output;
5870      +
5871      +			/* centered scientific notation number format style */
5872      +			string = '<Style ss:ID="DataSNCenter" ss:Parent="DataSN">'; output;
5873      +			string = '<Alignment ss:Horizontal="Center" ss:Vertical="Top" ss:WrapText="0"/>'; output;
5874      +			string = '</Style>'; output;
5875      +
5876      +			/* highlighted scientific notation number format style */
5877      +			string = '<Style ss:ID="DataSNHighlight" ss:Parent="DataSN">'; output;
5878      +			string = '<Interior ss:Color="#CCCCFF" ss:Pattern="Solid"/>'; output;
5879      +			string = '</Style>'; output; 
5880      +
5881      +			/* percent number format style */
5882      +			string = '<Style ss:ID="DataPct" ss:Parent="Data">'; output;
5883      +			string = '<Alignment ss:Horizontal="Right" ss:Vertical="Top"/>'; output;
5884      +			string = '<NumberFormat ss:Format="0%"/>';	output;
5885      +			string = '</Style>'; output;
5886      +
5887      +			/* highlighted percent number format style */
5888      +			string = '<Style ss:ID="DataPctHighlight" ss:Parent="DataPct">'; output;
5889      +			string = '<Interior ss:Color="#CCCCFF" ss:Pattern="Solid"/>'; output;
5890      +			string = '</Style>'; output;
5891      +
5892      +			/* data style for bottom row */
5893      +			string = '<Style ss:ID="DataBottom" ss:Parent="Data">'; output;
5894      +			string = '<Borders>'; output;
5895      +			string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5896      +			string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5897      +			string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5898      +			string = '</Borders>'; output;
5899      +			string = '</Style>'; output;  
5900      +
5901      +			/* data style with word-wrapping for bottom row */
5902      +			string = '<Style ss:ID="DataWrapBottom" ss:Parent="DataWrap">'; output;
5903      +			string = '<Borders>'; output;
5904      +			string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5905      +			string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5906      +			string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5907      +			string = '</Borders>'; output;
5908      +			string = '</Style>'; output;  
5909      +
5910      +			/* data style with right-alignment for the bottom row */
5911      +			string = '<Style ss:ID="DataRightBottom" ss:Parent="DataRight">'; output;
5912      +			string = '<Borders>'; output;
5913      +			string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5914      +			string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5915      +			string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5916      +			string = '</Borders>'; output;
5917      +			string = '</Style>'; output;
118                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

5918      +
5919      +			/* highlighted data style with right-alignment for the bottom row */
5920      +			string = '<Style ss:ID="DataRightHighlightBottom" ss:Parent="DataRightHighlight">'; output;
5921      +			string = '<Borders>'; output;
5922      +			string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5923      +			string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5924      +			string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5925      +			string = '</Borders>'; output;
5926      +			string = '</Style>'; output; 
5927      +
5928      +			/* data style with center-alignment for the bottom row */
5929      +			string = '<Style ss:ID="DataCenterBottom" ss:Parent="DataCenter">'; output;
5930      +			string = '<Borders>'; output;
5931      +			string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5932      +			string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5933      +			string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5934      +			string = '</Borders>'; output;
5935      +			string = '</Style>'; output; 
5936      +
5937      +			/* zero decimal place number format style for bottom row */
5938      +			string = '<Style ss:ID="DataDec0Bottom" ss:Parent="DataDec0">'; output;
5939      +			string = '<Borders>'; output;
5940      +			string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5941      +			string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5942      +			string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5943      +			string = '</Borders>'; output;
5944      +			string = '</Style>'; output; 
5945      +
5946      +			/* centered zero decimal place number format style for bottom row */
5947      +			string = '<Style ss:ID="DataDec0CenterBottom" ss:Parent="DataDec0Center">'; output;
5948      +			string = '<Borders>'; output;
5949      +			string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5950      +			string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5951      +			string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5952      +			string = '</Borders>'; output;
5953      +			string = '</Style>'; output; 
5954      +
5955      +			/* highlighted zero decimal place number format style for bottom row */
5956      +			string = '<Style ss:ID="DataDec0HighlightBottom" ss:Parent="DataDec0Highlight">'; output;
5957      +			string = '<Borders>'; output;
5958      +			string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5959      +			string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5960      +			string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5961      +			string = '</Borders>'; output;
5962      +			string = '</Style>'; output; 
5963      +
5964      +			/* one decimal place number format style for bottom row */
5965      +			string = '<Style ss:ID="DataDec1Bottom" ss:Parent="DataDec1">'; output;
5966      +			string = '<Borders>'; output;
5967      +			string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5968      +			string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5969      +			string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5970      +			string = '</Borders>'; output;
5971      +			string = '</Style>'; output; 
5972      +
5973      +			/* centered one decimal place number format style for bottom row */
5974      +			string = '<Style ss:ID="DataDec1CenterBottom" ss:Parent="DataDec1Center">'; output;
5975      +			string = '<Borders>'; output;
119                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

5976      +			string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5977      +			string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5978      +			string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5979      +			string = '</Borders>'; output;
5980      +			string = '</Style>'; output; 
5981      +
5982      +			/* highlighted one decimal place number format style for bottom row */
5983      +			string = '<Style ss:ID="DataDec1HighlightBottom" ss:Parent="DataDec1Highlight">'; output;
5984      +			string = '<Borders>'; output;
5985      +			string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5986      +			string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5987      +			string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5988      +			string = '</Borders>'; output;
5989      +			string = '</Style>'; output; 
5990      +
5991      +			/* two decimal place number format style for bottom row */
5992      +			string = '<Style ss:ID="DataDec2Bottom" ss:Parent="DataDec2">'; output;
5993      +			string = '<Borders>'; output;
5994      +			string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5995      +			string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5996      +			string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
5997      +			string = '</Borders>'; output;
5998      +			string = '</Style>'; output; 
5999      +
6000      +			/* centered two decimal place number format style for bottom row */
6001      +			string = '<Style ss:ID="DataDec2CenterBottom" ss:Parent="DataDec2Center">'; output;
6002      +			string = '<Borders>'; output;
6003      +			string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
6004      +			string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
6005      +			string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
6006      +			string = '</Borders>'; output;
6007      +			string = '</Style>'; output; 
6008      +
6009      +			/* highlighted two decimal place number format style for bottom row */
6010      +			string = '<Style ss:ID="DataDec2HighlightBottom" ss:Parent="DataDec2Highlight">'; output;
6011      +			string = '<Borders>'; output;
6012      +			string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
6013      +			string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
6014      +			string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
6015      +			string = '</Borders>'; output;
6016      +			string = '</Style>'; output; 
6017      +
6018      +			/* scientific notation number format style for bottom row */
6019      +			string = '<Style ss:ID="DataSNBottom" ss:Parent="DataSN">'; output;
6020      +			string = '<Borders>'; output;
6021      +			string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
6022      +			string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
6023      +			string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
6024      +			string = '</Borders>'; output;
6025      +			string = '</Style>'; output; 
6026      +
6027      +			/* centered scientific notation number format style for bottom row */
6028      +			string = '<Style ss:ID="DataSNCenterBottom" ss:Parent="DataSNCenter">'; output;
6029      +			string = '<Borders>'; output;
6030      +			string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
6031      +			string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
6032      +			string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
6033      +			string = '</Borders>'; output;
120                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

6034      +			string = '</Style>'; output; 
6035      +
6036      +			/* highlighted scientific notation number format style for bottom row */
6037      +			string = '<Style ss:ID="DataSNHighlightBottom" ss:Parent="DataSNHighlight">'; output;
6038      +			string = '<Borders>'; output;
6039      +			string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
6040      +			string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
6041      +			string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
6042      +			string = '</Borders>'; output;
6043      +			string = '</Style>'; output; 
6044      +
6045      +			/* percent number format style for bottom row */
6046      +			string = '<Style ss:ID="DataPctBottom" ss:Parent="DataPct">'; output;
6047      +			string = '<Borders>'; output;
6048      +			string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
6049      +			string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
6050      +			string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
6051      +			string = '</Borders>'; output;
6052      +			string = '</Style>'; output;
6053      +
6054      +			/* highlighted percent number format style for bottom row */
6055      +			string = '<Style ss:ID="DataPctHighlightBottom" ss:Parent="DataPctHighlight">'; output;
6056      +			string = '<Borders>'; output;
6057      +			string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
6058      +			string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
6059      +			string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
6060      +			string = '</Borders>'; output;
6061      +			string = '</Style>'; output;
6062      +
6063      +			/* for AE MedDRA report cover page */
6064      +
6065      +			/* gray */
6066      +			string = '<Style ss:ID="Gray" ss:Parent="DataCenterBottom">'; output;
6067      +			string = '<Font ss:Size="8" ss:Color="#808080"/>'; output;
6068      +			string = '<Interior ss:Color="#808080" ss:Pattern="Solid"/>'; output;
6069      +			string = '</Style>'; output; 
6070      +
6071      +			/* red */
6072      +			string = '<Style ss:ID="Red" ss:Parent="DataCenterBottom">'; output;
6073      +			string = '<Font ss:Size="8" ss:Color="#FF0000"/>'; output;
6074      +			string = '<Interior ss:Color="#FF0000" ss:Pattern="Solid"/>'; output;
6075      +			string = '</Style>'; output; 
6076      +
6077      +			/* peach */
6078      +			string = '<Style ss:ID="Peach" ss:Parent="DataCenterBottom">'; output;
6079      +			string = '<Font ss:Size="8" ss:Color="#FFCC99"/>'; output;
6080      +			string = '<Interior ss:Color="#FFCC99" ss:Pattern="Solid"/>'; output;
6081      +			string = '</Style>'; output; 
6082      +
6083      +			/* bold red text */
6084      +			string = '<Style ss:ID="BoldRedText" ss:Parent="DataDec1Bottom">'; output;
6085      +			string = '<Font ss:Size="8" ss:Color="#FF0000" ss:Bold="1"/>'; output;
6086      +			string = '</Style>'; output; 
6087      +
6088      +			/* grouping and subsetting styles with 10 pt font */
6089      +			string = '<Style ss:ID="GS_BTLRB">'; output;
6090      +			string = '<Alignment ss:Vertical="Top" ss:WrapText="1"/>'; output;
6091      +	   		string = '<Font ss:Size="10"/>'; output;
121                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

6092      +			string = '<Borders>'; output;
6093      +			string = '<Border ss:Position="Top" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
6094      +			string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
6095      +			string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
6096      +			string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
6097      +			string = '</Borders>'; output;
6098      +			string = '</Style>'; output;
6099      +
6100      +			/* centered grouping and subsetting styles with 10 pt font */
6101      +			string = '<Style ss:ID="GSC_BTLRB">'; output;
6102      +			string = '<Alignment ss:Vertical="Top" ss:Horizontal="Center" ss:WrapText="1"/>'; output;
6103      +	   		string = '<Font ss:Size="10"/>'; output;
6104      +			string = '<Borders>'; output;
6105      +			string = '<Border ss:Position="Top" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
6106      +			string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
6107      +			string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
6108      +			string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
6109      +			string = '</Borders>'; output;
6110      +			string = '</Style>'; output;
6111      +
6112      +			string = '<Style ss:ID="GS_BTLR">'; output;
6113      +			string = '<Alignment ss:Vertical="Top" ss:WrapText="1"/>'; output;
6114      +	   		string = '<Font ss:Size="10"/>'; output;
6115      +			string = '<Borders>'; output;
6116      +			string = '<Border ss:Position="Top" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
6117      +			string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
6118      +			string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
6119      +			string = '</Borders>'; output;
6120      +			string = '</Style>'; output;
6121      +
6122      +			string = '<Style ss:ID="GS_BLR">'; output;
6123      +			string = '<Alignment ss:Vertical="Top" ss:WrapText="1"/>'; output;
6124      +	   		string = '<Font ss:Size="10"/>'; output;
6125      +			string = '<Borders>'; output;
6126      +			string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
6127      +			string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
6128      +			string = '</Borders>'; output;
6129      +			string = '</Style>'; output;
6130      +
6131      +			string = '<Style ss:ID="GS_BLRB">'; output;
6132      +			string = '<Alignment ss:Vertical="Top" ss:WrapText="1"/>'; output;
6133      +	   		string = '<Font ss:Size="10"/>'; output;
6134      +			string = '<Borders>'; output;
6135      +			string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
6136      +			string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
6137      +			string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>'; output;
6138      +			string = '</Borders>'; output;
6139      +			string = '</Style>'; output;
6140      +
6141      +
6142      +		string = '</Styles>'; output;
6143      +	run;
6144      +
6145      +%mend styles;  
6146      +
6147      +
6148      +/* makes a header with a title (large font, bold, italic) and subtitular notes */
6149      +/* or footnotes */
122                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

6150      +/* from a given dataset */
6151      +/* depending on the value of the group variable */
6152      +%macro wsheader(dsin,dsout);
6153      +
6154      +	data &dsout.;
6155      +		set &dsin. end=eof;
6156      +		length string $&strlen. style $30;
6157      +		by group notsorted;
6158      +
6159      +		if first.group then do;
6160      +			string = '<Row/>'; output;
6161      +		end;
6162      +
6163      +		if group = 'title' then style = 'Header';
6164      +		else if group = 'subtitle' then style = 'SubHeader';
6165      +		else style = 'Default';
6166      +
6167      +		string = '<Row>'; output;
6168      +		string = '<Cell ss:StyleID="'||trim(style)||'">'||
6169      +                 '<Data ss:Type="String">'||trim(data)||'</Data></Cell>'; output;
6170      +		string = '</Row>'; output;
6171      +
6172      +		if eof then do;
6173      +			string = '<Row/>'; output;
6174      +		end;
6175      +
6176      +		keep string;
6177      +	run;
6178      +
6179      +%mend wsheader;
6180      +
6181      +
6182      +/* create XML formatted data from a dataset */
6183      +%macro wsdata(ds);
6184      +
6185      +	%if not %symexist(fmt) %then %let fmt = N;
6186      +	%if &fmt. = N %then %do;
6187      +		data &ds._ind;
6188      +			do i = 1 to &nobs.;
6189      +				header = 0; output;
6190      +			end;
6191      +			drop i;
6192      +		run;
6193      +	%end;
6194      +
6195      +	data ws_&ds._data(keep=string);
6196      +		set &ds. end=eof;
6197      +		set &ds._ind;
6198      +		length string $&strlen. style $30 type $6;
6199      +
6200      +		
6201      +		/* loop through each variable in the dataset */
6202      +		%let dsid = %sysfunc(open(&ds.));
6203      +		/* format data header rows */
6204      +		if header = 1 then do;
6205      +			string = '<Row ss:Height="18">'; output; 
6206      +			string = '<Cell ss:MergeAcross="'||trim(put(%eval(&nvars.-1),8.-L))||
6207      +                     '" ss:StyleID="DataHeader"><Data ss:Type="String">'||
123                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

6208      +	                 trim(%sysfunc(varname(&dsid.,1)))||'</Data></Cell>';
6209      +			output;
6210      +			string = '</Row>'; output;
6211      +		end;
6212      +		/* format ordinary data rows */
6213      +		else do;
6214      +			string = '<Row>'; output; 
6215      +
6216      +			%do i = 1 %to %sysfunc(attrn(&dsid.,nvars));
6217      +				/* determine variable data type */
6218      +				%if %sysfunc(vartype(&dsid.,&i.)) = C %then 
6219      +					type = 'String';
6220      +				%else 
6221      +					type = 'Number';
6222      +					;
6223      +
6224      +				/* initialize the missing number indicator to 0 */
6225      +				miss_num = 0;
6226      +
6227      +				/* determine the appropriate style */
6228      +				%let varname = %sysfunc(varname(&dsid.,&i.));
6229      +
6230      +				style = 'Data'; 
6231      +				if type = 'Number' then do;
6232      +					if index("&varname",'pct') then 
6233      +						style = trim(style)||'Dec1';
6234      +					else if "&varname." in ('rd' 'rr' 'ort' 'fd') then
6235      +						style = trim(style)||'Dec1';
6236      +					else if substr("&varname.",1,min(length("&varname."),2)) in ('rd' 'rr' 'or') 
6237      +					or "&varname." = 'p_value' then  
6238      +						style = trim(style)||'Dec2';
6239      +					/* scientific notation style for extremely large numbers */
6240      +					if (&varname. > 10**6) then
6241      +						style = 'DataSN';
6242      +					/* style for missing numeric data (display a dot) */
6243      +					if (missing(&varname.)) then do;
6244      +						miss_num = 1;
6245      +						type = 'String';
6246      +						style = 'DataRight';
6247      +					end;
6248      +				end;
6249      +
6250      +
6251      +				%if &fmt. = Y %then %do;
6252      +					if upcase("&varname.") = upcase("&sort.") then style = trim(style)||'Highlight';
6253      +				%end;
6254      +				if eof then style = trim(style)||'Bottom';
6255      +
6256      +				string = '<Cell ss:StyleID="'||trim(style)||'">'||
6257      +                          ifc(not (type='String' and missing(&varname) and not miss_num),
6258      +                              '<Data ss:Type="'||compress(type)||'">'||
6259      +		                      %sysfunc(ifc(&fmt. = Y and &i. = 1,%str('     '||),))
6260      +                              ifc(not miss_num,trim(left(&varname.)),'.')||'</Data>','')||
6261      +                         '</Cell>';
6262      +				output;
6263      +
6264      +			%end; 
6265      +
124                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

6266      +			string = '</Row>'; output;
6267      +		end;
6268      +		%let rc = %sysfunc(close(&dsid.));
6269      +
6270      +	run; 
6271      +
6272      +	%if &fmt. = N %then %do;
6273      +		proc datasets library=work nolist nodetails; delete &ds._ind; quit;
6274      +	%end;
6275      +
6276      +%mend wsdata;
6277      +
6278      +
6279      +/* get the count of XML rows prior to the observation where ds = <stop> */
6280      +/* or in the entire dataset */
6281      +%macro ws_rowcount(ds,stop);
6282      +
6283      +	data _null_;
6284      +		set &ds. end=eof;
6285      +		retain row_count;
6286      +		if ds = "&stop." or eof then do; 
6287      +			call symputx("&ds._firstrow",row_count + 1);
6288      +			%if %symexist(&ds._nobs) %then %do;
6289      +				call symputx("&ds._lastrow",row_count + &&&ds._nobs.);
6290      +			%end;
6291      +		end;
6292      +		if index(string,'<Row') then row_count = sum(row_count,1);
6293      +	run;  
6294      +
6295      +%mend ws_rowcount;
6296      +
6297      +
6298      +/* convert a SAS dataset into a dataset amenable to being converted into XML */
6299      +/* changes each variable into a new row and assigns row numbers and datatypes */
6300      +%macro annotate(dsin,dsout);
6301      +
6302      +	data &dsout.;
6303      +		set &dsin. end=eof;
6304      +		%xml_tag_def;
6305      +		%xml_init;
6306      +
6307      +		Row = _n_;
6308      +
6309      +		if eof then bottom = 1;
6310      +
6311      +		%let dsid = %sysfunc(open(&dsin.));
6312      +		%do ai = 1 %to %sysfunc(attrn(&dsid.,nvars));
6313      +			%let var = %sysfunc(varname(&dsid.,&ai.));
6314      +			varname = lowcase("&var.");
6315      +			Data = left(&var.);
6316      +			%if %sysfunc(vartype(&dsid.,&ai.)) = C %then 
6317      +				Type = 'String';
6318      +			%else 
6319      +				Type = 'Number';
6320      +				;
6321      +			output;
6322      +		%end;
6323      +		%let rc = %sysfunc(close(&dsid.));
125                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

6324      +
6325      +		keep Row Data Type varname bottom
6326      +             Height Index MergeAcross MergeDown StyleID Formula Comment Name ArrayRange;
6327      +	run;
6328      +
6329      +%mend annotate;
6330      +
6331      +
6332      +/* convert a dataset with XML tags stored in tag variables into XML */
6333      +%macro markup(dsin,dsout);
6334      +
6335      +	data &dsout.;
6336      +		set &dsin.;
6337      +		by row notsorted;
6338      +		length string $&strlen.;
6339      +
6340      +		if first.row then do;
6341      +			string = '<Row'||ifc(not missing(Height),' ss:Height="'||trim(left(Height))||'"','')||'>'; output;
6342      +		end;
6343      +
6344      +		string = '<Cell'|| 	
6345      +		         ifc(Index > 0,' ss:Index="'||trim(left(Index))||'"','')||
6346      +		         ifc(MergeAcross > 0,' ss:MergeAcross="'||trim(left(MergeAcross))||'"','')||	
6347      +		         ifc(MergeDown > 0,' ss:MergeDown="'||trim(left(MergeDown))||'"','')||
6348      +		         ifc(not missing(ArrayRange),' ss:ArrayRange="'||trim(left(ArrayRange))||'"','')||
6349      +		         ifc(not missing(StyleID),' ss:StyleID="'||trim(left(StyleID))||'"','')||
6350      +                 ifc(not missing(Formula),' ss:Formula="'||trim(left(Formula))||'"','')||'>'||
6351      +				 ifc(not missing(Data),'<Data'||ifc(not missing(Type),' ss:Type="'||trim(left(Type))||'"',' ss:Type="String"')||'>'||trim(Data)||'</Data>','')||
6352      +				 ifc(not missing(Comment),'<Comment><ss:Data xmlns="http://www.w3.org/TR/REC-html40">'||trim(left(Comment))||'</ss:Data></Comment> ','')||
6353      +				 ifc(not missing(Name),'<NamedCell ss:Name="'||trim(left(Name))||'"/>','')||
6354      +                 '</Cell>';
6355      +
6356      +		/* get rid of extraneous spaces */
6357      +		string = tranwrd(tranwrd(compbl(string),' >','>'),'> <','><');
6358      +
6359      +		/* replace space indicator string '~!' with a space */
6360      +		string = tranwrd(string,'~!',' ');
6361      +
6362      +		output;
6363      +
6364      +
6365      +		if last.row then do;
6366      +			string = '</Row>'; output;
6367      +		end;
6368      +
6369      +		keep string;
6370      +	run;
6371      +
6372      +%mend markup; 
6373      +
6374      +
6375      +/* set up XML row, cell, and data tag variable types and lengths */
6376      +%macro xml_tag_def(defdata=Y);
6377      +
6378      +	length Row 8. varname $32;
6379      +
6380      +	%if &defdata. = Y %then %do;
6381      +		length Data $1000 Type $6;
126                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

6382      +	%end;
6383      +
6384      +	length Formula $500 Height 8. Index 8. MergeAcross 8. MergeDown 8. 
6385      +           StyleID $35 Comment $250 Name $35 ArrayRange $12;
6386      +
6387      +%mend xml_tag_def;
6388      +
6389      +
6390      +/* initialize XML tags to missing */
6391      +%macro xml_init(defdata=Y);
6392      +
6393      +	%if &defdata. = Y %then %do;
6394      +		call missing(Data,Type);
6395      +	%end;
6396      +
6397      +	call missing(Row,varname,Formula,Height,Index,MergeAcross,MergeDown,StyleID,Comment,Name,ArrayRange);
6398      +
6399      +%mend xml_init;
6400      +
6401      +
6402      +/*****************************/
6403      +/* XML STYLE CREATION MACROS */
6404      +/*****************************/
6405      +
6406      +/* declarations for the style information variables */
6407      +%macro xml_style_dcl;
6408      +
6409      +	length ID $50 
6410      +           HA $10 VA $10 Indent 8. Wrap 8. Rotate 8.
6411      +           BT 8. BL 8. BR 8. BB 8. BWt 8. BLS $20
6412      +           IntClr $6 
6413      +		   FontSize 8. FontColor $8 Bold 8. Italic 8.
6414      +           NumFmt $75
6415      +           ;
6416      +	call missing(ID,HA,VA,Indent,Wrap,Rotate,BT,BL,BR,BB,BWt,BLS,FontSize,FontColor,Bold,Italic,NumFmt,IntClr);
6417      +
6418      +%mend;
6419      +
6420      +/* take style information from dataset ds and make an XML style definition */
6421      +%macro xml_style_markup(dsin,dsout);
6422      +
6423      +	data &dsout.;
6424      +		set &dsin.;
6425      +		length string $&strlen.;
6426      +
6427      +		string = '<Style ss:ID="'||trim(left(ID))||'">'; output;
6428      +
6429      +		if (HA ne '' or VA ne '' or Indent or Wrap or Rotate) then do;
6430      +			string = '<Alignment '|| 
6431      +                     ifc(HA ne '','ss:Horizontal="'||trim(left(HA))||'" ','')||
6432      +                     ifc(VA ne '','ss:Vertical="'||trim(left(VA))||'" ','')|| 
6433      +                     ifc(Indent ne .,'ss:Indent="'||trim(put(Indent,8. -l))||'" ','')||
6434      +                     ifc(Wrap ne .,'ss:WrapText="'||trim(put(Wrap,8. -l))||'" ','')||
6435      +					 ifc(Rotate ne .,'ss:Rotate="'||trim(put(Rotate,8. -l))||'"','')||
6436      +                     '/>'; output;
6437      +		end;
6438      +
6439      +		if (BT or BL or BR or BB) then do;
127                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

6440      +			string = '<Borders>'; output;
6441      +			if BT then do; string = '<Border ss:Position="Top" '||
6442      +                                    ifc(BLS ne '','ss:LineStyle="'||trim(BLS)||'" ','ss:LineStyle="Continuous" ')||
6443      +                                    ifc(BWt,' ss:Weight="'||trim(put(BWt,8. -l))||'"','')||'/>'; output; end;
6444      +			if BL then do; string = '<Border ss:Position="Left" '||
6445      +                                    ifc(BLS ne '','ss:LineStyle="'||trim(BLS)||'" ','ss:LineStyle="Continuous" ')||
6446      +                                    ifc(BWt,' ss:Weight="'||trim(put(BWt,8. -l))||'"','')||'/>'; output; end;
6447      +			if BR then do; string = '<Border ss:Position="Right" '||
6448      +                                    ifc(BLS ne '','ss:LineStyle="'||trim(BLS)||'" ','ss:LineStyle="Continuous" ')||
6449      +                                    ifc(BWt,' ss:Weight="'||trim(put(BWt,8. -l))||'"','')||'/>'; output; end;
6450      +			if BB then do; string = '<Border ss:Position="Bottom" '||
6451      +                                    ifc(BLS ne '','ss:LineStyle="'||trim(BLS)||'" ','ss:LineStyle="Continuous" ')||
6452      +                                    ifc(BWt,' ss:Weight="'||trim(put(BWt,8. -l))||'"','')||'/>'; output; end;
6453      +			string = '</Borders>'; output;
6454      +		end;
6455      +
6456      +		if (FontSize ne . or FontColor ne '' or Bold or Italic) then do;
6457      +			string = '<Font '||	
6458      +                     ifc(FontSize ne .,'ss:Size="'||trim(put(FontSize,8. -l))||'" ','')||
6459      +                     ifc(FontColor ne '','ss:Color="#'||trim(FontColor)||'" ','')||
6460      +                     ifc(Bold,'ss:Bold="1" ','')||
6461      +                     ifc(Italic,'ss:Italic="1"','')||
6462      +                     '/>'; output;
6463      +		end;
6464      +
6465      +		if IntClr ne '' then do;
6466      +			string = '<Interior ss:Color="#'||trim(left(IntClr))||'" ss:Pattern="Solid"/>'; output;
6467      +		end;
6468      +
6469      +		if NumFmt ne '' then do;
6470      +			string = '<NumberFormat ss:Format="'||trim(left(NumFmt))||'"/>'; output;
6471      +		end;
6472      +
6473      +		string = '</Style>'; output;
6474      +
6475      +		keep ID string;
6476      +	run;
6477      +
6478      +	data &dsout.;
6479      +		set &dsout.;
6480      +		string = tranwrd(compbl(string),' />','/>');
6481      +	run;
6482      +
6483      +%mend xml_style_markup;
NOTE: %INCLUDE (level 1) ending.
SYMBOLGEN:  Macro variable OUTPATH resolves to /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp2
6484       
6485       
6486       /* YL Create input file *******/
6487       	%let aemedout =%str(&outpath./MedDRA at a Glance Analysis Panel.xls);	
6488       	%let errout =%str(&outpath./MedDRA at a Glance Error Summary.xls);
SYMBOLGEN:  Macro variable OUTPATH resolves to /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp2
6489       %put yyyy=&outpath.;
SYMBOLGEN:  Macro variable OUTPATH resolves to /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp2
yyyy=/sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp2
6490       %put yyyyyyyy=&errout;
SYMBOLGEN:  Macro variable ERROUT resolves to /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp2/MedDRA at a Glance Error Summary.xls
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
128                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

yyyyyyyy=/sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp2/MedDRA at a Glance Error Summary.xls
6491       
6492       libname dict "&meddradict ";
SYMBOLGEN:  Macro variable MEDDRADICT resolves to /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp3
NOTE: Libref DICT was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp3
6493       
6494       /*
6495       
6496       data meddra;
6497        set dict.dict_meddra(where=(dictver='14.1'));
6498        AEDECOD=PFTERM;
6499        AEBODSYS=SOCTERM;
6500         rename 	
6501                SOCTERM=SOC_NAME
6502       	      HLGTERM =HLGT_NAME
6503                HLTERM=HLT_NAME
6504       	      PFTERM =PT_NAME
6505                LLTERM=LLT_NAME
6506                PRISOCFLG=primary_soc_fg ;
6507        run;
6508       
6509       
6510       data meddra.mdhier_14_1;
6511        set meddra;
6512        keep DICTVER AEDECOD	AEBODSYS SOC_NAME HLGT_NAME 	HLT_NAME PT_NAME  LLT_NAME primary_soc_fg;
6513       
6514       run;
6515       
6516       
6517       
6518        proc sql;
6519        create table allae as
6520        select AEDECOD
6521        from inlib.ae
6522       ;
6523       quit;
6524       
6525       proc sort data=allae nodupkey; by AEDECOD;run;
6526       
6527       proc sql ;
6528        create table mdhier_14_1x as
6529        select  DICTVER ,a.AEDECOD,	AEBODSYS, SOC_NAME, HLGT_NAME ,	HLT_NAME, PT_NAME, LLT_NAME,primary_soc_fg
6530        from  meddra.mdhier_14_1 as a , allae as b
6531        where a.AEDECOD=b.AEDECOD;
6532        quit;
6533       
6534       proc sort data=mdhier_14_1x out=meddra.mdhier_14_1x  noduprecs; by AEDECOD ;run;
6535       
6536       
6537       data dme;
6538        set meddra.mdhier_14_1x ;
6539        keep LLT_NAME;
6540       proc sort noduprecs;by LLT_NAME;
6541       run;
6542       
6543       data meddra.dme;
129                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

6544        set dme;
6545        VER='14.1';
6546        DME='Y';
6547       
6548       proc sql;
6549        create table allae as
6550        select unique aedecod
6551        from inlib.ae;
6552       quit;
6553       
6554       proc sql ;
6555        create table allaex as
6556        select  *
6557        from  meddra.mdhier_14_1 as a , allae as b
6558        where a.AEDECOD=b.AEDECOD;
6559        quit;
6560       */
6561       /* the minoperator option allows the use of the in operator by the macro language */
6562       options minoperator;
6563       options missing='';	
6564       
6565       /* determine the run location by looking for the SL-set run_location macro variable */
6566       %sysfunc(ifc(not %symexist(run_location),%nrstr(%let run_location = local;),));
6567       %put RUN LOCATION: &run_location.;
SYMBOLGEN:  Macro variable RUN_LOCATION resolves to local
RUN LOCATION: local
6568       
6569       
6570       %macro params;
6571       
6572       	/* program parameters if the program is run locally */
6573       	%if %upcase(&run_location.) = LOCAL %then %do;
6574       
6575       		data macrovar; set sashelp.vmacro(keep=scope name where=(scope='GLOBAL' & name ne 'RUN_LOCATION')); run;
6576       
6577            /* YL ERROR*/
6578       		/*data _null_; set macrovar; call execute('%symdel '||trim(left(name))||';');	run;
6579       		proc datasets kill; quit;
6580               */
6581       		%global panel_title panel_desc;
6582       		%let panel_title = MedDRA at a Glance;
6583       		%let panel_desc = ;
6584       
6585       		%global saspath utilpath;
6586       	*	%let saspath = ;
6587       	*	%let utilpath = ;
6588       
6589           *  libname inlib "&studypath.";
6590           *  libname outlib "&outpath ";
6591            %put yyyy=&outpath.;
6592       /*		%global  aemedout errout;
6593       		*%let outpath = ;
6594       
6595       		%let aemedout =%str(&outpath./MedDRA_Analysis_Panel.xls);	* MedDRA_ at a Glance Analysis Panel.xls;
6596       		%let errout =%str(&outpath./MedDRA_Error_Summary.xls);
6597       */
6598       
6599       
130                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

6600       	 *	%let studypath = ;
6601           * libname inlib "&studypath.";
6602       
6603       		/* retrieve the required datasets */
6604       		data ae; set inlib.ae; run;
6605       		data dm; set inlib.dm; run;
6606       		data ex; set inlib.ex; run;
6607       
6608       		/* NDA/BLA and study number */
6609       		%global ndabla studyid;
6610       		%let ndabla = xxx;
6611       		%let studyid = fdadata;
6612       
6613       		/* MedDRA hierachy */
6614       	*	%let meddrapath = ;
6615          *	libname meddra "&meddrapath.";
6616       
6617       		/* MedDRA version */
6618       		%global ver meddra meddra_pct;
6619       		%let ver =14.1 ;
6620       		%if %upcase(%substr(&ver.,1,1)) = N %then %do;
6621       			%let meddra = N;
6622       			%let meddra_pct = 0;
6623       		%end;
6624       		%else %let meddra = Y;
6625       
6626       		/* designated medical events */
6627       		*%let dmepath = ;
6628       		* libname dme "&dmepath.";
6629             * libname dme "&meddrapath.";
6630       
6631       		/* study lag in days; determines window in days following the end of a study */
6632       		/* in which AEs should be included in the analysis */
6633       		%global study_lag;
6634       		%let study_lag = 30;
6635       
6636       		/* continuity correction method */
6637       		/* arm adds the reciprocal of the opposite arm */
6638       		/* otherwise any number is added as a constant */
6639       		%global cc;
6640       		%let cc = .5;
6641       
6642       		/* dummy grouping, subsetting, and dataset information datasets */
6643       		data sl_datasets;
6644       			datatype = ''; name = ''; partition_variable = ''; default = '';
6645       			*delete;
6646       		run;
6647       		data sl_group;
6648       			group_name = ''; domain = ''; partition = ''; var_name = ''; var_value = ''; dsvg_grp_name = '';
6649       			*delete;
6650       		run;
6651       		data sl_subset;
6652       			name = ''; domain = ''; partition = ''; var_name = ''; var_value = ''; inner_operator = ''; outer_operator = '';
6653       			*delete;
6654       		run;
6655       
6656       	%end;
6657       
131                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

6658       	/* program parameters if the program is run through Script Launcher */
6659       	
6660       
6661       %mend params;
6662       
6663       %params;
SYMBOLGEN:  Macro variable RUN_LOCATION resolves to local
MPRINT(PARAMS):   data macrovar;
MPRINT(PARAMS):   set sashelp.vmacro(keep=scope name where=(scope='GLOBAL' & name ne 'RUN_LOCATION'));
MPRINT(PARAMS):   run;

NOTE: There were 16 observations read from the data set SASHELP.VMACRO.
      WHERE (scope='GLOBAL') and (name not = 'RUN_LOCATION');
NOTE: The data set WORK.MACROVAR has 16 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(PARAMS):   * * * libname inlib "&studypath.";
MPRINT(PARAMS):   * libname outlib "&outpath ";
SYMBOLGEN:  Macro variable OUTPATH resolves to /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp2
yyyy=/sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp2
MPRINT(PARAMS):   * * libname inlib "&studypath.";
MPRINT(PARAMS):   data ae;
MPRINT(PARAMS):   set inlib.ae;
NOTE: Data file INLIB.AE.DATA is in a format that is native to another host, or the file encoding does not match the session encoding. Cross Environment Data Access will be used, which might require 
      additional CPU resources and might reduce performance.
MPRINT(PARAMS):   run;

NOTE: There were 596 observations read from the data set INLIB.AE.
NOTE: The data set WORK.AE has 596 observations and 27 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(PARAMS):   data dm;
MPRINT(PARAMS):   set inlib.dm;
NOTE: Data file INLIB.DM.DATA is in a format that is native to another host, or the file encoding does not match the session encoding. Cross Environment Data Access will be used, which might require 
      additional CPU resources and might reduce performance.
MPRINT(PARAMS):   run;

NOTE: There were 162 observations read from the data set INLIB.DM.
NOTE: The data set WORK.DM has 162 observations and 27 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.02 seconds
      

MPRINT(PARAMS):   data ex;
MPRINT(PARAMS):   set inlib.ex;
NOTE: Data file INLIB.EX.DATA is in a format that is native to another host, or the file encoding does not match the session encoding. Cross Environment Data Access will be used, which might require 
      additional CPU resources and might reduce performance.
MPRINT(PARAMS):   run;

NOTE: There were 159 observations read from the data set INLIB.EX.
NOTE: The data set WORK.EX has 159 observations and 20 variables.
132                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(PARAMS):   * * libname meddra "&meddrapath.";
SYMBOLGEN:  Macro variable VER resolves to 14.1
MPRINT(PARAMS):   * * libname dme "&dmepath.";
MPRINT(PARAMS):   * libname dme "&meddrapath.";
MPRINT(PARAMS):   data sl_datasets;
MPRINT(PARAMS):   datatype = '';
MPRINT(PARAMS):   name = '';
MPRINT(PARAMS):   partition_variable = '';
MPRINT(PARAMS):   default = '';
MPRINT(PARAMS):   *delete;
MPRINT(PARAMS):   run;

NOTE: The data set WORK.SL_DATASETS has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(PARAMS):   data sl_group;
MPRINT(PARAMS):   group_name = '';
MPRINT(PARAMS):   domain = '';
MPRINT(PARAMS):   partition = '';
MPRINT(PARAMS):   var_name = '';
MPRINT(PARAMS):   var_value = '';
MPRINT(PARAMS):   dsvg_grp_name = '';
MPRINT(PARAMS):   *delete;
MPRINT(PARAMS):   run;

NOTE: The data set WORK.SL_GROUP has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(PARAMS):   data sl_subset;
MPRINT(PARAMS):   name = '';
MPRINT(PARAMS):   domain = '';
MPRINT(PARAMS):   partition = '';
MPRINT(PARAMS):   var_name = '';
MPRINT(PARAMS):   var_value = '';
MPRINT(PARAMS):   inner_operator = '';
MPRINT(PARAMS):   outer_operator = '';
MPRINT(PARAMS):   *delete;
MPRINT(PARAMS):   run;

NOTE: The data set WORK.SL_SUBSET has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

6664       
6665       /* data validation switch; determines whether to perform data validation on AEs */
133                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

6666       %let vld_sw = 1;
6667       
6668       /* (default) thresholds for minimum risk difference, fold difference, relative risk */
6669       %let rd_th = 5;
6670       %let rr_th = 5;
6671       %let pv_th = ;
6672       /*
6673       
6674       /* set the continuity correction switch */
6675       data _null_;
6676       	if anyalpha("&cc.") then cc = "&cc.";
SYMBOLGEN:  Macro variable CC resolves to .5
SYMBOLGEN:  Macro variable CC resolves to .5
6677       	else cc = &cc.;
SYMBOLGEN:  Macro variable CC resolves to .5
6678       
6679       	if anyalpha(cc) and cc = 'arm' then cc_sw = 2;
6680       	else if not missing(cc) and cc ne 0 then cc_sw = 1;
6681       	else cc_sw = 0;
6682       
6683       	if cc_sw = 2 then cc_whole = 0;
6684       	else if (cc - floor(cc) ne 0) then cc_whole = 0;
6685       	else cc_whole = 1;
6686       
6687       	call symputx('cc_sw',cc_sw,'g');
6688       	call symputx('cc_whole',cc_whole,'g');
6689       run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      6677:2   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      6680:30   6684:11   6684:22   
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

6690       
6691       /********************************************************************/
6692       /* aggregate the input dataset (dsin) by the by variables (by1-by4) */
6693       /* and write to the output dataset (dsout)                          */
6694       /********************************************************************/
6695       %macro meddra(dsin,dsout,by1,by2,by3,by4,output=yes);
6696       
6697       	/* find the number of by variables */
6698       	%let i = 1;
6699       	%do %while (%symexist(by&i.));
6700       		%if (&&&by&i. = ) %then %goto exit;
6701       		%let i = %eval(&i. + 1);
6702       	%end;
6703       	%exit: %let max_arg = %eval(&i. - 1);
6704       
6705       	%if %symexist(key) %then %symdel key;
6706       
6707       	/* create the by variable key */
6708       	data _null_;
6709       		key = %do i = 1 %to &max_arg.; "&&&by&i. "|| %end;'';
6710       		call symputx('key',key);
134                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

6711       	run;
6712       
6713       	/* print current activity to the log */
6714       	data _null_;
6715       		title = "AGGREGATING &dsin. INTO &dsout. BY &key.";
6716       		titlen = length(title);
6717       		length separator $100;
6718       		do i = 1 to titlen;
6719       			separator =  trim(left(separator))||"*";
6720       		end;
6721       
6722       		put separator;
6723       		put;
6724       		put title;
6725       		put;
6726       		put separator;
6727       	run;
6728       
6729       	/* sort input dataset by the by variables */
6730       	/* keep one record per subject and by key */
6731       	proc sort data=&dsin.
6732                      out=&dsout._sort(keep=usubjid arm_num &key. %if &&&by&max_arg. = pt_name %then dme;) nodupkey;
6733       		by &key. usubjid;
6734       	run;
6735       
6736       	data &dsout.;
6737       		set &dsout._sort;
6738       		by &key.;
6739       
6740       		/* AE counts for each arm */
6741       		retain %do i = 1 %to &arm_count.;
6742       				  arm&i._count
6743       			   %end;
6744       			   ;
6745       		array arm{&arm_count.}
6746       			%do i = 1 %to &arm_count.; arm&i._count %end;
6747       			;
6748       
6749       		/* initialize sums to zero */
6750       		if first.&&&by&max_arg. then do i = 1 to &arm_count.;
6751       			arm(i) = 0;
6752       		end;
6753       
6754       		/* summing */
6755       		arm(arm_num) = arm(arm_num) + 1;
6756       
6757       		/* percentages of arm safety population */
6758       		if last.&&&by&max_arg. then do;
6759       	        %do i = 1 %to &arm_count.;
6760       			    arm&i._pct = 100*arm&i._count/&&&arm_&i.;
6761       			%end;
6762       		end;
6763       
6764       		if last.&&&by&max_arg. then output;
6765       
6766       		label %do i = 1 %to &arm_count.;
6767                     arm&i._count="&&&arm_name_&i. Subject Count"
6768                     arm&i._pct="&&&arm_name_&i. %"
135                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

6769       			  %end;
6770       			  ;
6771       
6772       		keep &key.
6773                    %if &&&by&max_arg. = pt_name %then dme;
6774                    %do i = 1 %to &arm_count.; arm&i._count arm&i._pct %end;
6775                    ;
6776       	run;
6777       
6778       	/* dataset for output */
6779       	data &dsout.;
6780       		retain &key.
6781                      %if &&&by&max_arg. = pt_name %then dme;
6782                      %do i = 1 %to &arm_count.; arm&i._count arm&i._pct %end;
6783                      ;
6784       		set &dsout.(keep=&key.
6785                                %if &&&by&max_arg. = pt_name %then dme;
6786                                %do i = 1 %to &arm_count.; arm&i._count arm&i._pct %end;
6787                           );
6788       		by &key.;
6789       
6790       		level = &max_arg.;
6791       
6792       		/* level numbers; soc => 1, hlgt => 2, hlt => 3, pt => 4 */
6793       		retain %do i = 1 %to &max_arg.; %substr(&&&by&i.,1,%eval(%index(&&&by&i.,_)-1)) %end;;
6794       		%do i = 1 %to &max_arg.;
6795       			if first.&&&by&i. then %substr(&&&by&i.,1,%eval(%index(&&&by&i.,_)-1)) =
6796       									sum(%substr(&&&by&i.,1,%eval(%index(&&&by&i.,_)-1)),1);
6797       		%end;
6798       	run;
6799       
6800       	/* risk difference, relative risk, and p-value ranking */
6801       	%if &arm_count. > 1 %then %do;
6802       		data &dsout.;
6803       			set &dsout.;
6804       
6805       			%do i = 1 %to &arm_count.;
6806       				%do j = 1 %to &arm_count.;
6807       					%if &i. ne &j. %then %do;
6808       
6809       						/* risk difference */
6810       						rd&i.&j. = arm&i._pct - arm&j._pct;
6811       
6812       						/* set up 2x2 contingency table */
6813       						a = arm&i._count;
6814       						b = &&&arm_&i. - a;
6815       						c = arm&j._count;
6816       						d = &&&arm_&j. - c;
6817       
6818       						/* Fisher's exact test */
6819       						/*row = a + b;
6820       						col = a + c;
6821       						total = a + b + c + d;
6822       
6823       						pdf = pdf('hyper',a,total,row,col);
6824       
6825       						do i = 0 to min(row,col);
6826       							pdfi = pdf('hyper',i,total,row,col);
136                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

6827       							if pdfi <= pdf then pv&i.&j. = sum(pv&i.&j.,pdfi);
6828       						end;
6829       						drop row col total pdf pdfi i;
6830       
6831       						pv&i.&j. = -log(pv&i.&j.);*/
6832       
6833       						/* continuity correction */
6834       						%if (&cc_sw. ne 0) %then %do;
6835       
6836       							if (/*a = 0 or b = 0 or */c = 0/* or d = 0*/) then do;
6837       
6838       								/* continuity correction constant k = 1, 1/2, etc. */
6839       								%if (&cc_sw. = 1) %then %do;
6840       									a = a + &cc.;
6841       									b = b + &cc.;
6842       									c = c + &cc.;
6843       									d = d + &cc.;
6844       								%end;
6845       								/* continuity correction reciprocal of opposite arm */
6846       								%else %if &cc_sw. = 2 %then %do;
6847       									a = a + 1/(c+d);
6848       									b = b + 1/(c+d);
6849       									c = c + 1/(a+b);
6850       									d = d + 1/(a+b);
6851       								%end;
6852       
6853       								cc&i.&j. = '*';
6854       
6855       							end;
6856       
6857       						%end;
6858       
6859       						/* relative risk calculation */
6860       						if c ne 0 then rr&i.&j. = (a/(a+b)) / (c/(c+d));
6861       						*else if a ne 0 then rr&i.&j. = .I;
6862       
6863       					%end;
6864       				%end;
6865       			%end;
6866       
6867       			drop a b c d;
6868       		run;
6869       
6870       		/* Fisher's exact test */
6871       		/* set up the n x 2 table */
6872       		data &dsout._ct(keep=term_num arm_num disease count)
6873                    &dsout._term_num(keep=&key. term_num);
6874       			set &dsout.;
6875       			by &key.;
6876       
6877       			%do i = 1 %to &arm_count.;
6878       
6879       				term_num = _n_;
6880       				if first.&&&by&max_arg. then output &dsout._term_num;
6881       
6882       				arm_num = &i.;
6883       				
6884       				disease = -1;
137                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

6885       				count = arm&i._count;
6886       				output &dsout._ct;
6887       
6888       				disease = 0;
6889       				count = &&&arm_&i. - arm&i._count;
6890       				output &dsout._ct;
6891       
6892       			%end;
6893       
6894       		run;
6895       
6896       		/* find Fisher's exact test 2-tail p-value */
6897       		/* for all pairs of arms (i,j) i < j */
6898       		%do i = 1 %to &arm_count.;
6899       			%do j = 1 %to &arm_count.;
6900       				%if &i. < &j. %then %do;
6901       
6902       				/* turn off notes temporarily to avoid notes about missing levels */
6903       				options nonotes;
6904       
6905       				/* find the p-value with EXACT FISHER */
6906       				/* this method differs from the data step calculation by < 0.00001 */
6907       				/* except in the case that both arms have 0 subjects, in which case */
6908       				/* the FREQ procedure produces a missing value instead of 1 */
6909       				proc freq data=&dsout._ct(where=(arm_num in (&i. &j.))) noprint;
6910       					table arm_num*disease / nowarn;
6911       					weight count;
6912       					by term_num;
6913       					exact fisher;
6914       					output out=&dsout._fisher_&i.&j. fisher;
6915       				run;
6916       
6917       				options notes;
6918       
6919       				/* Fisher's exact test p-value does not depend on the order of the arms */
6920       				/* find the negative log of the p-value */
6921       				data &dsout._fisher_&i.&j.(keep=term_num pv:);
6922       					set &dsout._fisher_&i.&j.;
6923       					pv&i.&j. = -log(xp2_fish);
6924       					pv&j.&i. = -log(xp2_fish);
6925       				run;
6926       
6927       				%end;
6928       			%end;
6929       		%end;
6930       
6931       		/* combine p-values with output dataset */
6932       		/* merge by the numeric identifier for each level */
6933       		/* e.g. soc when the soc_name is the level being processed */
6934       		data &dsout.;
6935       			merge &dsout.
6936       			      %do i = 1 %to &arm_count.;
6937       					%do j = 1 %to &arm_count.;
6938       						%if &i. < &j. %then %do;
6939       							&dsout._fisher_&i.&j.(rename=(term_num=
6940                                                         %substr(&&&by&max_arg.,1,%eval(%index(&&&by&max_arg.,_)-1))))
6941       						%end;
6942       					%end;
138                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

6943       				  %end;
6944       				  ;
6945       			by %substr(&&&by&max_arg.,1,%eval(%index(&&&by&max_arg.,_)-1));
6946       		run;
6947       
6948       	%end; /* if &arm_count. > 1 */
6949       
6950       	/* reorder variables */
6951       	data &dsout.;
6952       		retain &key. %do i = 1 %to &arm_count.;
6953                               arm&i._count arm&i._pct
6954       					 %end;
6955       					 %do i = 1 %to &arm_count.;
6956       						%do j = 1 %to &arm_count.;
6957                                  %if &i. ne &j. %then %do;
6958                                     rd&i.&j. rr&i.&j. pv&i.&j.
6959       						   %end;
6960       						%end;
6961       		             %end;
6962       			   ;
6963       		set &dsout.;
6964       	run;
6965       
6966       	/* clean up datasets */
6967       	proc datasets library=work nolist nodetails;
6968       		delete &dsout._sort
6969                      &dsout._ct
6970       			   &dsout._term_num
6971       			   &dsout._fisher:
6972       			   ;
6973       	quit;
6974       
6975       %mend meddra;
6976       
6977       /****************************/
6978       /* make comparison datasets */
6979       /****************************/
6980       %macro meddra_cmp;
6981       
6982       	/* overview dataset with all arms */
6983       	data meddra_cmp(drop=row)
6984                meddra_cmp_data(drop=soc_name hlgt_name hlt_name pt_name dme row)
6985                meddra_cmp_data_row(keep=level soc hlgt hlt pt row);
6986       		retain level soc_name hlgt_name hlt_name pt_name;
6987       		set meddra_1(in=a)
6988       		    meddra_2(in=b)
6989       			meddra_3(in=c)
6990       			meddra_4(in=d);
6991       
6992       		/* order of the data sorted by level as it appears in the hidden data tab */
6993       		row + 1;
6994       	run;
6995       
6996       	proc sort data=meddra_cmp out=meddra_cmp;
6997       		by soc_name hlgt_name hlt_name pt_name level;
6998       	run;
6999       
7000       	/* add columns for indicators showing whether a signal exists */
139                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

7001       	/* at a given level of the MedDRA hierarchy */
7002       	data meddra_cmp_output(keep=level soc_name hlgt_name hlt_name pt_name dme
7003       		                        sgnl sgnl_soc sgnl_hlgt sgnl_hlt sgnl_pt
7004       			                    arm_exp_count arm_exp_pct arm_ctl_count arm_ctl_pct
7005       			                    rd rr %if &cc_sw. %then cc; pv row)
7006                meddra_cmp_output_row(keep=level soc hlgt hlt pt row);
7007       		retain level soc_name hlgt_name hlt_name pt_name dme
7008       		       sgnl sgnl_soc sgnl_hlgt sgnl_hlt sgnl_pt
7009       			   arm_exp_count arm_exp_pct arm_ctl_count arm_ctl_pct
7010       			   rd rr %if &cc_sw. %then cc; pv
7011       			   row
7012                      soc hlgt hlt pt;
7013       		set meddra_cmp;
7014       
7015       		/* order of the data as it initially appears on the visible	analysis tab */
7016       		row + 1;
7017       
7018       		length sgnl $1 sgnl_soc $1 sgnl_hlgt $1 sgnl_hlt $1 sgnl_pt $1 %if &cc_sw. %then cc $1;;
7019       
7020       		call missing(arm_exp_count,arm_exp_pct,arm_ctl_count,arm_ctl_pct);
7021       		call missing(rd,rr,pv);
7022       		%if &cc_sw. %then %do; call missing(cc); %end;
7023       		call missing(sgnl,sgnl_soc,sgnl_hlgt,sgnl_hlt,sgnl_pt);
7024       	run;
7025       
7026       	/* arrange data dataset; add columns to be filled with Excel analysis formulas */
7027       	data meddra_cmp_data;
7028       		retain level soc hlgt hlt pt rd rr pv cc sgnl sgnl_soc sgnl_hlgt sgnl_hlt sgnl_pt sgnl_any;
7029       		set meddra_cmp_data;
7030       		length cc $1;
7031       		rd = .;
7032       		rr = .;
7033       		pv = .;	
7034       		cc = '';
7035       		sgnl = .;
7036       		sgnl_soc = .;
7037       		sgnl_hlgt = .;
7038       		sgnl_hlt = .;
7039       		sgnl_pt = .;
7040       		sgnl_any = .;
7041       	run;
7042       
7043       	/* put row datasets in proper format */
7044       	/* these will be merged while creating output and used in creating formulas */
7045       	%do i = 1 %to 2;
7046       		%let ds = %scan(data output,&i.);
7047       		data meddra_cmp_&ds._row(keep=row lvl_nm lvl_no soc hlgt hlt pt);
7048       			set meddra_cmp_&ds._row;
7049       			length lvl_nm $4 lvl_no 8.;
7050       			select (level);
7051       				when (1) do; lvl_nm = 'soc'; lvl_no = soc;	end;
7052       				when (2) do; lvl_nm = 'hlgt'; lvl_no = hlgt; end;
7053       				when (3) do; lvl_nm = 'hlt'; lvl_no = hlt;	end;
7054       				when (4) do; lvl_nm = 'pt'; lvl_no = pt;	end;
7055       				otherwise;
7056       			end;
7057       		run;
7058       	%end;
140                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

7059       
7060       %mend meddra_cmp;
7061       
7062       
7063       /********************************************/
7064       /* RUN MEDDRA AT A GLANCE ANALYSIS PANEL */
7065       /********************************************/
7066       %macro aemed;
7067       
7068       	%setup(mdhier=Y,dme=Y);
7069       
7070       	%if &setup_success. and &meddra_pct. > 0 %then %do;
7071       
7072       		%meddra(ds_base_meddra,meddra_1,soc_name);
7073       		%meddra(ds_base_meddra,meddra_2,soc_name,hlgt_name);
7074       		%meddra(ds_base_meddra,meddra_3,soc_name,hlgt_name,hlt_name);
7075       		%meddra(ds_base_meddra,meddra_4,soc_name,hlgt_name,hlt_name,pt_name);
7076       
7077       		%meddra_cmp;
7078       
7079       		%out_med;
7080       
7081       	%end;
7082       	%else %do;
7083       		%error_summary(err_file= &errout.,
7084                              err_nosubj=%sysfunc(ifc(&dm_subj_gt0.,0,1)),
7085                              err_missvar=%sysfunc(ifc(&setup_req_var.,0,1)),
7086       					   err_desc=%sysfunc(ifc(&meddra_pct.=0,%str(There were zero adverse events with matching MedDRA descriptions.),))
7087                              );
7088       	%end;
7089       
7090       %mend aemed;
7091       
7092       
7093       %let start = %sysfunc(time());
7094       
7095       /* run the MedDRA at a Glance analysis */
7096       %aemed;
MPRINT(LOG_MSG):   options nonotes;
MPRINT(LOG_MSG):   data _null_;
SYMBOLGEN:  Macro variable TEXT resolves to DATA CHECKS
MPRINT(LOG_MSG):   length = length("DATA CHECKS");
MPRINT(LOG_MSG):   length string $100 separator $100;
MPRINT(LOG_MSG):   do i = 1 to length + 4;
MPRINT(LOG_MSG):   separator = trim(left(separator))||"*";
MPRINT(LOG_MSG):   end;
SYMBOLGEN:  Macro variable TEXT resolves to DATA CHECKS
MPRINT(LOG_MSG):   string = '* '||trim("DATA CHECKS")||' *';
MPRINT(LOG_MSG):   put separator;
MPRINT(LOG_MSG):   put string;
MPRINT(LOG_MSG):   put separator;
MPRINT(LOG_MSG):   run;
***************
* DATA CHECKS *
***************
MPRINT(LOG_MSG):   options notes;
MPRINT(SETUP):  ;
MPRINT(CHK_DM_SUBJ_GT0):   data _null_;
141                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

MPRINT(CHK_DM_SUBJ_GT0):   dsid = open('dm');
MPRINT(CHK_DM_SUBJ_GT0):   if dsid then do;
MPRINT(CHK_DM_SUBJ_GT0):   nobs = attrn(dsid,'nobs');
MPRINT(CHK_DM_SUBJ_GT0):   nvars = attrn(dsid,'nvars');
MPRINT(CHK_DM_SUBJ_GT0):   end;
MPRINT(CHK_DM_SUBJ_GT0):   call symputx('dm_subj_gt0',ifc(nobs>0 and nvars>0,'1','0'),'g');
MPRINT(CHK_DM_SUBJ_GT0):   rc = close(dsid);
MPRINT(CHK_DM_SUBJ_GT0):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SETUP):  ;
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aebodsys
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aebodsys
MPRINT(CHK_VAR):   data chk_var_ae_aebodsys;
MPRINT(CHK_VAR):   length chk $12 ds $32 var $36 type $1 len 8. condition $200 ind 8.;
MPRINT(CHK_VAR):   chk = 'VAR';
SYMBOLGEN:  Macro variable DS resolves to ae
MPRINT(CHK_VAR):   ds = upcase("ae");
SYMBOLGEN:  Macro variable VAR resolves to aebodsys
MPRINT(CHK_VAR):   var = upcase("aebodsys");
MPRINT(CHK_VAR):   condition = 'EXISTS';
SYMBOLGEN:  Macro variable LIB resolves to work
SYMBOLGEN:  Macro variable DS resolves to ae
MPRINT(CHK_VAR):   dsid = open("work.ae");
MPRINT(CHK_VAR):   if dsid then do;
SYMBOLGEN:  Macro variable VAR resolves to aebodsys
MPRINT(CHK_VAR):   ind = ifn(varnum(dsid,upcase("aebodsys"))>0,1,0);
MPRINT(CHK_VAR):   if ind then do;
SYMBOLGEN:  Macro variable VAR resolves to aebodsys
MPRINT(CHK_VAR):   type = vartype(dsid,varnum(dsid,upcase("aebodsys")));
SYMBOLGEN:  Macro variable VAR resolves to aebodsys
MPRINT(CHK_VAR):   len = varlen(dsid,varnum(dsid,upcase("aebodsys")));
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   else do;
MPRINT(CHK_VAR):   type = '';
MPRINT(CHK_VAR):   len = -1;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   rc = close(dsid);
MPRINT(CHK_VAR):   drop rc;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   else do;
MPRINT(CHK_VAR):   ind = 0;
MPRINT(CHK_VAR):   type = '';
MPRINT(CHK_VAR):   len = -1;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   drop dsid;
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aebodsys
MPRINT(CHK_VAR):   call symputx("ae_aebodsys",ind,'g');
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aebodsys
MPRINT(CHK_VAR):   call symputx("ae_aebodsys_type",type,'g');
142                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aebodsys
MPRINT(CHK_VAR):   call symputx("ae_aebodsys_len",len,'g');
MPRINT(CHK_VAR):   run;

NOTE: The data set WORK.CHK_VAR_AE_AEBODSYS has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(CHK_VAR):   data rpt_chk_var;
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aebodsys
MPRINT(CHK_VAR):   merge chk_var_ae_aebodsys;
MPRINT(CHK_VAR):   by ds var;
MPRINT(CHK_VAR):   run;

NOTE: There were 1 observations read from the data set WORK.CHK_VAR_AE_AEBODSYS.
NOTE: The data set WORK.RPT_CHK_VAR has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(CHK_VAR):   proc datasets library=work nolist nodetails;
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aebodsys
MPRINT(CHK_VAR):   delete chk_var_ae_aebodsys;
MPRINT(CHK_VAR):   quit;

NOTE: Deleting WORK.CHK_VAR_AE_AEBODSYS (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SETUP):  ;
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aedecod
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aedecod
MPRINT(CHK_VAR):   data chk_var_ae_aedecod;
MPRINT(CHK_VAR):   length chk $12 ds $32 var $36 type $1 len 8. condition $200 ind 8.;
MPRINT(CHK_VAR):   chk = 'VAR';
SYMBOLGEN:  Macro variable DS resolves to ae
MPRINT(CHK_VAR):   ds = upcase("ae");
SYMBOLGEN:  Macro variable VAR resolves to aedecod
MPRINT(CHK_VAR):   var = upcase("aedecod");
MPRINT(CHK_VAR):   condition = 'EXISTS';
SYMBOLGEN:  Macro variable LIB resolves to work
SYMBOLGEN:  Macro variable DS resolves to ae
MPRINT(CHK_VAR):   dsid = open("work.ae");
MPRINT(CHK_VAR):   if dsid then do;
SYMBOLGEN:  Macro variable VAR resolves to aedecod
MPRINT(CHK_VAR):   ind = ifn(varnum(dsid,upcase("aedecod"))>0,1,0);
MPRINT(CHK_VAR):   if ind then do;
SYMBOLGEN:  Macro variable VAR resolves to aedecod
143                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

MPRINT(CHK_VAR):   type = vartype(dsid,varnum(dsid,upcase("aedecod")));
SYMBOLGEN:  Macro variable VAR resolves to aedecod
MPRINT(CHK_VAR):   len = varlen(dsid,varnum(dsid,upcase("aedecod")));
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   else do;
MPRINT(CHK_VAR):   type = '';
MPRINT(CHK_VAR):   len = -1;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   rc = close(dsid);
MPRINT(CHK_VAR):   drop rc;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   else do;
MPRINT(CHK_VAR):   ind = 0;
MPRINT(CHK_VAR):   type = '';
MPRINT(CHK_VAR):   len = -1;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   drop dsid;
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aedecod
MPRINT(CHK_VAR):   call symputx("ae_aedecod",ind,'g');
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aedecod
MPRINT(CHK_VAR):   call symputx("ae_aedecod_type",type,'g');
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aedecod
MPRINT(CHK_VAR):   call symputx("ae_aedecod_len",len,'g');
MPRINT(CHK_VAR):   run;

NOTE: The data set WORK.CHK_VAR_AE_AEDECOD has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CHK_VAR):   data rpt_chk_var;
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aedecod
MPRINT(CHK_VAR):   merge rpt_chk_var chk_var_ae_aedecod;
MPRINT(CHK_VAR):   by ds var;
MPRINT(CHK_VAR):   run;

NOTE: There were 1 observations read from the data set WORK.RPT_CHK_VAR.
NOTE: There were 1 observations read from the data set WORK.CHK_VAR_AE_AEDECOD.
NOTE: The data set WORK.RPT_CHK_VAR has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.02 seconds
      

MPRINT(CHK_VAR):   proc datasets library=work nolist nodetails;
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aedecod
MPRINT(CHK_VAR):   delete chk_var_ae_aedecod;
MPRINT(CHK_VAR):   quit;

NOTE: Deleting WORK.CHK_VAR_AE_AEDECOD (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
144                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

      cpu time            0.00 seconds
      

MPRINT(SETUP):  ;
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to usubjid
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to usubjid
MPRINT(CHK_VAR):   data chk_var_ae_usubjid;
MPRINT(CHK_VAR):   length chk $12 ds $32 var $36 type $1 len 8. condition $200 ind 8.;
MPRINT(CHK_VAR):   chk = 'VAR';
SYMBOLGEN:  Macro variable DS resolves to ae
MPRINT(CHK_VAR):   ds = upcase("ae");
SYMBOLGEN:  Macro variable VAR resolves to usubjid
MPRINT(CHK_VAR):   var = upcase("usubjid");
MPRINT(CHK_VAR):   condition = 'EXISTS';
SYMBOLGEN:  Macro variable LIB resolves to work
SYMBOLGEN:  Macro variable DS resolves to ae
MPRINT(CHK_VAR):   dsid = open("work.ae");
MPRINT(CHK_VAR):   if dsid then do;
SYMBOLGEN:  Macro variable VAR resolves to usubjid
MPRINT(CHK_VAR):   ind = ifn(varnum(dsid,upcase("usubjid"))>0,1,0);
MPRINT(CHK_VAR):   if ind then do;
SYMBOLGEN:  Macro variable VAR resolves to usubjid
MPRINT(CHK_VAR):   type = vartype(dsid,varnum(dsid,upcase("usubjid")));
SYMBOLGEN:  Macro variable VAR resolves to usubjid
MPRINT(CHK_VAR):   len = varlen(dsid,varnum(dsid,upcase("usubjid")));
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   else do;
MPRINT(CHK_VAR):   type = '';
MPRINT(CHK_VAR):   len = -1;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   rc = close(dsid);
MPRINT(CHK_VAR):   drop rc;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   else do;
MPRINT(CHK_VAR):   ind = 0;
MPRINT(CHK_VAR):   type = '';
MPRINT(CHK_VAR):   len = -1;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   drop dsid;
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to usubjid
MPRINT(CHK_VAR):   call symputx("ae_usubjid",ind,'g');
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to usubjid
MPRINT(CHK_VAR):   call symputx("ae_usubjid_type",type,'g');
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to usubjid
MPRINT(CHK_VAR):   call symputx("ae_usubjid_len",len,'g');
MPRINT(CHK_VAR):   run;

NOTE: The data set WORK.CHK_VAR_AE_USUBJID has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

145                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

MPRINT(CHK_VAR):   data rpt_chk_var;
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to usubjid
MPRINT(CHK_VAR):   merge rpt_chk_var chk_var_ae_usubjid;
MPRINT(CHK_VAR):   by ds var;
MPRINT(CHK_VAR):   run;

NOTE: There were 2 observations read from the data set WORK.RPT_CHK_VAR.
NOTE: There were 1 observations read from the data set WORK.CHK_VAR_AE_USUBJID.
NOTE: The data set WORK.RPT_CHK_VAR has 3 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(CHK_VAR):   proc datasets library=work nolist nodetails;
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to usubjid
MPRINT(CHK_VAR):   delete chk_var_ae_usubjid;
MPRINT(CHK_VAR):   quit;

NOTE: Deleting WORK.CHK_VAR_AE_USUBJID (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SETUP):  ;
SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to usubjid
SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to usubjid
MPRINT(CHK_VAR):   data chk_var_dm_usubjid;
MPRINT(CHK_VAR):   length chk $12 ds $32 var $36 type $1 len 8. condition $200 ind 8.;
MPRINT(CHK_VAR):   chk = 'VAR';
SYMBOLGEN:  Macro variable DS resolves to dm
MPRINT(CHK_VAR):   ds = upcase("dm");
SYMBOLGEN:  Macro variable VAR resolves to usubjid
MPRINT(CHK_VAR):   var = upcase("usubjid");
MPRINT(CHK_VAR):   condition = 'EXISTS';
SYMBOLGEN:  Macro variable LIB resolves to work
SYMBOLGEN:  Macro variable DS resolves to dm
MPRINT(CHK_VAR):   dsid = open("work.dm");
MPRINT(CHK_VAR):   if dsid then do;
SYMBOLGEN:  Macro variable VAR resolves to usubjid
MPRINT(CHK_VAR):   ind = ifn(varnum(dsid,upcase("usubjid"))>0,1,0);
MPRINT(CHK_VAR):   if ind then do;
SYMBOLGEN:  Macro variable VAR resolves to usubjid
MPRINT(CHK_VAR):   type = vartype(dsid,varnum(dsid,upcase("usubjid")));
SYMBOLGEN:  Macro variable VAR resolves to usubjid
MPRINT(CHK_VAR):   len = varlen(dsid,varnum(dsid,upcase("usubjid")));
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   else do;
MPRINT(CHK_VAR):   type = '';
MPRINT(CHK_VAR):   len = -1;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   rc = close(dsid);
MPRINT(CHK_VAR):   drop rc;
146                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   else do;
MPRINT(CHK_VAR):   ind = 0;
MPRINT(CHK_VAR):   type = '';
MPRINT(CHK_VAR):   len = -1;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   drop dsid;
SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to usubjid
MPRINT(CHK_VAR):   call symputx("dm_usubjid",ind,'g');
SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to usubjid
MPRINT(CHK_VAR):   call symputx("dm_usubjid_type",type,'g');
SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to usubjid
MPRINT(CHK_VAR):   call symputx("dm_usubjid_len",len,'g');
MPRINT(CHK_VAR):   run;

NOTE: The data set WORK.CHK_VAR_DM_USUBJID has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CHK_VAR):   data rpt_chk_var;
SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to usubjid
MPRINT(CHK_VAR):   merge rpt_chk_var chk_var_dm_usubjid;
MPRINT(CHK_VAR):   by ds var;
MPRINT(CHK_VAR):   run;

NOTE: There were 3 observations read from the data set WORK.RPT_CHK_VAR.
NOTE: There were 1 observations read from the data set WORK.CHK_VAR_DM_USUBJID.
NOTE: The data set WORK.RPT_CHK_VAR has 4 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(CHK_VAR):   proc datasets library=work nolist nodetails;
SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to usubjid
MPRINT(CHK_VAR):   delete chk_var_dm_usubjid;
MPRINT(CHK_VAR):   quit;

NOTE: Deleting WORK.CHK_VAR_DM_USUBJID (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SETUP):  ;
SYMBOLGEN:  Macro variable DS resolves to ex
SYMBOLGEN:  Macro variable VAR resolves to usubjid
SYMBOLGEN:  Macro variable DS resolves to ex
SYMBOLGEN:  Macro variable VAR resolves to usubjid
MPRINT(CHK_VAR):   data chk_var_ex_usubjid;
MPRINT(CHK_VAR):   length chk $12 ds $32 var $36 type $1 len 8. condition $200 ind 8.;
147                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

MPRINT(CHK_VAR):   chk = 'VAR';
SYMBOLGEN:  Macro variable DS resolves to ex
MPRINT(CHK_VAR):   ds = upcase("ex");
SYMBOLGEN:  Macro variable VAR resolves to usubjid
MPRINT(CHK_VAR):   var = upcase("usubjid");
MPRINT(CHK_VAR):   condition = 'EXISTS';
SYMBOLGEN:  Macro variable LIB resolves to work
SYMBOLGEN:  Macro variable DS resolves to ex
MPRINT(CHK_VAR):   dsid = open("work.ex");
MPRINT(CHK_VAR):   if dsid then do;
SYMBOLGEN:  Macro variable VAR resolves to usubjid
MPRINT(CHK_VAR):   ind = ifn(varnum(dsid,upcase("usubjid"))>0,1,0);
MPRINT(CHK_VAR):   if ind then do;
SYMBOLGEN:  Macro variable VAR resolves to usubjid
MPRINT(CHK_VAR):   type = vartype(dsid,varnum(dsid,upcase("usubjid")));
SYMBOLGEN:  Macro variable VAR resolves to usubjid
MPRINT(CHK_VAR):   len = varlen(dsid,varnum(dsid,upcase("usubjid")));
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   else do;
MPRINT(CHK_VAR):   type = '';
MPRINT(CHK_VAR):   len = -1;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   rc = close(dsid);
MPRINT(CHK_VAR):   drop rc;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   else do;
MPRINT(CHK_VAR):   ind = 0;
MPRINT(CHK_VAR):   type = '';
MPRINT(CHK_VAR):   len = -1;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   drop dsid;
SYMBOLGEN:  Macro variable DS resolves to ex
SYMBOLGEN:  Macro variable VAR resolves to usubjid
MPRINT(CHK_VAR):   call symputx("ex_usubjid",ind,'g');
SYMBOLGEN:  Macro variable DS resolves to ex
SYMBOLGEN:  Macro variable VAR resolves to usubjid
MPRINT(CHK_VAR):   call symputx("ex_usubjid_type",type,'g');
SYMBOLGEN:  Macro variable DS resolves to ex
SYMBOLGEN:  Macro variable VAR resolves to usubjid
MPRINT(CHK_VAR):   call symputx("ex_usubjid_len",len,'g');
MPRINT(CHK_VAR):   run;

NOTE: The data set WORK.CHK_VAR_EX_USUBJID has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(CHK_VAR):   data rpt_chk_var;
SYMBOLGEN:  Macro variable DS resolves to ex
SYMBOLGEN:  Macro variable VAR resolves to usubjid
MPRINT(CHK_VAR):   merge rpt_chk_var chk_var_ex_usubjid;
MPRINT(CHK_VAR):   by ds var;
MPRINT(CHK_VAR):   run;

NOTE: There were 4 observations read from the data set WORK.RPT_CHK_VAR.
NOTE: There were 1 observations read from the data set WORK.CHK_VAR_EX_USUBJID.
NOTE: The data set WORK.RPT_CHK_VAR has 5 observations and 7 variables.
148                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(CHK_VAR):   proc datasets library=work nolist nodetails;
SYMBOLGEN:  Macro variable DS resolves to ex
SYMBOLGEN:  Macro variable VAR resolves to usubjid
MPRINT(CHK_VAR):   delete chk_var_ex_usubjid;
MPRINT(CHK_VAR):   quit;

NOTE: Deleting WORK.CHK_VAR_EX_USUBJID (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SETUP):  ;
MPRINT(SETUP):   data rpt_chk_var_req;
MPRINT(SETUP):   set rpt_chk_var;
MPRINT(SETUP):   run;

NOTE: There were 5 observations read from the data set WORK.RPT_CHK_VAR.
NOTE: The data set WORK.RPT_CHK_VAR_REQ has 5 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to actarm
SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to actarm
MPRINT(CHK_VAR):   data chk_var_dm_actarm;
MPRINT(CHK_VAR):   length chk $12 ds $32 var $36 type $1 len 8. condition $200 ind 8.;
MPRINT(CHK_VAR):   chk = 'VAR';
SYMBOLGEN:  Macro variable DS resolves to dm
MPRINT(CHK_VAR):   ds = upcase("dm");
SYMBOLGEN:  Macro variable VAR resolves to actarm
MPRINT(CHK_VAR):   var = upcase("actarm");
MPRINT(CHK_VAR):   condition = 'EXISTS';
SYMBOLGEN:  Macro variable LIB resolves to work
SYMBOLGEN:  Macro variable DS resolves to dm
MPRINT(CHK_VAR):   dsid = open("work.dm");
MPRINT(CHK_VAR):   if dsid then do;
SYMBOLGEN:  Macro variable VAR resolves to actarm
MPRINT(CHK_VAR):   ind = ifn(varnum(dsid,upcase("actarm"))>0,1,0);
MPRINT(CHK_VAR):   if ind then do;
SYMBOLGEN:  Macro variable VAR resolves to actarm
MPRINT(CHK_VAR):   type = vartype(dsid,varnum(dsid,upcase("actarm")));
SYMBOLGEN:  Macro variable VAR resolves to actarm
MPRINT(CHK_VAR):   len = varlen(dsid,varnum(dsid,upcase("actarm")));
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   else do;
MPRINT(CHK_VAR):   type = '';
MPRINT(CHK_VAR):   len = -1;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   rc = close(dsid);
149                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

MPRINT(CHK_VAR):   drop rc;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   else do;
MPRINT(CHK_VAR):   ind = 0;
MPRINT(CHK_VAR):   type = '';
MPRINT(CHK_VAR):   len = -1;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   drop dsid;
SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to actarm
MPRINT(CHK_VAR):   call symputx("dm_actarm",ind,'g');
SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to actarm
MPRINT(CHK_VAR):   call symputx("dm_actarm_type",type,'g');
SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to actarm
MPRINT(CHK_VAR):   call symputx("dm_actarm_len",len,'g');
MPRINT(CHK_VAR):   run;

NOTE: The data set WORK.CHK_VAR_DM_ACTARM has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(CHK_VAR):   data rpt_chk_var;
SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to actarm
MPRINT(CHK_VAR):   merge rpt_chk_var chk_var_dm_actarm;
MPRINT(CHK_VAR):   by ds var;
MPRINT(CHK_VAR):   run;

NOTE: There were 5 observations read from the data set WORK.RPT_CHK_VAR.
NOTE: There were 1 observations read from the data set WORK.CHK_VAR_DM_ACTARM.
NOTE: The data set WORK.RPT_CHK_VAR has 6 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(CHK_VAR):   proc datasets library=work nolist nodetails;
SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to actarm
MPRINT(CHK_VAR):   delete chk_var_dm_actarm;
MPRINT(CHK_VAR):   quit;

NOTE: Deleting WORK.CHK_VAR_DM_ACTARM (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SETUP):  ;
SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to arm
SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to arm
MPRINT(CHK_VAR):   data chk_var_dm_arm;
150                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

MPRINT(CHK_VAR):   length chk $12 ds $32 var $36 type $1 len 8. condition $200 ind 8.;
MPRINT(CHK_VAR):   chk = 'VAR';
SYMBOLGEN:  Macro variable DS resolves to dm
MPRINT(CHK_VAR):   ds = upcase("dm");
SYMBOLGEN:  Macro variable VAR resolves to arm
MPRINT(CHK_VAR):   var = upcase("arm");
MPRINT(CHK_VAR):   condition = 'EXISTS';
SYMBOLGEN:  Macro variable LIB resolves to work
SYMBOLGEN:  Macro variable DS resolves to dm
MPRINT(CHK_VAR):   dsid = open("work.dm");
MPRINT(CHK_VAR):   if dsid then do;
SYMBOLGEN:  Macro variable VAR resolves to arm
MPRINT(CHK_VAR):   ind = ifn(varnum(dsid,upcase("arm"))>0,1,0);
MPRINT(CHK_VAR):   if ind then do;
SYMBOLGEN:  Macro variable VAR resolves to arm
MPRINT(CHK_VAR):   type = vartype(dsid,varnum(dsid,upcase("arm")));
SYMBOLGEN:  Macro variable VAR resolves to arm
MPRINT(CHK_VAR):   len = varlen(dsid,varnum(dsid,upcase("arm")));
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   else do;
MPRINT(CHK_VAR):   type = '';
MPRINT(CHK_VAR):   len = -1;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   rc = close(dsid);
MPRINT(CHK_VAR):   drop rc;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   else do;
MPRINT(CHK_VAR):   ind = 0;
MPRINT(CHK_VAR):   type = '';
MPRINT(CHK_VAR):   len = -1;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   drop dsid;
SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to arm
MPRINT(CHK_VAR):   call symputx("dm_arm",ind,'g');
SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to arm
MPRINT(CHK_VAR):   call symputx("dm_arm_type",type,'g');
SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to arm
MPRINT(CHK_VAR):   call symputx("dm_arm_len",len,'g');
MPRINT(CHK_VAR):   run;

NOTE: The data set WORK.CHK_VAR_DM_ARM has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CHK_VAR):   data rpt_chk_var;
SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to arm
MPRINT(CHK_VAR):   merge rpt_chk_var chk_var_dm_arm;
MPRINT(CHK_VAR):   by ds var;
MPRINT(CHK_VAR):   run;

NOTE: There were 6 observations read from the data set WORK.RPT_CHK_VAR.
NOTE: There were 1 observations read from the data set WORK.CHK_VAR_DM_ARM.
151                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

NOTE: The data set WORK.RPT_CHK_VAR has 7 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(CHK_VAR):   proc datasets library=work nolist nodetails;
SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to arm
MPRINT(CHK_VAR):   delete chk_var_dm_arm;
MPRINT(CHK_VAR):   quit;

NOTE: Deleting WORK.CHK_VAR_DM_ARM (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SETUP):  ;
MPRINT(SETUP):   proc sql noprint;
SYMBOLGEN:  Macro variable DM_ACTARM resolves to 1
SYMBOLGEN:  Macro variable DM_ARM resolves to 1
MPRINT(SETUP):   insert into rpt_chk_var_req set chk = 'VAR', ds = 'DM', var = 'ACTARM or ARM', condition = 'EXISTS', ind = 1;
NOTE: 1 row was inserted into WORK.RPT_CHK_VAR_REQ.

MPRINT(SETUP):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

SYMBOLGEN:  Macro variable DM_ACTARM resolves to 1
SYMBOLGEN:  Macro variable AE_AEBODSYS resolves to 1
SYMBOLGEN:  Macro variable AE_AEDECOD resolves to 1
SYMBOLGEN:  Macro variable AE_USUBJID resolves to 1
SYMBOLGEN:  Macro variable DM_ACTARM resolves to 1
SYMBOLGEN:  Macro variable DM_ARM resolves to 1
SYMBOLGEN:  Macro variable DM_USUBJID resolves to 1
SYMBOLGEN:  Macro variable EX_USUBJID resolves to 1
SYMBOLGEN:  Macro variable DM_SUBJ_GT0 resolves to 1
SYMBOLGEN:  Macro variable SETUP_REQ_VAR resolves to 1
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aestdtc
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aestdtc
MPRINT(CHK_VAR):   data chk_var_ae_aestdtc;
MPRINT(CHK_VAR):   length chk $12 ds $32 var $36 type $1 len 8. condition $200 ind 8.;
MPRINT(CHK_VAR):   chk = 'VAR';
SYMBOLGEN:  Macro variable DS resolves to ae
MPRINT(CHK_VAR):   ds = upcase("ae");
SYMBOLGEN:  Macro variable VAR resolves to aestdtc
MPRINT(CHK_VAR):   var = upcase("aestdtc");
MPRINT(CHK_VAR):   condition = 'EXISTS';
SYMBOLGEN:  Macro variable LIB resolves to work
SYMBOLGEN:  Macro variable DS resolves to ae
MPRINT(CHK_VAR):   dsid = open("work.ae");
MPRINT(CHK_VAR):   if dsid then do;
SYMBOLGEN:  Macro variable VAR resolves to aestdtc
152                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

MPRINT(CHK_VAR):   ind = ifn(varnum(dsid,upcase("aestdtc"))>0,1,0);
MPRINT(CHK_VAR):   if ind then do;
SYMBOLGEN:  Macro variable VAR resolves to aestdtc
MPRINT(CHK_VAR):   type = vartype(dsid,varnum(dsid,upcase("aestdtc")));
SYMBOLGEN:  Macro variable VAR resolves to aestdtc
MPRINT(CHK_VAR):   len = varlen(dsid,varnum(dsid,upcase("aestdtc")));
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   else do;
MPRINT(CHK_VAR):   type = '';
MPRINT(CHK_VAR):   len = -1;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   rc = close(dsid);
MPRINT(CHK_VAR):   drop rc;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   else do;
MPRINT(CHK_VAR):   ind = 0;
MPRINT(CHK_VAR):   type = '';
MPRINT(CHK_VAR):   len = -1;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   drop dsid;
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aestdtc
MPRINT(CHK_VAR):   call symputx("ae_aestdtc",ind,'g');
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aestdtc
MPRINT(CHK_VAR):   call symputx("ae_aestdtc_type",type,'g');
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aestdtc
MPRINT(CHK_VAR):   call symputx("ae_aestdtc_len",len,'g');
MPRINT(CHK_VAR):   run;

NOTE: The data set WORK.CHK_VAR_AE_AESTDTC has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CHK_VAR):   data rpt_chk_var;
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aestdtc
MPRINT(CHK_VAR):   merge rpt_chk_var chk_var_ae_aestdtc;
MPRINT(CHK_VAR):   by ds var;
MPRINT(CHK_VAR):   run;

NOTE: There were 7 observations read from the data set WORK.RPT_CHK_VAR.
NOTE: There were 1 observations read from the data set WORK.CHK_VAR_AE_AESTDTC.
NOTE: The data set WORK.RPT_CHK_VAR has 8 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(CHK_VAR):   proc datasets library=work nolist nodetails;
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aestdtc
MPRINT(CHK_VAR):   delete chk_var_ae_aestdtc;
MPRINT(CHK_VAR):   quit;

153                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

NOTE: Deleting WORK.CHK_VAR_AE_AESTDTC (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SETUP):  ;
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aeser
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aeser
MPRINT(CHK_VAR):   data chk_var_ae_aeser;
MPRINT(CHK_VAR):   length chk $12 ds $32 var $36 type $1 len 8. condition $200 ind 8.;
MPRINT(CHK_VAR):   chk = 'VAR';
SYMBOLGEN:  Macro variable DS resolves to ae
MPRINT(CHK_VAR):   ds = upcase("ae");
SYMBOLGEN:  Macro variable VAR resolves to aeser
MPRINT(CHK_VAR):   var = upcase("aeser");
MPRINT(CHK_VAR):   condition = 'EXISTS';
SYMBOLGEN:  Macro variable LIB resolves to work
SYMBOLGEN:  Macro variable DS resolves to ae
MPRINT(CHK_VAR):   dsid = open("work.ae");
MPRINT(CHK_VAR):   if dsid then do;
SYMBOLGEN:  Macro variable VAR resolves to aeser
MPRINT(CHK_VAR):   ind = ifn(varnum(dsid,upcase("aeser"))>0,1,0);
MPRINT(CHK_VAR):   if ind then do;
SYMBOLGEN:  Macro variable VAR resolves to aeser
MPRINT(CHK_VAR):   type = vartype(dsid,varnum(dsid,upcase("aeser")));
SYMBOLGEN:  Macro variable VAR resolves to aeser
MPRINT(CHK_VAR):   len = varlen(dsid,varnum(dsid,upcase("aeser")));
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   else do;
MPRINT(CHK_VAR):   type = '';
MPRINT(CHK_VAR):   len = -1;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   rc = close(dsid);
MPRINT(CHK_VAR):   drop rc;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   else do;
MPRINT(CHK_VAR):   ind = 0;
MPRINT(CHK_VAR):   type = '';
MPRINT(CHK_VAR):   len = -1;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   drop dsid;
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aeser
MPRINT(CHK_VAR):   call symputx("ae_aeser",ind,'g');
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aeser
MPRINT(CHK_VAR):   call symputx("ae_aeser_type",type,'g');
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aeser
MPRINT(CHK_VAR):   call symputx("ae_aeser_len",len,'g');
MPRINT(CHK_VAR):   run;

NOTE: The data set WORK.CHK_VAR_AE_AESER has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
154                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

      cpu time            0.00 seconds
      

MPRINT(CHK_VAR):   data rpt_chk_var;
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aeser
MPRINT(CHK_VAR):   merge rpt_chk_var chk_var_ae_aeser;
MPRINT(CHK_VAR):   by ds var;
MPRINT(CHK_VAR):   run;

NOTE: There were 8 observations read from the data set WORK.RPT_CHK_VAR.
NOTE: There were 1 observations read from the data set WORK.CHK_VAR_AE_AESER.
NOTE: The data set WORK.RPT_CHK_VAR has 9 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(CHK_VAR):   proc datasets library=work nolist nodetails;
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aeser
MPRINT(CHK_VAR):   delete chk_var_ae_aeser;
MPRINT(CHK_VAR):   quit;

NOTE: Deleting WORK.CHK_VAR_AE_AESER (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SETUP):  ;
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aesev
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aesev
MPRINT(CHK_VAR):   data chk_var_ae_aesev;
MPRINT(CHK_VAR):   length chk $12 ds $32 var $36 type $1 len 8. condition $200 ind 8.;
MPRINT(CHK_VAR):   chk = 'VAR';
SYMBOLGEN:  Macro variable DS resolves to ae
MPRINT(CHK_VAR):   ds = upcase("ae");
SYMBOLGEN:  Macro variable VAR resolves to aesev
MPRINT(CHK_VAR):   var = upcase("aesev");
MPRINT(CHK_VAR):   condition = 'EXISTS';
SYMBOLGEN:  Macro variable LIB resolves to work
SYMBOLGEN:  Macro variable DS resolves to ae
MPRINT(CHK_VAR):   dsid = open("work.ae");
MPRINT(CHK_VAR):   if dsid then do;
SYMBOLGEN:  Macro variable VAR resolves to aesev
MPRINT(CHK_VAR):   ind = ifn(varnum(dsid,upcase("aesev"))>0,1,0);
MPRINT(CHK_VAR):   if ind then do;
SYMBOLGEN:  Macro variable VAR resolves to aesev
MPRINT(CHK_VAR):   type = vartype(dsid,varnum(dsid,upcase("aesev")));
SYMBOLGEN:  Macro variable VAR resolves to aesev
MPRINT(CHK_VAR):   len = varlen(dsid,varnum(dsid,upcase("aesev")));
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   else do;
MPRINT(CHK_VAR):   type = '';
MPRINT(CHK_VAR):   len = -1;
155                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   rc = close(dsid);
MPRINT(CHK_VAR):   drop rc;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   else do;
MPRINT(CHK_VAR):   ind = 0;
MPRINT(CHK_VAR):   type = '';
MPRINT(CHK_VAR):   len = -1;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   drop dsid;
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aesev
MPRINT(CHK_VAR):   call symputx("ae_aesev",ind,'g');
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aesev
MPRINT(CHK_VAR):   call symputx("ae_aesev_type",type,'g');
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aesev
MPRINT(CHK_VAR):   call symputx("ae_aesev_len",len,'g');
MPRINT(CHK_VAR):   run;

NOTE: The data set WORK.CHK_VAR_AE_AESEV has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CHK_VAR):   data rpt_chk_var;
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aesev
MPRINT(CHK_VAR):   merge rpt_chk_var chk_var_ae_aesev;
MPRINT(CHK_VAR):   by ds var;
MPRINT(CHK_VAR):   run;

NOTE: There were 9 observations read from the data set WORK.RPT_CHK_VAR.
NOTE: There were 1 observations read from the data set WORK.CHK_VAR_AE_AESEV.
NOTE: The data set WORK.RPT_CHK_VAR has 10 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(CHK_VAR):   proc datasets library=work nolist nodetails;
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aesev
MPRINT(CHK_VAR):   delete chk_var_ae_aesev;
MPRINT(CHK_VAR):   quit;

NOTE: Deleting WORK.CHK_VAR_AE_AESEV (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SETUP):  ;
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aetoxgr
SYMBOLGEN:  Macro variable DS resolves to ae
156                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

SYMBOLGEN:  Macro variable VAR resolves to aetoxgr
MPRINT(CHK_VAR):   data chk_var_ae_aetoxgr;
MPRINT(CHK_VAR):   length chk $12 ds $32 var $36 type $1 len 8. condition $200 ind 8.;
MPRINT(CHK_VAR):   chk = 'VAR';
SYMBOLGEN:  Macro variable DS resolves to ae
MPRINT(CHK_VAR):   ds = upcase("ae");
SYMBOLGEN:  Macro variable VAR resolves to aetoxgr
MPRINT(CHK_VAR):   var = upcase("aetoxgr");
MPRINT(CHK_VAR):   condition = 'EXISTS';
SYMBOLGEN:  Macro variable LIB resolves to work
SYMBOLGEN:  Macro variable DS resolves to ae
MPRINT(CHK_VAR):   dsid = open("work.ae");
MPRINT(CHK_VAR):   if dsid then do;
SYMBOLGEN:  Macro variable VAR resolves to aetoxgr
MPRINT(CHK_VAR):   ind = ifn(varnum(dsid,upcase("aetoxgr"))>0,1,0);
MPRINT(CHK_VAR):   if ind then do;
SYMBOLGEN:  Macro variable VAR resolves to aetoxgr
MPRINT(CHK_VAR):   type = vartype(dsid,varnum(dsid,upcase("aetoxgr")));
SYMBOLGEN:  Macro variable VAR resolves to aetoxgr
MPRINT(CHK_VAR):   len = varlen(dsid,varnum(dsid,upcase("aetoxgr")));
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   else do;
MPRINT(CHK_VAR):   type = '';
MPRINT(CHK_VAR):   len = -1;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   rc = close(dsid);
MPRINT(CHK_VAR):   drop rc;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   else do;
MPRINT(CHK_VAR):   ind = 0;
MPRINT(CHK_VAR):   type = '';
MPRINT(CHK_VAR):   len = -1;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   drop dsid;
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aetoxgr
MPRINT(CHK_VAR):   call symputx("ae_aetoxgr",ind,'g');
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aetoxgr
MPRINT(CHK_VAR):   call symputx("ae_aetoxgr_type",type,'g');
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aetoxgr
MPRINT(CHK_VAR):   call symputx("ae_aetoxgr_len",len,'g');
MPRINT(CHK_VAR):   run;

NOTE: The data set WORK.CHK_VAR_AE_AETOXGR has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CHK_VAR):   data rpt_chk_var;
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aetoxgr
MPRINT(CHK_VAR):   merge rpt_chk_var chk_var_ae_aetoxgr;
MPRINT(CHK_VAR):   by ds var;
MPRINT(CHK_VAR):   run;

157                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

NOTE: There were 10 observations read from the data set WORK.RPT_CHK_VAR.
NOTE: There were 1 observations read from the data set WORK.CHK_VAR_AE_AETOXGR.
NOTE: The data set WORK.RPT_CHK_VAR has 11 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(CHK_VAR):   proc datasets library=work nolist nodetails;
SYMBOLGEN:  Macro variable DS resolves to ae
SYMBOLGEN:  Macro variable VAR resolves to aetoxgr
MPRINT(CHK_VAR):   delete chk_var_ae_aetoxgr;
MPRINT(CHK_VAR):   quit;

NOTE: Deleting WORK.CHK_VAR_AE_AETOXGR (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SETUP):  ;
SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to rfstdtc
SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to rfstdtc
MPRINT(CHK_VAR):   data chk_var_dm_rfstdtc;
MPRINT(CHK_VAR):   length chk $12 ds $32 var $36 type $1 len 8. condition $200 ind 8.;
MPRINT(CHK_VAR):   chk = 'VAR';
SYMBOLGEN:  Macro variable DS resolves to dm
MPRINT(CHK_VAR):   ds = upcase("dm");
SYMBOLGEN:  Macro variable VAR resolves to rfstdtc
MPRINT(CHK_VAR):   var = upcase("rfstdtc");
MPRINT(CHK_VAR):   condition = 'EXISTS';
SYMBOLGEN:  Macro variable LIB resolves to work
SYMBOLGEN:  Macro variable DS resolves to dm
MPRINT(CHK_VAR):   dsid = open("work.dm");
MPRINT(CHK_VAR):   if dsid then do;
SYMBOLGEN:  Macro variable VAR resolves to rfstdtc
MPRINT(CHK_VAR):   ind = ifn(varnum(dsid,upcase("rfstdtc"))>0,1,0);
MPRINT(CHK_VAR):   if ind then do;
SYMBOLGEN:  Macro variable VAR resolves to rfstdtc
MPRINT(CHK_VAR):   type = vartype(dsid,varnum(dsid,upcase("rfstdtc")));
SYMBOLGEN:  Macro variable VAR resolves to rfstdtc
MPRINT(CHK_VAR):   len = varlen(dsid,varnum(dsid,upcase("rfstdtc")));
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   else do;
MPRINT(CHK_VAR):   type = '';
MPRINT(CHK_VAR):   len = -1;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   rc = close(dsid);
MPRINT(CHK_VAR):   drop rc;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   else do;
MPRINT(CHK_VAR):   ind = 0;
MPRINT(CHK_VAR):   type = '';
MPRINT(CHK_VAR):   len = -1;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   drop dsid;
158                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to rfstdtc
MPRINT(CHK_VAR):   call symputx("dm_rfstdtc",ind,'g');
SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to rfstdtc
MPRINT(CHK_VAR):   call symputx("dm_rfstdtc_type",type,'g');
SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to rfstdtc
MPRINT(CHK_VAR):   call symputx("dm_rfstdtc_len",len,'g');
MPRINT(CHK_VAR):   run;

NOTE: The data set WORK.CHK_VAR_DM_RFSTDTC has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CHK_VAR):   data rpt_chk_var;
SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to rfstdtc
MPRINT(CHK_VAR):   merge rpt_chk_var chk_var_dm_rfstdtc;
MPRINT(CHK_VAR):   by ds var;
MPRINT(CHK_VAR):   run;

NOTE: There were 11 observations read from the data set WORK.RPT_CHK_VAR.
NOTE: There were 1 observations read from the data set WORK.CHK_VAR_DM_RFSTDTC.
NOTE: The data set WORK.RPT_CHK_VAR has 12 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(CHK_VAR):   proc datasets library=work nolist nodetails;
SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to rfstdtc
MPRINT(CHK_VAR):   delete chk_var_dm_rfstdtc;
MPRINT(CHK_VAR):   quit;

NOTE: Deleting WORK.CHK_VAR_DM_RFSTDTC (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SETUP):  ;
SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to rfendtc
SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to rfendtc
MPRINT(CHK_VAR):   data chk_var_dm_rfendtc;
MPRINT(CHK_VAR):   length chk $12 ds $32 var $36 type $1 len 8. condition $200 ind 8.;
MPRINT(CHK_VAR):   chk = 'VAR';
SYMBOLGEN:  Macro variable DS resolves to dm
MPRINT(CHK_VAR):   ds = upcase("dm");
SYMBOLGEN:  Macro variable VAR resolves to rfendtc
MPRINT(CHK_VAR):   var = upcase("rfendtc");
MPRINT(CHK_VAR):   condition = 'EXISTS';
SYMBOLGEN:  Macro variable LIB resolves to work
159                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

SYMBOLGEN:  Macro variable DS resolves to dm
MPRINT(CHK_VAR):   dsid = open("work.dm");
MPRINT(CHK_VAR):   if dsid then do;
SYMBOLGEN:  Macro variable VAR resolves to rfendtc
MPRINT(CHK_VAR):   ind = ifn(varnum(dsid,upcase("rfendtc"))>0,1,0);
MPRINT(CHK_VAR):   if ind then do;
SYMBOLGEN:  Macro variable VAR resolves to rfendtc
MPRINT(CHK_VAR):   type = vartype(dsid,varnum(dsid,upcase("rfendtc")));
SYMBOLGEN:  Macro variable VAR resolves to rfendtc
MPRINT(CHK_VAR):   len = varlen(dsid,varnum(dsid,upcase("rfendtc")));
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   else do;
MPRINT(CHK_VAR):   type = '';
MPRINT(CHK_VAR):   len = -1;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   rc = close(dsid);
MPRINT(CHK_VAR):   drop rc;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   else do;
MPRINT(CHK_VAR):   ind = 0;
MPRINT(CHK_VAR):   type = '';
MPRINT(CHK_VAR):   len = -1;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   drop dsid;
SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to rfendtc
MPRINT(CHK_VAR):   call symputx("dm_rfendtc",ind,'g');
SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to rfendtc
MPRINT(CHK_VAR):   call symputx("dm_rfendtc_type",type,'g');
SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to rfendtc
MPRINT(CHK_VAR):   call symputx("dm_rfendtc_len",len,'g');
MPRINT(CHK_VAR):   run;

NOTE: The data set WORK.CHK_VAR_DM_RFENDTC has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(CHK_VAR):   data rpt_chk_var;
SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to rfendtc
MPRINT(CHK_VAR):   merge rpt_chk_var chk_var_dm_rfendtc;
MPRINT(CHK_VAR):   by ds var;
MPRINT(CHK_VAR):   run;

NOTE: There were 12 observations read from the data set WORK.RPT_CHK_VAR.
NOTE: There were 1 observations read from the data set WORK.CHK_VAR_DM_RFENDTC.
NOTE: The data set WORK.RPT_CHK_VAR has 13 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(CHK_VAR):   proc datasets library=work nolist nodetails;
SYMBOLGEN:  Macro variable DS resolves to dm
160                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

SYMBOLGEN:  Macro variable VAR resolves to rfendtc
MPRINT(CHK_VAR):   delete chk_var_dm_rfendtc;
MPRINT(CHK_VAR):   quit;

NOTE: Deleting WORK.CHK_VAR_DM_RFENDTC (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SETUP):  ;
SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to armcd
SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to armcd
MPRINT(CHK_VAR):   data chk_var_dm_armcd;
MPRINT(CHK_VAR):   length chk $12 ds $32 var $36 type $1 len 8. condition $200 ind 8.;
MPRINT(CHK_VAR):   chk = 'VAR';
SYMBOLGEN:  Macro variable DS resolves to dm
MPRINT(CHK_VAR):   ds = upcase("dm");
SYMBOLGEN:  Macro variable VAR resolves to armcd
MPRINT(CHK_VAR):   var = upcase("armcd");
MPRINT(CHK_VAR):   condition = 'EXISTS';
SYMBOLGEN:  Macro variable LIB resolves to work
SYMBOLGEN:  Macro variable DS resolves to dm
MPRINT(CHK_VAR):   dsid = open("work.dm");
MPRINT(CHK_VAR):   if dsid then do;
SYMBOLGEN:  Macro variable VAR resolves to armcd
MPRINT(CHK_VAR):   ind = ifn(varnum(dsid,upcase("armcd"))>0,1,0);
MPRINT(CHK_VAR):   if ind then do;
SYMBOLGEN:  Macro variable VAR resolves to armcd
MPRINT(CHK_VAR):   type = vartype(dsid,varnum(dsid,upcase("armcd")));
SYMBOLGEN:  Macro variable VAR resolves to armcd
MPRINT(CHK_VAR):   len = varlen(dsid,varnum(dsid,upcase("armcd")));
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   else do;
MPRINT(CHK_VAR):   type = '';
MPRINT(CHK_VAR):   len = -1;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   rc = close(dsid);
MPRINT(CHK_VAR):   drop rc;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   else do;
MPRINT(CHK_VAR):   ind = 0;
MPRINT(CHK_VAR):   type = '';
MPRINT(CHK_VAR):   len = -1;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   drop dsid;
SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to armcd
MPRINT(CHK_VAR):   call symputx("dm_armcd",ind,'g');
SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to armcd
MPRINT(CHK_VAR):   call symputx("dm_armcd_type",type,'g');
SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to armcd
MPRINT(CHK_VAR):   call symputx("dm_armcd_len",len,'g');
MPRINT(CHK_VAR):   run;
161                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016


NOTE: The data set WORK.CHK_VAR_DM_ARMCD has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(CHK_VAR):   data rpt_chk_var;
SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to armcd
MPRINT(CHK_VAR):   merge rpt_chk_var chk_var_dm_armcd;
MPRINT(CHK_VAR):   by ds var;
MPRINT(CHK_VAR):   run;

NOTE: There were 13 observations read from the data set WORK.RPT_CHK_VAR.
NOTE: There were 1 observations read from the data set WORK.CHK_VAR_DM_ARMCD.
NOTE: The data set WORK.RPT_CHK_VAR has 14 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(CHK_VAR):   proc datasets library=work nolist nodetails;
SYMBOLGEN:  Macro variable DS resolves to dm
SYMBOLGEN:  Macro variable VAR resolves to armcd
MPRINT(CHK_VAR):   delete chk_var_dm_armcd;
MPRINT(CHK_VAR):   quit;

NOTE: Deleting WORK.CHK_VAR_DM_ARMCD (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SETUP):  ;
SYMBOLGEN:  Macro variable DS resolves to ex
SYMBOLGEN:  Macro variable VAR resolves to exstdtc
SYMBOLGEN:  Macro variable DS resolves to ex
SYMBOLGEN:  Macro variable VAR resolves to exstdtc
MPRINT(CHK_VAR):   data chk_var_ex_exstdtc;
MPRINT(CHK_VAR):   length chk $12 ds $32 var $36 type $1 len 8. condition $200 ind 8.;
MPRINT(CHK_VAR):   chk = 'VAR';
SYMBOLGEN:  Macro variable DS resolves to ex
MPRINT(CHK_VAR):   ds = upcase("ex");
SYMBOLGEN:  Macro variable VAR resolves to exstdtc
MPRINT(CHK_VAR):   var = upcase("exstdtc");
MPRINT(CHK_VAR):   condition = 'EXISTS';
SYMBOLGEN:  Macro variable LIB resolves to work
SYMBOLGEN:  Macro variable DS resolves to ex
MPRINT(CHK_VAR):   dsid = open("work.ex");
MPRINT(CHK_VAR):   if dsid then do;
SYMBOLGEN:  Macro variable VAR resolves to exstdtc
MPRINT(CHK_VAR):   ind = ifn(varnum(dsid,upcase("exstdtc"))>0,1,0);
MPRINT(CHK_VAR):   if ind then do;
SYMBOLGEN:  Macro variable VAR resolves to exstdtc
MPRINT(CHK_VAR):   type = vartype(dsid,varnum(dsid,upcase("exstdtc")));
SYMBOLGEN:  Macro variable VAR resolves to exstdtc
MPRINT(CHK_VAR):   len = varlen(dsid,varnum(dsid,upcase("exstdtc")));
162                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   else do;
MPRINT(CHK_VAR):   type = '';
MPRINT(CHK_VAR):   len = -1;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   rc = close(dsid);
MPRINT(CHK_VAR):   drop rc;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   else do;
MPRINT(CHK_VAR):   ind = 0;
MPRINT(CHK_VAR):   type = '';
MPRINT(CHK_VAR):   len = -1;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   drop dsid;
SYMBOLGEN:  Macro variable DS resolves to ex
SYMBOLGEN:  Macro variable VAR resolves to exstdtc
MPRINT(CHK_VAR):   call symputx("ex_exstdtc",ind,'g');
SYMBOLGEN:  Macro variable DS resolves to ex
SYMBOLGEN:  Macro variable VAR resolves to exstdtc
MPRINT(CHK_VAR):   call symputx("ex_exstdtc_type",type,'g');
SYMBOLGEN:  Macro variable DS resolves to ex
SYMBOLGEN:  Macro variable VAR resolves to exstdtc
MPRINT(CHK_VAR):   call symputx("ex_exstdtc_len",len,'g');
MPRINT(CHK_VAR):   run;

NOTE: The data set WORK.CHK_VAR_EX_EXSTDTC has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(CHK_VAR):   data rpt_chk_var;
SYMBOLGEN:  Macro variable DS resolves to ex
SYMBOLGEN:  Macro variable VAR resolves to exstdtc
MPRINT(CHK_VAR):   merge rpt_chk_var chk_var_ex_exstdtc;
MPRINT(CHK_VAR):   by ds var;
MPRINT(CHK_VAR):   run;

NOTE: There were 14 observations read from the data set WORK.RPT_CHK_VAR.
NOTE: There were 1 observations read from the data set WORK.CHK_VAR_EX_EXSTDTC.
NOTE: The data set WORK.RPT_CHK_VAR has 15 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(CHK_VAR):   proc datasets library=work nolist nodetails;
SYMBOLGEN:  Macro variable DS resolves to ex
SYMBOLGEN:  Macro variable VAR resolves to exstdtc
MPRINT(CHK_VAR):   delete chk_var_ex_exstdtc;
MPRINT(CHK_VAR):   quit;

NOTE: Deleting WORK.CHK_VAR_EX_EXSTDTC (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

163                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

MPRINT(SETUP):  ;
SYMBOLGEN:  Macro variable DS resolves to ex
SYMBOLGEN:  Macro variable VAR resolves to exendtc
SYMBOLGEN:  Macro variable DS resolves to ex
SYMBOLGEN:  Macro variable VAR resolves to exendtc
MPRINT(CHK_VAR):   data chk_var_ex_exendtc;
MPRINT(CHK_VAR):   length chk $12 ds $32 var $36 type $1 len 8. condition $200 ind 8.;
MPRINT(CHK_VAR):   chk = 'VAR';
SYMBOLGEN:  Macro variable DS resolves to ex
MPRINT(CHK_VAR):   ds = upcase("ex");
SYMBOLGEN:  Macro variable VAR resolves to exendtc
MPRINT(CHK_VAR):   var = upcase("exendtc");
MPRINT(CHK_VAR):   condition = 'EXISTS';
SYMBOLGEN:  Macro variable LIB resolves to work
SYMBOLGEN:  Macro variable DS resolves to ex
MPRINT(CHK_VAR):   dsid = open("work.ex");
MPRINT(CHK_VAR):   if dsid then do;
SYMBOLGEN:  Macro variable VAR resolves to exendtc
MPRINT(CHK_VAR):   ind = ifn(varnum(dsid,upcase("exendtc"))>0,1,0);
MPRINT(CHK_VAR):   if ind then do;
SYMBOLGEN:  Macro variable VAR resolves to exendtc
MPRINT(CHK_VAR):   type = vartype(dsid,varnum(dsid,upcase("exendtc")));
SYMBOLGEN:  Macro variable VAR resolves to exendtc
MPRINT(CHK_VAR):   len = varlen(dsid,varnum(dsid,upcase("exendtc")));
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   else do;
MPRINT(CHK_VAR):   type = '';
MPRINT(CHK_VAR):   len = -1;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   rc = close(dsid);
MPRINT(CHK_VAR):   drop rc;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   else do;
MPRINT(CHK_VAR):   ind = 0;
MPRINT(CHK_VAR):   type = '';
MPRINT(CHK_VAR):   len = -1;
MPRINT(CHK_VAR):   end;
MPRINT(CHK_VAR):   drop dsid;
SYMBOLGEN:  Macro variable DS resolves to ex
SYMBOLGEN:  Macro variable VAR resolves to exendtc
MPRINT(CHK_VAR):   call symputx("ex_exendtc",ind,'g');
SYMBOLGEN:  Macro variable DS resolves to ex
SYMBOLGEN:  Macro variable VAR resolves to exendtc
MPRINT(CHK_VAR):   call symputx("ex_exendtc_type",type,'g');
SYMBOLGEN:  Macro variable DS resolves to ex
SYMBOLGEN:  Macro variable VAR resolves to exendtc
MPRINT(CHK_VAR):   call symputx("ex_exendtc_len",len,'g');
MPRINT(CHK_VAR):   run;

NOTE: The data set WORK.CHK_VAR_EX_EXENDTC has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CHK_VAR):   data rpt_chk_var;
SYMBOLGEN:  Macro variable DS resolves to ex
SYMBOLGEN:  Macro variable VAR resolves to exendtc
164                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

MPRINT(CHK_VAR):   merge rpt_chk_var chk_var_ex_exendtc;
MPRINT(CHK_VAR):   by ds var;
MPRINT(CHK_VAR):   run;

NOTE: There were 15 observations read from the data set WORK.RPT_CHK_VAR.
NOTE: There were 1 observations read from the data set WORK.CHK_VAR_EX_EXENDTC.
NOTE: The data set WORK.RPT_CHK_VAR has 16 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(CHK_VAR):   proc datasets library=work nolist nodetails;
SYMBOLGEN:  Macro variable DS resolves to ex
SYMBOLGEN:  Macro variable VAR resolves to exendtc
MPRINT(CHK_VAR):   delete chk_var_ex_exendtc;
MPRINT(CHK_VAR):   quit;

NOTE: Deleting WORK.CHK_VAR_EX_EXENDTC (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SETUP):  ;
SYMBOLGEN:  Macro variable EX_EXSTDTC resolves to 1
SYMBOLGEN:  Macro variable EX_EXENDTC resolves to 1
SYMBOLGEN:  Macro variable DM_RFSTDTC resolves to 1
SYMBOLGEN:  Macro variable DM_RFENDTC resolves to 1
SYMBOLGEN:  Macro variable AE_AESTDTC resolves to 1
SYMBOLGEN:  Macro variable EX_EXDTC resolves to 1
SYMBOLGEN:  Macro variable DM_RFDTC resolves to 1
MPRINT(LOG_MSG):   options nonotes;
MPRINT(LOG_MSG):   data _null_;
SYMBOLGEN:  Macro variable TEXT resolves to DEMOGRAPHICS DOMAIN (DM)
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(LOG_MSG):   length = length("DEMOGRAPHICS DOMAIN (DM)");
MPRINT(LOG_MSG):   length string $100 separator $100;
MPRINT(LOG_MSG):   do i = 1 to length + 4;
MPRINT(LOG_MSG):   separator = trim(left(separator))||"*";
MPRINT(LOG_MSG):   end;
SYMBOLGEN:  Macro variable TEXT resolves to DEMOGRAPHICS DOMAIN (DM)
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(LOG_MSG):   string = '* '||trim("DEMOGRAPHICS DOMAIN (DM)")||' *';
MPRINT(LOG_MSG):   put separator;
MPRINT(LOG_MSG):   put string;
MPRINT(LOG_MSG):   put separator;
MPRINT(LOG_MSG):   run;
****************************
* DEMOGRAPHICS DOMAIN (DM) *
****************************
MPRINT(LOG_MSG):   options notes;
MPRINT(SETUP):  ;
MPRINT(SETUP):   data all_dm;
SYMBOLGEN:  Macro variable ARM_VAR resolves to ACTARM
SYMBOLGEN:  Macro variable DM_ARMCD resolves to 1
SYMBOLGEN:  Macro variable VLD_SW resolves to 1
SYMBOLGEN:  Macro variable DM_RFDTC resolves to 1
165                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

MPRINT(SETUP):   set dm(keep=usubjid ACTARM armcd rfstdtc rfendtc );
SYMBOLGEN:  Macro variable ARM_VAR resolves to ACTARM
MPRINT(SETUP):   arm = ACTARM;
SYMBOLGEN:  Macro variable DM_ARMCD resolves to 1
MPRINT(SETUP):   if upcase(armcd) in ('SCRNFAIL' 'NOTASSGN') then delete;
SYMBOLGEN:  Macro variable VLD_SW resolves to 1
SYMBOLGEN:  Macro variable DM_RFDTC resolves to 1
MPRINT(SETUP):   length rfstdt 8. rfendt 8.;
MPRINT(SETUP):   format rfstdt e8601da. rfendt e8601da.;
MPRINT(SETUP):   label rfstdt= 'Subject Reference Start Date' rfendt= 'Subject Reference End Date';
MPRINT(SETUP):   call missing(rfstdt,rfendt);
MPRINT(SETUP):   rfstdt_len = length(trim(rfstdtc));
MPRINT(SETUP):   if rfstdt_len >= 10 then rfstdt = input(substr(rfstdtc,1,10),?? e8601da.);
MPRINT(SETUP):   else if rfstdt_len >= 7 then rfstdt = input(substr(rfstdtc,1,7)||'-01',?? e8601da.);
MPRINT(SETUP):   rfendt_len = length(trim(rfendtc));
MPRINT(SETUP):   if rfendt_len >= 10 then rfendt = input(substr(rfendtc,1,10),?? e8601da.);
MPRINT(SETUP):   else if rfendt_len >= 7 then rfendt = input(substr(rfendtc,1,7)||'-01',?? e8601da.);
MPRINT(SETUP):   run;

NOTE: There were 162 observations read from the data set WORK.DM.
NOTE: The data set WORK.ALL_DM has 162 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(SETUP):   proc sort data=all_dm;
MPRINT(SETUP):   by usubjid;
MPRINT(SETUP):   run;

NOTE: There were 162 observations read from the data set WORK.ALL_DM.
NOTE: The data set WORK.ALL_DM has 162 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(LOG_MSG):   options nonotes;
MPRINT(LOG_MSG):   data _null_;
SYMBOLGEN:  Macro variable TEXT resolves to EXPOSURE DOMAIN (EX)
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(LOG_MSG):   length = length("EXPOSURE DOMAIN (EX)");
MPRINT(LOG_MSG):   length string $100 separator $100;
MPRINT(LOG_MSG):   do i = 1 to length + 4;
MPRINT(LOG_MSG):   separator = trim(left(separator))||"*";
MPRINT(LOG_MSG):   end;
SYMBOLGEN:  Macro variable TEXT resolves to EXPOSURE DOMAIN (EX)
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(LOG_MSG):   string = '* '||trim("EXPOSURE DOMAIN (EX)")||' *';
MPRINT(LOG_MSG):   put separator;
MPRINT(LOG_MSG):   put string;
MPRINT(LOG_MSG):   put separator;
MPRINT(LOG_MSG):   run;
************************
* EXPOSURE DOMAIN (EX) *
************************
MPRINT(LOG_MSG):   options notes;
MPRINT(SETUP):  ;
166                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

MPRINT(SETUP):   proc sql noprint;
SYMBOLGEN:  Macro variable VLD_SW resolves to 1
SYMBOLGEN:  Macro variable EX_EXSTDTC resolves to 1
SYMBOLGEN:  Macro variable EX_EXSTDTC resolves to 1
SYMBOLGEN:  Macro variable EX_EXENDTC resolves to 1
MPRINT(SETUP):   create table all_ex(drop=null) as select distinct usubjid, min(input(substr(exstdtc,1,10),? e8601da.)) as exstdt format=e8601da. label='Treatment Start Date', 10 as exstdt_len, 
max(max(input(substr(exstdtc,1,10),? e8601da.)), max(input(substr(exendtc,1,10),? e8601da.))) as exendt format=e8601da. label='Treatment End Date', 10 as exendt_len, . as null from ex group by 
usubjid order by usubjid;
NOTE: Table WORK.ALL_EX created, with 159 rows and 5 columns.

MPRINT(SETUP):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(LOG_MSG):   options nonotes;
MPRINT(LOG_MSG):   data _null_;
SYMBOLGEN:  Macro variable TEXT resolves to SUBJECTS IN SAFETY POPULATION (DM & EX)
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(LOG_MSG):   length = length("SUBJECTS IN SAFETY POPULATION (DM & EX)");
MPRINT(LOG_MSG):   length string $100 separator $100;
MPRINT(LOG_MSG):   do i = 1 to length + 4;
MPRINT(LOG_MSG):   separator = trim(left(separator))||"*";
MPRINT(LOG_MSG):   end;
SYMBOLGEN:  Macro variable TEXT resolves to SUBJECTS IN SAFETY POPULATION (DM & EX)
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(LOG_MSG):   string = '* '||trim("SUBJECTS IN SAFETY POPULATION (DM & EX)")||' *';
MPRINT(LOG_MSG):   put separator;
MPRINT(LOG_MSG):   put string;
MPRINT(LOG_MSG):   put separator;
MPRINT(LOG_MSG):   run;
*******************************************
* SUBJECTS IN SAFETY POPULATION (DM & EX) *
*******************************************
MPRINT(LOG_MSG):   options notes;
MPRINT(SETUP):  ;
SYMBOLGEN:  Macro variable VLD_SW resolves to 1
MPRINT(SETUP):   data all_dm_ex(keep=arm usubjid trtstdt trtstdt_len trtendt trtendt_len) err_dm_ex;
MPRINT(SETUP):   merge all_dm(in=a) all_ex(in=b);
MPRINT(SETUP):   by usubjid;
MPRINT(SETUP):   length err_type $10;
MPRINT(SETUP):   if a and b then output = 1;
MPRINT(SETUP):   else if a then do;
MPRINT(SETUP):  ;
MPRINT(SETUP):   output = 0;
MPRINT(SETUP):   err_type = 'ex';
MPRINT(SETUP):   end;
MPRINT(SETUP):   else delete;
SYMBOLGEN:  Macro variable VLD_SW resolves to 1
MPRINT(SETUP):   if output then do;
MPRINT(SETUP):   format trtstdt e8601da. trtendt e8601da.;
MPRINT(SETUP):   label trtstdt= 'Subject Treatment Start Date' trtendt= 'Subject Treatment End Date';
MPRINT(SETUP):   call missing(trtstdt,trtendt);
SYMBOLGEN:  Macro variable EX_EXDTC resolves to 1
MPRINT(SETUP):   if not missing(exstdt) and not missing(exendt) then do;
MPRINT(SETUP):   trtstdt = exstdt;
MPRINT(SETUP):   trtstdt_len = exstdt_len;
167                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

MPRINT(SETUP):   trtendt = exendt;
MPRINT(SETUP):   trtendt_len = exendt_len;
MPRINT(SETUP):   end;
SYMBOLGEN:  Macro variable DM_RFDTC resolves to 1
MPRINT(SETUP):   if not missing(rfstdt) and not missing(rfendt) and missing(trtstdt) and missing(trtendt) then do;
MPRINT(SETUP):   trtstdt = rfstdt;
MPRINT(SETUP):   trtstdt_len = rfstdt_len;
MPRINT(SETUP):   trtendt = rfendt;
MPRINT(SETUP):   trtendt_len = rfendt_len;
MPRINT(SETUP):   end;
MPRINT(SETUP):   if missing(trtstdt) or missing(trtendt) then do;
MPRINT(SETUP):   output = 0;
MPRINT(SETUP):   err_type = 'dt';
MPRINT(SETUP):   end;
MPRINT(SETUP):   end;
MPRINT(SETUP):   if output then output all_dm_ex;
MPRINT(SETUP):   else output err_dm_ex;
MPRINT(SETUP):   run;

NOTE: There were 162 observations read from the data set WORK.ALL_DM.
NOTE: There were 159 observations read from the data set WORK.ALL_EX.
NOTE: The data set WORK.ALL_DM_EX has 159 observations and 6 variables.
NOTE: The data set WORK.ERR_DM_EX has 3 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.02 seconds
      

MPRINT(SETUP):   proc sql noprint;
MPRINT(SETUP):   create table all_arm as select arm, count(distinct usubjid) as count from all_dm_ex group by arm order by arm;
NOTE: Table WORK.ALL_ARM created, with 3 rows and 2 columns.

MPRINT(SETUP):   select max(length(arm)) into: max_arm_nm_len from all_arm;
MPRINT(SETUP):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(SETUP):   data all_arm;
MPRINT(SETUP):   set all_arm end=eof;
MPRINT(SETUP):   arm_num = _n_;
MPRINT(SETUP):   retain total;
MPRINT(SETUP):   total = sum(total,count);
MPRINT(SETUP):   call symputx('arm_'||put(_n_,8. -L),put(count,8. -L),'g');
MPRINT(SETUP):   if eof then do;
MPRINT(SETUP):   call symputx('arm_count',put(_n_,8. -L),'g');
MPRINT(SETUP):   call symputx('arm_total',put(total,8. -L),'g');
MPRINT(SETUP):   end;
MPRINT(SETUP):   run;

NOTE: There were 3 observations read from the data set WORK.ALL_ARM.
NOTE: The data set WORK.ALL_ARM has 3 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

168                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

MPRINT(SETUP):   data all_dm_ex;
MPRINT(SETUP):   set all_dm_ex;
MPRINT(SETUP):   if _n_ = 1 then do;
MPRINT(SETUP):   declare hash h(dataset:'all_arm');
MPRINT(SETUP):   h.definekey('arm');
MPRINT(SETUP):   h.definedata('arm_num');
MPRINT(SETUP):   h.definedone();
MPRINT(SETUP):   end;
MPRINT(SETUP):   length arm_num 8.;
MPRINT(SETUP):   label arm_num= 'Arm Number';
MPRINT(SETUP):   call missing(arm_num);
MPRINT(SETUP):   rc = h.find();
MPRINT(SETUP):   drop rc;
MPRINT(SETUP):   run;

NOTE: There were 3 observations read from the data set WORK.ALL_ARM.
NOTE: There were 159 observations read from the data set WORK.ALL_DM_EX.
NOTE: The data set WORK.ALL_DM_EX has 159 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.02 seconds
      

MPRINT(LOG_MSG):   options nonotes;
MPRINT(LOG_MSG):   data _null_;
SYMBOLGEN:  Macro variable TEXT resolves to ADVERSE EVENTS DOMAIN (AE)
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(LOG_MSG):   length = length("ADVERSE EVENTS DOMAIN (AE)");
MPRINT(LOG_MSG):   length string $100 separator $100;
MPRINT(LOG_MSG):   do i = 1 to length + 4;
MPRINT(LOG_MSG):   separator = trim(left(separator))||"*";
MPRINT(LOG_MSG):   end;
SYMBOLGEN:  Macro variable TEXT resolves to ADVERSE EVENTS DOMAIN (AE)
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(LOG_MSG):   string = '* '||trim("ADVERSE EVENTS DOMAIN (AE)")||' *';
MPRINT(LOG_MSG):   put separator;
MPRINT(LOG_MSG):   put string;
MPRINT(LOG_MSG):   put separator;
MPRINT(LOG_MSG):   run;
******************************
* ADVERSE EVENTS DOMAIN (AE) *
******************************
MPRINT(LOG_MSG):   options notes;
MPRINT(SETUP):  ;
MPRINT(SETUP):   data all_ae;
MPRINT(SETUP):   retain usubjid aebodsys aedecod aeseq aestdtc;
SYMBOLGEN:  Macro variable AE_AESER resolves to 1
SYMBOLGEN:  Macro variable AE_AESEV resolves to 1
SYMBOLGEN:  Macro variable AE_AETOXGR resolves to 0
SYMBOLGEN:  Macro variable VLD_SW resolves to 1
MPRINT(SETUP):   set ae(keep=usubjid aebodsys aedecod aeseq aeser aesev aestdtc aeendtc );
MPRINT(SETUP):   if not anylower(aebodsys) then aebodsys = propcase(aebodsys);
MPRINT(SETUP):   if not anylower(aedecod) then aedecod = propcase(aedecod);
SYMBOLGEN:  Macro variable AE_AETOXGR resolves to 0
MPRINT(SETUP):   call missing(aetoxgr);
SYMBOLGEN:  Macro variable VLD_SW resolves to 1
MPRINT(SETUP):   format aestdt e8601da.;
MPRINT(SETUP):   label aestdt= 'Adverse Event Start Date';
169                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

MPRINT(SETUP):   call missing(aestdt);
MPRINT(SETUP):   aestdt_len = length(trim(aestdtc));
MPRINT(SETUP):   if aestdt_len >= 10 then aestdt = input(substr(aestdtc,1,10),?? e8601da.);
MPRINT(SETUP):   else if aestdt_len >= 7 then aestdt = mdy(input(substr(aestdtc,6,2),2.),1,input(substr(aestdtc,1,4),4.));
MPRINT(SETUP):   run;

NOTE: There were 596 observations read from the data set WORK.AE.
NOTE: The data set WORK.ALL_AE has 596 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(SETUP):   proc sort data=all_ae;
MPRINT(SETUP):   by usubjid aebodsys aedecod aeseq;
MPRINT(SETUP):   run;

NOTE: There were 596 observations read from the data set WORK.ALL_AE.
NOTE: The data set WORK.ALL_AE has 596 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(LOG_MSG):   options nonotes;
MPRINT(LOG_MSG):   data _null_;
SYMBOLGEN:  Macro variable TEXT resolves to ADVERSE EVENTS FOR SUBJECTS IN SAFETY POPULATION (AE, DM, & EX)
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(LOG_MSG):   length = length("ADVERSE EVENTS FOR SUBJECTS IN SAFETY POPULATION (AE, DM, & EX)");
MPRINT(LOG_MSG):   length string $100 separator $100;
MPRINT(LOG_MSG):   do i = 1 to length + 4;
MPRINT(LOG_MSG):   separator = trim(left(separator))||"*";
MPRINT(LOG_MSG):   end;
SYMBOLGEN:  Macro variable TEXT resolves to ADVERSE EVENTS FOR SUBJECTS IN SAFETY POPULATION (AE, DM, & EX)
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(LOG_MSG):   string = '* '||trim("ADVERSE EVENTS FOR SUBJECTS IN SAFETY POPULATION (AE, DM, & EX)")||' *';
MPRINT(LOG_MSG):   put separator;
MPRINT(LOG_MSG):   put string;
MPRINT(LOG_MSG):   put separator;
MPRINT(LOG_MSG):   run;
*******************************************************************
* ADVERSE EVENTS FOR SUBJECTS IN SAFETY POPULATION (AE, DM, & EX) *
*******************************************************************
MPRINT(LOG_MSG):   options notes;
MPRINT(SETUP):  ;
MPRINT(SETUP):   data all_ae_dm_ex;
MPRINT(SETUP):   merge all_dm_ex(in=a) all_ae(in=b) ;
MPRINT(SETUP):   by usubjid;
MPRINT(SETUP):   if a and b;
MPRINT(SETUP):   run;

NOTE: There were 159 observations read from the data set WORK.ALL_DM_EX.
NOTE: There were 596 observations read from the data set WORK.ALL_AE.
NOTE: The data set WORK.ALL_AE_DM_EX has 596 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      
170                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016


SYMBOLGEN:  Macro variable VLD_SW resolves to 1
MPRINT(SETUP):   data ds_base(drop=err: aestdt aestdt_len trtstdt: trtendt:) err_base(drop=total);
MPRINT(SETUP):   set all_ae_dm_ex end=eof;
MPRINT(SETUP):   total = 'Total';
MPRINT(SETUP):   length err 8 err_type $10 err_desc $50;
MPRINT(SETUP):   call missing(err,err_type,err_desc);
SYMBOLGEN:  Macro variable VLD_SW resolves to 1
MPRINT(SETUP):   if missing(aestdt) then do;
MPRINT(SETUP):   output = 0;
MPRINT(SETUP):   err_type = 'dt';
MPRINT(SETUP):   err = 1;
MPRINT(SETUP):   err_desc = '1. Date missing or incomplete';
MPRINT(SETUP):   end;
MPRINT(SETUP):   else do;
MPRINT(SETUP):   stdt_len = min(aestdt_len,trtstdt_len);
MPRINT(SETUP):   if (10 <= stdt_len and not (aestdt >= trtstdt)) or (7 <= stdt_len < 10 and not (mdy(month(aestdt),1,year(aestdt)) >= mdy(month(trtstdt),1,year(trtstdt)))) then do;
MPRINT(SETUP):   output = 0;
MPRINT(SETUP):   err_type = 'dt';
MPRINT(SETUP):   err = 2;
MPRINT(SETUP):   err_desc = '2. Date before study analysis period';
MPRINT(SETUP):   end;
MPRINT(SETUP):   endt_len = min(aestdt_len,trtstdt_len);
SYMBOLGEN:  Macro variable STUDY_LAG resolves to 30
SYMBOLGEN:  Macro variable STUDY_LAG resolves to 30
MPRINT(SETUP):   if (10 <= endt_len and not (intnx('day',trtendt,30) >= aestdt)) or (7 <= endt_len < 10 and not (intnx('month',mdy(month(trtendt),1,year(trtendt)),floor(30/30)) >= 
mdy(month(aestdt),1,year(aestdt)))) then do;
MPRINT(SETUP):   output = 0;
MPRINT(SETUP):   err_type = 'dt';
MPRINT(SETUP):   err = 3;
MPRINT(SETUP):   err_desc = '3. Date after study analysis period';
MPRINT(SETUP):   end;
MPRINT(SETUP):   if output ne 0 then output = 1;
MPRINT(SETUP):   end;
MPRINT(SETUP):   if aebodsys = '' or aedecod = '' then do;
MPRINT(SETUP):   output = 0;
MPRINT(SETUP):   err_type = 'desc';
MPRINT(SETUP):   err = 4;
MPRINT(SETUP):   err_desc = '4. Description missing';
MPRINT(SETUP):   end;
MPRINT(SETUP):   if output then output ds_base;
MPRINT(SETUP):   else output err_base;
MPRINT(SETUP):   run;

NOTE: There were 596 observations read from the data set WORK.ALL_AE_DM_EX.
NOTE: The data set WORK.DS_BASE has 486 observations and 15 variables.
NOTE: The data set WORK.ERR_BASE has 110 observations and 23 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(SETUP):   proc sort data=ds_base;
MPRINT(SETUP):   by aebodsys aedecod;
MPRINT(SETUP):   run;

NOTE: There were 486 observations read from the data set WORK.DS_BASE.
NOTE: The data set WORK.DS_BASE has 486 observations and 15 variables.
171                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

SYMBOLGEN:  Macro variable MDHIER resolves to Y
MPRINT(LOG_MSG):   options nonotes;
MPRINT(LOG_MSG):   data _null_;
SYMBOLGEN:  Macro variable TEXT resolves to LOOK UP MEDDRA TERMS
MPRINT(LOG_MSG):   length = length("LOOK UP MEDDRA TERMS");
MPRINT(LOG_MSG):   length string $100 separator $100;
MPRINT(LOG_MSG):   do i = 1 to length + 4;
MPRINT(LOG_MSG):   separator = trim(left(separator))||"*";
MPRINT(LOG_MSG):   end;
SYMBOLGEN:  Macro variable TEXT resolves to LOOK UP MEDDRA TERMS
MPRINT(LOG_MSG):   string = '* '||trim("LOOK UP MEDDRA TERMS")||' *';
MPRINT(LOG_MSG):   put separator;
MPRINT(LOG_MSG):   put string;
MPRINT(LOG_MSG):   put separator;
MPRINT(LOG_MSG):   run;
************************
* LOOK UP MEDDRA TERMS *
************************
MPRINT(LOG_MSG):   options notes;
MPRINT(SETUP):  ;
MPRINT(SETUP):   ;
MPRINT(SETUP):   data meddra_primary_soc;
SYMBOLGEN:  Macro variable VER resolves to 14.1
MPRINT(SETUP):   set meddra.mdhier_14_1;
MPRINT(SETUP):   if primary_soc_fg = 'Y';
MPRINT(SETUP):   run;

NOTE: There were 105678 observations read from the data set MEDDRA.MDHIER_14_1.
NOTE: The data set WORK.MEDDRA_PRIMARY_SOC has 69524 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           1.92 seconds
      cpu time            0.76 seconds
      

MPRINT(SETUP):   data ds_base_meddra(drop=aebodsys aedecod) err_base_meddra;
MPRINT(SETUP):   set ds_base(drop=output);
MPRINT(SETUP):   aebodsys = upcase(aebodsys);
MPRINT(SETUP):   aedecod = upcase(aedecod);
MPRINT(SETUP):   if _n_ = 1 then do;
MPRINT(SETUP):   declare hash h(dataset:"meddra_primary_soc");
MPRINT(SETUP):   *h.definekey('aebodsys','aedecod');
MPRINT(SETUP):   h.definekey('aedecod');
MPRINT(SETUP):   h.definedata('soc_name','hlgt_name','hlt_name','pt_name');
MPRINT(SETUP):   h.definedone();
MPRINT(SETUP):   end;
MPRINT(SETUP):   length soc_name $100 hlgt_name $100 hlt_name $100 pt_name $100;
MPRINT(SETUP):   label soc_name= 'System Organ Class' hlgt_name= 'High-Level Group Term' hlt_name= 'High-Level Term' pt_name= 'Preferred Term';
MPRINT(SETUP):   call missing(soc_name,hlgt_name,hlt_name,pt_name);
MPRINT(SETUP):   rc = h.find();
MPRINT(SETUP):   if rc = 0 then output = 1;
MPRINT(SETUP):   else output = 0;
MPRINT(SETUP):   drop rc;
SYMBOLGEN:  Macro variable DME resolves to Y
172                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

MPRINT(SETUP):   if _n_ = 1 then do;
MPRINT(SETUP):   declare hash i(dataset:'dme.dme(rename=(llt_name=pt_name))');
MPRINT(SETUP):   i.definekey('pt_name');
MPRINT(SETUP):   i.definedata('dme');
MPRINT(SETUP):   i.definedone();
MPRINT(SETUP):   end;
MPRINT(SETUP):   length dme $1;
MPRINT(SETUP):   label dme= 'Designated Medical Event';
MPRINT(SETUP):   call missing(dme);
MPRINT(SETUP):   rc = i.find();
MPRINT(SETUP):   drop rc;
MPRINT(SETUP):   if output then output ds_base_meddra;
MPRINT(SETUP):   else output err_base_meddra;
MPRINT(SETUP):   run;

NOTE: There were 69524 observations read from the data set WORK.MEDDRA_PRIMARY_SOC.
NOTE: There were 6989 observations read from the data set DME.DME.
NOTE: There were 486 observations read from the data set WORK.DS_BASE.
NOTE: The data set WORK.DS_BASE_MEDDRA has 0 observations and 18 variables.
NOTE: The data set WORK.ERR_BASE_MEDDRA has 486 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.37 seconds
      cpu time            0.31 seconds
      

MPRINT(SETUP):   proc sql noprint;
SYMBOLGEN:  Macro variable VER resolves to 14.1
MPRINT(SETUP):   create table rpt_meddra as select "MedDRA hierarchy version 14.1" as meddra_ver, meddra_cnt, err_cnt, 100*meddra_cnt/(meddra_cnt+err_cnt) as meddra_pct from (select count(1) as 
meddra_cnt from ds_base_meddra), (select count(1) as err_cnt from err_base_meddra);
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK.RPT_MEDDRA created, with 1 rows and 4 columns.

MPRINT(SETUP):   select meddra_pct into : meddra_pct from rpt_meddra;
MPRINT(SETUP):   create table rpt_meddra_term as select (case when a.aebodsys is missing then b.aebodsys else a.aebodsys end) as aebodsys label='Body System or Organ Class', (case when a.aedecod is 
missing then b.aedecod else a.aedecod end) as aedecod label='Dictionary-Derived Term', subj_count, event_count from (select aebodsys, aedecod, count(distinct usubjid) as subj_count label='No Matching 
MedDRA Description Subject Count' from err_base_meddra group by aebodsys, aedecod) a, (select aebodsys, aedecod, count(1) as event_count label='No Matching MedDRA Description Event Count' from 
err_base_meddra group by aebodsys, aedecod) b where a.aebodsys = b.aebodsys and a.aedecod = b.aedecod;
NOTE: Table WORK.RPT_MEDDRA_TERM created, with 125 rows and 4 columns.

MPRINT(SETUP):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
      

MPRINT(SETUP):   data rpt_meddra_term;
MPRINT(SETUP):   set rpt_meddra_term;
MPRINT(SETUP):   aebodsys = propcase(aebodsys);
MPRINT(SETUP):   aedecod = propcase(aedecod);
MPRINT(SETUP):   run;

NOTE: There were 125 observations read from the data set WORK.RPT_MEDDRA_TERM.
NOTE: The data set WORK.RPT_MEDDRA_TERM has 125 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.02 seconds
      

173                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

MPRINT(SETUP):   data all_arm;
MPRINT(SETUP):   set all_arm end=eof;
MPRINT(SETUP):   arm_display = arm;
MPRINT(SETUP):   if arm_display ne '' and not anylower(arm_display) then do;
MPRINT(SETUP):   length arm_word $50;
MPRINT(SETUP):   i = 1;
MPRINT(SETUP):   arm_word = scan(arm_display,i);
MPRINT(SETUP):   do while (arm_word ne '');
MPRINT(SETUP):   if length(arm_word) > 3 and not anydigit(compress(arm_word)) then substr(arm_display,index(arm_display,compress(arm_word)),length(compress(arm_word))) = propcase(compress(arm_word));
MPRINT(SETUP):   if compress(arm_word) in ('UP') then substr(arm_display,index(arm_display,compress(arm_word)),length(compress(arm_word))) = propcase(arm_word);
MPRINT(SETUP):   if compress(arm_word) in ('MG' 'KG') then substr(arm_display,index(arm_display,compress(arm_word)),length(compress(arm_word))) = lowcase(arm_word);
MPRINT(SETUP):   if compress(arm_word) = ('ML') then substr(arm_display,index(arm_display,compress(arm_word)),length(compress(arm_word))) = 'mL';
MPRINT(SETUP):   i = i + 1;
MPRINT(SETUP):   arm_word = scan(arm_display,i);
MPRINT(SETUP):   end;
MPRINT(SETUP):   end;
MPRINT(SETUP):   if index(arm_display,'/') then do;
MPRINT(SETUP):   i = 1;
MPRINT(SETUP):   arm_word = scan(arm_display,i,' ');
MPRINT(SETUP):   do while (arm_word ne '');
MPRINT(SETUP):   if length(arm_word) > 40 and index(arm_word,'/') then longword = 1;
MPRINT(SETUP):   i = i + 1;
MPRINT(SETUP):   arm_word = scan(arm_display,i,' ');
MPRINT(SETUP):   end;
MPRINT(SETUP):   if longword = 1 then arm_display = tranwrd(arm_display,'/','/ ');
MPRINT(SETUP):   end;
MPRINT(SETUP):   call symputx('arm_name_'||put(_n_,8. -L),arm_display,'g');
MPRINT(SETUP):   drop arm_word i;
MPRINT(SETUP):   run;

NOTE: There were 3 observations read from the data set WORK.ALL_ARM.
NOTE: The data set WORK.ALL_ARM has 3 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(LOG_MSG):   options nonotes;
MPRINT(LOG_MSG):   data _null_;
SYMBOLGEN:  Macro variable TEXT resolves to SUBJECT VALIDATION REPORT
MPRINT(LOG_MSG):   length = length("SUBJECT VALIDATION REPORT");
MPRINT(LOG_MSG):   length string $100 separator $100;
MPRINT(LOG_MSG):   do i = 1 to length + 4;
MPRINT(LOG_MSG):   separator = trim(left(separator))||"*";
MPRINT(LOG_MSG):   end;
SYMBOLGEN:  Macro variable TEXT resolves to SUBJECT VALIDATION REPORT
MPRINT(LOG_MSG):   string = '* '||trim("SUBJECT VALIDATION REPORT")||' *';
MPRINT(LOG_MSG):   put separator;
MPRINT(LOG_MSG):   put string;
MPRINT(LOG_MSG):   put separator;
MPRINT(LOG_MSG):   run;
*****************************
* SUBJECT VALIDATION REPORT *
*****************************
MPRINT(LOG_MSG):   options notes;
MPRINT(RPT_SETUP):  ;
MPRINT(RPT_SETUP):   data all_dm_ex;
MPRINT(RPT_SETUP):   set all_dm_ex;
174                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

SYMBOLGEN:  Macro variable ARM_VAR resolves to ACTARM
MPRINT(RPT_SETUP):   rename arm = ACTARM;
MPRINT(RPT_SETUP):   run;

NOTE: There were 159 observations read from the data set WORK.ALL_DM_EX.
NOTE: The data set WORK.ALL_DM_EX has 159 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(RPT_SETUP):   proc sql;
SYMBOLGEN:  Macro variable ARM_COUNT resolves to 3
SYMBOLGEN:  Macro variable ARM_VAR resolves to ACTARM
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Unable to resolve the macro variable reference &arm_name_
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable ARM_NAME_1 resolves to Placebo
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable ARM_VAR resolves to ACTARM
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Unable to resolve the macro variable reference &arm_name_
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable ARM_NAME_2 resolves to Statin Arm 1
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable ARM_VAR resolves to ACTARM
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Unable to resolve the macro variable reference &arm_name_
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable ARM_NAME_3 resolves to Statin Arm 2
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable DM_ARMCD resolves to 1
SYMBOLGEN:  Macro variable ARM_COUNT resolves to 3
SYMBOLGEN:  Macro variable ARM_VAR resolves to ACTARM
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Unable to resolve the macro variable reference &arm_name_
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable ARM_NAME_1 resolves to Placebo
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable ARM_VAR resolves to ACTARM
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Unable to resolve the macro variable reference &arm_name_
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable ARM_NAME_2 resolves to Statin Arm 1
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable ARM_VAR resolves to ACTARM
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Unable to resolve the macro variable reference &arm_name_
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable ARM_NAME_3 resolves to Statin Arm 2
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable ARM_COUNT resolves to 3
175                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable ARM_COUNT resolves to 3
SYMBOLGEN:  Macro variable ARM_VAR resolves to ACTARM
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Unable to resolve the macro variable reference &arm_name_
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable ARM_NAME_1 resolves to Placebo
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable ARM_VAR resolves to ACTARM
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Unable to resolve the macro variable reference &arm_name_
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable ARM_NAME_2 resolves to Statin Arm 1
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable ARM_VAR resolves to ACTARM
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Unable to resolve the macro variable reference &arm_name_
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable ARM_NAME_3 resolves to Statin Arm 2
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable ARM_COUNT resolves to 3
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable ARM_COUNT resolves to 3
SYMBOLGEN:  Macro variable ARM_VAR resolves to ACTARM
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Unable to resolve the macro variable reference &arm_name_
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable ARM_NAME_1 resolves to Placebo
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable ARM_VAR resolves to ACTARM
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Unable to resolve the macro variable reference &arm_name_
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable ARM_NAME_2 resolves to Statin Arm 1
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable ARM_VAR resolves to ACTARM
SYMBOLGEN:  && resolves to &.
176                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

SYMBOLGEN:  Unable to resolve the macro variable reference &arm_name_
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable ARM_NAME_3 resolves to Statin Arm 2
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable ARM_COUNT resolves to 3
SYMBOLGEN:  Macro variable ARM_VAR resolves to ACTARM
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Unable to resolve the macro variable reference &arm_name_
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable ARM_NAME_1 resolves to Placebo
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable ARM_VAR resolves to ACTARM
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Unable to resolve the macro variable reference &arm_name_
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable ARM_NAME_2 resolves to Statin Arm 1
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable ARM_VAR resolves to ACTARM
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Unable to resolve the macro variable reference &arm_name_
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable ARM_NAME_3 resolves to Statin Arm 2
SYMBOLGEN:  Macro variable I resolves to 3
MPRINT(RPT_SETUP):   create table rpt_dm(drop=order) as select 1 as order, '1. Subjects in demographics (DM)' as desc, sum(case when compress(upcase(ACTARM)) = compress(upcase("Placebo")) then 1 else 
0 end) as arm1_count, sum(case when compress(upcase(ACTARM)) = compress(upcase("Statin Arm 1")) then 1 else 0 end) as arm2_count, sum(case when compress(upcase(ACTARM)) = compress(upcase("Statin Arm 
2")) then 1 else 0 end) as arm3_count, count(1) as total_count from dm union select 2 as order, '2. Subjects removed - unassigned/screen failure' as desc, sum(case when compress(upcase(ACTARM)) = 
compress(upcase("Placebo")) and upcase(armcd) in ('SCRNFAIL','NOTASSGN') then 1 else 0 end) as arm1_count, sum(case when compress(upcase(ACTARM)) = compress(upcase("Statin Arm 1")) and upcase(armcd) 
in ('SCRNFAIL','NOTASSGN') then 1 else 0 end) as arm2_count, sum(case when compress(upcase(ACTARM)) = compress(upcase("Statin Arm 2")) and upcase(armcd) in ('SCRNFAIL','NOTASSGN') then 1 else 0 end) 
as arm3_count, sum(case when upcase(armcd) in ('SCRNFAIL','NOTASSGN')then 1 else 0 end) as total_count from dm union select 3 as order, '3. Subjects removed - not in safety population' as desc, (case 
when arm1_count is missing then 0 else arm1_count end) as arm1_count, (case when arm2_count is missing then 0 else arm2_count end) as arm2_count, (case when arm3_count is missing then 0 else 
arm3_count end) as arm3_count, total_count from (select sum(case when compress(upcase(ACTARM)) = compress(upcase("Placebo")) then 1 else 0 end) as arm1_count, sum(case when compress(upcase(ACTARM)) = 
compress(upcase("Statin Arm 1")) then 1 else 0 end) as arm2_count, sum(case when compress(upcase(ACTARM)) = compress(upcase("Statin Arm 2")) then 1 else 0 end) as arm3_count, count(1) as total_count 
from err_dm_ex where err_type = 'ex') union select 4 as order, '4. Subjects removed - no treatment/reference dates' as desc, (case when arm1_count is missing then 0 else arm1_count end) as 
arm1_count, (case when arm2_count is missing then 0 else arm2_count end) as arm2_count, (case when arm3_count is missing then 0 else arm3_count end) as arm3_count, total_count from (select sum(case 
when compress(upcase(ACTARM)) = compress(upcase("Placebo")) then 1 else 0 end) as arm1_count, sum(case when compress(upcase(ACTARM)) = compress(upcase("Statin Arm 1")) then 1 else 0 end) as 
arm2_count, sum(case when compress(upcase(ACTARM)) = compress(upcase("Statin Arm 2")) then 1 else 0 end) as arm3_count, count(1) as total_count from err_dm_ex where err_type = 'dt') union select 5 as 
order, '5. Subjects used in analysis' as desc, sum(case when compress(upcase(ACTARM)) = compress(upcase("Placebo")) then 1 else 0 end) as arm1_count, sum(case when compress(upcase(ACTARM)) = 
compress(upcase("Statin Arm 1")) then 1 else 0 end) as arm2_count, sum(case when compress(upcase(ACTARM)) = compress(upcase("Statin Arm 2")) then 1 else 0 end) as arm3_count, count(1) as total_count 
from all_dm_ex;
NOTE: Table WORK.RPT_DM created, with 5 rows and 5 columns.

MPRINT(RPT_SETUP):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
      

MPRINT(RPT_SETUP):   data rpt_dm;
SYMBOLGEN:  Macro variable ARM_COUNT resolves to 3
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 3
177                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

SYMBOLGEN:  Macro variable I resolves to 3
MPRINT(RPT_SETUP):   retain desc arm1_count arm1_pct arm2_count arm2_pct arm3_count arm3_pct;
MPRINT(RPT_SETUP):   set rpt_dm;
SYMBOLGEN:  Macro variable ARM_COUNT resolves to 3
SYMBOLGEN:  Macro variable I resolves to 1
MPRINT(RPT_SETUP):   retain dm_arm1_count;
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
MPRINT(RPT_SETUP):   if _n_ = 1 then dm_arm1_count = arm1_count;
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
MPRINT(RPT_SETUP):   arm1_pct = 100*arm1_count/dm_arm1_count;
SYMBOLGEN:  Macro variable I resolves to 1
MPRINT(RPT_SETUP):   drop dm_arm1_count;
SYMBOLGEN:  Macro variable I resolves to 2
MPRINT(RPT_SETUP):   retain dm_arm2_count;
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 2
MPRINT(RPT_SETUP):   if _n_ = 1 then dm_arm2_count = arm2_count;
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 2
MPRINT(RPT_SETUP):   arm2_pct = 100*arm2_count/dm_arm2_count;
SYMBOLGEN:  Macro variable I resolves to 2
MPRINT(RPT_SETUP):   drop dm_arm2_count;
SYMBOLGEN:  Macro variable I resolves to 3
MPRINT(RPT_SETUP):   retain dm_arm3_count;
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable I resolves to 3
MPRINT(RPT_SETUP):   if _n_ = 1 then dm_arm3_count = arm3_count;
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable I resolves to 3
MPRINT(RPT_SETUP):   arm3_pct = 100*arm3_count/dm_arm3_count;
SYMBOLGEN:  Macro variable I resolves to 3
MPRINT(RPT_SETUP):   drop dm_arm3_count;
MPRINT(RPT_SETUP):   retain dm_total_count;
MPRINT(RPT_SETUP):   if _n_ = 1 then dm_total_count = total_count;
MPRINT(RPT_SETUP):   total_pct = 100*total_count/dm_total_count;
MPRINT(RPT_SETUP):   drop dm_total_count;
MPRINT(RPT_SETUP):   run;

NOTE: There were 5 observations read from the data set WORK.RPT_DM.
NOTE: The data set WORK.RPT_DM has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(LOG_MSG):   options nonotes;
MPRINT(LOG_MSG):   data _null_;
SYMBOLGEN:  Macro variable TEXT resolves to ADVERSE EVENT DATA VALIDATION REPORT
MPRINT(LOG_MSG):   length = length("ADVERSE EVENT DATA VALIDATION REPORT");
MPRINT(LOG_MSG):   length string $100 separator $100;
MPRINT(LOG_MSG):   do i = 1 to length + 4;
MPRINT(LOG_MSG):   separator = trim(left(separator))||"*";
MPRINT(LOG_MSG):   end;
178                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

SYMBOLGEN:  Macro variable TEXT resolves to ADVERSE EVENT DATA VALIDATION REPORT
MPRINT(LOG_MSG):   string = '* '||trim("ADVERSE EVENT DATA VALIDATION REPORT")||' *';
MPRINT(LOG_MSG):   put separator;
MPRINT(LOG_MSG):   put string;
MPRINT(LOG_MSG):   put separator;
MPRINT(LOG_MSG):   run;
****************************************
* ADVERSE EVENT DATA VALIDATION REPORT *
****************************************
MPRINT(LOG_MSG):   options notes;
MPRINT(RPT_SETUP):  ;
SYMBOLGEN:  Macro variable DSID resolves to 1
SYMBOLGEN:  Macro variable DSID resolves to 1
SYMBOLGEN:  Macro variable ARM_COUNT resolves to 3
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 3
MPRINT(RPT_SETUP):  ;
MPRINT(RPT_SETUP):   proc sql noprint;
SYMBOLGEN:  Macro variable ARM_COUNT resolves to 3
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable ARM_COUNT resolves to 3
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 3
MPRINT(RPT_SETUP):   select sum(case when arm_num = 1 then 1 else 0 end) as sum_1, sum(case when arm_num = 2 then 1 else 0 end) as sum_2, sum(case when arm_num = 3 then 1 else 0 end) as sum_3, 0 as 
null into : naes_sp_1, : naes_sp_2, : naes_sp_3, : null from all_ae_dm_ex;
MPRINT(RPT_SETUP):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable DSID resolves to 1
SYMBOLGEN:  Macro variable DSID resolves to 1
MPRINT(RPT_SETUP):   proc sql noprint;
SYMBOLGEN:  Macro variable ARM_COUNT resolves to 3
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable ARM_COUNT resolves to 3
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 2
179                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable ARM_COUNT resolves to 3
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable I resolves to 3
MPRINT(RPT_SETUP):   create table rpt_err(drop=err null) as select err, err_desc, arm1_err_count, 100*arm1_err_count/arm1_count as arm1_err_pct, arm2_err_count, 100*arm2_err_count/arm2_count as 
arm2_err_pct, arm3_err_count, 100*arm3_err_count/arm3_count as arm3_err_pct, 0 as null from (select err, err_desc, sum(case when arm_num = 1 then 1 else 0 end) as arm1_err_count, sum(case when 
arm_num = 2 then 1 else 0 end) as arm2_err_count, sum(case when arm_num = 3 then 1 else 0 end) as arm3_err_count, 0 as null from err_base group by err, err_desc) a, (select sum(case when arm_num = 1 
then 1 else 0 end) as arm1_count, sum(case when arm_num = 2 then 1 else 0 end) as arm2_count, sum(case when arm_num = 3 then 1 else 0 end) as arm3_count, 0 as null from all_ae_dm_ex) b;
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK.RPT_ERR created, with 1 rows and 7 columns.

MPRINT(RPT_SETUP):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(RPT_SETUP):   proc sql noprint;
MPRINT(RPT_SETUP):   create table rpt_err_term_x as select aebodsys, aedecod, arm_num, count(1) as count from err_base group by aebodsys, aedecod, arm_num;
NOTE: Table WORK.RPT_ERR_TERM_X created, with 79 rows and 4 columns.

MPRINT(RPT_SETUP):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.02 seconds
      

MPRINT(RPT_SETUP):   proc transpose data=rpt_err_term_x out=rpt_err_term(drop=_name_) prefix=arm;
MPRINT(RPT_SETUP):   by aebodsys aedecod;
MPRINT(RPT_SETUP):   id arm_num;
MPRINT(RPT_SETUP):   run;

NOTE: There were 79 observations read from the data set WORK.RPT_ERR_TERM_X.
NOTE: The data set WORK.RPT_ERR_TERM has 55 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(RPT_SETUP):   data rpt_err_term;
SYMBOLGEN:  Macro variable ARM_COUNT resolves to 3
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 3
MPRINT(RPT_SETUP):   retain aebodsys aedecod arm1 arm2 arm3;
MPRINT(RPT_SETUP):   set rpt_err_term;
SYMBOLGEN:  Macro variable ARM_COUNT resolves to 3
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable I resolves to 1
MPRINT(RPT_SETUP):   if arm1 = . then arm1 = 0;
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  && resolves to &.
180                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

SYMBOLGEN:  Unable to resolve the macro variable reference &arm_name_
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable I resolves to 1
SYMBOLGEN:  Macro variable ARM_NAME_1 resolves to Placebo
MPRINT(RPT_SETUP):   label arm1 = "Placebo Event Count";
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable I resolves to 2
MPRINT(RPT_SETUP):   if arm2 = . then arm2 = 0;
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Unable to resolve the macro variable reference &arm_name_
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable ARM_NAME_2 resolves to Statin Arm 1
MPRINT(RPT_SETUP):   label arm2 = "Statin Arm 1 Event Count";
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable I resolves to 3
MPRINT(RPT_SETUP):   if arm3 = . then arm3 = 0;
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Unable to resolve the macro variable reference &arm_name_
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable I resolves to 3
SYMBOLGEN:  Macro variable ARM_NAME_3 resolves to Statin Arm 2
MPRINT(RPT_SETUP):   label arm3 = "Statin Arm 2 Event Count";
MPRINT(RPT_SETUP):   if aebodsys = '' then aebodsys = 'Missing';
MPRINT(RPT_SETUP):   if aedecod = '' then aedecod = 'Missing';
MPRINT(RPT_SETUP):   run;

NOTE: There were 55 observations read from the data set WORK.RPT_ERR_TERM.
NOTE: The data set WORK.RPT_ERR_TERM has 55 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(RPT_SETUP):   proc datasets library=work nolist nodetails;
MPRINT(RPT_SETUP):   delete rpt_err_term_x;
MPRINT(RPT_SETUP):   quit;

NOTE: Deleting WORK.RPT_ERR_TERM_X (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SETUP):  ;
SYMBOLGEN:  Macro variable DM_SUBJ_GT0 resolves to 1
SYMBOLGEN:  Macro variable SETUP_REQ_VAR resolves to 1
MPRINT(AEMED):  ;
SYMBOLGEN:  Macro variable SETUP_SUCCESS resolves to 1
SYMBOLGEN:  Macro variable MEDDRA_PCT resolves to        0
SYMBOLGEN:  Macro variable ERROUT resolves to /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp2/MedDRA at a Glance Error Summary.xls
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable DM_SUBJ_GT0 resolves to 1
SYMBOLGEN:  Macro variable SETUP_REQ_VAR resolves to 1
SYMBOLGEN:  Macro variable MEDDRA_PCT resolves to        0
SYMBOLGEN:  Macro variable PANEL_TITLE resolves to MedDRA at a Glance
181                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

SYMBOLGEN:  Macro variable ERR_NOSUBJ resolves to 0
SYMBOLGEN:  Macro variable ERR_MISSVAR resolves to 0
SCRIPT LAUNCHER ERROR SUMMARY OUTPUT
MPRINT(WB):   data wb_start;
SYMBOLGEN:  Macro variable STRLEN resolves to 1000
MPRINT(WB):   length string $1000;
MPRINT(WB):   string = '<?xml version="1.0"?>';
MPRINT(WB):   output;
MPRINT(WB):   string = '<?mso-application progid="Excel.Sheet"?>';
MPRINT(WB):   output;
MPRINT(WB):   string = '<Workbook xmlns="urn:schemas-microsoft-com:office:spreadsheet" '|| 'xmlns:o="urn:schemas-microsoft-com:office:office" '|| 'xmlns:x="urn:schemas-microsoft-com:office:excel" '|| 
'xmlns:ss="urn:schemas-microsoft-com:office:spreadsheet" '|| 'xmlns:html="http://www.w3.org/TR/REC-html40">';
MPRINT(WB):   output;
MPRINT(WB):   string = '<DocumentProperties xmlns="urn:schemas-microsoft-com:office:office">';
MPRINT(WB):   output;
SYMBOLGEN:  Macro variable WBTITLE resolves to MedDRA at a Glance Error Summary
MPRINT(WB):   string = '<Title>'||"MedDRA at a Glance Error Summary"||'</Title>';
MPRINT(WB):   output;
MPRINT(WB):   string = '<Author>US Food &amp; Drug Administration</Author>';
MPRINT(WB):   output;
MPRINT(WB):   string = '<Created>'||put(date(),YYMMDDd10.)||'T'||put(time(),TIME.)||'</Created>';
MPRINT(WB):   output;
MPRINT(WB):   string = '</DocumentProperties>';
MPRINT(WB):   output;
MPRINT(WB):   string = '<ExcelWorkbook xmlns="urn:schemas-microsoft-com:office:excel">';
MPRINT(WB):   output;
MPRINT(WB):   string = '</ExcelWorkbook>';
MPRINT(WB):   output;
MPRINT(WB):   run;

NOTE: The data set WORK.WB_START has 10 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(WB):   data wb_end;
SYMBOLGEN:  Macro variable STRLEN resolves to 1000
MPRINT(WB):   length string $1000;
MPRINT(WB):   string = '</Workbook>';
MPRINT(WB):   output;
MPRINT(WB):   run;

NOTE: The data set WORK.WB_END has 1 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(ERROR_SUMMARY):  ;
MPRINT(STYLES):   data wb_styles;
SYMBOLGEN:  Macro variable STRLEN resolves to 1000
MPRINT(STYLES):   length string $1000;
MPRINT(STYLES):   string = '<Styles>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="Default" ss:Name="Normal">';
MPRINT(STYLES):   output;
SYMBOLGEN:  Macro variable SIZE resolves to 9
182                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

MPRINT(STYLES):   string = '<Font ss:Size="'||"9"||'"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Interior ss:Pattern="Solid"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DefaultLeft" ss:Parent="Default">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Alignment ss:Horizontal="Left" ss:Vertical="Top" ss:WrapText="0"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DefaultRight" ss:Parent="Default">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Alignment ss:Horizontal="Right" ss:Vertical="Top" ss:WrapText="0"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DefaultWhite" ss:Parent="Default">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Font ss:Color="#FFFFFF"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="Default10" ss:Parent="Default">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Alignment ss:Vertical="Top" ss:WrapText="0"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Font ss:Size="10"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="Default10Wrap" ss:Parent="Default10">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Alignment ss:Vertical="Top" ss:WrapText="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="Default10RedWrap" ss:Parent="Default">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Alignment ss:Vertical="Top" ss:WrapText="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Font ss:Color="#FF0000" ss:Size="10" ss:Italic="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="Default10Right" ss:Parent="Default10">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Alignment ss:Horizontal="Right" ss:Vertical="Top" ss:WrapText="0"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="Default8" ss:Parent="Default">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Alignment ss:Vertical="Top" ss:WrapText="0"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Font ss:Size="8"/>';
MPRINT(STYLES):   output;
183                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="Header">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Alignment/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Font ss:Size="12" ss:Bold="1" ss:Italic="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="SubHeader">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Alignment ss:Vertical="Top"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Font ss:Size="10" ss:Bold="1" ss:Italic="0"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="Column">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Alignment ss:Horizontal="Center" ss:Vertical="Center" ss:WrapText="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Interior ss:Color="#333399" ss:Pattern="Solid"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Font ss:Size="10" ss:Color="#FFFFFF" ss:Bold="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="ColumnOutline" ss:Parent="Column">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Top" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="ColumnOutlineSmall" ss:Parent="ColumnOutline">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Font ss:Size="8" ss:Color="#FFFFFF" ss:Bold="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="ColumnOutlineItalic" ss:Parent="ColumnOutline">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Font ss:Size="10" ss:Color="#FFFFFF" ss:Bold="1" ss:Italic="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="ColumnOutlineRotateTop" ss:Parent="ColumnOutline">';
MPRINT(STYLES):   output;
184                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

MPRINT(STYLES):   string = '<Alignment ss:Horizontal="Center" ss:Vertical="Top" ss:Rotate="90" ss:WrapText="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="ColumnOutlineRotateCtr" ss:Parent="ColumnOutline">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Alignment ss:Horizontal="Center" ss:Vertical="Center" ss:Rotate="90" ss:WrapText="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DataHeader">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Alignment ss:Horizontal="Left" ss:Vertical="Center" ss:WrapText="0"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Interior ss:Color="#C0C0C0" ss:Pattern="Solid"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Top" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Font ss:Size="10" ss:Bold="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="Table">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Alignment ss:Horizontal="Center" ss:Vertical="Center" ss:WrapText="0"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Top" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Font ss:Size="10"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="Data">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Alignment ss:Vertical="Top" ss:WrapText="0"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Borders>';
MPRINT(STYLES):   output;
185                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

MPRINT(STYLES):   string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DataWrap" ss:Parent="Data">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Alignment ss:Vertical="Top" ss:WrapText="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DataRight" ss:Parent="Data">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Alignment ss:Horizontal="Right" ss:Vertical="Top" ss:WrapText="0"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DataRightHighlight" ss:Parent="DataRight">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Interior ss:Color="#CCCCFF" ss:Pattern="Solid"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DataCenter" ss:Parent="Data">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Alignment ss:Horizontal="Center" ss:Vertical="Top" ss:WrapText="0"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DataDec0" ss:Parent="Data">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Alignment ss:Horizontal="Right" ss:Vertical="Top"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<NumberFormat ss:Format="0"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DataDec0Center" ss:Parent="DataDec0">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Alignment ss:Horizontal="Center" ss:Vertical="Top" ss:WrapText="0"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DataDec0Highlight" ss:Parent="DataDec0">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Interior ss:Color="#CCCCFF" ss:Pattern="Solid"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DataDec1" ss:Parent="Data">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Alignment ss:Horizontal="Right" ss:Vertical="Top"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<NumberFormat ss:Format="0.0"/>';
MPRINT(STYLES):   output;
186                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DataDec1Center" ss:Parent="DataDec1">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Alignment ss:Horizontal="Center" ss:Vertical="Top" ss:WrapText="0"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DataDec1Highlight" ss:Parent="DataDec1">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Interior ss:Color="#CCCCFF" ss:Pattern="Solid"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DataDec2" ss:Parent="Data">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Alignment ss:Horizontal="Right" ss:Vertical="Top"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<NumberFormat ss:Format="0.00"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DataDec2Center" ss:Parent="DataDec2">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Alignment ss:Horizontal="Center" ss:Vertical="Top" ss:WrapText="0"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DataDec2Highlight" ss:Parent="DataDec2">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Interior ss:Color="#CCCCFF" ss:Pattern="Solid"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DataSN" ss:Parent="Data">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Alignment ss:Horizontal="Right" ss:Vertical="Top"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<NumberFormat ss:Format="0.00E+00"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DataSNCenter" ss:Parent="DataSN">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Alignment ss:Horizontal="Center" ss:Vertical="Top" ss:WrapText="0"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DataSNHighlight" ss:Parent="DataSN">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Interior ss:Color="#CCCCFF" ss:Pattern="Solid"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DataPct" ss:Parent="Data">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Alignment ss:Horizontal="Right" ss:Vertical="Top"/>';
MPRINT(STYLES):   output;
187                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

MPRINT(STYLES):   string = '<NumberFormat ss:Format="0%"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DataPctHighlight" ss:Parent="DataPct">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Interior ss:Color="#CCCCFF" ss:Pattern="Solid"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DataBottom" ss:Parent="Data">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DataWrapBottom" ss:Parent="DataWrap">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DataRightBottom" ss:Parent="DataRight">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DataRightHighlightBottom" ss:Parent="DataRightHighlight">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
188                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

MPRINT(STYLES):   string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DataCenterBottom" ss:Parent="DataCenter">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DataDec0Bottom" ss:Parent="DataDec0">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DataDec0CenterBottom" ss:Parent="DataDec0Center">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DataDec0HighlightBottom" ss:Parent="DataDec0Highlight">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
189                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

MPRINT(STYLES):   string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DataDec1Bottom" ss:Parent="DataDec1">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DataDec1CenterBottom" ss:Parent="DataDec1Center">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DataDec1HighlightBottom" ss:Parent="DataDec1Highlight">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DataDec2Bottom" ss:Parent="DataDec2">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
190                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

MPRINT(STYLES):   string = '</Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DataDec2CenterBottom" ss:Parent="DataDec2Center">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DataDec2HighlightBottom" ss:Parent="DataDec2Highlight">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DataSNBottom" ss:Parent="DataSN">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DataSNCenterBottom" ss:Parent="DataSNCenter">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Borders>';
MPRINT(STYLES):   output;
191                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DataSNHighlightBottom" ss:Parent="DataSNHighlight">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DataPctBottom" ss:Parent="DataPct">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="DataPctHighlightBottom" ss:Parent="DataPctHighlight">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="Gray" ss:Parent="DataCenterBottom">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Font ss:Size="8" ss:Color="#808080"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Interior ss:Color="#808080" ss:Pattern="Solid"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="Red" ss:Parent="DataCenterBottom">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Font ss:Size="8" ss:Color="#FF0000"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Interior ss:Color="#FF0000" ss:Pattern="Solid"/>';
MPRINT(STYLES):   output;
192                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="Peach" ss:Parent="DataCenterBottom">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Font ss:Size="8" ss:Color="#FFCC99"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Interior ss:Color="#FFCC99" ss:Pattern="Solid"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="BoldRedText" ss:Parent="DataDec1Bottom">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Font ss:Size="8" ss:Color="#FF0000" ss:Bold="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="GS_BTLRB">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Alignment ss:Vertical="Top" ss:WrapText="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Font ss:Size="10"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Top" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="GSC_BTLRB">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Alignment ss:Vertical="Top" ss:Horizontal="Center" ss:WrapText="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Font ss:Size="10"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Top" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="GS_BTLR">';
MPRINT(STYLES):   output;
193                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

MPRINT(STYLES):   string = '<Alignment ss:Vertical="Top" ss:WrapText="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Font ss:Size="10"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Top" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="GS_BLR">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Alignment ss:Vertical="Top" ss:WrapText="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Font ss:Size="10"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Style ss:ID="GS_BLRB">';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Alignment ss:Vertical="Top" ss:WrapText="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Font ss:Size="10"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Borders>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Style>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   string = '</Styles>';
MPRINT(STYLES):   output;
MPRINT(STYLES):   run;

NOTE: The data set WORK.WB_STYLES has 347 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
194                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

      

MPRINT(ERROR_SUMMARY):  ;
SYMBOLGEN:  Macro variable DS resolves to err
MPRINT(ERROR_SUMMARY):   data ws_err_start;
SYMBOLGEN:  Macro variable STRLEN resolves to 1000
MPRINT(ERROR_SUMMARY):   length string $1000;
MPRINT(ERROR_SUMMARY):   string = '<Worksheet ss:Name="Error Summary">';
MPRINT(ERROR_SUMMARY):   output;
MPRINT(ERROR_SUMMARY):   run;

NOTE: The data set WORK.WS_ERR_START has 1 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable DS resolves to err
MPRINT(ERROR_SUMMARY):   data ws_err_end;
SYMBOLGEN:  Macro variable STRLEN resolves to 1000
MPRINT(ERROR_SUMMARY):   length string $1000;
MPRINT(ERROR_SUMMARY):   string = '</Worksheet>';
MPRINT(ERROR_SUMMARY):   output;
MPRINT(ERROR_SUMMARY):   run;

NOTE: The data set WORK.WS_ERR_END has 1 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

SYMBOLGEN:  Macro variable DS resolves to err
MPRINT(ERROR_SUMMARY):   data ws_err_table_start;
SYMBOLGEN:  Macro variable STRLEN resolves to 1000
MPRINT(ERROR_SUMMARY):   length string $1000;
MPRINT(ERROR_SUMMARY):   string = '<Table>';
MPRINT(ERROR_SUMMARY):   output;
MPRINT(ERROR_SUMMARY):   string = '<Column ss:Width="150"/>';
MPRINT(ERROR_SUMMARY):   output;
MPRINT(ERROR_SUMMARY):   string = '<Column ss:Width="250"/>';
MPRINT(ERROR_SUMMARY):   output;
MPRINT(ERROR_SUMMARY):   string = '<Column/>';
MPRINT(ERROR_SUMMARY):   output;
MPRINT(ERROR_SUMMARY):   run;

NOTE: The data set WORK.WS_ERR_TABLE_START has 4 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable DS resolves to err
MPRINT(ERROR_SUMMARY):   data ws_err_table_end;
SYMBOLGEN:  Macro variable STRLEN resolves to 1000
MPRINT(ERROR_SUMMARY):   length string $1000;
MPRINT(ERROR_SUMMARY):   string = '</Table>';
MPRINT(ERROR_SUMMARY):   output;
MPRINT(ERROR_SUMMARY):   run;
195                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016


NOTE: The data set WORK.WS_ERR_TABLE_END has 1 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable DS resolves to err
MPRINT(ERROR_SUMMARY):   data ws_err_header_data;
MPRINT(XML_TAG_DEF):   length Row 8. varname $32;
SYMBOLGEN:  Macro variable DEFDATA resolves to Y
MPRINT(XML_TAG_DEF):   length Data $1000 Type $6;
MPRINT(XML_TAG_DEF):   length Formula $500 Height 8. Index 8. MergeAcross 8. MergeDown 8. StyleID $35 Comment $250 Name $35 ArrayRange $12;
MPRINT(ERROR_SUMMARY):  ;
SYMBOLGEN:  Macro variable DEFDATA resolves to Y
MPRINT(XML_INIT):   call missing(Data,Type);
MPRINT(XML_INIT):   call missing(Row,varname,Formula,Height,Index,MergeAcross,MergeDown,StyleID,Comment,Name,ArrayRange);
MPRINT(ERROR_SUMMARY):  ;
MPRINT(ERROR_SUMMARY):   Type = 'String';
SYMBOLGEN:  Macro variable ROW resolves to 0
SYMBOLGEN:  Macro variable ROW resolves to 1
MPRINT(ERROR_SUMMARY):   Row = 1;
MPRINT(ERROR_SUMMARY):   Data = '';
MPRINT(ERROR_SUMMARY):   output;
SYMBOLGEN:  Macro variable ROW resolves to 1
SYMBOLGEN:  Macro variable ROW resolves to 2
MPRINT(ERROR_SUMMARY):   Row = 2;
SYMBOLGEN:  Macro variable PANEL_TITLE resolves to MedDRA at a Glance
MPRINT(ERROR_SUMMARY):   Data = "MedDRA at a Glance Error Summary";
MPRINT(ERROR_SUMMARY):   StyleID = 'Header';
MPRINT(ERROR_SUMMARY):   output;
SYMBOLGEN:  Macro variable ROW resolves to 2
SYMBOLGEN:  Macro variable ROW resolves to 3
MPRINT(ERROR_SUMMARY):   Row = 3;
MPRINT(ERROR_SUMMARY):   Data = '';
MPRINT(ERROR_SUMMARY):   StyleID = '';
MPRINT(ERROR_SUMMARY):   output;
MPRINT(ERROR_SUMMARY):   StyleID = 'Default10';
SYMBOLGEN:  Macro variable ROW resolves to 3
SYMBOLGEN:  Macro variable ROW resolves to 4
MPRINT(ERROR_SUMMARY):   Row = 4;
SYMBOLGEN:  Macro variable NDABLA resolves to xxx
MPRINT(ERROR_SUMMARY):   Data = "NDA/BLA: xxx";
MPRINT(ERROR_SUMMARY):   output;
SYMBOLGEN:  Macro variable ROW resolves to 4
SYMBOLGEN:  Macro variable ROW resolves to 5
MPRINT(ERROR_SUMMARY):   Row = 5;
SYMBOLGEN:  Macro variable STUDYID resolves to fdadata
MPRINT(ERROR_SUMMARY):   Data = "Study: fdadata";
MPRINT(ERROR_SUMMARY):   output;
SYMBOLGEN:  Macro variable ROW resolves to 5
SYMBOLGEN:  Macro variable ROW resolves to 6
MPRINT(ERROR_SUMMARY):   Row = 6;
MPRINT(ERROR_SUMMARY):   Data = 'Analysis run date: '||put(date(),e8601da.)||' '||put(time(),timeampm11.);
MPRINT(ERROR_SUMMARY):   output;
SYMBOLGEN:  Macro variable ROW resolves to 6
SYMBOLGEN:  Macro variable ROW resolves to 7
MPRINT(ERROR_SUMMARY):   Row = 7;
196                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

SYMBOLGEN:  Macro variable ROW resolves to 7
SYMBOLGEN:  Macro variable ROW resolves to 8
MPRINT(ERROR_SUMMARY):   Row = 8;
MPRINT(ERROR_SUMMARY):   Data = '';
MPRINT(ERROR_SUMMARY):   StyleID = '';
MPRINT(ERROR_SUMMARY):   output;
SYMBOLGEN:  Macro variable PANEL_DESC resolves to 
MPRINT(ERROR_SUMMARY):   StyleID = 'Default10Wrap';
SYMBOLGEN:  Macro variable ROW resolves to 8
SYMBOLGEN:  Macro variable ROW resolves to 9
MPRINT(ERROR_SUMMARY):   Row = 9;
MPRINT(ERROR_SUMMARY):   MergeAcross = 6;
MPRINT(ERROR_SUMMARY):   Height = ceil(length(trim(Data))/130)*12.75;
SYMBOLGEN:  Macro variable ERR_DESC resolves to There were zero adverse events with matching MedDRA descriptions.
SYMBOLGEN:  Macro variable ROW resolves to 9
SYMBOLGEN:  Macro variable ROW resolves to 10
MPRINT(ERROR_SUMMARY):   Row = 10;
SYMBOLGEN:  Macro variable ERR_DESC resolves to There were zero adverse events with matching MedDRA descriptions.
MPRINT(ERROR_SUMMARY):   Data = "There were zero adverse events with matching MedDRA descriptions.";
MPRINT(ERROR_SUMMARY):   output;
SYMBOLGEN:  Macro variable ROW resolves to 10
SYMBOLGEN:  Macro variable ROW resolves to 11
MPRINT(ERROR_SUMMARY):   Row = 11;
MPRINT(ERROR_SUMMARY):   Data = '';
MPRINT(ERROR_SUMMARY):   StyleID = '';
MPRINT(ERROR_SUMMARY):   Height = 12.75;
MPRINT(ERROR_SUMMARY):   output;
SYMBOLGEN:  Macro variable ERR_NOSUBJ resolves to 0
SYMBOLGEN:  Macro variable ERR_MISSVAR resolves to 0
SYMBOLGEN:  Macro variable ROW resolves to 11
SYMBOLGEN:  Macro variable ROW resolves to 12
MPRINT(ERROR_SUMMARY):   Row = 12;
MPRINT(ERROR_SUMMARY):   Data = '';
MPRINT(ERROR_SUMMARY):   StyleID = '';
MPRINT(ERROR_SUMMARY):   Height = 12.75;
MPRINT(ERROR_SUMMARY):   output;
MPRINT(ERROR_SUMMARY):   run;

NOTE: The data set WORK.WS_ERR_HEADER_DATA has 10 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

SYMBOLGEN:  Macro variable DS resolves to err
SYMBOLGEN:  Macro variable DS resolves to err
SYMBOLGEN:  Macro variable DSOUT resolves to ws_err_header
MPRINT(MARKUP):   data ws_err_header;
SYMBOLGEN:  Macro variable DSIN resolves to ws_err_header_data
MPRINT(MARKUP):   set ws_err_header_data;
MPRINT(MARKUP):   by row notsorted;
SYMBOLGEN:  Macro variable STRLEN resolves to 1000
MPRINT(MARKUP):   length string $1000;
MPRINT(MARKUP):   if first.row then do;
MPRINT(MARKUP):   string = '<Row'||ifc(not missing(Height),' ss:Height="'||trim(left(Height))||'"','')||'>';
MPRINT(MARKUP):   output;
MPRINT(MARKUP):   end;
MPRINT(MARKUP):   string = '<Cell'|| ifc(Index > 0,' ss:Index="'||trim(left(Index))||'"','')|| ifc(MergeAcross > 0,' ss:MergeAcross="'||trim(left(MergeAcross))||'"','')|| ifc(MergeDown > 0,' 
197                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

ss:MergeDown="'||trim(left(MergeDown))||'"','')|| ifc(not missing(ArrayRange),' ss:ArrayRange="'||trim(left(ArrayRange))||'"','')|| ifc(not missing(StyleID),' 
ss:StyleID="'||trim(left(StyleID))||'"','')|| ifc(not missing(Formula),' ss:Formula="'||trim(left(Formula))||'"','')||'>'|| ifc(not missing(Data),'<Data'||ifc(not missing(Type),' 
ss:Type="'||trim(left(Type))||'"',' ss:Type="String"')||'>'||trim(Data)||'</Data>','')|| ifc(not missing(Comment),'<Comment><ss:Data 
xmlns="http://www.w3.org/TR/REC-html40">'||trim(left(Comment))||'</ss:Data></Comment> ','')|| ifc(not missing(Name),'<NamedCell ss:Name="'||trim(left(Name))||'"/>','')|| '</Cell>';
MPRINT(MARKUP):   string = tranwrd(tranwrd(compbl(string),' >','>'),'> <','><');
MPRINT(MARKUP):   string = tranwrd(string,'~!',' ');
MPRINT(MARKUP):   output;
MPRINT(MARKUP):   if last.row then do;
MPRINT(MARKUP):   string = '</Row>';
MPRINT(MARKUP):   output;
MPRINT(MARKUP):   end;
MPRINT(MARKUP):   keep string;
MPRINT(MARKUP):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      11346:180   7096:55     7096:137    7096:222    
NOTE: There were 10 observations read from the data set WORK.WS_ERR_HEADER_DATA.
NOTE: The data set WORK.WS_ERR_HEADER has 30 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(ERROR_SUMMARY):  ;
SYMBOLGEN:  Macro variable ERR_MISSVAR resolves to 0
SYMBOLGEN:  Macro variable DS resolves to err
MPRINT(ERROR_SUMMARY):   data ws_err_settings;
SYMBOLGEN:  Macro variable STRLEN resolves to 1000
MPRINT(ERROR_SUMMARY):   length string $1000;
MPRINT(ERROR_SUMMARY):   string = '<WorksheetOptions xmlns="urn:schemas-microsoft-com:office:excel">';
MPRINT(ERROR_SUMMARY):   output;
MPRINT(ERROR_SUMMARY):   string = '<PageSetup>';
MPRINT(ERROR_SUMMARY):   output;
MPRINT(ERROR_SUMMARY):   string = '<Layout x:Orientation="Landscape"/>';
MPRINT(ERROR_SUMMARY):   output;
SYMBOLGEN:  Macro variable NDABLA resolves to xxx
SYMBOLGEN:  Macro variable STUDYID resolves to fdadata
MPRINT(ERROR_SUMMARY):   string = '<Header x:Data="&amp;L'||"panel_title."|| '&amp;R'||"NDA/BLA xxx&#10;Study fdadata"||'"/>';
MPRINT(ERROR_SUMMARY):   output;
MPRINT(ERROR_SUMMARY):   string = '<Footer x:Data="Page &amp;P of &amp;N"/>';
MPRINT(ERROR_SUMMARY):   output;
MPRINT(ERROR_SUMMARY):   string = '</PageSetup>';
MPRINT(ERROR_SUMMARY):   output;
MPRINT(ERROR_SUMMARY):   string = '<FitToPage/>';
MPRINT(ERROR_SUMMARY):   output;
MPRINT(ERROR_SUMMARY):   string = '<Print>';
MPRINT(ERROR_SUMMARY):   output;
MPRINT(ERROR_SUMMARY):   string = '<FitHeight>100</FitHeight>';
MPRINT(ERROR_SUMMARY):   output;
MPRINT(ERROR_SUMMARY):   string = '<ValidPrinterInfo/>';
MPRINT(ERROR_SUMMARY):   output;
MPRINT(ERROR_SUMMARY):   string = '<Scale>78</Scale>';
MPRINT(ERROR_SUMMARY):   output;
MPRINT(ERROR_SUMMARY):   string = '<HorizontalResolution>600</HorizontalResolution>';
MPRINT(ERROR_SUMMARY):   output;
MPRINT(ERROR_SUMMARY):   string = '<VerticalResolution>0</VerticalResolution>';
MPRINT(ERROR_SUMMARY):   output;
MPRINT(ERROR_SUMMARY):   string = '</Print>';
198                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

MPRINT(ERROR_SUMMARY):   output;
MPRINT(ERROR_SUMMARY):   string = '</WorksheetOptions>';
MPRINT(ERROR_SUMMARY):   output;
MPRINT(ERROR_SUMMARY):   run;

NOTE: The data set WORK.WS_ERR_SETTINGS has 15 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(ERROR_SUMMARY):   data wb;
SYMBOLGEN:  Macro variable DS resolves to err
SYMBOLGEN:  Macro variable DS resolves to err
SYMBOLGEN:  Macro variable DS resolves to err
SYMBOLGEN:  Macro variable ERR_MISSVAR resolves to 0
SYMBOLGEN:  Macro variable DS resolves to err
SYMBOLGEN:  Macro variable DS resolves to err
SYMBOLGEN:  Macro variable DS resolves to err
MPRINT(ERROR_SUMMARY):   set wb_start wb_styles ws_err_start ws_err_table_start ws_err_header ws_err_table_end ws_err_settings ws_err_end wb_end ;
MPRINT(ERROR_SUMMARY):   run;

NOTE: There were 10 observations read from the data set WORK.WB_START.
NOTE: There were 347 observations read from the data set WORK.WB_STYLES.
NOTE: There were 1 observations read from the data set WORK.WS_ERR_START.
NOTE: There were 4 observations read from the data set WORK.WS_ERR_TABLE_START.
NOTE: There were 30 observations read from the data set WORK.WS_ERR_HEADER.
NOTE: There were 1 observations read from the data set WORK.WS_ERR_TABLE_END.
NOTE: There were 15 observations read from the data set WORK.WS_ERR_SETTINGS.
NOTE: There were 1 observations read from the data set WORK.WS_ERR_END.
NOTE: There were 1 observations read from the data set WORK.WB_END.
NOTE: The data set WORK.WB has 410 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.02 seconds
      

MPRINT(ERROR_SUMMARY):   data _null_;
MPRINT(ERROR_SUMMARY):   set wb;
SYMBOLGEN:  Macro variable ERR_FILE resolves to /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp2/MedDRA at a Glance Error Summary.xls
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(ERROR_SUMMARY):   file "/sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp2/MedDRA at a Glance Error Summary.xls" ls=32767;
MPRINT(ERROR_SUMMARY):   put string;
MPRINT(ERROR_SUMMARY):   run;

NOTE: The file "/sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp2/MedDRA at a Glance Error Summary.xls" is:
      Filename=/sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp2/MedDRA at a Glance Error Summary.xls,
      Owner Name=sastrust,Group Name=staff,
      Access Permission=rw-r--r--,
      Last Modified=Tue Mar  8 14:11:22 2016

NOTE: 410 records were written to the file "/sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp2/MedDRA at a Glance Error Summary.xls".
      The minimum record length was 6.
      The maximum record length was 263.
NOTE: There were 410 observations read from the data set WORK.WB.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
199                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

      

SYMBOLGEN:  Macro variable ERR_SETERR resolves to 1
MPRINT(AEMED):  ;
7097       
7098       
7099       %ut_saslogcheck;
SYMBOLGEN:  Macro variable LOGFILE resolves to _default_
SYMBOLGEN:  Macro variable LOGREF resolves to _default_
SYMBOLGEN:  Macro variable OUTFILE resolves to _default_
SYMBOLGEN:  Macro variable OUTFILEREF resolves to _default_
SYMBOLGEN:  Macro variable MSGDATA resolves to _default_
SYMBOLGEN:  Macro variable OUT resolves to _default_
SYMBOLGEN:  Macro variable DEBUG resolves to _default_
SYMBOLGEN:  Macro variable DEBUG resolves to 0
SYMBOLGEN:  Macro variable DEBUG resolves to 0
SYMBOLGEN:  Macro variable DEBUG resolves to 0
SYMBOLGEN:  Macro variable DEBUG resolves to 0
SYMBOLGEN:  Macro variable LOGFILE resolves to 
(ut_saslogcheck) logfile=
SYMBOLGEN:  Macro variable LOGREF resolves to 
(ut_saslogcheck) logref=
SYMBOLGEN:  Macro variable OUTFILE resolves to 
(ut_saslogcheck) outfile=
SYMBOLGEN:  Macro variable OUTFILEREF resolves to 
(ut_saslogcheck) outfileref=
SYMBOLGEN:  Macro variable MSGDATA resolves to 
(ut_saslogcheck) msgdata=
SYMBOLGEN:  Macro variable DEBUG resolves to 0
(ut_saslogcheck) debug=0
SYMBOLGEN:  Macro variable SYSSCP resolves to SUN 64
SYMBOLGEN:  Macro variable SYSSCP resolves to SUN 64
SYMBOLGEN:  Macro variable SYSSCP resolves to SUN 64
SYMBOLGEN:  Macro variable SYSSCP resolves to SUN 64
SYMBOLGEN:  Macro variable SYSSCP resolves to SUN 64
SYMBOLGEN:  Macro variable SYSSCP resolves to SUN 64
SYMBOLGEN:  Macro variable SYSSCP resolves to SUN 64
SYMBOLGEN:  Macro variable SYSSCP resolves to SUN 64
SYMBOLGEN:  Macro variable SYSSCP resolves to SUN 64
SYMBOLGEN:  Macro variable SYSSCP resolves to SUN 64
SYMBOLGEN:  Macro variable SYSVER resolves to 9.2
SYMBOLGEN:  Macro variable OPTIONS resolves to 
SYMBOLGEN:  Macro variable OPTIONS resolves to formdlim=""
SYMBOLGEN:  Macro variable DEBUG resolves to 0
MACROGEN(UT_SASLOGCHECK):   options nomprint nosource
MPRINT(UT_SASLOGCHECK):   SOURCE2 NOMLOGIC;
7100       
7101       %let end = %sysfunc(time());
7102       
7103       %let diff = %sysevalf(&end. - &start.);
SYMBOLGEN:  Macro variable END resolves to 51083.5043969154
SYMBOLGEN:  Macro variable START resolves to 51078.1956100464
7104       
7105       %put NOTE: RUNNING TIME: %sysfunc(trim(%sysfunc(putn(&diff.,mmss20))));
SYMBOLGEN:  Macro variable DIFF resolves to 5.30878686899814
NOTE: RUNNING TIME: 0:05
7106       
7107       %put &outpath.;
200                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

SYMBOLGEN:  Macro variable OUTPATH resolves to /sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp2
/sddshared/sas_tmp/SAS_work4B8600001E4B_lly22auv/SAS_work060500001E4B_lly22auv/cache/ibtmp2
7108       
7109       ****************************************;
7110       %ut_saslogcheck;
SYMBOLGEN:  Macro variable LOGFILE resolves to _default_
SYMBOLGEN:  Macro variable LOGREF resolves to _default_
SYMBOLGEN:  Macro variable OUTFILE resolves to _default_
SYMBOLGEN:  Macro variable OUTFILEREF resolves to _default_
SYMBOLGEN:  Macro variable MSGDATA resolves to _default_
SYMBOLGEN:  Macro variable OUT resolves to _default_
SYMBOLGEN:  Macro variable DEBUG resolves to _default_
SYMBOLGEN:  Macro variable DEBUG resolves to 0
SYMBOLGEN:  Macro variable DEBUG resolves to 0
SYMBOLGEN:  Macro variable DEBUG resolves to 0
SYMBOLGEN:  Macro variable DEBUG resolves to 0
SYMBOLGEN:  Macro variable LOGFILE resolves to 
(ut_saslogcheck) logfile=
SYMBOLGEN:  Macro variable LOGREF resolves to 
(ut_saslogcheck) logref=
SYMBOLGEN:  Macro variable OUTFILE resolves to 
(ut_saslogcheck) outfile=
SYMBOLGEN:  Macro variable OUTFILEREF resolves to 
(ut_saslogcheck) outfileref=
SYMBOLGEN:  Macro variable MSGDATA resolves to 
(ut_saslogcheck) msgdata=
SYMBOLGEN:  Macro variable DEBUG resolves to 0
(ut_saslogcheck) debug=0
SYMBOLGEN:  Macro variable SYSSCP resolves to SUN 64
SYMBOLGEN:  Macro variable SYSSCP resolves to SUN 64
SYMBOLGEN:  Macro variable SYSSCP resolves to SUN 64
SYMBOLGEN:  Macro variable SYSSCP resolves to SUN 64
SYMBOLGEN:  Macro variable SYSSCP resolves to SUN 64
SYMBOLGEN:  Macro variable SYSSCP resolves to SUN 64
SYMBOLGEN:  Macro variable SYSSCP resolves to SUN 64
SYMBOLGEN:  Macro variable SYSSCP resolves to SUN 64
SYMBOLGEN:  Macro variable SYSSCP resolves to SUN 64
SYMBOLGEN:  Macro variable SYSSCP resolves to SUN 64
SYMBOLGEN:  Macro variable SYSVER resolves to 9.2
SYMBOLGEN:  Macro variable OPTIONS resolves to 
SYMBOLGEN:  Macro variable OPTIONS resolves to formdlim=""
SYMBOLGEN:  Macro variable DEBUG resolves to 0
MACROGEN(UT_SASLOGCHECK):   options nomprint nosource
MPRINT(UT_SASLOGCHECK):   SOURCE2 NOMLOGIC;
7111       
201                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

7112       
7113       
7114       ;*';*";*/;*);run;quit;
7115       
7116       /********** Reset SAS options ***********************/
7117       options notes source nofmterr compress=no;
202                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

7118       
7119       
7120       /********** Reset titles and footnotes **************/
7121       title;
7122       footnote;
7123       
7124       /********** Reset macros ****************************/
7125       %let DICT =;
7126       %let OUTPATH =;
7127       %let MEDDRADICT =;
7128       %let MEDDRAPATH =;
7129       %let BUMLIB =;
7130       %let UTILPATH =;
7131       %let STUDYPATH =;
7132       
7133       /********** Reset autocall **************************/
7134       options NOSYMBOLGEN NOMPRINT sasautos=('!SASROOT/sasautos' '!SASROOT/RemoteAPI/SASDrugDevRemoteAPI_Macros/sasmacro');
7135       
7136       /********** Ending Process submit.*******************/
203                                                                                          The SAS System                                                                 14:02 Tuesday, March 8, 2016

7137       proc printto log=log;
7138       run;

