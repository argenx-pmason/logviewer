1                                                          The SAS System                      Friday, December 16, 2022 10:29:00 PM

NOTE: Copyright (c) 2016 by SAS Institute Inc., Cary, NC, USA. 
NOTE: SAS (r) Proprietary Software 9.4 (TS1M6 MBCS3170) 
      Licensed to ARGENX VIA OCS CONSULTING_SAS LSAF_SAAS, Site 70265777.
NOTE: This session is executing on the Linux 3.10.0-957.27.2.el7.x86_64 (LIN X64) platform.



NOTE: Analytical products:
      
      SAS/STAT 15.1
      SAS/IML 15.1

NOTE: Additional host information:

 Linux LIN X64 3.10.0-957.27.2.el7.x86_64 #1 SMP Tue Jul 9 16:53:14 UTC 2019 x86_64 Red Hat Enterprise Linux Server release 7.6 
      (Maipo) 

You are running SAS 9. Some SAS 8 files will be automatically converted 
by the V9 engine; others are incompatible.  Please see 
http://support.sas.com/rnd/migration/planning/platform/64bit.html

PROC MIGRATE will preserve current SAS file attributes and is 
recommended for converting all your SAS libraries from any 
SAS 8 release to SAS 9.  For details and examples, please see
http://support.sas.com/rnd/migration/index.html


This message is contained in the SAS news file, and is presented upon
initialization.  Edit the file "news" in the "misc/base" directory to
display site-specific news and information in the program log.
The command line option "-nonews" will prevent this display.




NOTE: SAS Initialization used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      
NOTE: The autoexec file, /sso/biconfig/940/Lev1/LSAFApp/WorkspaceServer/autoexec.sas, was executed at server initialization.
1          options nofmterr;
2          options dtreset;
3          options locale=EN_US;
4          %let _SDDUSR_=%bquote(jbodart);
5          %let _SASWS_ = %nrstr("/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae");
6          %let _SASWS_ = %qsubstr(&_SASWS_, 2, %length(&_SASWS_) - 2);
7          
8          %let _SASUSRWS_ =
8        ! %nrstr("/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/Users/jbodart");
9          %let _SASUSRWS_ = %qsubstr(&_SASUSRWS_, 2, %length(&_SASUSRWS_) - 2);
10         options nosource;

NOTE: DATA statement used (Total process time):
      real time           1.02 seconds
      cpu time            0.01 seconds
      

17         

/**********************************************************************************************************************
 * Submission Start: adsl.sas
 * Dec 16, 2022 22:29:13 GMT by jbodart
 *********************************************************************************************************************/
2                                                          The SAS System                      Friday, December 16, 2022 10:29:14 PM

18         
19         options nosyntaxcheck errorcheck=strict notes;
20         
21         
22         ;*';*";*/;*);run;quit;
23         *reset syscc macro variable;
24         %let syscc=0;
25         %let _SASFILEPATH_ = %nrstr("/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/programs/adsl.sas");
26         %let _SASFILEPATH_ = %qsubstr(&_SASFILEPATH_, 2, %length(&_SASFILEPATH_) - 2);
27         
28         /********************************************************************************************************************/
29         proc scaproc; record "&_SASWS_/.sessions/8/sca_1bde6714-dce6-4d4f-8aab-9af2daed2958.txt" EXPANDMACROS; run;

NOTE: PROCEDURE SCAPROC used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

30         
31         options nomprint;
32         /********************************************************************************************************************/
33         
34         /* Macro Variables for Job Parameters */
35         %let job_instance=lglsT222329_4_x0_5_1_1;
36         %let _PARENTJOB_WS_=/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-c133b942-3fe5-49d5-9e19-398f33a623ff;
37         %let _PARENTJOB_WRK_=;
38         
39         /********************************************************************************************************************/
40         
41         ***********************************************************************
42         *  Project           : test/gadam-tests/test-0001/biostat/staging/generic_adam
43         *  Program           : adsl.sas
44         *  Author            : gadamsystem
45         *  Creation Date     : 2022-12-16
46         *  Purpose           : Generate generic adsl dataset
47         ***********************************************************************;
48         
49         %setenv;
MPRINT(SETENV):   source source2 nofmterr notes spool nodate nonumber MAUTOCOMPLOC NOMAUTOLOCDISPLAY;
MPRINT(SETENV):   * in case run in batch;
(SETENV): _SASFILEPATH_ = /clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/programs/adsl.sas
(SETENV): path1 = /clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/programs/adsl.sas
(SETENV): _sasws_ = /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae
(SETENV): runenvironment = repository
MPRINT(SETENV):   *libname projmeta "&projectsmetapath" access=readonly;
MPRINT(SETENV):   data gen_setenv(keep=fname ver maxver);
MPRINT(SETENV):   length fref $8 dirname fname $400;
MPRINT(SETENV):   direxists = 0;
MPRINT(SETENV):   found = 0;
MPRINT(SETENV):   maxver = .;
MPRINT(SETENV):   
dirname="/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library";
MPRINT(SETENV):   rc=filename(fref, dirname);
MPRINT(SETENV):   did=dopen(fref);
MPRINT(SETENV):   if did > 0 then do;
MPRINT(SETENV):   direxists=1;
MPRINT(SETENV):   memcount=dnum(did);
MPRINT(SETENV):   do i = 1 to memcount;
                                                           The SAS System

MPRINT(SETENV):   fname=dread(did, i);
MPRINT(SETENV):   if prxmatch('/^setenv\d+\.sas$/', cats(fname)) then do;
MPRINT(SETENV):   found+1;
MPRINT(SETENV):   ver = input(prxchange('s/^setenv(\d+)\.sas$/\1/', 1, cats(fname)), best32.);
MPRINT(SETENV):   if ver > maxver then maxver = ver;
MPRINT(SETENV):   put "(SETENV):" found= fname= ver= rc= did= fref= dirname=;
MPRINT(SETENV):   output;
MPRINT(SETENV):   end;
MPRINT(SETENV):   *put "(&sysmacroname):" found= fname= ver= rc= did= fref= dirname=;
MPRINT(SETENV):   end;
MPRINT(SETENV):   rc=dclose(did);
MPRINT(SETENV):   end;
MPRINT(SETENV):   else do;
MPRINT(SETENV):   msg = put(sysmsg(), $400.);
MPRINT(SETENV):   put "Failed to open directory: " rc= did= fref= dirname= "sysmsg=" msg;
MPRINT(SETENV):   end;
MPRINT(SETENV):   rc=filename(fref);
MPRINT(SETENV):   run;

(SETENV):found=1 fname=setenv01.sas ver=1 rc=0 did=1 fref=#LN00016
dirname=/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library
(SETENV):found=2 fname=setenv02.sas ver=2 rc=0 did=1 fref=#LN00016
dirname=/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library
NOTE: The data set WORK.GEN_SETENV has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SETENV):   proc sql noprint;
MPRINT(SETENV):   select fname into :gen_setenv trimmed from gen_setenv having ver = max(ver) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(SETENV):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

gen_setenv = setenv02.sas
MPRINT(SETENV):   data repev_setenv(keep=fname ver maxver);
MPRINT(SETENV):   length fref frefsrc $8 setenv $32 d dirname fname msg $400;
MPRINT(SETENV):   direxists = 0;
MPRINT(SETENV):   found = 0;
MPRINT(SETENV):   maxver = .;
MPRINT(SETENV):   do 
d="/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biosta
t/staging/generic_adam/macros/global_macros", 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/
staging/generic_adam/macros/global-macros" while(direxists=0);
MPRINT(SETENV):   put d=;
MPRINT(SETENV):   rc=filename(fref, d);
MPRINT(SETENV):   did=dopen(fref);
MPRINT(SETENV):   if did > 0 then do;
MPRINT(SETENV):   direxists=1;
MPRINT(SETENV):   dirname=d;
MPRINT(SETENV):   memcount=dnum(did);
MPRINT(SETENV):   do i = 1 to memcount;
MPRINT(SETENV):   fname=dread(did, i);
                                                           The SAS System

MPRINT(SETENV):   if prxmatch('/^setenv\d+\.sas$/', cats(fname)) then do;
MPRINT(SETENV):   found+1;
MPRINT(SETENV):   ver = input(prxchange('s/^setenv(\d+)\.sas$/\1/', 1, cats(fname)), best32.);
MPRINT(SETENV):   if ver > maxver then do;
MPRINT(SETENV):   maxver = ver;
MPRINT(SETENV):   setenv = fname;
MPRINT(SETENV):   end;
MPRINT(SETENV):   put "(SETENV):" found= fname= ver= rc= did= fref= dirname=;
MPRINT(SETENV):   output;
MPRINT(SETENV):   end;
MPRINT(SETENV):   *put "(&sysmacroname):" found= fname= ver= rc= did= fref= dirname=;
MPRINT(SETENV):   end;
MPRINT(SETENV):   rc=dclose(did);
MPRINT(SETENV):   end;
MPRINT(SETENV):   else do;
MPRINT(SETENV):   put "Failed to open directory: " rc= did= fref= dirname=;
MPRINT(SETENV):   end;
MPRINT(SETENV):   rc=filename(fref);
MPRINT(SETENV):   end;
MPRINT(SETENV):   if direxists=0 then do;
MPRINT(SETENV):   *- JMBodart 2021-10-13 - create macros folder if it does not exist (START) -*;
MPRINT(SETENV):   rc=filename(fref, 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/
staging/generic_adam/macros");
MPRINT(SETENV):   did=dopen(fref);
MPRINT(SETENV):   if did > 0 then do;
MPRINT(SETENV):   rc=dclose(did);
MPRINT(SETENV):   end;
MPRINT(SETENV):   else do;
MPRINT(SETENV):   dirname = dcreate("macros", 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/
staging/generic_adam/");
MPRINT(SETENV):   dirname = ' ';
MPRINT(SETENV):   end;
MPRINT(SETENV):   rc=filename(fref);
MPRINT(SETENV):   *- JMBodart 2021-10-13 - create macros folder if it does not exist (END) -*;
MPRINT(SETENV):   dirname=dcreate("global_macros", 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/
staging/generic_adam/macros");
MPRINT(SETENV):   if dirname ^= ' ' then do;
MPRINT(SETENV):   rc=filename(fref, dirname);
MPRINT(SETENV):   did=dopen(fref);
MPRINT(SETENV):   if did > 0 then do;
MPRINT(SETENV):   direxists=1;
MPRINT(SETENV):   rc=dclose(did);
MPRINT(SETENV):   end;
MPRINT(SETENV):   rc=filename(fref);
MPRINT(SETENV):   end;
MPRINT(SETENV):   end;
MPRINT(SETENV):   put dirname= direxists=;
MPRINT(SETENV):   if direxists then do;
MPRINT(SETENV):   call execute("option insert=(sasautos="||quote(cats(dirname))||");");
MPRINT(SETENV):   if found = 0 then do;
MPRINT(SETENV):   cumrc = 0;
MPRINT(SETENV):   rc=filename(frefsrc, 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library/setenv02.sas
");
MPRINT(SETENV):   if rc ne 0 then do;
                                                           The SAS System

MPRINT(SETENV):   msg = sysmsg();
MPRINT(SETENV):   put msg;
MPRINT(SETENV):   cumrc=rc;
MPRINT(SETENV):   end;
MPRINT(SETENV):   rc=filename(fref, cats(dirname, "/setenv02.sas"));
MPRINT(SETENV):   if rc ne 0 then do;
MPRINT(SETENV):   msg = sysmsg();
MPRINT(SETENV):   put msg;
MPRINT(SETENV):   cumrc=rc;
MPRINT(SETENV):   end;
MPRINT(SETENV):   if cumrc = 0 then do;
MPRINT(SETENV):   put "Copying  
""/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library/setenv02.sa
s"" to" dirname $quote. ;
MPRINT(SETENV):   rc = fcopy(frefsrc, fref);
MPRINT(SETENV):   if rc ne 0 then do;
MPRINT(SETENV):   put "Failed.";
MPRINT(SETENV):   msg = sysmsg();
MPRINT(SETENV):   put msg;
MPRINT(SETENV):   cumrc=rc;
MPRINT(SETENV):   end;
MPRINT(SETENV):   else put "Success.";
MPRINT(SETENV):   end;
MPRINT(SETENV):   rc=filename(frefsrc);
MPRINT(SETENV):   rc=filename(fref);
MPRINT(SETENV):   if cumrc = 0 then setenv = "setenv02.sas";
MPRINT(SETENV):   end;
MPRINT(SETENV):   end;
MPRINT(SETENV):   call symput("setenv", cats(setenv));
MPRINT(SETENV):   put setenv=;
MPRINT(SETENV):   run;

d=/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat
/staging/generic_adam/macros/global_macros
dirname=/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/b
iostat/staging/generic_adam/macros/global_macros direxists=1
MPRINT(SETENV):   option 
insert=(sasautos="/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/t
est-0001/biostat/staging/generic_adam/macros/global_macros");
Copying  "/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library/set
env02.sas" to
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/
staging/generic_adam/macros/global_macros"                                                                                          


Success.
setenv=setenv02.sas
NOTE: The data set WORK.REPEV_SETENV has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: CALL EXECUTE generated line.
1         + option 
insert=(sasautos="/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/t
est-0001/biostat/staging/generic_adam/macros/global_macros");
setenv=setenv02.sas
                                                           The SAS System

(SETENV): Calling %setenv02(ini=1, tabno=, default_debug=1)
MAUTOCOMPLOC:  The autocall macro SETENV02 is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-00
            01/biostat/staging/generic_adam/macros/global_macros/setenv02.sas.
MPRINT(SETENV.SETENV02):   options mprint nofmterr spool nodate nonumber MAUTOCOMPLOC NOMAUTOLOCDISPLAY;
MPRINT(SETENV.SETENV02):   *- Clean previously compiled macros from WORK.SASMAC* -*;
MPRINT(SETENV.SETENV02):   data _NULL_;
MPRINT(SETENV.SETENV02):   length save $500;
MPRINT(SETENV.SETENV02):   retain save;
MPRINT(SETENV.SETENV02):   set sashelp.vcatalg(where=(libname="WORK" and memname=:'SASMAC' and objtype="MACRO")) end=last;
MPRINT(SETENV.SETENV02):   by memname notsorted;
MPRINT(SETENV.SETENV02):   if first.memname then do;
MPRINT(SETENV.SETENV02):   if index(" "||save, " "||strip(memname)||".") eq 0 then save = catx(" ", save, 
strip(memname)||"."||objname);
MPRINT(SETENV.SETENV02):   end;
MPRINT(SETENV.SETENV02):   if last;
MPRINT(SETENV.SETENV02):   call symputx('save_macr', save);
MPRINT(SETENV.SETENV02):   run;

NOTE: There were 2 observations read from the data set SASHELP.VCATALG.
      WHERE (libname='WORK') and (memname=:'SASMAC') and (objtype='MACRO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

save_macr = SASMAC1.SETENV
MPRINT(SETENV.SETENV02):   proc catalog catalog=work.SASMAC1 force;
MPRINT(SETENV.SETENV02):   *save &sysmacroname /et=macro;
MPRINT(SETENV.SETENV02):   save SETENV SETENV02 /et=macro;
MPRINT(SETENV.SETENV02):   run;

NOTE: Saving entry SETENV.MACRO in catalog WORK.SASMAC1.
NOTE: Saving entry SETENV02.MACRO in catalog WORK.SASMAC1.
MPRINT(SETENV.SETENV02):   quit;

NOTE: PROCEDURE CATALOG used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(SETENV.SETENV02):   *- Clear filenames and delete previous scaprocrecord.txt (J-M Bodart 2021-03-25) -*;
MPRINT(SETENV.SETENV02):   filename _all_ clear;
MPRINT(SETENV.SETENV02):   * in case run in batch;
(SETENV02): _SASFILEPATH_ = /clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/programs/adsl.sas
(SETENV02): path1 = /clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/programs/adsl.sas
(SETENV02): _sasws_ = /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae
(SETENV02): runenvironment = repository
MPRINT(SETENV.SETENV02):   libname projmeta 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/metadata/projects/" 
access=readonly;
NOTE: Libref PROJMETA was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: 
      /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/metadata/projects
runenvironment=repository
progpath=/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/programs/
repevpath=/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001
                                                           The SAS System

/biostat/staging/generic_adam/
relrepevpath=/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/
progname=adsl.sas
pgmname=adsl
general=/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/
debug=1
compound=test
indication=gadam-tests
study=test-0001
revent=generic_adam
NOTE: %INCLUDE (level 1) file 
      /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library/setsasa
      utos.sas is file 
      /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library/setsasa
      utos.sas.
50        +/**
51        +@file
52        +@author     Martijn Busselen
53        +@date       2020-11-23
54        +@brief      set the macro sasautos so it uses first the maros defined on reporting event level and secondly those from
54       !+the global level
55        +
56        +@pre        Need to run %setenv
57        +
58        +#### Update History ####
59        +
60        +      Date           Name                       Description
61        +      ------------   ------------------------
61       !+-----------------------------------------------------------------------------
62        +      2021-07-21     S Shipp                    Update for global_macros folder.
63        +      2022-02-27     J-M Bodart                 Include /general/gadam/_library when last level of &repevpath =
63       !+generic_adam.
64        +      2022-03-01     J-M Bodart                 Add \ as delimiter in %scan(&repevpath, -1, /\) as it is not part of
64       !+default delimiters
65        +                                                (needed when run locally on Windows).
66        +      2022-06-30     J-M Bodart                 Add gsdtm/_library.
67        +      2022-12-07     J-M Bodart                 Add user workspace macros to SASAUTOS for development purposes, if
67       !+applicable.
68        +      2022-12-08     J-M Bodart                 Increase l3 size to avoid truncations.
69        +                                                Only add workspace macros to SASAUTOS if environment variable
69       !+USE_SAS_WORKSPACE_MACROS
70        +                                                is defined as Y, or global macro-variable &USE_SAS_WORKSPACE_MACROS=Y.
71        +      2022-12-11     J-M Bodart                 Fix regex !^/general/biostat/jobs/(gadam|gsdtm)_\w+/dev(/|$)!.
72        +
73        +
74        +#### Examples ####
75        +@code
76        +   option mautosource mcompilenote=all;
77        +   %setSasAutos();
78        +@endcode
79        +**/
80        +
81        +%macro setSasAutos();
82        +   %local firstset last3 nb_dirs user_workspace_macros;
83        +   %let firstset = 1;
84        +   %if %symexist(runenvironment)=0 %then %local runenvironment;
85        +
86        +   %*- Determine if WORKSPACE macros should be used (in case available) -*;
                                                           The SAS System

87        +   %if %symexist(USE_SAS_WORKSPACE_MACROS)=0 %then %do;
88        +      %global USE_SAS_WORKSPACE_MACROS;
89        +   %end;
90        +   %if %sysfunc(sysexist(USE_SAS_WORKSPACE_MACROS)) %then %do;
91        +      %let USE_SAS_WORKSPACE_MACROS = %sysget(USE_SAS_WORKSPACE_MACROS);
92        +   %end;
93        +   %if %sysfunc(sysexist(USE_SAS_WORKSPACE_MACROS))=0 and %qsysfunc(upcase(%superq(USE_SAS_WORKSPACE_MACROS)), $1.)=Y
93       !+%then %do;
94        +      *- Set environment variable -*;
95        +      option set=USE_SAS_WORKSPACE_MACROS "Y";  /*- to unset environment variable use: option
95       !+set=USE_SAS_WORKSPACE_MACROS ""; -*/
96        +   %end;
97        +   %put &=USE_SAS_WORKSPACE_MACROS;
98        +   %put %str(Not)ice: Environment variable USE_SAS_WORKSPACE_MACROS is
98       !+%sysfunc(ifc(%sysfunc(sysexist(USE_SAS_WORKSPACE_MACROS)), DEFINED, NOT DEFINED)).;
99        +
100       +   /*in LSAF there are 3 default directories in sasautos and these need to be kept*/
101       +   %if &runenvironment=repository or &runenvironment=workspace %then %do;
102       +      data _null_;
103       +         length a b c dirs l3 $4000;  /*- jbodart - 2022-12-08 - increase l3 size to avoid truncations -*/
104       +         a= strip(getoption("sasautos"));
105       +         put a=;
106       +         len = length(a);
107       +         nobrack = substr(a,2,len-2);
108       +         b = tranwrd(nobrack,'"',"");
109       +         c = compbl(strip(tranwrd(b,"'","")));
110       +         e = countw(c," ");
111       +         call symputx("nb_dirs",strip(put(e,8.)));
112       +         do i = 1 to e;
113       +            last3 = (e-i<3);
114       +            dirs = scan(c,i," ");
115       +            output;
116       +            if last3 then l3 = strip(l3)||' "'||strip(dirs)||'"';
117       +            if e then call symputx ('last3',strip(l3));
118       +         end;
119       +      run;
120       +      %put nb sasautos dirs = &nb_dirs;
121       +      %put last3 = &last3;
122       +   %end;
123       +   %if ( %sysfunc(fileexist(&general.macros&sepchar._library&sepchar)) or %sysfunc(fileexist(&repevpath.macros&sepchar))
123      !+) %then %do;
124       +      %if %sysfunc(fileexist(&repevpath.macros&sepchar)) %then %do;
125       +
126       +         %let gmdfolder=%sysfunc(fileexist(&repevpath.macros&sepchar.global-macros));
127       +         %let gmufolder=%sysfunc(fileexist(&repevpath.macros&sepchar.global_macros));
128       +
129       +         %put &=gmdfolder;
130       +         %put &=gmufolder;
131       +
132       +         options dlcreatedir;
133       +         %if &gmdfolder=1 %then %do;
134       +            libname globmac ("&repevpath.macros&sepchar.global-macros");
135       +         %end;
136       +         %else %do;
137       +            libname globmac ("&repevpath.macros&sepchar.global_macros");
138       +         %end;
139       +      %end;
140       +
                                                           The SAS System

141       +      %*- 2022-12-07 - jbodart - Add user workspace macros to SASAUTOS for development purposes, if applicable -*;
142       +      %let user_workspace_macros = ;
143       +
144       +      %if &runenvironment=repository and %symexist(_SDDUSR_) %then %do;
145       +
146       +         %if ("&revent"="generic_adam" or "%scan(&repevpath, -1, /\)"="generic_adam")
147       +            and %sysfunc(prxmatch(!^/clinical/test/gadam-tests/!, %superq(relrepevpath)))
148       +            and %sysfunc(fileexist(/lsafshared/SASWorkspaces/&_SDDUSR_/general/biostat/gadam/_library/%str(*).sas))
149       +            and %qsysfunc(upcase(%superq(USE_SAS_WORKSPACE_MACROS)), $1.)=Y
150       +            %then %let user_workspace_macros = &user_workspace_macros
150      !+"/lsafshared/SASWorkspaces/&_SDDUSR_/general/biostat/gadam/_library";
151       +
152       +         %else %if ("&revent"="generic_sdtm" or "%scan(&repevpath, -1, /\)"="generic_sdtm")
153       +            and %sysfunc(prxmatch(!^/clinical/test/gsdtm-tests/!, %superq(relrepevpath)))
154       +            and %sysfunc(fileexist(/lsafshared/SASWorkspaces/&_SDDUSR_/general/biostat/gsdtm/_library/%str(*).sas))
155       +            and %qsysfunc(upcase(%superq(USE_SAS_WORKSPACE_MACROS)), $1.)=Y
156       +            %then %let user_workspace_macros = &user_workspace_macros
156      !+"/lsafshared/SASWorkspaces/&_SDDUSR_/general/biostat/gsdtm/_library";
157       +
158       +         %if (    "&revent"="generic_adam" or "%scan(&repevpath, -1, /\)"="generic_adam"
159       +               or "&revent"="generic_sdtm" or "%scan(&repevpath, -1, /\)"="generic_sdtm"
160       +               or %sysfunc(prxmatch(!^/general/biostat/jobs/(gadam|gsdtm)_\w+/dev(/|$)!, %superq(relrepevpath)))
161       +               )
162       +            and %sysfunc(fileexist(/lsafshared/SASWorkspaces/&_SDDUSR_/general/biostat/macros/_library/%str(*).sas))
163       +            and %qsysfunc(upcase(%superq(USE_SAS_WORKSPACE_MACROS)), $1.)=Y
164       +            %then %let user_workspace_macros = &user_workspace_macros
164      !+"/lsafshared/SASWorkspaces/&_SDDUSR_/general/biostat/macros/_library";
165       +
166       +         %if %length(%superq(user_workspace_macros)) %then %do;
167       +            %put %str(WAR)NING: === Adding WORKSPACE paths to SASAUTOS for development purposes, please check macros
167      !+versions in your workspace: === ;
168       +            %put %str(   )&user_workspace_macros;
169       +            %put;
170       +         %end;
171       +
172       +         %put &=runenvironment &=_SDDUSR_ &=relrepevpath &=user_workspace_macros;
173       +
174       +      %end;
175       +
176       +      %*- Use autocall to compile any macro in Macros subfolder on demand -*;
177       +      options mautosource sasautos = (
178       +            %if %sysfunc(fileexist(&repevpath.macros&sepchar))                         %then "&repevpath.macros";
179       +                                                                                             &user_workspace_macros
180       +            %if "&revent"="generic_adam" or "%scan(&repevpath, -1, /\)"="generic_adam" %then
180      !+"&general.gadam&sepchar._library";
181       +            %if "&revent"="generic_sdtm" or "%scan(&repevpath, -1, /\)"="generic_sdtm" %then
181      !+"&general.gsdtm&sepchar._library";  /*- jbodart 2022-06-30 -*/
182       +            %if %sysfunc(fileexist(&repevpath.macros&sepchar.global-macros))           %then
182      !+"&repevpath.macros&sepchar.global-macros";
183       +            %if %sysfunc(fileexist(&repevpath.macros&sepchar.global_macros))           %then
183      !+"&repevpath.macros&sepchar.global_macros";
184       +            %if %sysfunc(fileexist(&general.macros&sepchar._library&sepchar))          %then
184      !+"&general.macros&sepchar._library" ;
185       +            %if &runenvironment=local or &runenvironment=batch or %length(%superq(runenvironment))=0
186       +                                                                                       %then sasautos;
187       +                                                                                       %else &last3;
188       +            ) MRECALL=YES;
189       +   %end;
                                                           The SAS System

190       +   %let sa = %sysfunc(getoption(sasautos));
191       +   %put sa=&sa;
192       +%mend setSasAutos;
NOTE: %INCLUDE (level 1) ending.
USE_SAS_WORKSPACE_MACROS=
Notice: Environment variable USE_SAS_WORKSPACE_MACROS is NOT DEFINED.
MPRINT(SETENV.SETENV02.SETSASAUTOS):   data _null_;
MPRINT(SETENV.SETENV02.SETSASAUTOS):   length a b c dirs l3 $4000;
MPRINT(SETENV.SETENV02.SETSASAUTOS):   a= strip(getoption("sasautos"));
MPRINT(SETENV.SETENV02.SETSASAUTOS):   put a=;
MPRINT(SETENV.SETENV02.SETSASAUTOS):   len = length(a);
MPRINT(SETENV.SETENV02.SETSASAUTOS):   nobrack = substr(a,2,len-2);
MPRINT(SETENV.SETENV02.SETSASAUTOS):   b = tranwrd(nobrack,'"',"");
MPRINT(SETENV.SETENV02.SETSASAUTOS):   c = compbl(strip(tranwrd(b,"'","")));
MPRINT(SETENV.SETENV02.SETSASAUTOS):   e = countw(c," ");
MPRINT(SETENV.SETENV02.SETSASAUTOS):   call symputx("nb_dirs",strip(put(e,8.)));
MPRINT(SETENV.SETENV02.SETSASAUTOS):   do i = 1 to e;
MPRINT(SETENV.SETENV02.SETSASAUTOS):   last3 = (e-i<3);
MPRINT(SETENV.SETENV02.SETSASAUTOS):   dirs = scan(c,i," ");
MPRINT(SETENV.SETENV02.SETSASAUTOS):   output;
MPRINT(SETENV.SETENV02.SETSASAUTOS):   if last3 then l3 = strip(l3)||' "'||strip(dirs)||'"';
MPRINT(SETENV.SETENV02.SETSASAUTOS):   if e then call symputx ('last3',strip(l3));
MPRINT(SETENV.SETENV02.SETSASAUTOS):   end;
MPRINT(SETENV.SETENV02.SETSASAUTOS):   run;

a=('/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biost
at/staging/generic_adam/macros/global_macros' "SASEnvironment/SASMacro" '!SASROOT/sasautos' "/sso/sfw/sas/940/SASFoundation/9.4/lsaf
api/lsaf-sas-macro-2.3/sasmacros" "/lsafshared/SASWorkspaces/global_macros")
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

nb sasautos dirs = 5
last3 = "!SASROOT/sasautos" "/sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.3/sasmacros" 
"/lsafshared/SASWorkspaces/global_macros"
GMDFOLDER=0
GMUFOLDER=1
MPRINT(SETENV.SETENV02.SETSASAUTOS):   options dlcreatedir;
MPRINT(SETENV.SETENV02.SETSASAUTOS):   libname globmac 
("/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat
/staging/generic_adam/macros/global_macros");
NOTE: Libref GLOBMAC was successfully assigned as follows: 
      Levels:           1
      Engine(1):        V9 
      Physical Name(1): 
      /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/bio
      stat/staging/generic_adam/macros/global_macros
RUNENVIRONMENT=repository _SDDUSR_=jbodart RELREPEVPATH=/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/ 
USER_WORKSPACE_MACROS=
MPRINT(SETENV.SETENV02.SETSASAUTOS):   options mautosource sasautos = ( 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/
staging/generic_adam/macros" 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/gadam/_library" 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/
staging/generic_adam/macros/global_macros" 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library" 
"!SASROOT/sasautos" "/sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.3/sasmacros" 
                                                           The SAS System

"/lsafshared/SASWorkspaces/global_macros" ) MRECALL=YES;
sa=("/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/bios
tat/staging/generic_adam/macros"                                                                                               
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/gadam/_library" 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/
staging/generic_adam/macros/global_macros" 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library" 
"!SASROOT/sasautos" "/sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.3/sasmacros" 
"/lsafshared/SASWorkspaces/global_macros")
MPRINT(SETENV.SETENV02):  ;
MAUTOCOMPLOC:  The autocall macro INI is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library/i
            ni.sas.
MPRINT(SETENV.SETENV02.INI):   option validvarname=v7 mprint nofmterr spool noquotelenmax nodate nonumber nobyline ps=60 ls=200 nocenter missing=' ';
MPRINT(SETENV.SETENV02.INI):   options formchar="|----|+|---+=|-/\<>*";
ini test
MPRINT(SETENV.SETENV02.INI):   title;
MPRINT(SETENV.SETENV02.INI):   footnote;
fcmpoutlib=work.functions
MPRINT(SETENV.SETENV02.INI):  ;
MPRINT(SETENV.SETENV02.INI.DELVARS):   data vars;
MPRINT(SETENV.SETENV02.INI.DELVARS):   set sashelp.vmacro;
MPRINT(SETENV.SETENV02.INI.DELVARS):   if name not in ("_SASFILEPATH_" "CONNSERV" "_SASUSRWS_" "_METAUSER" "_SDDUSR_" "_SASWS_" "_SASDRGDEVENV_" "DEBUG" "PROJECTSMETAPATH" "GENERAL" "REPEVPATH" 
"COMPOUND" "INDICATION" "STUDY" "REVENT" "RUNENVIRONMENT" "SEPCHAR" "RELREPEVPATH" "PROGNAME" "PROGPATH" "PGMNAME" "_LSAFJOBNAME_" "PROGVERSION" "TABNOVAR" "JOB_INSTANCE" "_PARENTJOB_WS_" 
"_PARENTJOB_WRK_" );
MPRINT(SETENV.SETENV02.INI.DELVARS):   run;

NOTE: There were 142 observations read from the data set SASHELP.VMACRO.
NOTE: The data set WORK.VARS has 116 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SETENV.SETENV02.INI.DELVARS):   data _null_;
MPRINT(SETENV.SETENV02.INI.DELVARS):   set vars;
MPRINT(SETENV.SETENV02.INI.DELVARS):   temp=lag(name);
MPRINT(SETENV.SETENV02.INI.DELVARS):   if scope='GLOBAL' and substr(name,1,3) ne 'SYS' and temp ne name then call execute('%symdel '||trim(left(name))||';');
MPRINT(SETENV.SETENV02.INI.DELVARS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      
NOTE: There were 116 observations read from the data set WORK.VARS.

NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(SETENV.SETENV02.INI):   ;
debug=1 projectsmetapath=/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/metadata/projects/ 
general=/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/ 
repevpath=/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/ sepchar=/ tfnum=
runenvironment=repository progname=adsl.sas pgmname=adsl
compound=test indication=gadam-tests study=test-0001 revent=generic_adam
JOB_INSTANCE=lglsT222329_4_x0_5_1_1 _PARENTJOB_WS_=/lsafshared/SASWorkspaces/.transient/job_gadam_rebuild_adam.job-c133b942-3fe5-49d5-9e19-398f33a623ff _PARENTJOB_WRK_=
MPRINT(SETENV.SETENV02.INI):   libname _all_ clear;
NOTE: Libref GLOBMAC has been deassigned.
NOTE: Libref PROJMETA has been deassigned.
MPRINT(SETENV.SETENV02.INI):   proc datasets library=work memtype=data kill nolist;
The SAS System

NOTE: Deleting WORK.GEN_SETENV (memtype=DATA).
NOTE: Deleting WORK.REPEV_SETENV (memtype=DATA).
NOTE: Deleting WORK.VARS (memtype=DATA).
MPRINT(SETENV.SETENV02.INI):   quit;
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SETENV.SETENV02.INI):   libname projmeta "/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/metadata/projects/" access=readonly;
NOTE: Libref PROJMETA was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/metadata/projects
MPRINT(SETENV.SETENV02.INI):   libname repemeta 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/documents" access=readonly;
NOTE: Libref REPEMETA was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/documents
sa=("/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/macros"                                    
                                                           "/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/gadam/_library" 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/macros/global_macros" 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library" "!SASROOT/sasautos" 
"/sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.3/sasmacros" "/lsafshared/SASWorkspaces/global_macros")
MAUTOCOMPLOC:  The autocall macro READREPEVENTMETA is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library/readrepeventmeta.sas.
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA):   data projmetameta;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA):   length Res_Reporting_Event_Path $500;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA):   set projmeta.meta;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA):   Res_Reporting_Event_Path = resolve(strip(Reporting_Event_Path));
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA):   run;

NOTE: There were 326 observations read from the data set PROJMETA.META.
NOTE: The data set WORK.PROJMETAMETA has 326 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA):   data _null_;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA):   set projmetameta;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA):   if strip(lowcase(Res_Reporting_Event_Path)) = strip(lowcase("/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/")) or 
strip(lowcase(Res_Reporting_Event_Path))||"/" = strip(lowcase("/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/"));
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA):   call symputx('repeventfile',strip(LOT));
MAUTOCOMPLOC:  The autocall macro VAREXIST is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library/varexist.sas.
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA):   call symputx('repeventSheet',strip(LOT_sheet));
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA):   lines+1;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA):   call symputx('found',strip(put(lines,8.)));
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA):   run;

NOTE: There were 326 observations read from the data set WORK.PROJMETAMETA.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.02 seconds
      

repevpath=/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/
repeventfile=0001-generic-adam.xlsx
The SAS System

repeventSheet=LOT$A3:O
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.CHK):   ;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA):  ;
REPEVENTFILE_SP=0001-generic-adam_sp.xlsx
MAUTOCOMPLOC:  The autocall macro GETFILEDATE is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library/getfiledate.sas.
ndatetime = 1986848917
fdatetime = 16DEC22:22:28:37
fname = 0001-generic-adam.xlsx
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA):  ;
0001-generic-adam.xlsx -> 16DEC22:22:28:37
NOT FOUND: /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/documents/0001-generic-adam_sp.xlsx
ndatetime = .
fdatetime = not_found
fname = not_found
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA):  ;
repemeta.sas7bdat -> 16DEC22:22:28:37
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   ;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   libname repemeta 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/documents" compress=yes;
NOTE: Libref REPEMETA was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/documents
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   *- JMB 2021-05-21 - use a fileref to avoid hitting the 200 char limitation of datafile argument (easily reached when running in lsaf 
transient folder with a long job filename) -*;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   filename repevxl 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/documents/0001-generic-adam.xlsx";
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   PROC IMPORT OUT= repemeta DATAFILE=repevxl DBMS=XLSX REPLACE;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   RXLX;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   RANGE="LOT$A3:O";
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   GETNAMES=YES;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   RUN;

NOTE:    Variable Name Change.  No. -> No_                             
NOTE:    Variable Name Change.  Analysis Set -> Analysis_Set                    
NOTE:    Variable Name Change.  SAS Program -> SAS_Program                     
NOTE: One or more variables were converted because the data type is not supported by the V9 engine. For more details, run with options MSGLEVEL=I.
NOTE: The import data set has 61 observations and 15 variables.
NOTE: WORK.REPEMETA data set was successfully created.
NOTE: PROCEDURE IMPORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   options missing="";
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   data repemeta_dummy;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   length TITLE $400 DATASET SAS_PROGRAM NUM $50;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   call missing(of TITLE DATASET SAS_PROGRAM NUM);
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   delete;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   run;

NOTE: The data set WORK.REPEMETA_DUMMY has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   option mcompilenote=all;
The SAS System

MAUTOCOMPLOC:  The autocall macro UNI_VTYPE is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library/uni_vtype.sas.
NOTE: The macro UNI_VTYPE completed compilation without errors.
      185 instructions 7208 bytes.
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   option MCOMPILENOTE=NONE;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.UNI_VTYPE):   *- Harmonize type of variables with conflicting types in Data= datasets According to the length found in Ref= datasests (if 
specified) -*;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.UNI_VTYPE):   proc sql noprint undo_policy=none;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.UNI_VTYPE):   *- identify variables with conflicting type -*;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.UNI_VTYPE):   select column , conflict_type_vars into :conflict_type_vars separated by ", " , :n_conflict_type_vars separated by " " from 
(select distinct varnum , case when TYPE="NUM" and (sum(TYPE="NUM")>0 and sum(TYPE="CHAR")>0) then "left(put("||cats(name)||", "||cats(format)||")) as "||cats(name) else cats(name) end as column , 
case when sum(TYPE="NUM" )>0 and sum(TYPE="CHAR" )>0 then 'x' else ' ' end as conflict_type_vars from (select distinct upcase(LIBNAME) as LIBNAME, upcase(MEMNAME) as MEMNAME, varnum as VARNUM, 
upcase(NAME) as NAME, upcase(TYPE) as TYPE , case when format=" " and upcase(TYPE)="NUM" then "Best12." when format=" " and upcase(TYPE)="CHAR" then "$CHAR." else upcase(format) end as format from 
sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.REPEMETA_DUMMY" "WORK.REPEMETA_DUMMY" "WORK.REPEMETA" "WORK.REPEMETA_SP" ) ) group by name having 
upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK.REPEMETA_DUMMY" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.UNI_VTYPE):   *- identify variables with conflicting type -*;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.UNI_VTYPE):   select column , conflict_type_vars into :conflict_type_vars separated by ", " , :n_conflict_type_vars separated by " " from 
(select distinct varnum , case when TYPE="NUM" and (sum(TYPE="NUM")>0 and sum(TYPE="CHAR")>0) then "left(put("||cats(name)||", "||cats(format)||")) as "||cats(name) else cats(name) end as column , 
case when sum(TYPE="NUM" )>0 and sum(TYPE="CHAR" )>0 then 'x' else ' ' end as conflict_type_vars from (select distinct upcase(LIBNAME) as LIBNAME, upcase(MEMNAME) as MEMNAME, varnum as VARNUM, 
upcase(NAME) as NAME, upcase(TYPE) as TYPE , case when format=" " and upcase(TYPE)="NUM" then "Best12." when format=" " and upcase(TYPE)="CHAR" then "$CHAR." else upcase(format) end as format from 
sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.REPEMETA" "WORK.REPEMETA_DUMMY" "WORK.REPEMETA" "WORK.REPEMETA_SP" ) ) group by name having 
upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK.REPEMETA" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.UNI_VTYPE):   *- identify variables with conflicting type -*;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.UNI_VTYPE):   select column , conflict_type_vars into :conflict_type_vars separated by ", " , :n_conflict_type_vars separated by " " from 
(select distinct varnum , case when TYPE="NUM" and (sum(TYPE="NUM")>0 and sum(TYPE="CHAR")>0) then "left(put("||cats(name)||", "||cats(format)||")) as "||cats(name) else cats(name) end as column , 
case when sum(TYPE="NUM" )>0 and sum(TYPE="CHAR" )>0 then 'x' else ' ' end as conflict_type_vars from (select distinct upcase(LIBNAME) as LIBNAME, upcase(MEMNAME) as MEMNAME, varnum as VARNUM, 
upcase(NAME) as NAME, upcase(TYPE) as TYPE , case when format=" " and upcase(TYPE)="NUM" then "Best12." when format=" " and upcase(TYPE)="CHAR" then "$CHAR." else upcase(format) end as format from 
sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.REPEMETA_SP" "WORK.REPEMETA_DUMMY" "WORK.REPEMETA" "WORK.REPEMETA_SP" ) ) group by name having 
upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK.REPEMETA_SP" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
NOTE: No rows were selected.
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.UNI_VTYPE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      

MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):  ;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   option mcompilenote=all;
MAUTOCOMPLOC:  The autocall macro UNI_VLENGTH is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library/uni_vlength.sas.
NOTE: The macro UNI_VLENGTH completed compilation without errors.
      216 instructions 6824 bytes.
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   option MCOMPILENOTE=NONE;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.UNI_VLENGTH):   *- Harmonize length of character variables in Data= datasets According to the length found in Ref= datasests (if specified) -*;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.UNI_VLENGTH):   proc sql noprint;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated 
by " " from (select distinct upcase(LIBNAME) as LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in 
("WORK.REPEMETA_DUMMY" "WORK.REPEMETA" "WORK.REPEMETA_SP" )) then LENGTH else . end ) as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.REPEMETA_DUMMY" 
"WORK.REPEMETA_DUMMY" "WORK.REPEMETA" "WORK.REPEMETA_SP" ) group by upcase(name)) group by upcase(name), upcase(type) having sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK.REPEMETA_DUMMY" and 
TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.REPEMETA_DUMMY" "WORK.REPEMETA" "WORK.REPEMETA_SP" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
MAUTOCOMPLOC:  The autocall macro DSATTR is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library/dsattr.sas.
MAUTOCOMPLOC:  The autocall macro LOWCASE is compiling using the autocall source file /sso/sfw/sas/940/SASFoundation/9.4/sasautos/lowcase.sas.
The SAS System

NOTE: No observations in data set WORK.REPEMETA_DUMMY.
NOTE: No observations in data set WORK.REPEMETA_DUMMY.
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.UNI_VLENGTH):   alter table WORK.REPEMETA_DUMMY modify DATASET character(50), NUM character(50), SAS_PROGRAM character(50), TITLE 
character(400) ;
NOTE: Table WORK.REPEMETA_DUMMY has been modified, with 4 columns.
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated 
by " " from (select distinct upcase(LIBNAME) as LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in 
("WORK.REPEMETA_DUMMY" "WORK.REPEMETA" "WORK.REPEMETA_SP" )) then LENGTH else . end ) as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.REPEMETA" 
"WORK.REPEMETA_DUMMY" "WORK.REPEMETA" "WORK.REPEMETA_SP" ) group by upcase(name)) group by upcase(name), upcase(type) having sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK.REPEMETA" and 
TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.REPEMETA_DUMMY" "WORK.REPEMETA" "WORK.REPEMETA_SP" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.UNI_VLENGTH):   alter table WORK.REPEMETA modify ANALYSIS_SET character(6), DATASET character(50), I character(1), J character(1), K 
character(1), L character(1), M character(1), N character(1), NO_ character(23), NUM character(50), O character(1), SAS_PROGRAM character(50), SECTION character(3), TITLE character(400), TYPE 
character(7) ;
NOTE: Table WORK.REPEMETA has been modified, with 15 columns.
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated 
by " " from (select distinct upcase(LIBNAME) as LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in 
("WORK.REPEMETA_DUMMY" "WORK.REPEMETA" "WORK.REPEMETA_SP" )) then LENGTH else . end ) as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.REPEMETA_SP" 
"WORK.REPEMETA_DUMMY" "WORK.REPEMETA" "WORK.REPEMETA_SP" ) group by upcase(name)) group by upcase(name), upcase(type) having sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK.REPEMETA_SP" and 
TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.REPEMETA_DUMMY" "WORK.REPEMETA" "WORK.REPEMETA_SP" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
NOTE: No rows were selected.
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.UNI_VLENGTH):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.31 seconds
      cpu time            0.32 seconds
      

MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):  ;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   data repemeta0;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   set repemeta ;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   *- JMB 2022-02-02 make sure the following variables are specified as character (in case &repeventfile is empty) -*;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   if 0 then do;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   DATASET = put(" ", $50.);
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   title = put(" ", $400.);
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   SAS_PROGRAM = put(" ", $50.);
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   tabno = put(" ", $50.);
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   end;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   format _character_;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   if missing(cats(dataset, num, title, sas_program)) then delete;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   *- JMB 2022-03-17 - test this only after making sure DATASET is defined as character -*;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   output;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   run;

NOTE: There were 61 observations read from the data set WORK.REPEMETA.
NOTE: The data set WORK.REPEMETA0 has 27 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   options missing="";
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   data repemeta.repemeta;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   *- JMB 2022-03-08 - keep only variables needed -*;
The SAS System

MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   keep Section Type Num No_ Title Analysis_Set SAS_Program Dataset tabno outputfilename ;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   set repemeta0;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   if index(lowcase(sas_program),'.sas')>0 then sas_program=substr(sas_program,1,index(lowcase(sas_program),'.sas')-1);
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):  ;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   length tabno $50;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   if index(lowcase(no_),'table')>0 then tabno = left(substr(no_,index(lowcase(no_),'table')+5));
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   else if index(lowcase(no_),'listing')>0 then tabno = left(substr(no_,index(lowcase(no_),'listing')+7));
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   else if index(lowcase(no_),'figure')>0 then tabno = left(substr(no_,index(lowcase(no_),'figure')+6));
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   else tabno=left(no_);
MAUTOCOMPLOC:  The autocall macro REPEVENTMETAOUTPUTFILENAMERULE is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library/repeventmetaoutputfilenamerule.sas.
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.REPEVENTMETAOUTPUTFILENAMERULE):   length outputfilename _tabno_ $100;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.REPEVENTMETAOUTPUTFILENAMERULE):   _tabno_ = strip(tabno);
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.REPEVENTMETAOUTPUTFILENAMERULE):   if sas_program ne "" then do;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.REPEVENTMETAOUTPUTFILENAMERULE):   if vtypex('type')='C' then outputfilename = put(lowcase(strip(type)), 
$1.)||'_'||strip(_tabno_)||'_'||sas_program;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.REPEVENTMETAOUTPUTFILENAMERULE):   else if lowcase(substr(sas_program,1,2))='t_' then outputfilename = 
't_'||strip(_tabno_)||'_'||substr(sas_program,3);
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.REPEVENTMETAOUTPUTFILENAMERULE):   else if lowcase(substr(sas_program,1,2))='l_' then outputfilename = 
'l_'||strip(_tabno_)||'_'||substr(sas_program,3);
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.REPEVENTMETAOUTPUTFILENAMERULE):   else if lowcase(substr(sas_program,1,2))='f_' then outputfilename = 
'f_'||strip(_tabno_)||'_'||substr(sas_program,3);
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.REPEVENTMETAOUTPUTFILENAMERULE):   else outputfilename = strip(sas_program);
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.REPEVENTMETAOUTPUTFILENAMERULE):  ;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.REPEVENTMETAOUTPUTFILENAMERULE):   end;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.REPEVENTMETAOUTPUTFILENAMERULE):   drop _tabno_;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):  ;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   format _character_;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   run;

NOTE: There were 27 observations read from the data set WORK.REPEMETA0.
NOTE: The data set REPEMETA.REPEMETA has 27 observations and 10 variables.
NOTE: Compressing data set REPEMETA.REPEMETA increased size by 100.00 percent. 
      Compressed is 2 pages; un-compressed would require 1 pages.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   data repemeta;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   set repemeta.repemeta;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   run;

NOTE: There were 27 observations read from the data set REPEMETA.REPEMETA.
NOTE: The data set WORK.REPEMETA has 27 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.LOWC):   proc contents noprint data=repemeta out=cnt (keep=name);
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.LOWC):   run;

NOTE: The data set WORK.CNT has 10 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      
The SAS System


MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.LOWC):   data _null_;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.LOWC):   set cnt end=last;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.LOWC):   where name ne lowcase(name);
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.LOWC):   call symputx("lowvar"||strip(put(_n_,8.)),strip(lowcase(name)));
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.LOWC):   call symputx("highvar"||strip(put(_n_,8.)),strip(upcase(name)));
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.LOWC):   if last then call symputx("nbvars",strip(put(_n_,8.)));
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.LOWC):   run;

NOTE: There were 8 observations read from the data set WORK.CNT.
      WHERE name not = LOWCASE(name);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.LOWC):   proc datasets lib=work nolist;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.LOWC):   modify repemeta;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.LOWC):   rename ANALYSIS_SET=analysis_set DATASET=dataset NO_=no_ NUM=num SAS_PROGRAM=sas_program SECTION=section TITLE=title TYPE=type;
NOTE: Renaming variable ANALYSIS_SET to analysis_set.
NOTE: Renaming variable DATASET to dataset.
NOTE: Renaming variable NO_ to no_.
NOTE: Renaming variable NUM to num.
NOTE: Renaming variable SAS_PROGRAM to sas_program.
NOTE: Renaming variable SECTION to section.
NOTE: Renaming variable TITLE to title.
NOTE: Renaming variable TYPE to type.
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.LOWC):   run;

NOTE: MODIFY was successful for WORK.REPEMETA.DATA.
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.LOWC):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):  ;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   *- Create repemeta.repemeta_resolved if it does not exist - JMB 2021-10-18 -;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   data repemeta.repemeta_resolved;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   *- JMB 2022-03-08 - keep only variables needed -*;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   keep Section Type Num No_ Title Analysis_Set SAS_Program Dataset tabno outputfilename tabno_o;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   set repemeta.repemeta(obs=0);
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   tabno_o = put(' ', $char50.);
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   run;

NOTE: There were 0 observations read from the data set REPEMETA.REPEMETA.
NOTE: The data set REPEMETA.REPEMETA_RESOLVED has 0 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   *- JMB 2022-03-08 - Always re-create view repemeta.vrepemeta as a join between repemeta and repemeta_resolved - in case the list of 
variables in repemeta has changed -;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   proc sql;
MAUTOCOMPLOC:  The autocall macro VARLIST is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library/varlist.sas.
The SAS System

MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   create view repemeta.vrepemeta as select distinct
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.VARLIST):   case when cats(b.sas_program) ^= ' ' then cats(b.Section) else cats(a.Section) end as
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.VARLIST.LOWCASE):   section
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.VARLIST):  , case when cats(b.sas_program) ^= ' ' then cats(b.Type) else cats(a.Type) end as
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.VARLIST.LOWCASE):   type
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.VARLIST):  , case when cats(b.sas_program) ^= ' ' then cats(b.Num) else cats(a.Num) end as
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.VARLIST.LOWCASE):   num
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.VARLIST):  , case when cats(b.sas_program) ^= ' ' then cats(b.No_) else cats(a.No_) end as
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.VARLIST.LOWCASE):   no_
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.VARLIST):  , case when cats(b.sas_program) ^= ' ' then cats(b.Analysis_Set) else cats(a.Analysis_Set) end as
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.VARLIST.LOWCASE):   analysis_set
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.VARLIST):  , case when cats(b.sas_program) ^= ' ' then cats(b.SAS_Program) else cats(a.SAS_Program) end as
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.VARLIST.LOWCASE):   sas_program
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.VARLIST):  , case when cats(b.sas_program) ^= ' ' then cats(b.Dataset) else cats(a.Dataset) end as
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.VARLIST.LOWCASE):   dataset
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.VARLIST):  , case when cats(b.sas_program) ^= ' ' then cats(b.tabno) else cats(a.tabno) end as
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.VARLIST.LOWCASE):   tabno
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.VARLIST):  , case when cats(b.sas_program) ^= ' ' then cats(b.outputfilename) else cats(a.outputfilename) end as
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.VARLIST.LOWCASE):   outputfilename
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.VARLIST):   , case when cmiss(b.sas_program, a.sas_program) = 0 then left(" "||b.Title) else left(" "||a.Title) end as
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.VARLIST.LOWCASE):   title
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA.VARLIST):   length=400
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   from repemeta.repemeta as a left join repemeta.repemeta_resolved as b on lowcase(cats(a.sas_program)) = lowcase(cats(b.sas_program)) and 
lowcase(cats(a.tabno)) = lowcase(cats(b.tabno_o)) and (LOWCASE(cats(a.type)) = LOWCASE(cats(b.type))) and ( (LOWCASE(cats(a.dataset)) = LOWCASE(cats(b.dataset))) or (LOWCASE(cats(a.type)) not in 
('dataset', ' ')) ) order by type, num ;
NOTE: SQL view REPEMETA.VREPEMETA has been defined.
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.40 seconds
      cpu time            0.40 seconds
      

MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   PROC IMPORT OUT= repedatapath DATAFILE= repevxl DBMS=XLSX REPLACE;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   RXLX;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   RANGE="sourcedata$A1:";
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   GETNAMES=YES;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   RUN;

NOTE: One or more variables were converted because the data type is not supported by the V9 engine. For more details, run with options MSGLEVEL=I.
NOTE: The import data set has 12 observations and 3 variables.
NOTE: WORK.REPEDATAPATH data set was successfully created.
NOTE: PROCEDURE IMPORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   data repemeta.repesourcedata;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   length libname $20 path $1000;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   set repedatapath;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   libname = scan(libname,1);
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   run;

NOTE: There were 12 observations read from the data set WORK.REPEDATAPATH.
NOTE: The data set REPEMETA.REPESOURCEDATA has 12 observations and 3 variables.
NOTE: Compressing data set REPEMETA.REPESOURCEDATA increased size by 100.00 percent. 
      Compressed is 2 pages; un-compressed would require 1 pages.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
The SAS System

      cpu time            0.01 seconds
      

MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   filename repevxl;
NOTE: Fileref REPEVXL has been deassigned.
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   *- unassign fileref -*;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   libname repemeta 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/documents" access=readonly;
NOTE: Libref REPEMETA was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/documents
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   *- JMB 2021-10-18 - remove outputs for current programs from repemeta.repemeta_resolved as we are going to recereate them and do not want 
old outputs not produced anymore to remain in the dataset -*;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   libname repemeta 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/documents" compress=yes;
NOTE: Libref REPEMETA was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/documents
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   data repemeta.repemeta_resolved;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   set repemeta.repemeta_resolved;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   where lowcase(strip(sas_program)||'.sas') ^= strip(lowcase("adsl.sas"));
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   run;

NOTE: There were 0 observations read from the data set REPEMETA.REPEMETA_RESOLVED.
      WHERE LOWCASE((STRIP(sas_program)||'.sas')) not = 'adsl.sas';
NOTE: The data set REPEMETA.REPEMETA_RESOLVED has 0 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   libname repemeta 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/documents" access=readonly;
NOTE: Libref REPEMETA was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/documents
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   *- JMB 2021-10-22 - export combined view (rather than only repemeta) to JSON -*;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   filename fjson 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/documents/repemeta.json";
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   proc json out=fjson pretty;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   export repemeta.vrepemeta / nosastags;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   run;

NOTE: PROCEDURE JSON used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   filename fjson;
NOTE: Fileref FJSON has been deassigned.
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA.REFRESHMETA):   *- unassign fileref -*;
MPRINT(SETENV.SETENV02.INI.READREPEVENTMETA):  ;
MPRINT(SETENV.SETENV02.INI):  ;
MAUTOCOMPLOC:  The autocall macro SETREPEPATHS is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library/setrepepaths.sas.
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   data a_null_;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   set repemeta.repesourcedata end=last;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   where not missing(libname);
The SAS System

MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   length path2 $1000;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   if path=:".." then 
path2=tranwrd("/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/"||strip(path),"/lsafshared/SASWo
rkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae","");
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   else path2=path;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   if vtypex('access')='C' and upcase(cats(access)) in (' ' 'READONLY') then do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   if cats(access) = ' ' then call symputx("access"||strip(put(_n_,8.)), 'COMPRESS=YES');
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   else call symputx("access"||strip(put(_n_,8.)), 'access='||cats(access));
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   else do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   call symputx("access"||strip(put(_n_,8.)), 'COMPRESS=YES');
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   call symputx("dlibn"||strip(put(_n_,8.)),strip(libname));
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   call symputx("dpath"||strip(put(_n_,8.)),"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae"||strip(path2));
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   if last then call symputx("nbls",strip(put(_n_,8.)));
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   access = access;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   *- avoid un-initialized note -*;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   run;

NOTE: There were 12 observations read from the data set REPEMETA.REPESOURCEDATA.
      WHERE not MISSING(libname);
NOTE: The data set WORK.A_NULL_ has 12 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

nbls = 12
MAUTOCOMPLOC:  The autocall macro DIREXIST is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library/direxist.sas.
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   libname sdtm 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/data_received/sdtm_last" COMPRESS=YES;
NOTE: Libref SDTM was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/data_received/sdtm_last
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   libname sdtmpool 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0000/biostat/staging/data_received/sdtm_last" COMPRESS=YES;
NOTE: Libref SDTMPOOL was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0000/biostat/staging/data_received/sdtm_last
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   libname adam 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/adam" COMPRESS=YES;
NOTE: Libref ADAM was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/adam
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   libname rdata 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/output/data" COMPRESS=YES;
NOTE: Libref RDATA was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/output/data
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   libname adamtmp 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/adam/tmp" COMPRESS=YES;
NOTE: Libref ADAMTMP was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/adam/tmp
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   libname adamarch 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/adam/archive" COMPRESS=YES;
The SAS System

NOTE: Libref ADAMARCH was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/adam/archive
Notice: "/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/data_received/adam" does not exist in transient 
environment, skipping libname sadam assignment
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   *;
MAUTOCOMPLOC:  The autocall macro LSAF_EXISTS is compiling using the autocall source file /sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.3/sasmacros/lsaf_exists.sas.
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   *;
MAUTOCOMPLOC:  The autocall macro LSAF_GETPRODUCTNAME is compiling using the autocall source file /sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.3/sasmacros/lsaf_getproductname.sas.
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):  ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   data _null_;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib message length=$200;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib exists length=3;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/service/RepositoryService");
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/results/Result");
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/test/gadam-tests/test-0001/biostat/staging/data_received/adam", results, exists);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/test/gadam-tests/test-0001/biostat/staging/data_received/adam" ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   exists=-1;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   else do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   if (exists) then do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsg=" The item exists: /clinical/test/gadam-tests/test-0001/biostat/staging/data_received/adam" ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   else do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/test/gadam-tests/test-0001/biostat/staging/data_received/adam" ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   run;


NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/test/gadam-tests/test-0001/biostat/staging/data_received/adam
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           1.58 seconds
      cpu time            0.00 seconds
The SAS System

      

MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):  ;
NOTE: "/clinical/test/gadam-tests/test-0001/biostat/staging/data_received/adam" exists in the repository itself.
Notice: "/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/qc" does not exist in transient 
environment, skipping libname qcout assignment
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):  ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   data _null_;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib message length=$200;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib exists length=3;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/service/RepositoryService");
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/results/Result");
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/qc", results, exists);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/qc" ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   exists=-1;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   else do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   if (exists) then do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsg=" The item exists: /clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/qc" ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   else do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/qc" ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   run;


NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/qc
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):  ;
The SAS System

NOTE: "/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/qc" exists in the repository itself.
Notice: "/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/dictionaries/data" does not exist in transient environment, skipping libname dict 
assignment
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):  ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   data _null_;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib message length=$200;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib exists length=3;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/service/RepositoryService");
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/results/Result");
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/general/biostat/dictionaries/data", results, exists);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /general/biostat/dictionaries/data" ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   exists=-1;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   else do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   if (exists) then do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsg=" The item exists: /general/biostat/dictionaries/data" ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   else do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsg=" The item does not exist: /general/biostat/dictionaries/data" ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   run;


NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /general/biostat/dictionaries/data
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):  ;
NOTE: "/general/biostat/dictionaries/data" exists in the repository itself.
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):   libname gadam 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/adam/tmp" COMPRESS=YES;
The SAS System

NOTE: Libref GADAM refers to the same physical library as ADAMTMP.
NOTE: Libref GADAM was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/adam/tmp
Notice: "/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/narratives/data" does not exist in 
transient environment, skipping libname data assignment
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):  ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   data _null_;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib message length=$200;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib exists length=3;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/service/RepositoryService");
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/results/Result");
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/narratives/data", results, exists);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/narratives/data" ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   exists=-1;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   else do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   if (exists) then do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsg=" The item exists: /clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/narratives/data" ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   else do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/narratives/data" ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   run;


NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/narratives/data
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.42 seconds
      cpu time            0.00 seconds
      

MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):  ;
The SAS System

NOTE: "/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/narratives/data" exists in the repository itself.
Notice: "/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/narratives/out" does not exist in 
transient environment, skipping libname out assignment
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):  ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   data _null_;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib returnCode length=8;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib message length=$200;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib logMsgPrefix length=$70;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib logMsg length=$300;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib exists length=3;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   attrib logMsgPrimary length=$70;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   declare javaobj srv("com/sas/lsaf/macro/service/RepositoryService");
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   declare javaobj results("com/sas/lsaf/macro/results/Result");
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   srv.callStaticBooleanMethod("exists", "/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/narratives/out", results, exists);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   results.callStringMethod("getReturnMessage", message);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   if (returnCode ne 0) then do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsg=" Cannot determine if the item exists: /clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/narratives/out" ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   exists=-1;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   else do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsgPrimary=logMsgPrefix;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   if (exists) then do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsg=" The item exists: /clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/narratives/out" ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   else do;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   logMsg=" The item does not exist: /clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/narratives/out" ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   end;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrimary " " logMsg;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrefix " " "lsaf_exists";
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrefix " _lsafMsg_= " message;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrefix " _lsafRC_= " returnCode;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put logMsgPrefix " _lsafExists_= " exists;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   put;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   call symputx("_lsafRC_", returnCode);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   call symputx("_lsafMsg_", message);
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   call symputx("_lsafExists_", exists) ;
MPRINT(SETENV.SETENV02.INI.SETREPEPATHS.LSAF_EXISTS):   run;


NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/narratives/out
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(SETENV.SETENV02.INI.SETREPEPATHS):  ;
NOTE: "/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/narratives/out" exists in the repository itself.
Notice:(DIREXIST): Created directory 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/output/pdf"
The SAS System

Notice:(DIREXIST): Created directory 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/output/rtf"
Notice:(DIREXIST): Created directory 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/output/txt"
MPRINT(SETENV.SETENV02.INI):  ;
MAUTOCOMPLOC:  The autocall macro SETPATHS is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library/setpaths.sas.
MPRINT(SETENV.SETENV02.INI.SETPATHS):   data title;
MPRINT(SETENV.SETENV02.INI.SETPATHS):   set repemeta.repeMETA;
MPRINT(SETENV.SETENV02.INI.SETPATHS):   where lowcase(strip(sas_program)) = strip(lowcase("adsl")) or lowcase(strip(sas_program)) = strip(lowcase("adsl.sas"));
MAUTOCOMPLOC:  The autocall macro ISBLANK is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library/isblank.sas.
MPRINT(SETENV.SETENV02.INI.SETPATHS):   call symputx('outputfilename',strip(outputfilename));
MPRINT(SETENV.SETENV02.INI.SETPATHS):   if lowcase(strip(sas_program)) = lowcase(strip(outputfilename)) or lowcase(strip(sas_program)) = lowcase(strip(outputfilename)||".sas") then call 
symputx('output_eq_prog',"1");
MPRINT(SETENV.SETENV02.INI.SETPATHS):   run;

NOTE: There were 1 observations read from the data set REPEMETA.REPEMETA.
      WHERE LOWCASE(STRIP(sas_program)) in ('adsl', 'adsl.sas');
NOTE: The data set WORK.TITLE has 1 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MAUTOCOMPLOC:  The autocall macro OBSCNT is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library/obscnt.sas.
OUTPUT written to /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/lst/__adsl.lst
MPRINT(SETENV.SETENV02.INI.SETPATHS):   filename of 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/lst/__adsl.lst";
MPRINT(SETENV.SETENV02.INI.SETPATHS):   proc printto print=of new;
MPRINT(SETENV.SETENV02.INI.SETPATHS):   run;
NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SETENV.SETENV02.INI.SETPATHS):   filename logf 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/log/__adsl.log";
LOG written to /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/log/__adsl.log
MPRINT(SETENV.SETENV02.INI.SETPATHS):   proc printto log=logf new;
MPRINT(SETENV.SETENV02.INI.SETPATHS):   run;

NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

DEBUG=1 RUNENVIRONMENT=repository
fileref(logf) = 0
Notice:(PROGRAMEND): Will not scan log as fileref(logf) ^= 0
MPRINT(PROGRAMEND):   option LS=180 PS=60;
MPRINT(PROGRAMEND):   data log1 (keep=line message upmsg war err un mac) mauto(keep=message upmsg mac) fulllog(keep=line message length) ;
MPRINT(PROGRAMEND):   length message upmsg lastlogfile logfile $ 400 ;
MPRINT(PROGRAMEND):   retain lastlogfile;
MPRINT(PROGRAMEND):   infile logf length=linelen filename=logfile eov=eov end=eof ;
MPRINT(PROGRAMEND):   line = 1;
The SAS System

MPRINT(PROGRAMEND):   retain mac 0;
MPRINT(PROGRAMEND):   do until(eof);
MPRINT(PROGRAMEND):   input @1 message $varying400. linelen;
MPRINT(PROGRAMEND):   if logfile ^= lastlogfile then do;
MPRINT(PROGRAMEND):   put " " / 180*"=";
MPRINT(PROGRAMEND):   put 3*"=" " Start of Redirected Log Content from File: " @(180-2) 3*"=";
MPRINT(PROGRAMEND):   put 3*"=" " " logfile @(180-2) 3*"=";
MPRINT(PROGRAMEND):   put 180*"=" ;
MPRINT(PROGRAMEND):   put 3*"=" @(180-2) 3*"=";
MPRINT(PROGRAMEND):   put 3*"=" @(180-2) 3*"=" / " ";
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   put message $varying400. linelen;
MPRINT(PROGRAMEND):   length = linelen;
MPRINT(PROGRAMEND):   output fulllog;
MPRINT(PROGRAMEND):   if eov or eof then do;
MPRINT(PROGRAMEND):   put " " / 3*"=" @(180-2) 3*"=";
MPRINT(PROGRAMEND):   put 3*"=" @(180-2) 3*"=";
MPRINT(PROGRAMEND):   put 180*"=";
MPRINT(PROGRAMEND):   put 3*"=" " End of Redirected Log Content from File: " @(180-2) 3*"=";
MPRINT(PROGRAMEND):   put 3*"=" " " logfile @(180-2) 3*"=";
MPRINT(PROGRAMEND):   put 180*"=" / " ";
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   line + 1;
MPRINT(PROGRAMEND):   upmsg = upcase(prxchange('s/%(l4g|log4sas)_(er[r]or|fa[t]al|war[n]ing)\b//' , -1, message));
MPRINT(PROGRAMEND):   war = 0;
MPRINT(PROGRAMEND):   err = 0;
MPRINT(PROGRAMEND):   un =0 ;
MPRINT(PROGRAMEND):   if index(upmsg,'MAUTOLOCDISPLAY')=1 or index(upmsg,'THIS MACRO WAS COMPILED FROM')>0 or index(upmsg,'MAUTOCOMPLOC:') = 1 or index(upmsg,'IS COMPILING USING 
THE AUTOCALL SOURCE FILE')>0 then mac=0;
MPRINT(PROGRAMEND):   if 0<mac<=4 then mac+1;
MPRINT(PROGRAMEND):   else mac=0;
MPRINT(PROGRAMEND):   if index(upmsg,'WARN'||'ING')=1 and not index(upmsg,'WARN'||'ING: DMS BOLD FONT') and not index(upmsg, 'WARN'||'ING: Unable to copy SAS'||'USER registry to 
WORK registry.') then war = 1;
MPRINT(PROGRAMEND):   else if index(upmsg,'ER'||'ROR')=1 and not index(upmsg,'_ER'||'ROR_=0') and not index(upmsg,'*** PROBLEM: LINE') then err = 1;
MPRINT(PROGRAMEND):   else if index(upmsg,'UNINI'||'TIALIZED') then un = 1;
MPRINT(PROGRAMEND):   else if index(upmsg,'MAUTOLOCDISPLAY') = 1 or index(upmsg,'THIS MACRO WAS COMPILED FROM')>0 or index(upmsg,'MAUTOCOMPLOC:') = 1 or index(upmsg,'IS COMPILING 
USING THE AUTOCALL SOURCE FILE')>0 then mac + 1;
MPRINT(PROGRAMEND):   if err or scan(upmsg,1,' ') eq 'NO'||'TE:' or un or war then output log1;
MPRINT(PROGRAMEND):   if mac ne 0 then output mauto;
MPRINT(PROGRAMEND):   lastlogfile = logfile;
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   run;

NOTE: The infile LOGF is:
      
      Filename=/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/log/__adsl.lo
      g,
      Owner Name=jbodart,Group Name=webtrust,
      Access Permission=-rw-rw----,
      Last Modified=16Dec2022:22:29:43,
      File Size (bytes)=379236


====================================================================================================================================================================================
=== Start of Redirected Log Content from File:                                                                                                                                   ===
=== /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/log/__adsl.log       ===
====================================================================================================================================================================================
===                                                                                                                                                                              ===
The SAS System

===                                                                                                                                                                              ===

NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(SETENV.SETENV02.INI):  ;
NOTE: %INCLUDE (level 1) file 
      /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/programs/fcmp_*.sas is
 file 
      /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/programs/fcmp_run.sas.
193       +/********************************************************************************************************************************/
194       +/* Purpose              : Define (a package of) user-written SAS function(s)/ call routine(s) to be compiled by PROC FCMP:      */
195       +/*                          - Package of Fcmp functions to deal with running SAS Code within a FCMP function computations.      */
196       +/*                                                                                                                              */
197       +/* Programmer           : Jean-Michel Bodart                                                                                    */
198       +/* Program Name         : fcmp_run.sas                                                                                         */
The SAS System

199       +/* Note                 : this program is meant to be called from a SAS project environment initialization program              */
200       +/********************************************************************************************************************************/
201       +
202       +%*- Determine <libname>.<dataset> where to store FCMP functions/routines -*;
203       +%*------------------------------------------------------------------------*;
204       +%*- retrieve first location specified in CMPLIB option (if any) -*;
205       +%let fcmpoutlib=%scan(%qsysfunc(prxchange(s/(_NO)?_DISPLAYLOC_//i, -1, %qsysfunc(getoption(cmplib)))), 1, ( -));
206       +%*- if empty, replace by 'fcmp.functions' -*;
207       +%let fcmpoutlib=%sysfunc(ifc(%length(%superq(fcmpoutlib))=0, fcmp.functions, %superq(fcmpoutlib)));
208       +%*- if <libname> is not assigned to a path, replace by 'work.functions' -*;
209       +%let fcmpoutlib=%sysfunc(ifc(%length(%qsysfunc(pathname(%scan(%superq(fcmpoutlib), 1, .), L)))=0, work.functions, %superq(fcmpoutlib)));
210       +%put fcmpoutlib=&fcmpoutlib;
fcmpoutlib=work.functions
211       +
212       +%*- assign a package name -*;
213       +%let package = run;
214       +
215       +%macro del_existing;
216       +   %if %sysfunc(exist(&fcmpoutlib., data)) %then %do;
217       +      %*- get list of existing functions in selected package -*;
218       +      %let func_list = ;
219       +      proc sql noprint;
220       +         select distinct scan(_KEY_, -1, ".") into :func_list separated by ' '
221       +            from &fcmpoutlib. where type="Prototype" and scan(_key_, 1, ".") = "F" and scan(_key_, 2, ".") = %sysfunc(quote(%qupcase(%superq(package))))
222       +            ;
223       +      quit;
224       +      %put Existing FCMP functions in &fcmpoutlib.&package: &func_list..;
225       +
226       +      proc fcmp outlib=&fcmpoutlib..&package.; /* outlib = <library>.<dataset>.<package> */
227       +
228       +         %if %index(%str( &func_list ), %str( RUNMACRO )) %then %do;
229       +            deletefunc RUNMACRO; /* delete pre-existing instance of this function to avoid war-ning about re-defining it. */
230       +         %end;
231       +
232       +      quit;
233       +   %end;
234       +%mend del_existing;
235       +%del_existing;
The SAS System

MPRINT(SETENV.SETENV02.INI):  ;
236       +
237       +proc fcmp outlib=&fcmpoutlib..&package.; /* outlib = <library>.<dataset>.<package> */
MPRINT(SETENV.SETENV02.INI):   proc fcmp outlib=work.functions.run;
238       +
239       +   *- Function that runs SAS Code passed quoted as macro-variable ARGS to macro %run_macro,
240       +      which is expected to have been already compiled or to be found among the autocall macros.
241       +      The %run_macro has no parameters but retrieves the contents of ARGS from macro-variable &ARGS,
242       +      de-quote them and executes them.  The code executed is expected to assign a value to macro-variable &RESULT
243       +      which is passed back to the FCMP function and becomes the value returned by that FCMP function.
244       +   -*;
MPRINT(SETENV.SETENV02.INI):   /* outlib = <library>.<dataset>.<package> */ *- Function that runs SAS Code passed quoted as macro-variable ARGS to macro %run_macro, which is expect
ed to have been 
already compiled or to be found among the autocall macros. The %run_macro has no parameters but retrieves the contents of ARGS from macro-variable &ARGS, de-quote them and executes
 them. The code 
executed is expected to assign a value to macro-variable &RESULT which is passed back to the FCMP function and becomes the value returned by that FCMP function. -*;
245       +   function RUNMACRO(args $) $;*$32000;
MPRINT(SETENV.SETENV02.INI):   function RUNMACRO(args $) $;
MPRINT(SETENV.SETENV02.INI):  *$32000;
246       +      length result $32000;
MPRINT(SETENV.SETENV02.INI):   length result $32000;
247       +      result="";
The SAS System

MPRINT(SETENV.SETENV02.INI):   result="";
248       +      rc = run_macro('run_macro', args, result);
MPRINT(SETENV.SETENV02.INI):   rc = run_macro('run_macro', args, result);
249       +     *if rc = 0 then return(quote(trimn(result)));
MPRINT(SETENV.SETENV02.INI):   *if rc = 0 then return(quote(trimn(result)));
250       +      if rc = 0 then return(trimn(result));
MPRINT(SETENV.SETENV02.INI):   if rc = 0 then return(trimn(result));
251       +      else return('ER'||'ROR attempting to call macro run_macro');
MPRINT(SETENV.SETENV02.INI):   else return('ER'||'ROR attempting to call macro run_macro');
252       +   endsub;
MPRINT(SETENV.SETENV02.INI):   endsub;
253       +
254       +   /* *- test -*;
MPRINT(SETENV.SETENV02.INI):   /* *- test -*;
255       +
256       +   res = RUNMACRO('%lib_datasets(lib=maps);');
MPRINT(SETENV.SETENV02.INI):   res = RUNMACRO('%lib_datasets(lib=maps);
MPRINT(SETENV.SETENV02.INI):  ');
257       +   put res=;
MPRINT(SETENV.SETENV02.INI):   put res=;
258       +
259       +   res = RUNMACRO('%non_existing_macro(lib=maps);');
MPRINT(SETENV.SETENV02.INI):   res = RUNMACRO('%non_existing_macro(lib=maps);
MPRINT(SETENV.SETENV02.INI):  ');
260       +   put res=;
MPRINT(SETENV.SETENV02.INI):   put res=;
261       +
262       +   */
263       +run;
MPRINT(SETENV.SETENV02.INI):   */ run;

NOTE: Function RUNMACRO saved to work.functions.run.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
The SAS System

      cpu time            0.01 seconds


MPRINT(SETENV.SETENV02.INI):   quit;
264       +quit;
265       +
266       +%*- Set OPTION CMPLIB so as to allow SAS to find and access the fcmp functions -*;
267       +%*------------------------------------------------------------------------------*;
268       +%*- prepencd &fcmpoutlib. to OPTION CMPLIB value, unless it is already part of this option value -*;
269       +options %sysfunc(ifc( %sysfunc(exist(&fcmpoutlib., data)) and %sysfunc(findw(%qsysfunc(getoption(cmplib)), &fcmpoutlib., ( -), ei))=0 , insert=(cmplib=&fcmpoutlib.), %st
r( )));
MPRINT(SETENV.SETENV02.INI):   options insert=(cmplib=work.functions);
270       +%put option cmplib=%sysfunc(getoption(cmplib));
option cmplib=work.functions
271       +
272       +/* *- example usage -*;
273       +
274       +
275       +data test;
276       +   length args result $32000;
277       +   args = '%lib_datasets(lib=maps);';
278       +   result = runmacro(args);
279       +run;
280       +
281       +%let list = - ;
The SAS System

282       +%let list = %sysfunc(runmacro(  %qsysfunc(dequote('%lib_datasets(lib=sashelp);'))  ));
283       +%put list = ->&list<-;
284       +
285       +data test;
286       +   length args result $32000;
287       +   args = '%non_existing_macro(lib=maps);';
288       +   result = runmacro(args);
289       +run;
290       +
291       +%let list = - ;
292       +%let code = %qsysfunc(dequote('%non_existing_macro(lib=sashelp);'));
293       +%put code = &code;
294       +%put ...;
295       +%let list = %sysfunc(runmacro(  &code  ));
296       +%put list = ->&list<-;
297       +
298       +%put >>>%sysfunc(runmacro('proc sql; select distinct quote(strip(sex)) into :result separated by ", " from adam.adsl; quit;'))<<<;  %*- this includes lots of (unwanted) 
trailing spaces -*;
299       +
300       +%put %sysfunc(trim(%qsysfunc(runmacro('proc sql; select distinct quote(strip(sex)) into :result separated by ", " from adam.adsl; quit;'))));
301       +%put %sysfunc(trim(%qsysfunc(runmacro('proc sql; select distinct quote(strip(sex)) into :result separated by '', '' from adam.adsl; quit;'))));
302       +
303       +
304       +*- this gives expected results - without extra spaces in the log -*;
305       +data test;
306       +   do Sex = %sysfunc(runmacro('proc sql; select distinct quote(strip(sex)) into :result separated by '', '' from adam.adsl; quit;'));
307       +      put Sex=;
308       +      output;
309       +   end;
310       +run;
311       +
The SAS System

312       +data test;
313       +   do age = %sysfunc(runmacro('proc sql; select distinct age into :result separated by '', '' from adam.adsl; quit;'));
314       +      put age=;
315       +      output;
316       +   end;
317       +run;
318       +
319       +
320       +*- this gives expected results too -*;
321       +data test;
322       +   do Sex = %sysfunc(trim(%qsysfunc(runmacro('proc sql; select distinct quote(strip(sex)) into :result separated by '', '' from adam.adsl; quit;'))));
323       +      put Sex=;
324       +      output;
325       +   end;
326       +run;
327       +
328       +data test;
329       +   do age = %sysfunc(trim(%qsysfunc(runmacro('proc sql; select distinct age into :result separated by '', '' from adam.adsl; quit;'))));
330       +      put age=;
331       +      output;
332       +   end;
333       +run;
334       +
335       +*/
336       +/********************************************************************************************************************************/
337       +/* Purpose              : Define (a package of) user-written SAS function(s)/ call routine(s) to be compiled by PROC FCMP:      */
338       +/*                          - Package of Fcmp functions to deal with character strings.                                         */
339       +/*                                                                                                                              */
The SAS System

340       +/* Programmer           : Jean-Michel Bodart                                                                                    */
341       +/* Program Name         : fcmp_strings.sas                                                                                     */
342       +/* Updated                                                                                                                      */
343       +/********************************************************************************************************************************/
344       +
345       +
346       +%*- Determine <libname>.<dataset> where to store FCMP functions/routines -*;
347       +%*------------------------------------------------------------------------*;
348       +%*- retrieve first location specified in CMPLIB option (if any) -*;
349       +%let fcmpoutlib=%scan(%qsysfunc(prxchange(s/(_NO)?_DISPLAYLOC_//i, -1, %qsysfunc(getoption(cmplib)))), 1, ( -));
350       +%*- if empty, replace by 'fcmp.functions' -*;
351       +%let fcmpoutlib=%sysfunc(ifc(%length(%superq(fcmpoutlib))=0, fcmp.functions, %superq(fcmpoutlib)));
352       +%*- if <libname> is not assigned to a path, replace by 'work.functions' -*;
353       +%let fcmpoutlib=%sysfunc(ifc(%length(%qsysfunc(pathname(%scan(%superq(fcmpoutlib), 1, .), L)))=0, work.functions, %superq(fcmpoutlib)));
354       +%put fcmpoutlib=&fcmpoutlib;
fcmpoutlib=work.functions
355       +
356       +option mprint mlogic;
MPRINT(SETENV.SETENV02.INI):   option mprint mlogic;
357       +%*- prepencd &fcmpoutlib. to OPTION CMPLIB value, unless it is already part of this option value -*;
358       +options %sysfunc(ifc( %sysfunc(exist(&fcmpoutlib., data)) and %sysfunc(findw(%qsysfunc(getoption(cmplib)), &fcmpoutlib., ( -), ei))=0 , insert=(cmplib=&fcmpoutlib.), %st
r( )));
MPRINT(SETENV.SETENV02.INI):   options ;
359       +%put option cmplib=%sysfunc(getoption(cmplib));
option cmplib=work.functions
360       +
361       +%*- assign a package name -*;
362       +%let package = STRINGS;
The SAS System

363       +
364       +%macro del_existing;
365       +   %if %symexist(debug)=0 %then %local debug;
366       +   %if %sysfunc(exist(&fcmpoutlib., data)) %then %do;
367       +      %*- get list of existing functions in selected package -*;
368       +      %let func_list = ;
369       +      proc sql noprint;
370       +         select distinct scan(_KEY_, -1, ".") into :func_list separated by ' '
371       +            from &fcmpoutlib. where type="Prototype" and scan(_key_, 1, ".") = "F" and scan(_key_, 2, ".") = %sysfunc(quote(%qupcase(%superq(package))))
372       +            ;
373       +      quit;
374       +      %put Existing FCMP functions in &fcmpoutlib..&package: &func_list..;
375       +
376       +      %if %qupcase(%superq(debug))=%quote(Y) %then %do;
377       +         proc print data=&fcmpoutlib.(drop=Value);
378       +            title "Functions definitions in &fcmpoutlib.";
379       +         run;
380       +      %end;
381       +
382       +      proc fcmp outlib=&fcmpoutlib..&package.; /* outlib = <library>.<dataset>.<package> */
383       +
384       +         %if %index(%str( &func_list ), %str( E8601PATTERNC )) %then %do;
385       +            deletefunc E8601PATTERNC; /* delete pre-existing instance of this function to avoid war-ning about re-defining it. */
386       +         %end;
387       +         %if %index(%str( &func_list ), %str( PATTERNC )) %then %do;
388       +            deletefunc PATTERNC; /* delete pre-existing instance of this function to avoid war-ning about re-defining it. */
389       +         %end;
390       +         %if %index(%str( &func_list ), %str( PATTERNN )) %then %do;
391       +            deletefunc PATTERNN; /* delete pre-existing instance of this function to avoid war-ning about re-defining it. */
392       +         %end;
393       +         %if %index(%str( &func_list ), %str( RIGHT20CHAR )) %then %do;
The SAS System

394       +            deletefunc RIGHT20CHAR; /* delete pre-existing instance of this function to avoid war-ning about re-defining it. */
395       +         %end;
396       +         %if %index(%str( &func_list ), %str( OVERWRITE )) %then %do;
397       +            deletefunc OVERWRITE; /* delete pre-existing instance of this function to avoid war-ning about re-defining it. */
398       +         %end;
399       +         %if %index(%str( &func_list ), %str( SPLITINDENT )) %then %do;
400       +            deletefunc SPLITINDENT; /* delete pre-existing instance of this function to avoid war-ning about re-defining it. */
401       +         %end;
402       +         %if %index(%str( &func_list ), %str( SPLITINSERTSEP )) %then %do;
403       +            deletefunc SPLITINSERTSEP; /* delete pre-existing instance of this function to avoid war-ning about re-defining it. */
404       +         %end;
405       +      quit;
406       +   %end;
407       +%mend del_existing;
408       +%del_existing;
MLOGIC(DEL_EXISTING):  Beginning execution.
MLOGIC(DEL_EXISTING):  %IF condition %symexist(debug)=0 is FALSE
MLOGIC(DEL_EXISTING):  %IF condition %sysfunc(exist(&fcmpoutlib., data)) is TRUE
MLOGIC(DEL_EXISTING):  %LET (variable name is FUNC_LIST)
MPRINT(SETENV.SETENV02.INI.DEL_EXISTING):   proc sql noprint;
MPRINT(SETENV.SETENV02.INI.DEL_EXISTING):   select distinct scan(_KEY_, -1, ".") into :func_list separated by ' ' from work.functions where type="Prototype" and scan(_key_, 1, ".")
 = "F" and 
scan(_key_, 2, ".") = "STRINGS" ;
NOTE: No rows were selected.
MPRINT(SETENV.SETENV02.INI.DEL_EXISTING):   quit;
The SAS System

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MLOGIC(DEL_EXISTING):  %PUT Existing FCMP functions in &fcmpoutlib..&package: &func_list..
Existing FCMP functions in work.functions.STRINGS: .
MLOGIC(DEL_EXISTING):  %IF condition %qupcase(%superq(debug))=%quote(Y) is FALSE
MPRINT(SETENV.SETENV02.INI.DEL_EXISTING):   proc fcmp outlib=work.functions.STRINGS;
MLOGIC(DEL_EXISTING):  %IF condition %index( &func_list ,  E8601PATTERNC ) is FALSE
MLOGIC(DEL_EXISTING):  %IF condition %index( &func_list ,  PATTERNC ) is FALSE
MLOGIC(DEL_EXISTING):  %IF condition %index( &func_list ,  PATTERNN ) is FALSE
MLOGIC(DEL_EXISTING):  %IF condition %index( &func_list ,  RIGHT20CHAR ) is FALSE
MLOGIC(DEL_EXISTING):  %IF condition %index( &func_list ,  OVERWRITE ) is FALSE
MLOGIC(DEL_EXISTING):  %IF condition %index( &func_list ,  SPLITINDENT ) is FALSE
MLOGIC(DEL_EXISTING):  %IF condition %index( &func_list ,  SPLITINSERTSEP ) is FALSE
MPRINT(SETENV.SETENV02.INI.DEL_EXISTING):   quit;

NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MLOGIC(DEL_EXISTING):  Ending execution.
MPRINT(SETENV.SETENV02.INI):  ;
409       +
410       +option nomlogic;
MPRINT(SETENV.SETENV02.INI):   option nomlogic;
411       +
412       +proc fcmp outlib=&fcmpoutlib..&package.; /* outlib = <library>.<dataset>.<package> */
MPRINT(SETENV.SETENV02.INI):   proc fcmp outlib=work.functions.STRINGS;
413       +
414       +   *- Function to return an ISO8601 datetime string transformed into a pattern where
415       +         every year digit is replaced by Y
The SAS System

416       +         every month digit is replaced by M
417       +         every day digit is replaced by D
418       +         every hour digit is replaced by h
419       +         every minute digit is replaced by m
420       +         every second digit is replaced by s
421       +         other characters are left unchanged
422       +      (useful to create a user-specific format ) -*;
MPRINT(SETENV.SETENV02.INI):   /* outlib = <library>.<dataset>.<package> */ *- Function to return an ISO8601 datetime string transformed into a pattern where every year digit is re
placed by Y every 
month digit is replaced by M every day digit is replaced by D every hour digit is replaced by h every minute digit is replaced by m every second digit is replaced by s other charac
ters are left 
unchanged (useful to create a user-specific format ) -*;
423       +   function E8601PATTERNC(text $) $;
MPRINT(SETENV.SETENV02.INI):   function E8601PATTERNC(text $) $;
424       +      length ret $200;
MPRINT(SETENV.SETENV02.INI):   length ret $200;
425       +      ret=prxchange('s/^(\d{4}-\d\d-\d\dT\d\d[:]\d\d[:])\d\d/\1ss/', 1, text);
MPRINT(SETENV.SETENV02.INI):   ret=prxchange('s/^(\d{4}-\d\d-\d\dT\d\d[:]\d\d[:])\d\d/\1ss/', 1, text);
426       +      ret=prxchange('s/^(\d{4}-\d\d-\d\dT\d\d[:])\d\d/\1mm/', 1, ret);
MPRINT(SETENV.SETENV02.INI):   ret=prxchange('s/^(\d{4}-\d\d-\d\dT\d\d[:])\d\d/\1mm/', 1, ret);
427       +      ret=prxchange('s/^(\d{4}-\d\d-\d\dT)\d\d/\1hh/', 1, ret);
MPRINT(SETENV.SETENV02.INI):   ret=prxchange('s/^(\d{4}-\d\d-\d\dT)\d\d/\1hh/', 1, ret);
The SAS System

428       +      ret=prxchange('s/^(\d{4}-\d\d-)\d\d/\1DD/', 1, ret);
MPRINT(SETENV.SETENV02.INI):   ret=prxchange('s/^(\d{4}-\d\d-)\d\d/\1DD/', 1, ret);
429       +      ret=prxchange('s/^(\d{4}-)\d\d/\1MM/', 1, ret);
MPRINT(SETENV.SETENV02.INI):   ret=prxchange('s/^(\d{4}-)\d\d/\1MM/', 1, ret);
430       +      ret=prxchange('s/^\d{4}/YYYY/', 1, ret);
MPRINT(SETENV.SETENV02.INI):   ret=prxchange('s/^\d{4}/YYYY/', 1, ret);
431       +      return(ret);
MPRINT(SETENV.SETENV02.INI):   return(ret);
432       +   endsub;
MPRINT(SETENV.SETENV02.INI):   endsub;
433       +
434       +   *- Function to return a character string transformed into a pattern where
435       +         every letter is replaced by X
436       +         every digit is replaced by 9
437       +         other characters are left unchanged
438       +      (useful to create a user-specific format ) -*;
MPRINT(SETENV.SETENV02.INI):   *- Function to return a character string transformed into a pattern where every letter is replaced by X every digit is replaced by 9 other characters
 are left unchanged 
(useful to create a user-specific format ) -*;
439       +   function PATTERNC(text $) $;
MPRINT(SETENV.SETENV02.INI):   function PATTERNC(text $) $;
440       +      length ret $200;
MPRINT(SETENV.SETENV02.INI):   length ret $200;
441       +      ret=prxchange('s/\d/9/', -1, text);
MPRINT(SETENV.SETENV02.INI):   ret=prxchange('s/\d/9/', -1, text);
442       +      ret=prxchange('s/[a-zA-Z]/X/', -1, ret);
MPRINT(SETENV.SETENV02.INI):   ret=prxchange('s/[a-zA-Z]/X/', -1, ret);
443       +      return(ret);
MPRINT(SETENV.SETENV02.INI):   return(ret);
444       +   endsub;
MPRINT(SETENV.SETENV02.INI):   endsub;
445       +
446       +   *- Function to return a number first transformed into a string by applying format best12. then transformed into a pattern where
447       +         every non-zero digit is replaced by 9
448       +         other characters are left unchanged
449       +      (useful to create a user-specific format ) -*;
MPRINT(SETENV.SETENV02.INI):   *- Function to return a number first transformed into a string by applying format best12. then transformed into a pattern where every non-zero digit 
is replaced by 9 
other characters are left unchanged (useful to create a user-specific format ) -*;
450       +   function PATTERNN(num) $12;
The SAS System

MPRINT(SETENV.SETENV02.INI):   function PATTERNN(num) $12;
451       +      length ret $12;
MPRINT(SETENV.SETENV02.INI):   length ret $12;
452       +      ret=put(num, best12.);
MPRINT(SETENV.SETENV02.INI):   ret=put(num, best12.);
453       +      ret=prxchange('s/[1-9]/9/', -1, ret);
MPRINT(SETENV.SETENV02.INI):   ret=prxchange('s/[1-9]/9/', -1, ret);
454       +      return(ret);
MPRINT(SETENV.SETENV02.INI):   return(ret);
455       +   endsub;
MPRINT(SETENV.SETENV02.INI):   endsub;
456       +
457       +   *- Function to return the last 20 characters of a value, right-aligned (can be used to create a format) -*;
MPRINT(SETENV.SETENV02.INI):   *- Function to return the last 20 characters of a value, right-aligned (can be used to create a format) -*;
458       +   function RIGHT20CHAR(text $) $20;
MPRINT(SETENV.SETENV02.INI):   function RIGHT20CHAR(text $) $20;
The SAS System

459       +      length ret $20;
MPRINT(SETENV.SETENV02.INI):   length ret $20;
460       +      l = length(cats(text));
MPRINT(SETENV.SETENV02.INI):   l = length(cats(text));
461       +      if l >20
462       +         then ret = substr(cats(text), l - 20 + 1);
MPRINT(SETENV.SETENV02.INI):   if l >20 then ret = substr(cats(text), l - 20 + 1);
463       +         else substr(ret, 20 - l + 1) = cats(text);
MPRINT(SETENV.SETENV02.INI):   else substr(ret, 20 - l + 1) = cats(text);
464       +      return(ret);
MPRINT(SETENV.SETENV02.INI):   return(ret);
465       +   endsub;
MPRINT(SETENV.SETENV02.INI):   endsub;
466       +
467       +   *- Function to return one charcater string completed by the end of a second string when the first string is shorted than the second string -*;
MPRINT(SETENV.SETENV02.INI):   *- Function to return one charcater string completed by the end of a second string when the first string is shorted than the second string -*;
468       +   function OVERWRITE(new $, old $) $;
MPRINT(SETENV.SETENV02.INI):   function OVERWRITE(new $, old $) $;
469       +      file log;
MPRINT(SETENV.SETENV02.INI):   file log;
470       +      if lengthn(new) >= length(old) then return(new);
MPRINT(SETENV.SETENV02.INI):   if lengthn(new) >= length(old) then return(new);
471       +      if lengthn(new) = 0 then return(old);
MPRINT(SETENV.SETENV02.INI):   if lengthn(new) = 0 then return(old);
472       +      return( trim(new)||substr(old, lengthn(new)+1) );
MPRINT(SETENV.SETENV02.INI):   return( trim(new)||substr(old, lengthn(new)+1) );
473       +      return(ret);
MPRINT(SETENV.SETENV02.INI):   return(ret);
474       +   endsub;
MPRINT(SETENV.SETENV02.INI):   endsub;
475       +
476       +   *- Function to indent and split character values by inserting spaces at appropriate locations
477       +      so that the returned string is made up of a number of chunks of the same size
478       +      that will be aligned when printed by proc report in a column of the given size
479       +      to the listing destination with a non-proportional font.
480       +      This function can be used either in a DATA STEP (prior to calling proc report)
481       +      or WITHIN A PROC REPORT COMPUTE BLOCK (i.e. without pre-processing the input dataset).
482       +      Unless there is only one chunk, inserting an extra space in front of the last chunk
483       +      seems necessary for proc report to have that chunk correctly aligned.
484       +    -*;
MPRINT(SETENV.SETENV02.INI):   *- Function to indent and split character values by inserting spaces at appropriate locations so that the returned string is made up of a number of c
hunks of the same 
size that will be aligned when printed by proc report in a column of the given size to the listing destination with a non-proportional font. This function can be used either in a D
ATA STEP (prior to 
The SAS System

calling proc report) or WITHIN A PROC REPORT COMPUTE BLOCK (i.e. without pre-processing the input dataset). Unless there is only one chunk, inserting an extra space in front of the
 last chunk seems 
necessary for proc report to have that chunk correctly aligned. -*;
485       +   function SPLITINDENT(_text $, _indent, size) $;
MPRINT(SETENV.SETENV02.INI):   function SPLITINDENT(_text $, _indent, size) $;
486       +      file log;
MPRINT(SETENV.SETENV02.INI):   file log;
487       +      length text $32767;
MPRINT(SETENV.SETENV02.INI):   length text $32767;
488       +      text = _text;
MPRINT(SETENV.SETENV02.INI):   text = _text;
489       +      indent = _indent;
The SAS System

MPRINT(SETENV.SETENV02.INI):   indent = _indent;
490       +      if indent <= .Z then do;
MPRINT(SETENV.SETENV02.INI):   if indent <= .Z then do;
491       +         if indent =. then do;
MPRINT(SETENV.SETENV02.INI):   if indent =. then do;
492       +            if substr(text, 1, 1) in (' ' 'A0'x)
493       +               then indent=verify(text, ' '||'A0'x);
MPRINT(SETENV.SETENV02.INI):   if substr(text, 1, 1) in (' ' 'A0'x) then indent=verify(text, ' '||'A0'x);
494       +               else indent=indexc(text, ' '||'A0'x);
MPRINT(SETENV.SETENV02.INI):   else indent=indexc(text, ' '||'A0'x);
495       +         end; else do;
MPRINT(SETENV.SETENV02.INI):   end;
MPRINT(SETENV.SETENV02.INI):   else do;
496       +            indent = 0;
MPRINT(SETENV.SETENV02.INI):   indent = 0;
497       +         end;
MPRINT(SETENV.SETENV02.INI):   end;
498       +      end;
MPRINT(SETENV.SETENV02.INI):   end;
499       +      l = lengthn(text);
MPRINT(SETENV.SETENV02.INI):   l = lengthn(text);
500       +      startpos = 1;
MPRINT(SETENV.SETENV02.INI):   startpos = 1;
501       +      if l=0 then return ( trim(text) );
MPRINT(SETENV.SETENV02.INI):   if l=0 then return ( trim(text) );
502       +      do until (startpos > lengthn(text));
MPRINT(SETENV.SETENV02.INI):   do until (startpos > lengthn(text));
503       +         *- indent text as requested -*;
MPRINT(SETENV.SETENV02.INI):   *- indent text as requested -*;
504       +         v = verify(substr(text, startpos), ' ');
MPRINT(SETENV.SETENV02.INI):   v = verify(substr(text, startpos), ' ');
505       +         if indent > 0 and v >0
506       +            then substr(text, startpos) = repeat(' ', indent-1)||substr(substr(text, startpos), v);
MPRINT(SETENV.SETENV02.INI):   if indent > 0 and v >0 then substr(text, startpos) = repeat(' ', indent-1)||substr(substr(text, startpos), v);
507       +         else if v > 0
508       +            then substr(text, startpos) = substr(substr(text, startpos), v);
MPRINT(SETENV.SETENV02.INI):   else if v > 0 then substr(text, startpos) = substr(substr(text, startpos), v);
509       +            else substr(text, startpos) = repeat(' ', indent-1)||substr(text, startpos);
MPRINT(SETENV.SETENV02.INI):   else substr(text, startpos) = repeat(' ', indent-1)||substr(text, startpos);
510       +         *- split text as requested -*;
MPRINT(SETENV.SETENV02.INI):   *- split text as requested -*;
511       +         splitpos = findc( substr(text, startpos, size) , " " ,  -size );  *- backwards find position of first space prior to size -*;
MPRINT(SETENV.SETENV02.INI):   splitpos = findc( substr(text, startpos, size) , " " , -size );
MPRINT(SETENV.SETENV02.INI):   *- backwards find position of first space prior to size -*;
512       +         if splitpos <= indent
513       +            then splitpos = size;
MPRINT(SETENV.SETENV02.INI):   if splitpos <= indent then splitpos = size;
The SAS System

514       +         if splitpos < size
515       +            then substr(text, startpos) = substr(text, startpos, splitpos)||repeat(' ', size - splitpos)||substr(text, startpos + splitpos);
MPRINT(SETENV.SETENV02.INI):   if splitpos < size then substr(text, startpos) = substr(text, startpos, splitpos)||repeat(' ', size - splitpos)||substr(text, startpos + splitpos);
516       +         startpos=startpos + size;
MPRINT(SETENV.SETENV02.INI):   startpos=startpos + size;
517       +      end;
MPRINT(SETENV.SETENV02.INI):   end;
518       +      *- Unless there is only one chunk, insert one more space in front of the last chunk in order to have it correctly aligned by proc report
519       +         when used with options width = &size flow and the LISTING destination -*;
The SAS System

MPRINT(SETENV.SETENV02.INI):   *- Unless there is only one chunk, insert one more space in front of the last chunk in order to have it correctly aligned by proc report when used wi
th options width = 
&size flow and the LISTING destination -*;
520       +      startpos = startpos - size;
MPRINT(SETENV.SETENV02.INI):   startpos = startpos - size;
521       +      if startpos > size then do; *- i.e. this is not the first and only chunk -*;
MPRINT(SETENV.SETENV02.INI):   if startpos > size then do;
MPRINT(SETENV.SETENV02.INI):   *- i.e. this is not the first and only chunk -*;
522       +         substr(text, startpos) = " "||substr(text, startpos);
MPRINT(SETENV.SETENV02.INI):   substr(text, startpos) = " "||substr(text, startpos);
523       +      end;
MPRINT(SETENV.SETENV02.INI):   end;
524       +      return( trim(text) );
MPRINT(SETENV.SETENV02.INI):   return( trim(text) );
525       +   endsub;
MPRINT(SETENV.SETENV02.INI):   endsub;
526       +
527       +   *- Function to split character values into chunks that are at most the specified size,
528       +      insert separators between all chunks and join them back together
529       +      after suppressing leading spaces in chunks.
530       +      When separators already exist in the input string, they are preserved (the string
531       +      is forced to split at those positions).
532       +      The separators are typically used to wrap text in a fixed width column.
533       +   -*;
MPRINT(SETENV.SETENV02.INI):   *- Function to split character values into chunks that are at most the specified size, insert separators between all chunks and join them back togeth
er after 
suppressing leading spaces in chunks. When separators already exist in the input string, they are preserved (the string is forced to split at those positions). The separators are t
ypically used to 
wrap text in a fixed width column. -*;
534       +   Function SPLITINSERTSEP(_text $, size, sep $) $;
MPRINT(SETENV.SETENV02.INI):   Function SPLITINSERTSEP(_text $, size, sep $) $;
535       +      file log;
MPRINT(SETENV.SETENV02.INI):   file log;
536       +      length text $32767;
MPRINT(SETENV.SETENV02.INI):   length text $32767;
537       +      text = _text;
MPRINT(SETENV.SETENV02.INI):   text = _text;
538       +      l = lengthn(text);
MPRINT(SETENV.SETENV02.INI):   l = lengthn(text);
539       +      lsep = length(sep);
MPRINT(SETENV.SETENV02.INI):   lsep = length(sep);
540       +      startpos = 1;
MPRINT(SETENV.SETENV02.INI):   startpos = 1;
541       +      if l=0 then return ( trim(text) );
MPRINT(SETENV.SETENV02.INI):   if l=0 then return ( trim(text) );
542       +      iter = 0;
MPRINT(SETENV.SETENV02.INI):   iter = 0;
543       +      remain = klength(substr(text, startpos));
MPRINT(SETENV.SETENV02.INI):   remain = klength(substr(text, startpos));
544       +     *do until (startpos > lengthn(text) or iter > 20);
MPRINT(SETENV.SETENV02.INI):   *do until (startpos > lengthn(text) or iter > 20);
545       +      do until (klength(substr(text, startpos))< size or iter > 20);
The SAS System

MPRINT(SETENV.SETENV02.INI):   do until (klength(substr(text, startpos))< size or iter > 20);
546       +         iter = iter + 1;
MPRINT(SETENV.SETENV02.INI):   iter = iter + 1;
547       +         l = lengthn(text);
The SAS System

MPRINT(SETENV.SETENV02.INI):   l = lengthn(text);
548       +         v = kindex (substr(text, startpos), ' ');
MPRINT(SETENV.SETENV02.INI):   v = kindex (substr(text, startpos), ' ');
549       +         vb= kindexb(substr(text, startpos), ' ');
MPRINT(SETENV.SETENV02.INI):   vb= kindexb(substr(text, startpos), ' ');
550       +         s = kindex (substr(text, startpos), sep);
MPRINT(SETENV.SETENV02.INI):   s = kindex (substr(text, startpos), sep);
551       +         sb= kindexb(substr(text, startpos), sep);
MPRINT(SETENV.SETENV02.INI):   sb= kindexb(substr(text, startpos), sep);
552       +         sizeb = lengthn(ksubstr(ktrim(substr(text, startpos))||repeat('.', size), 1, size)||"|");
MPRINT(SETENV.SETENV02.INI):   sizeb = lengthn(ksubstr(ktrim(substr(text, startpos))||repeat('.', size), 1, size)||"|");
553       +        *put iter= startpos= l= v= vb= s= sb= size= sizeb= lsep=;
MPRINT(SETENV.SETENV02.INI):   *put iter= startpos= l= v= vb= s= sb= size= sizeb= lsep=;
554       +         if 0 < s <= size then do;
MPRINT(SETENV.SETENV02.INI):   if 0 < s <= size then do;
555       +            *put "case 1)";
MPRINT(SETENV.SETENV02.INI):   *put "case 1)";
556       +            startpos = startpos + sb -1 + lsep;
MPRINT(SETENV.SETENV02.INI):   startpos = startpos + sb -1 + lsep;
557       +            substr(text, startpos) = kleft(substr(text, startpos));
MPRINT(SETENV.SETENV02.INI):   substr(text, startpos) = kleft(substr(text, startpos));
558       +         end; else do;
MPRINT(SETENV.SETENV02.INI):   end;
MPRINT(SETENV.SETENV02.INI):   else do;
559       +            if 0 < v <= size then do;
MPRINT(SETENV.SETENV02.INI):   if 0 < v <= size then do;
560       +               w = kfindc( substr(text, startpos, sizeb) , " " ,  -size );
MPRINT(SETENV.SETENV02.INI):   w = kfindc( substr(text, startpos, sizeb) , " " , -size );
561       +               wb = lengthn( ksubstr( substr(text, startpos, sizeb), 1, w ) );
MPRINT(SETENV.SETENV02.INI):   wb = lengthn( ksubstr( substr(text, startpos, sizeb), 1, w ) );
562       +               *put "case 2) " w= wb=;
MPRINT(SETENV.SETENV02.INI):   *put "case 2) " w= wb=;
563       +               substr(text, startpos + wb) = ktrim(sep) || kleft(substr(text, startpos + wb));
MPRINT(SETENV.SETENV02.INI):   substr(text, startpos + wb) = ktrim(sep) || kleft(substr(text, startpos + wb));
564       +               startpos = startpos + wb + lsep;
MPRINT(SETENV.SETENV02.INI):   startpos = startpos + wb + lsep;
565       +            end; else do;
MPRINT(SETENV.SETENV02.INI):   end;
MPRINT(SETENV.SETENV02.INI):   else do;
566       +               *put "case 3)";
MPRINT(SETENV.SETENV02.INI):   *put "case 3)";
567       +               substr(text, startpos + sizeb) = ktrim(sep) || kleft(substr(text, startpos + sizeb));
MPRINT(SETENV.SETENV02.INI):   substr(text, startpos + sizeb) = ktrim(sep) || kleft(substr(text, startpos + sizeb));
568       +               startpos = startpos + sizeb + lsep;
MPRINT(SETENV.SETENV02.INI):   startpos = startpos + sizeb + lsep;
569       +            end;
MPRINT(SETENV.SETENV02.INI):   end;
570       +         end;
MPRINT(SETENV.SETENV02.INI):   end;
571       +         remain = klength(substr(text, startpos));
MPRINT(SETENV.SETENV02.INI):   remain = klength(substr(text, startpos));
572       +         *put "new " startpos= / text / "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890";
MPRINT(SETENV.SETENV02.INI):   *put "new " startpos= / text / "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890";
573       +         *put "Remaining: " remain;
The SAS System

MPRINT(SETENV.SETENV02.INI):   *put "Remaining: " remain;
574       +      end;
The SAS System

MPRINT(SETENV.SETENV02.INI):   end;
575       +      return( trim(text) );
MPRINT(SETENV.SETENV02.INI):   return( trim(text) );
576       +   endsub;
MPRINT(SETENV.SETENV02.INI):   endsub;
577       +
578       +run;
MPRINT(SETENV.SETENV02.INI):   run;

NOTE: Function SPLITINSERTSEP saved to work.functions.STRINGS.
NOTE: Function SPLITINDENT saved to work.functions.STRINGS.
NOTE: Function OVERWRITE saved to work.functions.STRINGS.
NOTE: Function RIGHT20CHAR saved to work.functions.STRINGS.
NOTE: Function PATTERNN saved to work.functions.STRINGS.
NOTE: Function PATTERNC saved to work.functions.STRINGS.
NOTE: Function E8601PATTERNC saved to work.functions.STRINGS.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.02 seconds


MPRINT(SETENV.SETENV02.INI):   quit;
579       +quit;
580       +
581       +%*- Set OPTION CMPLIB so as to allow SAS to find and access the fcmp functions -*;
582       +%*------------------------------------------------------------------------------*;
583       +%*- prepencd &fcmpoutlib. to OPTION CMPLIB value, unless it is already part of this option value -*;
584       +options %sysfunc(ifc( %sysfunc(exist(&fcmpoutlib., data)) and %sysfunc(findw(%qsysfunc(getoption(cmplib)), &fcmpoutlib., ( -), ei))=0 , insert=(cmplib=&fcmpoutlib.), %st
r( )));
MPRINT(SETENV.SETENV02.INI):   options ;
585       +%put option cmplib=%sysfunc(getoption(cmplib));
option cmplib=work.functions
586       +
587       +
588       +/*
589       +option ls = max;
590       +data test;
591       +   length trt $200;
592       +   trt = "ARGX-113-1704, ARGX-113-1705, ARGX-113-2002~ Arm: PBO, 113-10, -~ INTRAVENOUS, SUBCUTANEOUS";
593       +   *substr(trt, 10)= "~"||substr(trt,10);
594       +   trtsplit = SPLITINSERTSEP(trt, 10, "~");
595       +   put "------------------------------------------------------";
596       +   put trt / trtsplit;
597       +run;
598       +*/
599       +
600       +/* *- Example usage: return a complete ISO8601 datetime by overwriting a reference datetime with the available part of a partial datetime -*;
601       +option ls=180;
602       +
603       +data test;
604       +   ref="2020-12-31T23:59:59";
605       +   length dtc dtc2 $ 30;
606       +   do dtc = "1998", "1998-", "1998-06", "1998-06-", "1998-06-15", "1998-06-15T", "1998-06-15T14", "1998-06-15T14:", "1998-06-15T14:25"
607       +          , "1998-06-15T14:25:", "1998-06-15T14:25:17", "1998-06-15T14:25:17.", "1998-06-15T14:25:17.123", "1998-06-15T14:25:17.12345";
608       +      dtc2=overwrite(dtc, ref)||"<-";
609       +      output;
610       +      put @40 ref= / @40 dtc= / @30 "-->" @39 dtc2= /;
The SAS System
The SAS System


611       +   end;
612       +run;
613       +
614       +data test;
615       +   length text2 $200;
616       +   do size=40, 30, 20;
617       +      do indent = 0, 3, 6;
618       +         do text1 = "THE DENOMINATOR FOR THE PERCENTAGE CALCULATIONS IS THE TOTAL NUMBER OF SUBJECTS PER TREATMENT GROUP IN THE SAFETY POPULATION.";
619       +            text2 = splitindent(text1, indent, size);
620       +            put / text1 / text2;
621       +            output;
622       +         end;
623       +      end;
624       +   end;
625       +run;
626       +
627       +%let size=20;
628       +data test2;
629       +      length text return nextsttmt case $200 chunk $&size;
630       +      text = "THE DENOMINATOR FOR THE PERCENTAGE CALCULATIONS IS THE TOTAL NUMBER OF SUBJECTS PER TREATMENT GROUP IN THE SAFETY POPULATION.";
631       +      indent = 3;
632       +      size=&size;
633       +      l = lengthn(text);
634       +      startpos = 1;
635       +      if l=0 then return= trim(text);
636       +      chunk=substr(text, startpos);
637       +      nextsttmt='do until (startpos > lengthn(text));';
638       +      output;
639       +      do until (startpos > lengthn(text));
640       +         case="do until() : start iteration";
641       +         nextsttmt='*- indent text as requested -*;';
642       +         output;
643       +         case=" ";
644       +         nextsttmt="v = verify(substr(text, startpos), ' ');";
645       +         v = verify(substr(text, startpos), ' ');
646       +         output;
647       +         if indent > 0 and v >0 then do;
648       +            case="(1) indent > 0 and v >0";
649       +            nextsttmt="substr(text, startpos) = repeat(' ', indent-1)||substr(substr(text, startpos), v);";
650       +            substr(text, startpos) = repeat(' ', indent-1)||substr(substr(text, startpos), v);
651       +         end;
652       +         else if v > 0 then do;
653       +            case="(2) v > 0";
654       +            nextsttmt="substr(text, startpos) = substr(substr(text, startpos), v);";
655       +            substr(text, startpos) = substr(substr(text, startpos), v);
656       +         end; else do;
657       +            case="(3) else";
658       +            nextsttmt="substr(text, startpos) = repeat(' ', indent-1)||substr(text, startpos);";
659       +            substr(text, startpos) = repeat(' ', indent-1)||substr(text, startpos);
660       +         end;
661       +         chunk=substr(text, startpos);
662       +         l = lengthn(text);
663       +         output;
664       +         nextsttmt="*- split text as requested -*;";
665       +         case=" ";
666       +         *- split text as requested -*;
667       +         output;
The SAS System

668       +         nextsttmt="splitpos = findc( substr(text, startpos, size) , ' ' ,  -size );  *- backwards find position of first space prior to size -*;";
The SAS System

669       +         splitpos = findc( substr(text, startpos, size) , ' ' ,  -size );  *- backwards find position of first space prior to size -*;
670       +         output;
671       +         if splitpos <= indent then do;
672       +            case="splitpos <= indent ";
673       +            nextsttmt="splitpos = size;";
674       +            splitpos = size;
675       +            output;
676       +         end;
677       +         if splitpos < size then do;
678       +            case="splitpos < size";
679       +            nextsttmt="substr(text, startpos) = substr(text, startpos, splitpos)||repeat(' ', size - splitpos)||substr(text, startpos + splitpos);";
680       +            substr(text, startpos) = substr(text, startpos, splitpos)||repeat(' ', size - splitpos)||substr(text, startpos + splitpos);
681       +            chunk=substr(text, startpos);
682       +            l = lengthn(text);
683       +            output;
684       +         end;
685       +         case=" ";
686       +         nextsttmt="startpos=startpos + size;";
687       +         startpos=startpos + size;
688       +         chunk=substr(text, startpos);
689       +         l = lengthn(text);
690       +         output;
691       +      end;
692       +      *- insert one more space in front of the last chunk in order to have it correctly aligned by proc report
693       +         when used with options width = &size flow and the LISTING destination -*;
694       +      startpos = startpos - size;
695       +      substr(text, startpos) = " "||substr(text, startpos);
696       +      case="until (startpos > lengthn(text)) : TRUE";
697       +      nextsttmt="return = trim(text) ;";
698       +      return = trim(text) ;
699       +      output;
700       +      stop;
701       +run;
702       +
703       +ods listing;
704       +proc report data=test2;
705       +   columns text;
706       +   define text / width=&size flow;
707       +run;
708       +
709       +proc format;
710       +   value $r20char (default=20)
711       +   other = [right20char()]
712       +   ;
713       +   value $patternc (default=40)
714       +   other = [patternc()]
715       +   ;
716       +run;
717       +
718       +data right20char;
719       +   length t t2 tf tf2 tp $40 ;
720       +   format tf $r20char.;
721       +   retain t ' ';
722       +   do i = 1 to 30;
723       +     *t = repeat('*', i-1);
The SAS System

724       +      t = cats(t, byte(rank('a')-1+i));
725       +      t2 = right20char(t);
726       +      l = length(t);
The SAS System

727       +      l2 = length(t2);
728       +      l2c = length(cats(t2));
729       +      tf=t;
730       +      tf2=put(t, $r20char.);
731       +      tp=put(t, $patternc.);
732       +      output;
733       +   end;
734       +run;
735       +
736       +*/
NOTE: %INCLUDE (level 1) ending.
Notice: =========================================================================================================
Notice: === (INI): Starting adsl.sas - 2022-12-16T22:29:17 ===
Notice: =========================================================================================================
MAUTOCOMPLOC:  The autocall macro LOG4GADAM is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/gadam/_library/log4gadam.sas.
MPRINT(SETENV.SETENV02.INI.LOG4GADAM):   filename rev1 
("/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/log/monitor_adsl.txt");
MPRINT(SETENV.SETENV02.INI.LOG4GADAM):   *;
MAUTOCOMPLOC:  The autocall macro LOG4SAS is compiling using the autocall source file /sso/sfw/sas/940/SASFoundation/9.4/sasautos/log4sas.sas.
MPRINT(SETENV.SETENV02.INI.LOG4GADAM.LOG4SAS):   ;
MPRINT(SETENV.SETENV02.INI.LOG4GADAM):  ;
MPRINT(SETENV.SETENV02.INI.LOG4GADAM):  ;
MPRINT(SETENV.SETENV02.INI.LOG4GADAM):  ;
MPRINT(SETENV.SETENV02.INI):  ;
MPRINT(SETENV.SETENV02):  ;
MPRINT(SETENV.SETENV02):  ;
MAUTOCOMPLOC:  The autocall macro GET_JOB_PROG_INFO is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library/get_job_prog_info.sas.
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   data _null_;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   infile 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/jobs/job_adsl.job";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   input;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   *put _infile_;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   length progversion $32;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   if prxmatch("/^.*<inputSpec path=[""'][^<>""']*\/programs\/adsl.sas[""'][^<>]* version=[""'][\*\d\.]+[""'][^<>]*\/>.*$/", _infile_) the
n do;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   progversion = prxchange("s/^.*<inputSpec path=[""'][^<>""']*\/programs\/adsl.sas[""'][^<>]* version=[""']([\*\d\.]+)[""'][^<>]*\/>.*$/\
1/", 1, _infile_);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   put progversion=;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   call symputx('jobprogversion', progversion);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   end;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):   run;

NOTE: The infile "/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/jobs/job_a
dsl.job" is:
      Filename=/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/jobs/job_adsl
.job,
      Owner Name=webtrust,Group Name=webtrust,
      Access Permission=-rw-rw-rw-,
      Last Modified=16Dec2022:22:28:38,
      File Size (bytes)=2856
The SAS System

progversion=*
NOTE: 41 records were read from the infile 
      "/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/jobs/job_adsl.job".
      The minimum record length was 6.
      The maximum record length was 155.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds

The SAS System


MAUTOCOMPLOC:  The autocall macro LSAF_GET_VERSION is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library/lsaf_get_version.sas.
MAUTOCOMPLOC:  The autocall macro LOCAL_LSAF is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library/local_lsaf.sas.
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION):   *;
MAUTOCOMPLOC:  The autocall macro LSAF_GETPROPERTIES is compiling using the autocall source file /sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.3/sasmacros/lsaf_getpro
perties.sas.
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):  ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   data work.lsafGetProperties (label="Created by LSAF_GETPROPERTIES" KEEP=path name displayName value
 type isReadonly 
isExtended);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   attrib returnCode length=8 message length=$200 logMsgPrefix length=$70 logMsgPrimary length=$70 log
Msg length=$300 
rowCount length=8 path length=$2048 label="Item Path" name length=$256 label="Property Name" displayName length=$256 label="Property Display Name" value length=$2048 label="Propert
y Value" type 
length=$32 label="Property Type" isReadonly length=8 label="Property value is not modifiable." isExtended length=8 label="Property is an Extended Attribute" ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   rowCount=0;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   declare javaobj srv("com/sas/lsaf/macro/service/RepositoryService") ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   declare javaobj results("com/sas/lsaf/macro/results/SasRepositoryItemPropertiesResult");
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   srv.callStaticVoidMethod("getProperties", 
"/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/programs/adsl.sas", "", results);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   results.callIntMethod("getReturnCode", returnCode);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   results.callStringMethod("getReturnMessage", message);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   logMsgPrefix="NOTE: SAS Life Science Analytics Framework Macro: * ";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   if (returnCode ne 0) then do;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   logMsgPrimary="ERROR: SAS Life Science Analytics Framework Macro:";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   logMsg=" Cannot retrieve list of properties for 
/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/programs/adsl.sas" ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   end;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   else do;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   logMsgPrimary=logMsgPrefix;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   logMsg=" List of properties were returned for 
/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/programs/adsl.sas" ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   results.callIntMethod("getSize", rowCount);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   do row=0 to rowCount - 1;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   path="/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/programs/adsl.sas";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   results.callStringMethod("getPropertyName", row, name);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   results.callStringMethod("getPropertyValue", row, value);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   results.callStringMethod("getPropertyDisplayName", row, displayName);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   results.callStringMethod("getPropertyAttributeType", row, type);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   results.callBooleanMethod("getPropertyIsReadOnly", row, isReadonly);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   results.callBooleanMethod("getPropertyIsExtended", row, isExtended);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   output;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   end;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   end;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   put;
The SAS System

MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   put logMsgPrimary " " logMsg;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   put logMsgPrefix " " "lsaf_getproperties";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   if (rowCount=0) then put logMsgPrefix " No properties were retrieved.";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   else put logMsgPrefix " " rowCount " records written to data set work.lsafGetProperties";
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   put logMsgPrefix " _lsafMsg_= " message ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   put logMsgPrefix " _lsafRC_= " returnCode ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   put;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   call symputx("_lsafRC_", returnCode);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   call symputx("_lsafMsg_", message);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   call symputx("_lsafRowCount_", rowCount);
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   run;


NOTE: SAS Life Science Analytics Framework Macro: *  List of properties were returned for /clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/programs/adsl.sas
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_getproperties
The SAS System

NOTE: SAS Life Science Analytics Framework Macro: *  16  records written to data set work.lsafGetProperties
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: The data set WORK.LSAFGETPROPERTIES has 16 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.89 seconds
      cpu time            0.01 seconds


MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   options nonotes;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   proc sort data=work.lsafGetProperties;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   by name;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   run;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION.LSAF_GETPROPERTIES):   options NOTES;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION):  ;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION):   data _null_;
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION):   set lsafGetProperties(where=(name='version'));
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION):   call symputx(symget('into'), coalescec(cats(value), '-'), 'G');
MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO.LSAF_GET_VERSION):   run;

NOTE: There were 1 observations read from the data set WORK.LSAFGETPROPERTIES.
      WHERE name='version';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(SETENV.SETENV02.GET_JOB_PROG_INFO):  ;
MPRINT(SETENV.SETENV02):  ;
progversion = -
MPRINT(SETENV):  ;
MPRINT(SETENV):   options nomprintnest;
(SETENV): Done.
737        
738        %adsl;
MAUTOCOMPLOC:  The autocall macro ADSL is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/gadam/_library/adsl.sas.
NOTE: %INCLUDE (level 1) file 
      /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/programs/fcmp_run.sas 
is file 
      /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/programs/fcmp_run.sas.
The SAS System

739       +/********************************************************************************************************************************/
740       +/* Purpose              : Define (a package of) user-written SAS function(s)/ call routine(s) to be compiled by PROC FCMP:      */
741       +/*                          - Package of Fcmp functions to deal with running SAS Code within a FCMP function computations.      */
742       +/*                                                                                                                              */
743       +/* Programmer           : Jean-Michel Bodart                                                                                    */
744       +/* Program Name         : fcmp_run.sas                                                                                         */
745       +/* Note                 : this program is meant to be called from a SAS project environment initialization program              */
746       +/********************************************************************************************************************************/
747       +
748       +%*- Determine <libname>.<dataset> where to store FCMP functions/routines -*;
749       +%*------------------------------------------------------------------------*;
750       +%*- retrieve first location specified in CMPLIB option (if any) -*;
751       +%let fcmpoutlib=%scan(%qsysfunc(prxchange(s/(_NO)?_DISPLAYLOC_//i, -1, %qsysfunc(getoption(cmplib)))), 1, ( -));
752       +%*- if empty, replace by 'fcmp.functions' -*;
753       +%let fcmpoutlib=%sysfunc(ifc(%length(%superq(fcmpoutlib))=0, fcmp.functions, %superq(fcmpoutlib)));
754       +%*- if <libname> is not assigned to a path, replace by 'work.functions' -*;
755       +%let fcmpoutlib=%sysfunc(ifc(%length(%qsysfunc(pathname(%scan(%superq(fcmpoutlib), 1, .), L)))=0, work.functions, %superq(fcmpoutlib)));
756       +%put fcmpoutlib=&fcmpoutlib;
The SAS System

fcmpoutlib=work.functions
757       +
758       +%*- assign a package name -*;
759       +%let package = run;
760       +
761       +%macro del_existing;
762       +   %if %sysfunc(exist(&fcmpoutlib., data)) %then %do;
763       +      %*- get list of existing functions in selected package -*;
764       +      %let func_list = ;
765       +      proc sql noprint;
766       +         select distinct scan(_KEY_, -1, ".") into :func_list separated by ' '
767       +            from &fcmpoutlib. where type="Prototype" and scan(_key_, 1, ".") = "F" and scan(_key_, 2, ".") = %sysfunc(quote(%qupcase(%superq(package))))
768       +            ;
769       +      quit;
770       +      %put Existing FCMP functions in &fcmpoutlib.&package: &func_list..;
771       +
772       +      proc fcmp outlib=&fcmpoutlib..&package.; /* outlib = <library>.<dataset>.<package> */
773       +
774       +         %if %index(%str( &func_list ), %str( RUNMACRO )) %then %do;
775       +            deletefunc RUNMACRO; /* delete pre-existing instance of this function to avoid war-ning about re-defining it. */
776       +         %end;
777       +
778       +      quit;
779       +   %end;
780       +%mend del_existing;
781       +%del_existing;
MPRINT(DEL_EXISTING):   proc sql noprint;
MPRINT(DEL_EXISTING):   select distinct scan(_KEY_, -1, ".") into :func_list separated by ' ' from work.functions where type="Prototype" and scan(_key_, 1, ".") = "F" and scan(_key
_, 2, ".") = "RUN" ;
MPRINT(DEL_EXISTING):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


Existing FCMP functions in work.functionsrun: RUNMACRO.
MPRINT(DEL_EXISTING):   proc fcmp outlib=work.functions.run;
MPRINT(DEL_EXISTING):   deletefunc RUNMACRO;
The SAS System

MPRINT(DEL_EXISTING):   quit;

NOTE: Function RUNMACRO deleted from work.functions.run.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.02 seconds


MPRINT(ADSL):  ;
782       +
783       +proc fcmp outlib=&fcmpoutlib..&package.; /* outlib = <library>.<dataset>.<package> */
MPRINT(ADSL):   proc fcmp outlib=work.functions.run;
784       +
785       +   *- Function that runs SAS Code passed quoted as macro-variable ARGS to macro %run_macro,
786       +      which is expected to have been already compiled or to be found among the autocall macros.
787       +      The %run_macro has no parameters but retrieves the contents of ARGS from macro-variable &ARGS,
788       +      de-quote them and executes them.  The code executed is expected to assign a value to macro-variable &RESULT
789       +      which is passed back to the FCMP function and becomes the value returned by that FCMP function.
790       +   -*;
MPRINT(ADSL):   /* outlib = <library>.<dataset>.<package> */ *- Function that runs SAS Code passed quoted as macro-variable ARGS to macro %run_macro, which is expected to have been
 already compiled 
or to be found among the autocall macros. The %run_macro has no parameters but retrieves the contents of ARGS from macro-variable &ARGS, de-quote them and executes them. The code e
xecuted is expected 
The SAS System

to assign a value to macro-variable &RESULT which is passed back to the FCMP function and becomes the value returned by that FCMP function. -*;
791       +   function RUNMACRO(args $) $;*$32000;
MPRINT(ADSL):   function RUNMACRO(args $) $;
MPRINT(ADSL):  *$32000;
792       +      length result $32000;
MPRINT(ADSL):   length result $32000;
793       +      result="";
MPRINT(ADSL):   result="";
794       +      rc = run_macro('run_macro', args, result);
MPRINT(ADSL):   rc = run_macro('run_macro', args, result);
795       +     *if rc = 0 then return(quote(trimn(result)));
MPRINT(ADSL):   *if rc = 0 then return(quote(trimn(result)));
796       +      if rc = 0 then return(trimn(result));
MPRINT(ADSL):   if rc = 0 then return(trimn(result));
797       +      else return('ER'||'ROR attempting to call macro run_macro');
MPRINT(ADSL):   else return('ER'||'ROR attempting to call macro run_macro');
798       +   endsub;
MPRINT(ADSL):   endsub;
799       +
800       +   /* *- test -*;
MPRINT(ADSL):   /* *- test -*;
801       +
802       +   res = RUNMACRO('%lib_datasets(lib=maps);');
MPRINT(ADSL):   res = RUNMACRO('%lib_datasets(lib=maps);
MPRINT(ADSL):  ');
803       +   put res=;
MPRINT(ADSL):   put res=;
804       +
805       +   res = RUNMACRO('%non_existing_macro(lib=maps);');
MPRINT(ADSL):   res = RUNMACRO('%non_existing_macro(lib=maps);
MPRINT(ADSL):  ');
806       +   put res=;
MPRINT(ADSL):   put res=;
The SAS System

807       +
808       +   */
809       +run;
MPRINT(ADSL):   */ run;

NOTE: Function RUNMACRO saved to work.functions.run.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(ADSL):   quit;
810       +quit;
811       +
812       +%*- Set OPTION CMPLIB so as to allow SAS to find and access the fcmp functions -*;
813       +%*------------------------------------------------------------------------------*;
814       +%*- prepencd &fcmpoutlib. to OPTION CMPLIB value, unless it is already part of this option value -*;
815       +options %sysfunc(ifc( %sysfunc(exist(&fcmpoutlib., data)) and %sysfunc(findw(%qsysfunc(getoption(cmplib)), &fcmpoutlib., ( -), ei))=0 , insert=(cmplib=&fcmpoutlib.), %st
r( )));
MPRINT(ADSL):   options ;
816       +%put option cmplib=%sysfunc(getoption(cmplib));
option cmplib=work.functions
817       +
818       +/* *- example usage -*;
819       +
820       +
The SAS System

821       +data test;
822       +   length args result $32000;
823       +   args = '%lib_datasets(lib=maps);';
824       +   result = runmacro(args);
825       +run;
826       +
827       +%let list = - ;
828       +%let list = %sysfunc(runmacro(  %qsysfunc(dequote('%lib_datasets(lib=sashelp);'))  ));
829       +%put list = ->&list<-;
830       +
831       +data test;
832       +   length args result $32000;
833       +   args = '%non_existing_macro(lib=maps);';
834       +   result = runmacro(args);
835       +run;
836       +
837       +%let list = - ;
838       +%let code = %qsysfunc(dequote('%non_existing_macro(lib=sashelp);'));
839       +%put code = &code;
840       +%put ...;
841       +%let list = %sysfunc(runmacro(  &code  ));
842       +%put list = ->&list<-;
843       +
844       +%put >>>%sysfunc(runmacro('proc sql; select distinct quote(strip(sex)) into :result separated by ", " from adam.adsl; quit;'))<<<;  %*- this includes lots of (unwanted) 
trailing spaces -*;
845       +
846       +%put %sysfunc(trim(%qsysfunc(runmacro('proc sql; select distinct quote(strip(sex)) into :result separated by ", " from adam.adsl; quit;'))));
847       +%put %sysfunc(trim(%qsysfunc(runmacro('proc sql; select distinct quote(strip(sex)) into :result separated by '', '' from adam.adsl; quit;'))));
848       +
849       +
The SAS System

850       +*- this gives expected results - without extra spaces in the log -*;
851       +data test;
852       +   do Sex = %sysfunc(runmacro('proc sql; select distinct quote(strip(sex)) into :result separated by '', '' from adam.adsl; quit;'));
853       +      put Sex=;
854       +      output;
855       +   end;
856       +run;
857       +
858       +data test;
859       +   do age = %sysfunc(runmacro('proc sql; select distinct age into :result separated by '', '' from adam.adsl; quit;'));
860       +      put age=;
861       +      output;
862       +   end;
863       +run;
864       +
865       +
866       +*- this gives expected results too -*;
867       +data test;
868       +   do Sex = %sysfunc(trim(%qsysfunc(runmacro('proc sql; select distinct quote(strip(sex)) into :result separated by '', '' from adam.adsl; quit;'))));
869       +      put Sex=;
870       +      output;
871       +   end;
872       +run;
873       +
874       +data test;
875       +   do age = %sysfunc(trim(%qsysfunc(runmacro('proc sql; select distinct age into :result separated by '', '' from adam.adsl; quit;'))));
876       +      put age=;
877       +      output;
878       +   end;
The SAS System

879       +run;
880       +
881       +*/
NOTE: %INCLUDE (level 1) ending.
MPRINT(ADSL):   *- defines function runmacro() that allows executing code wrapped in a macro "on the side" from within a running data step - needed by %dslist() -*;
MPRINT(LOG4GADAM):   filename rev1 
("/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/log/monitor_adsl.txt");
MPRINT(LOG4SAS):   ;
MPRINT(LOG4GADAM):  ;
MPRINT(LOG4GADAM):  ;
MPRINT(LOG4GADAM):  ;
MPRINT(ADSL):  ;
MAUTOCOMPLOC:  The autocall macro GADAMREADSPECS is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/gadam/_library/gadamreadspecs.sas.
MPRINT(LOG4GADAM):   filename rev1 
("/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/log/monitor_adsl.txt");
MPRINT(LOG4SAS):   ;
MPRINT(LOG4GADAM):  ;
MPRINT(LOG4GADAM):  ;
MPRINT(LOG4GADAM):  ;
MPRINT(GADAMREADSPECS):  ;
MPRINT(GADAMREADSPECS):   filename adamspec "/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/gadam/metadata/argx-adam1.2.xlsx
";
Local ADaM Specs file: _ADAMSPEC_SP=argx-adam1.2_sp.xlsx
Local file does not exist: 
/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/documents/argx-adam1.2_sp.xl
sx
The SAS System

MPRINT(GADAMREADSPECS):   PROC IMPORT OUT= adslkeys (where=(upcase(domain)="ADSL")) DATAFILE= adamspec DBMS=xlsx REPLACE;
MPRINT(GADAMREADSPECS):   RXLX;
MPRINT(GADAMREADSPECS):   RANGE="domainList$A2:";
MPRINT(GADAMREADSPECS):   GETNAMES=YES;
MPRINT(GADAMREADSPECS):   RUN;

NOTE: One or more variables were converted because the data type is not supported by the V9 engine. For more details, run with options MSGLEVEL=I.
NOTE: The import data set has 13 observations and 5 variables.
NOTE: WORK.ADSLKEYS data set was successfully created.
NOTE: PROCEDURE IMPORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds


MPRINT(GADAMREADSPECS):   data _null_;
MPRINT(GADAMREADSPECS):   set adslkeys;
MPRINT(GADAMREADSPECS):   commas = countc(keys,',') + 1;
MPRINT(GADAMREADSPECS):   call symputx('nb_keys',strip(put(commas,8.)), 'G');
MPRINT(GADAMREADSPECS):   do i = 1 to commas;
MPRINT(GADAMREADSPECS):   key = scan(keys,i,',');
MPRINT(GADAMREADSPECS):   call symputx('key'||strip(put(i,8.)),strip(key), 'G');
MPRINT(GADAMREADSPECS):   output;
MPRINT(GADAMREADSPECS):   end;
MPRINT(GADAMREADSPECS):   run;

NOTE: There were 1 observations read from the data set WORK.ADSLKEYS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMREADSPECS):   PROC IMPORT OUT= adslspec (rename=(type=ctype length=clength format=cformat)) DATAFILE= adamspec DBMS=xlsx REPLACE;
MPRINT(GADAMREADSPECS):   RXLX;
The SAS System

MPRINT(GADAMREADSPECS):   RANGE="ADSL$2A:";
MPRINT(GADAMREADSPECS):   GETNAMES=YES;
MPRINT(GADAMREADSPECS):   RUN;

NOTE: One or more variables were converted because the data type is not supported by the V9 engine. For more details, run with options MSGLEVEL=I.
NOTE: The import data set has 163 observations and 15 variables.
NOTE: WORK.ADSLSPEC data set was successfully created.
NOTE: PROCEDURE IMPORT used (Total process time):
      real time           0.05 seconds
      cpu time            0.05 seconds


MPRINT(GADAMREADSPECS):   data adslspec;
MPRINT(GADAMREADSPECS):   set adslspec;
MPRINT(GADAMREADSPECS):   where upcase(include)="Y";
MPRINT(GADAMREADSPECS):   run;

NOTE: There were 52 observations read from the data set WORK.ADSLSPEC.
      WHERE UPCASE(include)='Y';
NOTE: The data set WORK.ADSLSPEC has 52 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
The SAS System



MPRINT(GADAMREADSPECS):   proc sql noprint;
MPRINT(GADAMREADSPECS):   select count(distinct codelist) into :cdlistn from adslspec where codelist ne '';
MPRINT(GADAMREADSPECS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMREADSPECS):   proc sql noprint;
MPRINT(GADAMREADSPECS):   select distinct compress(codelist,'','kn') into :cdlist separated by '","' from adslspec;
MPRINT(GADAMREADSPECS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMREADSPECS):   PROC IMPORT OUT= adslcdlist0 (rename=(fmtname=ctnam cdname=ctlnam code=rank value=code value_label=decode) drop=ctlink IG1_1) DATAFILE= adamspec DBMS=xlsx
 REPLACE;
MPRINT(GADAMREADSPECS):   RXLX;
MPRINT(GADAMREADSPECS):   RANGE="CodeList$A2:";
MPRINT(GADAMREADSPECS):   GETNAMES=YES;
MPRINT(GADAMREADSPECS):   RUN;

NOTE:    Variable Name Change.  IG1.1 -> IG1_1                           
NOTE: One or more variables were converted because the data type is not supported by the V9 engine. For more details, run with options MSGLEVEL=I.
NOTE: The import data set has 1105 observations and 7 variables.
NOTE: WORK.ADSLCDLIST0 data set was successfully created.
NOTE: PROCEDURE IMPORT used (Total process time):
      real time           0.10 seconds
      cpu time            0.11 seconds


MPRINT(GADAMREADSPECS):   proc sql noprint;
MPRINT(GADAMREADSPECS):   create table adslcdlist as select * from adslcdlist0 where ctnam in ("","ETHNIC","NY","RACE","SBJTSTAT","SEX","TIMEU");
The SAS System

NOTE: Table WORK.ADSLCDLIST created, with 25 rows and 5 columns.

NOTE: PROC SQL statements are executed immediately; The RUN statement has no effect.
MPRINT(GADAMREADSPECS):   run;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMREADSPECS):   proc sql noprint;
MPRINT(GADAMREADSPECS):   select count(ctnam) into :checkn from adslcdlist;
MPRINT(GADAMREADSPECS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("Codelist tab successfully read in for adsl.");
MPRINT(BUILDMSG):   length mcr $15;
The SAS System

MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |Codelist tab successfully read in for adsl.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMREADSPECS):  ;
MPRINT(GADAMREADSPECS):   proc sql noprint;
MPRINT(GADAMREADSPECS):   select distinct count(distinct codelist), compress(codelist,'','kn') into :miscdlistn, :miscdlist separated by ' ' from adslspec where compress(codelist,'
','kn') not in 
(select distinct ctnam from adslcdlist);
NOTE: The query requires remerging summary statistics back with the original data.
NOTE: PROC SQL statements are executed immediately; The RUN statement has no effect.
MPRINT(GADAMREADSPECS):   run;
MAUTOCOMPLOC:  The autocall macro GADAMCDLISTFORMATS is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/gadam/_library/gadamcdlistformats.sas.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.02 seconds


MPRINT(GADAMCDLISTFORMATS):   data def_term_num (rename=(ctnam=ctnamn ctlnam=ctlnamn code=coden decode=decoden rank=rankn ctnam_merge=ctnam_mergen)) def_term_rest;
MPRINT(GADAMCDLISTFORMATS):   set adslcdlist (keep=ct: code decode rank);
MPRINT(GADAMCDLISTFORMATS):   if substr(ctnam,length(ctnam)-1,2)='CD' then ctnam_merge=strip(substr(ctnam, 1, length(ctnam)-2));
MPRINT(GADAMCDLISTFORMATS):   else ctnam_merge=ctnam;
MPRINT(GADAMCDLISTFORMATS):   if index(ctlnam,'(N)')>0 then do;
MPRINT(GADAMCDLISTFORMATS):   ctnam_merge=strip(substr(ctnam, 1, length(ctnam)-1));
MPRINT(GADAMCDLISTFORMATS):   output def_term_num;
MPRINT(GADAMCDLISTFORMATS):   end;
MPRINT(GADAMCDLISTFORMATS):   else output def_term_rest;
MPRINT(GADAMCDLISTFORMATS):   run;

NOTE: There were 25 observations read from the data set WORK.ADSLCDLIST.
The SAS System

NOTE: The data set WORK.DEF_TERM_NUM has 0 observations and 6 variables.
NOTE: The data set WORK.DEF_TERM_REST has 25 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMCDLISTFORMATS):   proc sql noprint;
MPRINT(GADAMCDLISTFORMATS):   create table def_term as select * from def_term_num a full join def_term_rest b on a.ctnam_mergen=b.ctnam_merge and (a.decoden=b.decode or a.decoden=b
.code) order by 
ctnamn, ctnam, rank;
NOTE: Table WORK.DEF_TERM created, with 25 rows and 12 columns.

MPRINT(GADAMCDLISTFORMATS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
The SAS System



MPRINT(GADAMCDLISTFORMATS):   data def_term1;
MPRINT(GADAMCDLISTFORMATS):   set def_term;
MPRINT(GADAMCDLISTFORMATS):   if code ne '' and decode ='' then decode=code;
MPRINT(GADAMCDLISTFORMATS):   output;
MPRINT(GADAMCDLISTFORMATS):   if ctnamn ne '' then do;
MPRINT(GADAMCDLISTFORMATS):   ctnam=ctnamn;
MPRINT(GADAMCDLISTFORMATS):   ctlnam=ctlnamn;
MPRINT(GADAMCDLISTFORMATS):   ctlnamn='';
MPRINT(GADAMCDLISTFORMATS):   code=coden;
MPRINT(GADAMCDLISTFORMATS):   decode=decoden;
MPRINT(GADAMCDLISTFORMATS):   output;
MPRINT(GADAMCDLISTFORMATS):   end;
MPRINT(GADAMCDLISTFORMATS):   drop ctnam_merge ctnamn;
MPRINT(GADAMCDLISTFORMATS):   run;

NOTE: There were 25 observations read from the data set WORK.DEF_TERM.
NOTE: The data set WORK.DEF_TERM1 has 25 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMCDLISTFORMATS):   data def_term2;
MPRINT(GADAMCDLISTFORMATS):   set def_term1;
MPRINT(GADAMCDLISTFORMATS):   if ctnam='' then delete;
MPRINT(GADAMCDLISTFORMATS):   run;

NOTE: There were 25 observations read from the data set WORK.DEF_TERM1.
NOTE: The data set WORK.DEF_TERM2 has 25 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMCDLISTFORMATS):   proc sort data=def_term2 out=def_term2s;
MPRINT(GADAMCDLISTFORMATS):   by ctnam;
MPRINT(GADAMCDLISTFORMATS):   run;

NOTE: There were 25 observations read from the data set WORK.DEF_TERM2.
NOTE: The data set WORK.DEF_TERM2S has 25 observations and 10 variables.
The SAS System

NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMCDLISTFORMATS):   data fmtdset0;
MPRINT(GADAMCDLISTFORMATS):   length type $1.;
MPRINT(GADAMCDLISTFORMATS):   set def_term2s;
MPRINT(GADAMCDLISTFORMATS):   if index(ctlnam,'(N)')>0 then do;
MPRINT(GADAMCDLISTFORMATS):   type='N';
MPRINT(GADAMCDLISTFORMATS):   fmtname=compress(ctnam,' ','')||'NL';
MPRINT(GADAMCDLISTFORMATS):   end;
MPRINT(GADAMCDLISTFORMATS):   else do;
MPRINT(GADAMCDLISTFORMATS):   type='C';
The SAS System

MPRINT(GADAMCDLISTFORMATS):   fmtname=compress(ctnam,' ','')||'CL';
MPRINT(GADAMCDLISTFORMATS):   end;
MPRINT(GADAMCDLISTFORMATS):   output;
MPRINT(GADAMCDLISTFORMATS):   if index(ctlnamn,'(N)')>0 then do;
MPRINT(GADAMCDLISTFORMATS):   fmtname=compress(ctnam,' ','')||'CN';
MPRINT(GADAMCDLISTFORMATS):   decode=coden;
MPRINT(GADAMCDLISTFORMATS):   type='I';
MPRINT(GADAMCDLISTFORMATS):   output;
MPRINT(GADAMCDLISTFORMATS):   end;
MPRINT(GADAMCDLISTFORMATS):   run;

NOTE: There were 25 observations read from the data set WORK.DEF_TERM2S.
NOTE: The data set WORK.FMTDSET0 has 25 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMCDLISTFORMATS):   data fmtdset1;
MPRINT(GADAMCDLISTFORMATS):   set fmtdset0;
MPRINT(GADAMCDLISTFORMATS):   start=strip(code);
MPRINT(GADAMCDLISTFORMATS):   label=strip(decode);
MPRINT(GADAMCDLISTFORMATS):   hlo='';
MPRINT(GADAMCDLISTFORMATS):   keep start label type fmtname rank hlo;
MPRINT(GADAMCDLISTFORMATS):   if start=label then delete;
MPRINT(GADAMCDLISTFORMATS):   run;

NOTE: There were 25 observations read from the data set WORK.FMTDSET0.
NOTE: The data set WORK.FMTDSET1 has 20 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(GADAMCDLISTFORMATS):   proc sort data=fmtdset1 nodupkey;
MPRINT(GADAMCDLISTFORMATS):   by _all_;
MPRINT(GADAMCDLISTFORMATS):   run;

NOTE: There were 20 observations read from the data set WORK.FMTDSET1.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK.FMTDSET1 has 20 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
The SAS System



MPRINT(GADAMCDLISTFORMATS):   proc sort data=fmtdset1 out=fmtdset2;
MPRINT(GADAMCDLISTFORMATS):   by fmtname start rank;
MPRINT(GADAMCDLISTFORMATS):   run;

NOTE: There were 20 observations read from the data set WORK.FMTDSET1.
NOTE: The data set WORK.FMTDSET2 has 20 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
The SAS System


MPRINT(GADAMCDLISTFORMATS):   data fmtdset2;
MPRINT(GADAMCDLISTFORMATS):   set fmtdset2;
MPRINT(GADAMCDLISTFORMATS):   by fmtname start rank;
MPRINT(GADAMCDLISTFORMATS):   if first.start;
MPRINT(GADAMCDLISTFORMATS):   run;

NOTE: There were 20 observations read from the data set WORK.FMTDSET2.
NOTE: The data set WORK.FMTDSET2 has 20 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMCDLISTFORMATS):   proc sort data=fmtdset2 out=fmtdset (drop=rank);
MPRINT(GADAMCDLISTFORMATS):   by fmtname rank;
MPRINT(GADAMCDLISTFORMATS):   run;

NOTE: There were 20 observations read from the data set WORK.FMTDSET2.
NOTE: The data set WORK.FMTDSET has 20 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMCDLISTFORMATS):   proc format cntlin=fmtdset cntlout=cdl_formats;
NOTE: Format $ETHNICCL has been output.
NOTE: Format $NYCL has been output.
NOTE: Format $RACECL has been output.
NOTE: Format $SEXCL has been output.
NOTE: Format $TIMEUCL has been output.
MPRINT(GADAMCDLISTFORMATS):   run;

NOTE: PROCEDURE FORMAT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds

NOTE: The data set WORK.CDL_FORMATS has 20 observations and 21 variables.
NOTE: There were 20 observations read from the data set WORK.FMTDSET.

MPRINT(GADAMREADSPECS):  ;
MAUTOCOMPLOC:  The autocall macro GADAMDEPENDENCYCHECK is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/gadam/_library/gadamdependencycheck.sas.
MPRINT(GADAMDEPENDENCYCHECK):   data alldependencies (drop=i);
MPRINT(GADAMDEPENDENCYCHECK):   set adslspec (where=( not missing(dependency) ));
MPRINT(GADAMDEPENDENCYCHECK):   _osortorder=_n_;
The SAS System

MPRINT(GADAMDEPENDENCYCHECK):   count_dependency = countc(dependency, ',')+1;
MPRINT(GADAMDEPENDENCYCHECK):   length tocheck memname contname valname $32;
MPRINT(GADAMDEPENDENCYCHECK):   do i = 1 to count_dependency;
MPRINT(GADAMDEPENDENCYCHECK):   if countc(dependency,'.') lt 1 then put 'W' 'ARNING: dependency need to be a comma separated list of dataset.variable values ' dependency;
MPRINT(GADAMDEPENDENCYCHECK):   tocheck = scan(dependency,i,',');
MPRINT(GADAMDEPENDENCYCHECK):   memname = strip(upcase(scan(tocheck,1,'.')));
MPRINT(GADAMDEPENDENCYCHECK):   contname = strip(upcase(scan(tocheck,2,'.')));
MPRINT(GADAMDEPENDENCYCHECK):   valname='';
MPRINT(GADAMDEPENDENCYCHECK):   if index(upcase(memname),'SUPP')>0 and countc(tocheck,'.')=2 then valname = strip(upcase(scan(tocheck,3,'.')));
MPRINT(GADAMDEPENDENCYCHECK):   output;
The SAS System

MPRINT(GADAMDEPENDENCYCHECK):   end;
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: There were 52 observations read from the data set WORK.ADSLSPEC.
      WHERE not MISSING(dependency);
NOTE: The data set WORK.ALLDEPENDENCIES has 87 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   proc sort data=alldependencies;
MPRINT(GADAMDEPENDENCYCHECK):   by memname contname valname;
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: There were 87 observations read from the data set WORK.ALLDEPENDENCIES.
NOTE: The data set WORK.ALLDEPENDENCIES has 87 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   proc sort data=alldependencies (keep=name dependency tocheck memname contname valname) out=checkdset ;
MPRINT(GADAMDEPENDENCYCHECK):   by memname contname valname;
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 87 observations read from the data set WORK.ALLDEPENDENCIES.
NOTE: The data set WORK.CHECKDSET has 87 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(GADAMDEPENDENCYCHECK):   proc contents data=sdtm._all_ out=allsdtm (keep=memname name rename=(name=contname)) noprint;
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: The data set WORK.ALLSDTM has 875 observations and 2 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.02 seconds
      cpu time            0.02 seconds


MPRINT(GADAMDEPENDENCYCHECK):   proc sort data=allsdtm;
MPRINT(GADAMDEPENDENCYCHECK):   by memname contname;
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: There were 875 observations read from the data set WORK.ALLSDTM.
The SAS System

NOTE: The data set WORK.ALLSDTM has 875 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   data this (drop=sourceexists) suppxx adxx (drop=sourceexists) exists;
MPRINT(GADAMDEPENDENCYCHECK):   merge checkdset (in=a) allsdtm (in=b);
The SAS System

MPRINT(GADAMDEPENDENCYCHECK):   by memname contname;
MPRINT(GADAMDEPENDENCYCHECK):   if a;
MPRINT(GADAMDEPENDENCYCHECK):   length sourceexists 8;
MPRINT(GADAMDEPENDENCYCHECK):   if b then sourceexists=1;
MPRINT(GADAMDEPENDENCYCHECK):   if b and index(upcase(memname),'SUPP')>0 and contname="QNAM" and valname ne '' then output suppxx;
MPRINT(GADAMDEPENDENCYCHECK):   else if not b and strip(upcase(memname))=strip("ADSL") then output this;
MPRINT(GADAMDEPENDENCYCHECK):   else if not b and substr(upcase(memname),1,2)="AD" then output adxx;
MPRINT(GADAMDEPENDENCYCHECK):   else output exists;
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: There were 87 observations read from the data set WORK.CHECKDSET.
NOTE: There were 875 observations read from the data set WORK.ALLSDTM.
NOTE: The data set WORK.THIS has 8 observations and 6 variables.
NOTE: The data set WORK.SUPPXX has 0 observations and 7 variables.
NOTE: The data set WORK.ADXX has 0 observations and 6 variables.
NOTE: The data set WORK.EXISTS has 79 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   proc sql noprint;
MPRINT(GADAMDEPENDENCYCHECK):   select count(distinct memname) into :nsuppdomain from suppxx;
MPRINT(GADAMDEPENDENCYCHECK):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


nsuppdomain=0
MPRINT(GADAMDEPENDENCYCHECK):   data suppxx;
MPRINT(GADAMDEPENDENCYCHECK):   set suppxx;
MPRINT(GADAMDEPENDENCYCHECK):   sourceexists=.;
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: There were 0 observations read from the data set WORK.SUPPXX.
NOTE: The data set WORK.SUPPXX has 0 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(GADAMDEPENDENCYCHECK):   proc sql noprint;
MPRINT(GADAMDEPENDENCYCHECK):   select count(distinct memname) into :nbadxx from adxx;
MPRINT(GADAMDEPENDENCYCHECK):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


The SAS System

NBADXX=0
MPRINT(GADAMDEPENDENCYCHECK):   data _null_;
MPRINT(GADAMDEPENDENCYCHECK):   set this end=last;
MPRINT(GADAMDEPENDENCYCHECK):   if last then call symputx('nbthis',strip(put(_n_,8.)));
MPRINT(GADAMDEPENDENCYCHECK):   run;
The SAS System

NOTE: There were 8 observations read from the data set WORK.THIS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   **add sourceexists for vars dependent on other derived vars within same domain ;
MAUTOCOMPLOC:  The autocall macro GADAMDEPENDENCYWITHIN is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/gadam/_library/gadamdependencywithin.sas.
MPRINT(GADAMDEPENDENCYWITHIN):   proc sql noprint;
MPRINT(GADAMDEPENDENCYWITHIN):   select distinct domain into: dom from alldependencies;
MPRINT(GADAMDEPENDENCYWITHIN):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYWITHIN):   data _specs1 ;
MPRINT(GADAMDEPENDENCYWITHIN):   set alldependencies ;
MPRINT(GADAMDEPENDENCYWITHIN):   run;

NOTE: There were 87 observations read from the data set WORK.ALLDEPENDENCIES.
NOTE: The data set WORK._SPECS1 has 87 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYWITHIN):   proc sql noprint;
MPRINT(GADAMDEPENDENCYWITHIN):   create table _specs2 as select distinct domain , name , memname , contname from _specs1 ;
NOTE: Table WORK._SPECS2 created, with 87 rows and 4 columns.

MPRINT(GADAMDEPENDENCYWITHIN):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYWITHIN):   data _depcheck1 ;
MPRINT(GADAMDEPENDENCYWITHIN):   if _n_ = 1 then do ;
MPRINT(GADAMDEPENDENCYWITHIN):   dcl hash vord (dataset:'_specs2' , multidata: "Y") ;
MPRINT(GADAMDEPENDENCYWITHIN):   vord.definekey ("name") ;
MPRINT(GADAMDEPENDENCYWITHIN):   vord.definedata ( "contname" , "memname" ) ;
MPRINT(GADAMDEPENDENCYWITHIN):   vord.definedone ();
MPRINT(GADAMDEPENDENCYWITHIN):   end;
MPRINT(GADAMDEPENDENCYWITHIN):   set _specs2 (where=( strip(memname) = strip(domain) )) ;
MPRINT(GADAMDEPENDENCYWITHIN):   by name ;
MPRINT(GADAMDEPENDENCYWITHIN):   length stack alldep $ 500 var1 $ 8 ;
MPRINT(GADAMDEPENDENCYWITHIN):   retain alldep ;
MPRINT(GADAMDEPENDENCYWITHIN):   retain _abort 0;
MPRINT(GADAMDEPENDENCYWITHIN):   if first.name then alldep = '' ;
MPRINT(GADAMDEPENDENCYWITHIN):   stack = contname ;
The SAS System

MPRINT(GADAMDEPENDENCYWITHIN):   alldep = catx(' ' , alldep, contname ) ;
MPRINT(GADAMDEPENDENCYWITHIN):   s = 0;
MPRINT(GADAMDEPENDENCYWITHIN):   **resolve lineage and output all dependent variables that are derived vars within domain ;
MPRINT(GADAMDEPENDENCYWITHIN):   do while ( stack ne '' and _abort = 0 ) ;
The SAS System

MPRINT(GADAMDEPENDENCYWITHIN):   put s= name = var1 = stack = ;
MPRINT(GADAMDEPENDENCYWITHIN):   var1 = strip(scan(stack,1,' ') );
MPRINT(GADAMDEPENDENCYWITHIN):   s = s+ 1 ;
MPRINT(GADAMDEPENDENCYWITHIN):   if s > 50 then do;
MPRINT(GADAMDEPENDENCYWITHIN):   put 'WARN' 'ING: Check loop exit condition ' ;
MPRINT(GADAMDEPENDENCYWITHIN):   leave ;
MPRINT(GADAMDEPENDENCYWITHIN):   end;
MPRINT(GADAMDEPENDENCYWITHIN):   if strip(memname) = strip(domain) then output;
MPRINT(GADAMDEPENDENCYWITHIN):   r = 0 ;
MPRINT(GADAMDEPENDENCYWITHIN):   do _find = vord.find(key: var1) by 0 while(_find = 0 ) ;
MPRINT(GADAMDEPENDENCYWITHIN):   r = r + 1 ;
MPRINT(GADAMDEPENDENCYWITHIN):   if r > 50 then do;
MPRINT(GADAMDEPENDENCYWITHIN):   put 'WARN' 'ING: Check loop exit condition ' ;
MPRINT(GADAMDEPENDENCYWITHIN):   leave ;
MPRINT(GADAMDEPENDENCYWITHIN):   end;
MPRINT(GADAMDEPENDENCYWITHIN):   if strip(contname) = name then do;
MPRINT(GADAMDEPENDENCYWITHIN):   put 'ERR' 'OR:  Circular logic : ' name= contname= var1= ;
MPRINT(GADAMDEPENDENCYWITHIN):   _abort = 1 ;
MPRINT(GADAMDEPENDENCYWITHIN):   _errcode = 'ER' !! 'ROR: Circular logic ' !! strip(var1) ;
MPRINT(GADAMDEPENDENCYWITHIN):   output;
MPRINT(GADAMDEPENDENCYWITHIN):   leave ;
MPRINT(GADAMDEPENDENCYWITHIN):   end;
MPRINT(GADAMDEPENDENCYWITHIN):   if memname = domain then do ;
MPRINT(GADAMDEPENDENCYWITHIN):   output ;
MPRINT(GADAMDEPENDENCYWITHIN):   **add dependent var to stack if derived within domain ;
MPRINT(GADAMDEPENDENCYWITHIN):   stack = catx(' ' , stack, contname ) ;
MPRINT(GADAMDEPENDENCYWITHIN):   end;
MPRINT(GADAMDEPENDENCYWITHIN):   _find = vord.find_next();
MPRINT(GADAMDEPENDENCYWITHIN):   end;
MPRINT(GADAMDEPENDENCYWITHIN):   if _find ne 0 and r= 0 then do;
MPRINT(GADAMDEPENDENCYWITHIN):   put 'ERR' 'OR:  Variable not found : ' name= contname= var1= ;
MPRINT(GADAMDEPENDENCYWITHIN):   _errcode = 'ER' !! 'ROR: Variable not found ' !! strip(var1) ;
MPRINT(GADAMDEPENDENCYWITHIN):   _abort = 1;
MPRINT(GADAMDEPENDENCYWITHIN):   output;
MPRINT(GADAMDEPENDENCYWITHIN):   leave ;
MPRINT(GADAMDEPENDENCYWITHIN):   end;
MPRINT(GADAMDEPENDENCYWITHIN):   **move to next car on stack ;
MPRINT(GADAMDEPENDENCYWITHIN):   if scan(stack,2, ' ') ne ' ' then stack = substr( strip(stack) , index(stack,' ')) ;
MPRINT(GADAMDEPENDENCYWITHIN):   else stack = '' ;
MPRINT(GADAMDEPENDENCYWITHIN):   end;
MPRINT(GADAMDEPENDENCYWITHIN):   run;

NOTE: There were 87 observations read from the data set WORK._SPECS2.
s=0 name=LSTCNDRV var1=  stack=RFPENDTC
s=0 name=LSTCNDT var1=  stack=RFPENDTC
s=0 name=LSTCNSRC var1=  stack=RFPENDTC
s=0 name=RFPENDDIF var1=  stack=RFPENDTC
s=0 name=SAFFL var1=  stack=TRTSDT
s=0 name=TRTDURD var1=  stack=TRTEDT
s=0 name=TRTDURD var1=  stack=TRTSDT
s=0 name=TSEQAG1 var1=  stack=TRTSEQA
NOTE: There were 8 observations read from the data set WORK._SPECS2.
      WHERE STRIP(memname)=STRIP(domain);
NOTE: The data set WORK._DEPCHECK1 has 8 observations and 12 variables.
The SAS System

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
The SAS System

      cpu time            0.01 seconds


MPRINT(GADAMDEPENDENCYWITHIN):   **count distinct dependent vars;
MPRINT(GADAMDEPENDENCYWITHIN):   proc sql noprint;
MPRINT(GADAMDEPENDENCYWITHIN):   create table _depcheck2 as select name , count(distinct contname) as deprank from _depcheck1 group by name;
NOTE: Table WORK._DEPCHECK2 created, with 7 rows and 2 columns.

MPRINT(GADAMDEPENDENCYWITHIN):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYWITHIN):   **log messages ;
MPRINT(GADAMDEPENDENCYWITHIN):   data _null_ ;
MPRINT(GADAMDEPENDENCYWITHIN):   set _depcheck1 (where=( index(_errcode , 'ER'||'ROR' ) ));
MPRINT(GADAMDEPENDENCYWITHIN):   call execute('%l4g_qcfail_nc('||quote(strip(_errcode))||');');
MPRINT(GADAMDEPENDENCYWITHIN):   run;

NOTE: There were 0 observations read from the data set WORK._DEPCHECK1.
      WHERE INDEX(_errcode, 'ER'||'ROR');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYWITHIN):   data _depspecs ;
MPRINT(GADAMDEPENDENCYWITHIN):   set _depcheck2 ;
MPRINT(GADAMDEPENDENCYWITHIN):   run;

NOTE: There were 7 observations read from the data set WORK._DEPCHECK2.
NOTE: The data set WORK._DEPSPECS has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   ;
MPRINT(GADAMDEPENDENCYCHECK):   proc sort data=exists nodupkey;
MPRINT(GADAMDEPENDENCYCHECK):   by memname contname valname sourceexists;
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: There were 79 observations read from the data set WORK.EXISTS.
NOTE: 47 observations with duplicate key values were deleted.
NOTE: The data set WORK.EXISTS has 32 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   proc sort data=alldependencies ;
MPRINT(GADAMDEPENDENCYCHECK):   by memname contname valname;
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: Input data set is already sorted, no sorting done.
The SAS System
The SAS System

NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   data alldependencies;
MPRINT(GADAMDEPENDENCYCHECK):   merge alldependencies (in=a) exists (in=b keep= memname contname valname sourceexists);
MPRINT(GADAMDEPENDENCYCHECK):   by memname contname valname;
MPRINT(GADAMDEPENDENCYCHECK):   if a;
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: There were 87 observations read from the data set WORK.ALLDEPENDENCIES.
NOTE: There were 32 observations read from the data set WORK.EXISTS.
NOTE: The data set WORK.ALLDEPENDENCIES has 87 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(GADAMDEPENDENCYCHECK):   **merge sourceexists for variables derived from aother derived variables;
MPRINT(GADAMDEPENDENCYCHECK):   proc sql noprint;
MPRINT(GADAMDEPENDENCYCHECK):   create table alldep2 as select a.*, b.deprank from alldependencies a left join _depspecs b on a.name=b.name;
NOTE: Table WORK.ALLDEP2 created, with 87 rows and 23 columns.

MPRINT(GADAMDEPENDENCYCHECK):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   data alldependencies ;
MPRINT(GADAMDEPENDENCYCHECK):   set alldep2 ;
MPRINT(GADAMDEPENDENCYCHECK):   if sourceexists = . and strip(upcase(memname))= strip("ADSL") then sourceexists = deprank + 1 ;
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: There were 87 observations read from the data set WORK.ALLDEP2.
NOTE: The data set WORK.ALLDEPENDENCIES has 87 observations and 23 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   proc sql;
MPRINT(GADAMDEPENDENCYCHECK):   create table _temp as select distinct name, count_dependency, memname, contname, valname, sourceexists from alldependencies;
NOTE: Table WORK._TEMP created, with 87 rows and 6 columns.

MPRINT(GADAMDEPENDENCYCHECK):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   data _temp (drop=memname contname valname sourceexists);
MPRINT(GADAMDEPENDENCYCHECK):   set _temp;
MPRINT(GADAMDEPENDENCYCHECK):   by name count_dependency memname contname valname sourceexists;
MPRINT(GADAMDEPENDENCYCHECK):   length count_dependency_exist 3;
MPRINT(GADAMDEPENDENCYCHECK):   retain count_dependency_exist;
MPRINT(GADAMDEPENDENCYCHECK):   if first.name then count_dependency_exist=0;
The SAS System

The SAS System

MPRINT(GADAMDEPENDENCYCHECK):   if sourceexists gt 0 then count_dependency_exist+1;
MPRINT(GADAMDEPENDENCYCHECK):   if last.name;
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: There were 87 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 52 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   proc sql undo_policy=none;
MPRINT(GADAMDEPENDENCYCHECK):   create table alldependencies as select distinct a.*, b.count_dependency_exist from alldependencies as a left join _temp as b on a.name=b.name;
NOTE: Table WORK.ALLDEPENDENCIES created, with 87 rows and 24 columns.

MPRINT(GADAMDEPENDENCYCHECK):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   proc sort data=alldependencies out=adslspec (drop=_osortorder);
MPRINT(GADAMDEPENDENCYCHECK):   by _osortorder;
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: There were 87 observations read from the data set WORK.ALLDEPENDENCIES.
NOTE: The data set WORK.ADSLSPEC has 87 observations and 23 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMREADSPECS):  ;
MPRINT(GADAMREADSPECS):   data misssource adslspec;
MPRINT(GADAMREADSPECS):   set adslspec;
MPRINT(GADAMREADSPECS):   *if not missing(sourceexists) then output &dsout;
MPRINT(GADAMREADSPECS):   if count_dependency ^= count_dependency_exist then output misssource;
MPRINT(GADAMREADSPECS):   output adslspec;
MPRINT(GADAMREADSPECS):   run;

NOTE: There were 87 observations read from the data set WORK.ADSLSPEC.
NOTE: The data set WORK.MISSSOURCE has 0 observations and 23 variables.
NOTE: The data set WORK.ADSLSPEC has 87 observations and 23 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(GADAMREADSPECS):   data adslspec ;
MPRINT(GADAMREADSPECS):   set adslspec ;
MPRINT(GADAMREADSPECS):   _osortorder=_n_;
MPRINT(GADAMREADSPECS):   run;

NOTE: There were 87 observations read from the data set WORK.ADSLSPEC.
NOTE: The data set WORK.ADSLSPEC has 87 observations and 24 variables.
NOTE: DATA statement used (Total process time):
The SAS System

      real time           0.00 seconds
      cpu time            0.00 seconds
The SAS System



MPRINT(GADAMREADSPECS):   proc sort data=adslspec ;
MPRINT(GADAMREADSPECS):   by name sourceexists ;
MPRINT(GADAMREADSPECS):   run;

NOTE: There were 87 observations read from the data set WORK.ADSLSPEC.
NOTE: The data set WORK.ADSLSPEC has 87 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMREADSPECS):   data adslspec (drop=tocheck memname contname valname);
MPRINT(GADAMREADSPECS):   set adslspec ;
MPRINT(GADAMREADSPECS):   by name ;
MPRINT(GADAMREADSPECS):   if last.name ;
MPRINT(GADAMREADSPECS):   run;

NOTE: There were 87 observations read from the data set WORK.ADSLSPEC.
NOTE: The data set WORK.ADSLSPEC has 52 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMREADSPECS):   proc sort data=adslspec ;
MPRINT(GADAMREADSPECS):   by _osortorder ;
MPRINT(GADAMREADSPECS):   run;

NOTE: There were 52 observations read from the data set WORK.ADSLSPEC.
NOTE: The data set WORK.ADSLSPEC has 52 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMREADSPECS):   data _null_;
MPRINT(GADAMREADSPECS):   set misssource;
MPRINT(GADAMREADSPECS):   length t1 $1000;
MPRINT(GADAMREADSPECS):   *- jbodart - 2022-09-30 - allow for source and name variables to contain embedded quotes -*;
MPRINT(GADAMREADSPECS):   if strip(lowcase(core))="req" then t1 = quote('no source '||strip(source)||" found for required variable "||strip(name));
MPRINT(GADAMREADSPECS):   else t1 = quote('no source '||strip(source)||" found for variable "||strip(name));
MPRINT(GADAMREADSPECS):   if strip(lowcase(core))="req" then call execute('%l4g_qcfail_crit('||strip(t1)||');');
MPRINT(GADAMREADSPECS):   else call execute('%l4g_qcfail_nc('||strip(t1)||');');
MPRINT(GADAMREADSPECS):   run;

NOTE: There were 0 observations read from the data set WORK.MISSSOURCE.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(ADSL):  ;
The SAS System

MPRINT(LOG4GADAM):   filename rev1 
("/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/log/monitor_adsl.txt");
MPRINT(LOG4SAS):   ;
MPRINT(LOG4GADAM):  ;
The SAS System

MPRINT(LOG4GADAM):  ;
MPRINT(LOG4GADAM):  ;
MPRINT(GADAMREADSPECS):  ;
MPRINT(GADAMREADSPECS):   filename adamspec "/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/gadam/metadata/argx-adam1.2.xlsx
";
Local ADaM Specs file: _ADAMSPEC_SP=argx-adam1.2_sp.xlsx
Local file does not exist: 
/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/documents/argx-adam1.2_sp.xl
sx
MPRINT(GADAMREADSPECS):   PROC IMPORT OUT= adslkeys (where=(upcase(domain)="ADSL")) DATAFILE= adamspec DBMS=xlsx REPLACE;
MPRINT(GADAMREADSPECS):   RXLX;
MPRINT(GADAMREADSPECS):   RANGE="domainList$A2:";
MPRINT(GADAMREADSPECS):   GETNAMES=YES;
MPRINT(GADAMREADSPECS):   RUN;

NOTE: One or more variables were converted because the data type is not supported by the V9 engine. For more details, run with options MSGLEVEL=I.
NOTE: The import data set has 13 observations and 5 variables.
NOTE: WORK.ADSLKEYS data set was successfully created.
NOTE: PROCEDURE IMPORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds


MPRINT(GADAMREADSPECS):   data _null_;
MPRINT(GADAMREADSPECS):   set adslkeys;
MPRINT(GADAMREADSPECS):   commas = countc(keys,',') + 1;
MPRINT(GADAMREADSPECS):   call symputx('nb_keys',strip(put(commas,8.)), 'G');
MPRINT(GADAMREADSPECS):   do i = 1 to commas;
MPRINT(GADAMREADSPECS):   key = scan(keys,i,',');
MPRINT(GADAMREADSPECS):   call symputx('key'||strip(put(i,8.)),strip(key), 'G');
MPRINT(GADAMREADSPECS):   output;
MPRINT(GADAMREADSPECS):   end;
MPRINT(GADAMREADSPECS):   run;

NOTE: There were 1 observations read from the data set WORK.ADSLKEYS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMREADSPECS):   PROC IMPORT OUT= adslspec (rename=(type=ctype length=clength format=cformat)) DATAFILE= adamspec DBMS=xlsx REPLACE;
MPRINT(GADAMREADSPECS):   RXLX;
MPRINT(GADAMREADSPECS):   RANGE="ADSL$2A:";
MPRINT(GADAMREADSPECS):   GETNAMES=YES;
MPRINT(GADAMREADSPECS):   RUN;

NOTE: One or more variables were converted because the data type is not supported by the V9 engine. For more details, run with options MSGLEVEL=I.
NOTE: The import data set has 163 observations and 15 variables.
NOTE: WORK.ADSLSPEC data set was successfully created.
NOTE: PROCEDURE IMPORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.06 seconds
The SAS System



MPRINT(GADAMREADSPECS):   data adslspec;
MPRINT(GADAMREADSPECS):   set adslspec;
MPRINT(GADAMREADSPECS):   where upcase(include)="Y";
MPRINT(GADAMREADSPECS):   run;

NOTE: There were 52 observations read from the data set WORK.ADSLSPEC.
The SAS System

      WHERE UPCASE(include)='Y';
NOTE: The data set WORK.ADSLSPEC has 52 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMREADSPECS):   proc sql noprint;
MPRINT(GADAMREADSPECS):   select count(distinct codelist) into :cdlistn from adslspec where codelist ne '';
MPRINT(GADAMREADSPECS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMREADSPECS):   proc sql noprint;
MPRINT(GADAMREADSPECS):   select distinct compress(codelist,'','kn') into :cdlist separated by '","' from adslspec;
MPRINT(GADAMREADSPECS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMREADSPECS):   PROC IMPORT OUT= adslcdlist0 (rename=(fmtname=ctnam cdname=ctlnam code=rank value=code value_label=decode) drop=ctlink IG1_1) DATAFILE= adamspec DBMS=xlsx
 REPLACE;
MPRINT(GADAMREADSPECS):   RXLX;
MPRINT(GADAMREADSPECS):   RANGE="CodeList$A2:";
MPRINT(GADAMREADSPECS):   GETNAMES=YES;
MPRINT(GADAMREADSPECS):   RUN;

NOTE:    Variable Name Change.  IG1.1 -> IG1_1                           
NOTE: One or more variables were converted because the data type is not supported by the V9 engine. For more details, run with options MSGLEVEL=I.
NOTE: The import data set has 1105 observations and 7 variables.
NOTE: WORK.ADSLCDLIST0 data set was successfully created.
NOTE: PROCEDURE IMPORT used (Total process time):
      real time           0.10 seconds
      cpu time            0.11 seconds


MPRINT(GADAMREADSPECS):   proc sql noprint;
MPRINT(GADAMREADSPECS):   create table adslcdlist as select * from adslcdlist0 where ctnam in ("","ETHNIC","NY","RACE","SBJTSTAT","SEX","TIMEU");
NOTE: Table WORK.ADSLCDLIST created, with 25 rows and 5 columns.

NOTE: PROC SQL statements are executed immediately; The RUN statement has no effect.
MPRINT(GADAMREADSPECS):   run;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
The SAS System



MPRINT(GADAMREADSPECS):   proc sql noprint;
MPRINT(GADAMREADSPECS):   select count(ctnam) into :checkn from adslcdlist;
MPRINT(GADAMREADSPECS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
The SAS System

MPRINT(BUILDMSG):   msg=strip("Codelist tab successfully read in for adsl.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |Codelist tab successfully read in for adsl.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMREADSPECS):  ;
MPRINT(GADAMREADSPECS):   proc sql noprint;
MPRINT(GADAMREADSPECS):   select distinct count(distinct codelist), compress(codelist,'','kn') into :miscdlistn, :miscdlist separated by ' ' from adslspec where compress(codelist,'
','kn') not in 
(select distinct ctnam from adslcdlist);
NOTE: The query requires remerging summary statistics back with the original data.
NOTE: PROC SQL statements are executed immediately; The RUN statement has no effect.
MPRINT(GADAMREADSPECS):   run;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(GADAMCDLISTFORMATS):   data def_term_num (rename=(ctnam=ctnamn ctlnam=ctlnamn code=coden decode=decoden rank=rankn ctnam_merge=ctnam_mergen)) def_term_rest;
MPRINT(GADAMCDLISTFORMATS):   set adslcdlist (keep=ct: code decode rank);
MPRINT(GADAMCDLISTFORMATS):   if substr(ctnam,length(ctnam)-1,2)='CD' then ctnam_merge=strip(substr(ctnam, 1, length(ctnam)-2));
MPRINT(GADAMCDLISTFORMATS):   else ctnam_merge=ctnam;
MPRINT(GADAMCDLISTFORMATS):   if index(ctlnam,'(N)')>0 then do;
MPRINT(GADAMCDLISTFORMATS):   ctnam_merge=strip(substr(ctnam, 1, length(ctnam)-1));
MPRINT(GADAMCDLISTFORMATS):   output def_term_num;
MPRINT(GADAMCDLISTFORMATS):   end;
MPRINT(GADAMCDLISTFORMATS):   else output def_term_rest;
MPRINT(GADAMCDLISTFORMATS):   run;

NOTE: There were 25 observations read from the data set WORK.ADSLCDLIST.
NOTE: The data set WORK.DEF_TERM_NUM has 0 observations and 6 variables.
NOTE: The data set WORK.DEF_TERM_REST has 25 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
The SAS System


MPRINT(GADAMCDLISTFORMATS):   proc sql noprint;
MPRINT(GADAMCDLISTFORMATS):   create table def_term as select * from def_term_num a full join def_term_rest b on a.ctnam_mergen=b.ctnam_merge and (a.decoden=b.decode or a.decoden=b
.code) order by 
ctnamn, ctnam, rank;
NOTE: Table WORK.DEF_TERM created, with 25 rows and 12 columns.

MPRINT(GADAMCDLISTFORMATS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMCDLISTFORMATS):   data def_term1;
MPRINT(GADAMCDLISTFORMATS):   set def_term;
The SAS System

MPRINT(GADAMCDLISTFORMATS):   if code ne '' and decode ='' then decode=code;
MPRINT(GADAMCDLISTFORMATS):   output;
MPRINT(GADAMCDLISTFORMATS):   if ctnamn ne '' then do;
MPRINT(GADAMCDLISTFORMATS):   ctnam=ctnamn;
MPRINT(GADAMCDLISTFORMATS):   ctlnam=ctlnamn;
MPRINT(GADAMCDLISTFORMATS):   ctlnamn='';
MPRINT(GADAMCDLISTFORMATS):   code=coden;
MPRINT(GADAMCDLISTFORMATS):   decode=decoden;
MPRINT(GADAMCDLISTFORMATS):   output;
MPRINT(GADAMCDLISTFORMATS):   end;
MPRINT(GADAMCDLISTFORMATS):   drop ctnam_merge ctnamn;
MPRINT(GADAMCDLISTFORMATS):   run;

NOTE: There were 25 observations read from the data set WORK.DEF_TERM.
NOTE: The data set WORK.DEF_TERM1 has 25 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(GADAMCDLISTFORMATS):   data def_term2;
MPRINT(GADAMCDLISTFORMATS):   set def_term1;
MPRINT(GADAMCDLISTFORMATS):   if ctnam='' then delete;
MPRINT(GADAMCDLISTFORMATS):   run;

NOTE: There were 25 observations read from the data set WORK.DEF_TERM1.
NOTE: The data set WORK.DEF_TERM2 has 25 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMCDLISTFORMATS):   proc sort data=def_term2 out=def_term2s;
MPRINT(GADAMCDLISTFORMATS):   by ctnam;
MPRINT(GADAMCDLISTFORMATS):   run;

NOTE: There were 25 observations read from the data set WORK.DEF_TERM2.
NOTE: The data set WORK.DEF_TERM2S has 25 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
The SAS System



MPRINT(GADAMCDLISTFORMATS):   data fmtdset0;
MPRINT(GADAMCDLISTFORMATS):   length type $1.;
MPRINT(GADAMCDLISTFORMATS):   set def_term2s;
MPRINT(GADAMCDLISTFORMATS):   if index(ctlnam,'(N)')>0 then do;
MPRINT(GADAMCDLISTFORMATS):   type='N';
MPRINT(GADAMCDLISTFORMATS):   fmtname=compress(ctnam,' ','')||'NL';
MPRINT(GADAMCDLISTFORMATS):   end;
MPRINT(GADAMCDLISTFORMATS):   else do;
MPRINT(GADAMCDLISTFORMATS):   type='C';
MPRINT(GADAMCDLISTFORMATS):   fmtname=compress(ctnam,' ','')||'CL';
MPRINT(GADAMCDLISTFORMATS):   end;
MPRINT(GADAMCDLISTFORMATS):   output;
MPRINT(GADAMCDLISTFORMATS):   if index(ctlnamn,'(N)')>0 then do;
MPRINT(GADAMCDLISTFORMATS):   fmtname=compress(ctnam,' ','')||'CN';
MPRINT(GADAMCDLISTFORMATS):   decode=coden;
The SAS System

MPRINT(GADAMCDLISTFORMATS):   type='I';
MPRINT(GADAMCDLISTFORMATS):   output;
MPRINT(GADAMCDLISTFORMATS):   end;
MPRINT(GADAMCDLISTFORMATS):   run;

NOTE: There were 25 observations read from the data set WORK.DEF_TERM2S.
NOTE: The data set WORK.FMTDSET0 has 25 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMCDLISTFORMATS):   data fmtdset1;
MPRINT(GADAMCDLISTFORMATS):   set fmtdset0;
MPRINT(GADAMCDLISTFORMATS):   start=strip(code);
MPRINT(GADAMCDLISTFORMATS):   label=strip(decode);
MPRINT(GADAMCDLISTFORMATS):   hlo='';
MPRINT(GADAMCDLISTFORMATS):   keep start label type fmtname rank hlo;
MPRINT(GADAMCDLISTFORMATS):   if start=label then delete;
MPRINT(GADAMCDLISTFORMATS):   run;

NOTE: There were 25 observations read from the data set WORK.FMTDSET0.
NOTE: The data set WORK.FMTDSET1 has 20 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(GADAMCDLISTFORMATS):   proc sort data=fmtdset1 nodupkey;
MPRINT(GADAMCDLISTFORMATS):   by _all_;
MPRINT(GADAMCDLISTFORMATS):   run;

NOTE: There were 20 observations read from the data set WORK.FMTDSET1.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK.FMTDSET1 has 20 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
The SAS System


MPRINT(GADAMCDLISTFORMATS):   proc sort data=fmtdset1 out=fmtdset2;
MPRINT(GADAMCDLISTFORMATS):   by fmtname start rank;
MPRINT(GADAMCDLISTFORMATS):   run;

NOTE: There were 20 observations read from the data set WORK.FMTDSET1.
NOTE: The data set WORK.FMTDSET2 has 20 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMCDLISTFORMATS):   data fmtdset2;
MPRINT(GADAMCDLISTFORMATS):   set fmtdset2;
MPRINT(GADAMCDLISTFORMATS):   by fmtname start rank;
MPRINT(GADAMCDLISTFORMATS):   if first.start;
MPRINT(GADAMCDLISTFORMATS):   run;

NOTE: There were 20 observations read from the data set WORK.FMTDSET2.
The SAS System

NOTE: The data set WORK.FMTDSET2 has 20 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMCDLISTFORMATS):   proc sort data=fmtdset2 out=fmtdset (drop=rank);
MPRINT(GADAMCDLISTFORMATS):   by fmtname rank;
MPRINT(GADAMCDLISTFORMATS):   run;

NOTE: There were 20 observations read from the data set WORK.FMTDSET2.
NOTE: The data set WORK.FMTDSET has 20 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMCDLISTFORMATS):   proc format cntlin=fmtdset cntlout=cdl_formats;
NOTE: Format $ETHNICCL is already on the library WORK.FORMATS.
NOTE: Format $ETHNICCL has been output.
NOTE: Format $NYCL is already on the library WORK.FORMATS.
NOTE: Format $NYCL has been output.
NOTE: Format $RACECL is already on the library WORK.FORMATS.
NOTE: Format $RACECL has been output.
NOTE: Format $SEXCL is already on the library WORK.FORMATS.
NOTE: Format $SEXCL has been output.
NOTE: Format $TIMEUCL is already on the library WORK.FORMATS.
NOTE: Format $TIMEUCL has been output.
MPRINT(GADAMCDLISTFORMATS):   run;

NOTE: PROCEDURE FORMAT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds

NOTE: The data set WORK.CDL_FORMATS has 20 observations and 21 variables.
NOTE: There were 20 observations read from the data set WORK.FMTDSET.
The SAS System

MPRINT(GADAMREADSPECS):  ;
MPRINT(GADAMDEPENDENCYCHECK):   data alldependencies (drop=i);
MPRINT(GADAMDEPENDENCYCHECK):   set adslspec (where=( not missing(dependency) ));
MPRINT(GADAMDEPENDENCYCHECK):   _osortorder=_n_;
MPRINT(GADAMDEPENDENCYCHECK):   count_dependency = countc(dependency, ',')+1;
MPRINT(GADAMDEPENDENCYCHECK):   length tocheck memname contname valname $32;
MPRINT(GADAMDEPENDENCYCHECK):   do i = 1 to count_dependency;
MPRINT(GADAMDEPENDENCYCHECK):   if countc(dependency,'.') lt 1 then put 'W' 'ARNING: dependency need to be a comma separated list of dataset.variable values ' dependency;
MPRINT(GADAMDEPENDENCYCHECK):   tocheck = scan(dependency,i,',');
MPRINT(GADAMDEPENDENCYCHECK):   memname = strip(upcase(scan(tocheck,1,'.')));
MPRINT(GADAMDEPENDENCYCHECK):   contname = strip(upcase(scan(tocheck,2,'.')));
MPRINT(GADAMDEPENDENCYCHECK):   valname='';
MPRINT(GADAMDEPENDENCYCHECK):   if index(upcase(memname),'SUPP')>0 and countc(tocheck,'.')=2 then valname = strip(upcase(scan(tocheck,3,'.')));
MPRINT(GADAMDEPENDENCYCHECK):   output;
MPRINT(GADAMDEPENDENCYCHECK):   end;
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: There were 52 observations read from the data set WORK.ADSLSPEC.
      WHERE not MISSING(dependency);
NOTE: The data set WORK.ALLDEPENDENCIES has 87 observations and 21 variables.
NOTE: DATA statement used (Total process time):
The SAS System

      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   proc sort data=alldependencies;
MPRINT(GADAMDEPENDENCYCHECK):   by memname contname valname;
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: There were 87 observations read from the data set WORK.ALLDEPENDENCIES.
NOTE: The data set WORK.ALLDEPENDENCIES has 87 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   proc sort data=alldependencies (keep=name dependency tocheck memname contname valname) out=checkdset ;
MPRINT(GADAMDEPENDENCYCHECK):   by memname contname valname;
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 87 observations read from the data set WORK.ALLDEPENDENCIES.
NOTE: The data set WORK.CHECKDSET has 87 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   proc contents data=sdtm._all_ out=allsdtm (keep=memname name rename=(name=contname)) noprint;
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: The data set WORK.ALLSDTM has 875 observations and 2 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
The SAS System


MPRINT(GADAMDEPENDENCYCHECK):   proc sort data=allsdtm;
MPRINT(GADAMDEPENDENCYCHECK):   by memname contname;
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: There were 875 observations read from the data set WORK.ALLSDTM.
NOTE: The data set WORK.ALLSDTM has 875 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   data this (drop=sourceexists) suppxx adxx (drop=sourceexists) exists;
MPRINT(GADAMDEPENDENCYCHECK):   merge checkdset (in=a) allsdtm (in=b);
MPRINT(GADAMDEPENDENCYCHECK):   by memname contname;
MPRINT(GADAMDEPENDENCYCHECK):   if a;
MPRINT(GADAMDEPENDENCYCHECK):   length sourceexists 8;
MPRINT(GADAMDEPENDENCYCHECK):   if b then sourceexists=1;
MPRINT(GADAMDEPENDENCYCHECK):   if b and index(upcase(memname),'SUPP')>0 and contname="QNAM" and valname ne '' then output suppxx;
MPRINT(GADAMDEPENDENCYCHECK):   else if not b and strip(upcase(memname))=strip("ADSL") then output this;
MPRINT(GADAMDEPENDENCYCHECK):   else if not b and substr(upcase(memname),1,2)="AD" then output adxx;
MPRINT(GADAMDEPENDENCYCHECK):   else output exists;
MPRINT(GADAMDEPENDENCYCHECK):   run;
The SAS System


NOTE: There were 87 observations read from the data set WORK.CHECKDSET.
NOTE: There were 875 observations read from the data set WORK.ALLSDTM.
NOTE: The data set WORK.THIS has 8 observations and 6 variables.
NOTE: The data set WORK.SUPPXX has 0 observations and 7 variables.
NOTE: The data set WORK.ADXX has 0 observations and 6 variables.
NOTE: The data set WORK.EXISTS has 79 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(GADAMDEPENDENCYCHECK):   proc sql noprint;
MPRINT(GADAMDEPENDENCYCHECK):   select count(distinct memname) into :nsuppdomain from suppxx;
MPRINT(GADAMDEPENDENCYCHECK):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


nsuppdomain=0
MPRINT(GADAMDEPENDENCYCHECK):   data suppxx;
MPRINT(GADAMDEPENDENCYCHECK):   set suppxx;
MPRINT(GADAMDEPENDENCYCHECK):   sourceexists=.;
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: There were 0 observations read from the data set WORK.SUPPXX.
NOTE: The data set WORK.SUPPXX has 0 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
The SAS System

MPRINT(GADAMDEPENDENCYCHECK):   proc sql noprint;
MPRINT(GADAMDEPENDENCYCHECK):   select count(distinct memname) into :nbadxx from adxx;
MPRINT(GADAMDEPENDENCYCHECK):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NBADXX=0
MPRINT(GADAMDEPENDENCYCHECK):   data _null_;
MPRINT(GADAMDEPENDENCYCHECK):   set this end=last;
MPRINT(GADAMDEPENDENCYCHECK):   if last then call symputx('nbthis',strip(put(_n_,8.)));
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: There were 8 observations read from the data set WORK.THIS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   **add sourceexists for vars dependent on other derived vars within same domain ;
MPRINT(GADAMDEPENDENCYWITHIN):   proc sql noprint;
MPRINT(GADAMDEPENDENCYWITHIN):   select distinct domain into: dom from alldependencies;
MPRINT(GADAMDEPENDENCYWITHIN):   quit;
NOTE: PROCEDURE SQL used (Total process time):
The SAS System

      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(GADAMDEPENDENCYWITHIN):   data _specs1 ;
MPRINT(GADAMDEPENDENCYWITHIN):   set alldependencies ;
MPRINT(GADAMDEPENDENCYWITHIN):   run;

NOTE: There were 87 observations read from the data set WORK.ALLDEPENDENCIES.
NOTE: The data set WORK._SPECS1 has 87 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYWITHIN):   proc sql noprint;
MPRINT(GADAMDEPENDENCYWITHIN):   create table _specs2 as select distinct domain , name , memname , contname from _specs1 ;
NOTE: Table WORK._SPECS2 created, with 87 rows and 4 columns.

MPRINT(GADAMDEPENDENCYWITHIN):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYWITHIN):   data _depcheck1 ;
MPRINT(GADAMDEPENDENCYWITHIN):   if _n_ = 1 then do ;
MPRINT(GADAMDEPENDENCYWITHIN):   dcl hash vord (dataset:'_specs2' , multidata: "Y") ;
MPRINT(GADAMDEPENDENCYWITHIN):   vord.definekey ("name") ;
MPRINT(GADAMDEPENDENCYWITHIN):   vord.definedata ( "contname" , "memname" ) ;
MPRINT(GADAMDEPENDENCYWITHIN):   vord.definedone ();
The SAS System

MPRINT(GADAMDEPENDENCYWITHIN):   end;
MPRINT(GADAMDEPENDENCYWITHIN):   set _specs2 (where=( strip(memname) = strip(domain) )) ;
MPRINT(GADAMDEPENDENCYWITHIN):   by name ;
MPRINT(GADAMDEPENDENCYWITHIN):   length stack alldep $ 500 var1 $ 8 ;
MPRINT(GADAMDEPENDENCYWITHIN):   retain alldep ;
MPRINT(GADAMDEPENDENCYWITHIN):   retain _abort 0;
MPRINT(GADAMDEPENDENCYWITHIN):   if first.name then alldep = '' ;
MPRINT(GADAMDEPENDENCYWITHIN):   stack = contname ;
MPRINT(GADAMDEPENDENCYWITHIN):   alldep = catx(' ' , alldep, contname ) ;
MPRINT(GADAMDEPENDENCYWITHIN):   s = 0;
MPRINT(GADAMDEPENDENCYWITHIN):   **resolve lineage and output all dependent variables that are derived vars within domain ;
MPRINT(GADAMDEPENDENCYWITHIN):   do while ( stack ne '' and _abort = 0 ) ;
MPRINT(GADAMDEPENDENCYWITHIN):   put s= name = var1 = stack = ;
MPRINT(GADAMDEPENDENCYWITHIN):   var1 = strip(scan(stack,1,' ') );
MPRINT(GADAMDEPENDENCYWITHIN):   s = s+ 1 ;
MPRINT(GADAMDEPENDENCYWITHIN):   if s > 50 then do;
MPRINT(GADAMDEPENDENCYWITHIN):   put 'WARN' 'ING: Check loop exit condition ' ;
MPRINT(GADAMDEPENDENCYWITHIN):   leave ;
MPRINT(GADAMDEPENDENCYWITHIN):   end;
MPRINT(GADAMDEPENDENCYWITHIN):   if strip(memname) = strip(domain) then output;
MPRINT(GADAMDEPENDENCYWITHIN):   r = 0 ;
MPRINT(GADAMDEPENDENCYWITHIN):   do _find = vord.find(key: var1) by 0 while(_find = 0 ) ;
MPRINT(GADAMDEPENDENCYWITHIN):   r = r + 1 ;
MPRINT(GADAMDEPENDENCYWITHIN):   if r > 50 then do;
MPRINT(GADAMDEPENDENCYWITHIN):   put 'WARN' 'ING: Check loop exit condition ' ;
MPRINT(GADAMDEPENDENCYWITHIN):   leave ;
MPRINT(GADAMDEPENDENCYWITHIN):   end;
The SAS System

MPRINT(GADAMDEPENDENCYWITHIN):   if strip(contname) = name then do;
MPRINT(GADAMDEPENDENCYWITHIN):   put 'ERR' 'OR:  Circular logic : ' name= contname= var1= ;
MPRINT(GADAMDEPENDENCYWITHIN):   _abort = 1 ;
MPRINT(GADAMDEPENDENCYWITHIN):   _errcode = 'ER' !! 'ROR: Circular logic ' !! strip(var1) ;
MPRINT(GADAMDEPENDENCYWITHIN):   output;
MPRINT(GADAMDEPENDENCYWITHIN):   leave ;
MPRINT(GADAMDEPENDENCYWITHIN):   end;
MPRINT(GADAMDEPENDENCYWITHIN):   if memname = domain then do ;
MPRINT(GADAMDEPENDENCYWITHIN):   output ;
MPRINT(GADAMDEPENDENCYWITHIN):   **add dependent var to stack if derived within domain ;
MPRINT(GADAMDEPENDENCYWITHIN):   stack = catx(' ' , stack, contname ) ;
MPRINT(GADAMDEPENDENCYWITHIN):   end;
MPRINT(GADAMDEPENDENCYWITHIN):   _find = vord.find_next();
MPRINT(GADAMDEPENDENCYWITHIN):   end;
MPRINT(GADAMDEPENDENCYWITHIN):   if _find ne 0 and r= 0 then do;
MPRINT(GADAMDEPENDENCYWITHIN):   put 'ERR' 'OR:  Variable not found : ' name= contname= var1= ;
MPRINT(GADAMDEPENDENCYWITHIN):   _errcode = 'ER' !! 'ROR: Variable not found ' !! strip(var1) ;
MPRINT(GADAMDEPENDENCYWITHIN):   _abort = 1;
MPRINT(GADAMDEPENDENCYWITHIN):   output;
MPRINT(GADAMDEPENDENCYWITHIN):   leave ;
MPRINT(GADAMDEPENDENCYWITHIN):   end;
MPRINT(GADAMDEPENDENCYWITHIN):   **move to next car on stack ;
MPRINT(GADAMDEPENDENCYWITHIN):   if scan(stack,2, ' ') ne ' ' then stack = substr( strip(stack) , index(stack,' ')) ;
MPRINT(GADAMDEPENDENCYWITHIN):   else stack = '' ;
MPRINT(GADAMDEPENDENCYWITHIN):   end;
MPRINT(GADAMDEPENDENCYWITHIN):   run;

NOTE: There were 87 observations read from the data set WORK._SPECS2.
s=0 name=LSTCNDRV var1=  stack=RFPENDTC
The SAS System

s=0 name=LSTCNDT var1=  stack=RFPENDTC
s=0 name=LSTCNSRC var1=  stack=RFPENDTC
s=0 name=RFPENDDIF var1=  stack=RFPENDTC
s=0 name=SAFFL var1=  stack=TRTSDT
s=0 name=TRTDURD var1=  stack=TRTEDT
s=0 name=TRTDURD var1=  stack=TRTSDT
s=0 name=TSEQAG1 var1=  stack=TRTSEQA
NOTE: There were 8 observations read from the data set WORK._SPECS2.
      WHERE STRIP(memname)=STRIP(domain);
NOTE: The data set WORK._DEPCHECK1 has 8 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.02 seconds


MPRINT(GADAMDEPENDENCYWITHIN):   **count distinct dependent vars;
MPRINT(GADAMDEPENDENCYWITHIN):   proc sql noprint;
MPRINT(GADAMDEPENDENCYWITHIN):   create table _depcheck2 as select name , count(distinct contname) as deprank from _depcheck1 group by name;
NOTE: Table WORK._DEPCHECK2 created, with 7 rows and 2 columns.

MPRINT(GADAMDEPENDENCYWITHIN):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYWITHIN):   **log messages ;
MPRINT(GADAMDEPENDENCYWITHIN):   data _null_ ;
MPRINT(GADAMDEPENDENCYWITHIN):   set _depcheck1 (where=( index(_errcode , 'ER'||'ROR' ) ));
The SAS System

MPRINT(GADAMDEPENDENCYWITHIN):   call execute('%l4g_qcfail_nc('||quote(strip(_errcode))||');');
MPRINT(GADAMDEPENDENCYWITHIN):   run;

NOTE: There were 0 observations read from the data set WORK._DEPCHECK1.
      WHERE INDEX(_errcode, 'ER'||'ROR');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYWITHIN):   data _depspecs ;
MPRINT(GADAMDEPENDENCYWITHIN):   set _depcheck2 ;
MPRINT(GADAMDEPENDENCYWITHIN):   run;

NOTE: There were 7 observations read from the data set WORK._DEPCHECK2.
NOTE: The data set WORK._DEPSPECS has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   ;
MPRINT(GADAMDEPENDENCYCHECK):   proc sort data=exists nodupkey;
MPRINT(GADAMDEPENDENCYCHECK):   by memname contname valname sourceexists;
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: There were 79 observations read from the data set WORK.EXISTS.
The SAS System

NOTE: 47 observations with duplicate key values were deleted.
NOTE: The data set WORK.EXISTS has 32 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   proc sort data=alldependencies ;
MPRINT(GADAMDEPENDENCYCHECK):   by memname contname valname;
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   data alldependencies;
MPRINT(GADAMDEPENDENCYCHECK):   merge alldependencies (in=a) exists (in=b keep= memname contname valname sourceexists);
MPRINT(GADAMDEPENDENCYCHECK):   by memname contname valname;
MPRINT(GADAMDEPENDENCYCHECK):   if a;
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: There were 87 observations read from the data set WORK.ALLDEPENDENCIES.
NOTE: There were 32 observations read from the data set WORK.EXISTS.
NOTE: The data set WORK.ALLDEPENDENCIES has 87 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


The SAS System

MPRINT(GADAMDEPENDENCYCHECK):   **merge sourceexists for variables derived from aother derived variables;
MPRINT(GADAMDEPENDENCYCHECK):   proc sql noprint;
MPRINT(GADAMDEPENDENCYCHECK):   create table alldep2 as select a.*, b.deprank from alldependencies a left join _depspecs b on a.name=b.name;
NOTE: Table WORK.ALLDEP2 created, with 87 rows and 23 columns.

MPRINT(GADAMDEPENDENCYCHECK):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   data alldependencies ;
MPRINT(GADAMDEPENDENCYCHECK):   set alldep2 ;
MPRINT(GADAMDEPENDENCYCHECK):   if sourceexists = . and strip(upcase(memname))= strip("ADSL") then sourceexists = deprank + 1 ;
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: There were 87 observations read from the data set WORK.ALLDEP2.
NOTE: The data set WORK.ALLDEPENDENCIES has 87 observations and 23 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   proc sql;
MPRINT(GADAMDEPENDENCYCHECK):   create table _temp as select distinct name, count_dependency, memname, contname, valname, sourceexists from alldependencies;
The SAS System

NOTE: Table WORK._TEMP created, with 87 rows and 6 columns.

MPRINT(GADAMDEPENDENCYCHECK):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   data _temp (drop=memname contname valname sourceexists);
MPRINT(GADAMDEPENDENCYCHECK):   set _temp;
MPRINT(GADAMDEPENDENCYCHECK):   by name count_dependency memname contname valname sourceexists;
MPRINT(GADAMDEPENDENCYCHECK):   length count_dependency_exist 3;
MPRINT(GADAMDEPENDENCYCHECK):   retain count_dependency_exist;
MPRINT(GADAMDEPENDENCYCHECK):   if first.name then count_dependency_exist=0;
MPRINT(GADAMDEPENDENCYCHECK):   if sourceexists gt 0 then count_dependency_exist+1;
MPRINT(GADAMDEPENDENCYCHECK):   if last.name;
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: There were 87 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 52 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDEPENDENCYCHECK):   proc sql undo_policy=none;
MPRINT(GADAMDEPENDENCYCHECK):   create table alldependencies as select distinct a.*, b.count_dependency_exist from alldependencies as a left join _temp as b on a.name=b.name;
NOTE: Table WORK.ALLDEPENDENCIES created, with 87 rows and 24 columns.

MPRINT(GADAMDEPENDENCYCHECK):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
The SAS System



MPRINT(GADAMDEPENDENCYCHECK):   proc sort data=alldependencies out=adslspec (drop=_osortorder);
MPRINT(GADAMDEPENDENCYCHECK):   by _osortorder;
MPRINT(GADAMDEPENDENCYCHECK):   run;

NOTE: There were 87 observations read from the data set WORK.ALLDEPENDENCIES.
NOTE: The data set WORK.ADSLSPEC has 87 observations and 23 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(GADAMREADSPECS):  ;
MPRINT(GADAMREADSPECS):   data misssource adslspec;
MPRINT(GADAMREADSPECS):   set adslspec;
MPRINT(GADAMREADSPECS):   *if not missing(sourceexists) then output &dsout;
MPRINT(GADAMREADSPECS):   if count_dependency ^= count_dependency_exist then output misssource;
MPRINT(GADAMREADSPECS):   else output adslspec;
MPRINT(GADAMREADSPECS):   run;

NOTE: There were 87 observations read from the data set WORK.ADSLSPEC.
NOTE: The data set WORK.MISSSOURCE has 0 observations and 23 variables.
The SAS System

NOTE: The data set WORK.ADSLSPEC has 87 observations and 23 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMREADSPECS):   data adslspec ;
MPRINT(GADAMREADSPECS):   set adslspec ;
MPRINT(GADAMREADSPECS):   _osortorder=_n_;
MPRINT(GADAMREADSPECS):   run;

NOTE: There were 87 observations read from the data set WORK.ADSLSPEC.
NOTE: The data set WORK.ADSLSPEC has 87 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMREADSPECS):   proc sort data=adslspec ;
MPRINT(GADAMREADSPECS):   by name sourceexists ;
MPRINT(GADAMREADSPECS):   run;

NOTE: There were 87 observations read from the data set WORK.ADSLSPEC.
NOTE: The data set WORK.ADSLSPEC has 87 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMREADSPECS):   data adslspec (drop=tocheck memname contname valname);
MPRINT(GADAMREADSPECS):   set adslspec ;
MPRINT(GADAMREADSPECS):   by name ;
MPRINT(GADAMREADSPECS):   if last.name ;
MPRINT(GADAMREADSPECS):   run;

The SAS System

NOTE: There were 87 observations read from the data set WORK.ADSLSPEC.
NOTE: The data set WORK.ADSLSPEC has 52 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMREADSPECS):   proc sort data=adslspec ;
MPRINT(GADAMREADSPECS):   by _osortorder ;
MPRINT(GADAMREADSPECS):   run;

NOTE: There were 52 observations read from the data set WORK.ADSLSPEC.
NOTE: The data set WORK.ADSLSPEC has 52 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMREADSPECS):   data _null_;
MPRINT(GADAMREADSPECS):   set misssource;
MPRINT(GADAMREADSPECS):   length t1 $1000;
The SAS System

MPRINT(GADAMREADSPECS):   *- jbodart - 2022-09-30 - allow for source and name variables to contain embedded quotes -*;
MPRINT(GADAMREADSPECS):   if strip(lowcase(core))="req" then t1 = quote('no source '||strip(source)||" found for required variable "||strip(name));
MPRINT(GADAMREADSPECS):   else t1 = quote('no source '||strip(source)||" found for variable "||strip(name));
MPRINT(GADAMREADSPECS):   if strip(lowcase(core))="req" then call execute('%l4g_qcfail_crit('||strip(t1)||');');
MPRINT(GADAMREADSPECS):   else call execute('%l4g_qcfail_nc('||strip(t1)||');');
MPRINT(GADAMREADSPECS):   run;

NOTE: There were 0 observations read from the data set WORK.MISSSOURCE.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(ADSL):  ;
MAUTOCOMPLOC:  The autocall macro GADAMMAKEATTRIB is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/gadam/_library/gadammakeattrib.sas.
MPRINT(GADAMMAKEATTRIB):   data sub ;
MPRINT(GADAMMAKEATTRIB):   length osort 8;
MPRINT(GADAMMAKEATTRIB):   set adslspec;
MPRINT(GADAMMAKEATTRIB):   osort + 1;
MPRINT(GADAMMAKEATTRIB):   run;

NOTE: There were 52 observations read from the data set WORK.ADSLSPEC.
NOTE: The data set WORK.SUB has 52 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMMAKEATTRIB):   data nohead sdtm adam nosdtm;
MPRINT(GADAMMAKEATTRIB):   length sourcedset sourcevar $200;
MPRINT(GADAMMAKEATTRIB):   set sub;
MPRINT(GADAMMAKEATTRIB):   if name ne 'domain';
MPRINT(GADAMMAKEATTRIB):   output nohead;
MPRINT(GADAMMAKEATTRIB):   if lowcase(label) in ("[sdtm]") then do;
MPRINT(GADAMMAKEATTRIB):   sourcedset = scan(Source,1,'.');
MPRINT(GADAMMAKEATTRIB):   sourcevar = scan(Source,2,'.');
The SAS System

MPRINT(GADAMMAKEATTRIB):   output sdtm;
MPRINT(GADAMMAKEATTRIB):   end;
MPRINT(GADAMMAKEATTRIB):   else
MPRINT(PICKDSET):   lowcase(label) in ("[adam]") then do;
MPRINT(PICKDSET):   sourcedset = scan(Source,1,'.');
MPRINT(PICKDSET):   sourcevar = scan(Source,2,'.');
MPRINT(PICKDSET):   output adam;
MPRINT(PICKDSET):   end;
MPRINT(GADAMMAKEATTRIB):   else output nosdtm;
MPRINT(GADAMMAKEATTRIB):   run;

NOTE: There were 52 observations read from the data set WORK.SUB.
NOTE: The data set WORK.NOHEAD has 52 observations and 23 variables.
NOTE: The data set WORK.SDTM has 19 observations and 23 variables.
NOTE: The data set WORK.ADAM has 0 observations and 23 variables.
NOTE: The data set WORK.NOSDTM has 33 observations and 23 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
The SAS System



MPRINT(GETATTR):   proc freq data=adam noprint;
MPRINT(GETATTR):   table sourcedset/ norow nocol nocum nopercent out=adamdset;
MPRINT(GETATTR):   run;

NOTE: No observations in data set WORK.ADAM.
NOTE: The data set WORK.ADAMDSET has 0 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(GETATTR):   data _null_;
MPRINT(GETATTR):   set adamdset end=last;
MPRINT(GETATTR):   call symputx("adam"||strip(put(_n_,8.)),lowcase(strip(sourcedset)),'G');
MPRINT(GETATTR):   if last then call symputx("nb_adam",strip(put(_n_,8.)));
MPRINT(GETATTR):   run;

NOTE: There were 0 observations read from the data set WORK.ADAMDSET.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GETATTR):   data getadamattributes;
MPRINT(GETATTR):   set;
MPRINT(GETATTR):   run;

NOTE: There were 0 observations read from the data set WORK.ADAMDSET.
NOTE: The data set WORK.GETADAMATTRIBUTES has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(GADAMMAKEATTRIB):  ;
MPRINT(GETATTR):   proc freq data=sdtm noprint;
MPRINT(GETATTR):   table sourcedset/ norow nocol nocum nopercent out=sdtmdset;
The SAS System

MPRINT(GETATTR):   run;

NOTE: There were 19 observations read from the data set WORK.SDTM.
NOTE: The data set WORK.SDTMDSET has 1 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GETATTR):   data _null_;
MPRINT(GETATTR):   set sdtmdset end=last;
MPRINT(GETATTR):   call symputx("sdtm"||strip(put(_n_,8.)),lowcase(strip(sourcedset)),'G');
MPRINT(GETATTR):   if last then call symputx("nb_sdtm",strip(put(_n_,8.)));
MPRINT(GETATTR):   run;

NOTE: There were 1 observations read from the data set WORK.SDTMDSET.
NOTE: DATA statement used (Total process time):
The SAS System

      real time           0.00 seconds
      cpu time            0.00 seconds


MAUTOCOMPLOC:  The autocall macro DATASETSUSED is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library/datasetsused.sas.
dm
MPRINT(DATASETSUSED):   data dm;
MPRINT(DATASETSUSED):   set sdtm.dm;
MPRINT(DATASETSUSED):   ;
MPRINT(DATASETSUSED):   run;

NOTE: There were 205 observations read from the data set SDTM.DM.
NOTE: The data set WORK.DM has 205 observations and 27 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(DATASETSUSED):   data dm;
MPRINT(DATASETSUSED):   set dm;
MPRINT(DATASETSUSED):   run;

NOTE: There were 205 observations read from the data set WORK.DM.
NOTE: The data set WORK.DM has 205 observations and 27 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GETATTR):  ;
MPRINT(GETATTR):   data vl;
MPRINT(GETATTR):   length name $32 ;
MPRINT(GETATTR):   set sdtm;
MPRINT(GETATTR):   where lowcase(sourcedset)=lowcase("dm");
MPRINT(GETATTR):   name=name;
MPRINT(GETATTR):   run;

NOTE: There were 19 observations read from the data set WORK.SDTM.
      WHERE LOWCASE(sourcedset)='dm';
NOTE: The data set WORK.VL has 19 observations and 23 variables.
The SAS System

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GETATTR):   proc contents data=sdtm.dm out=x1;
MPRINT(GETATTR):   run;

NOTE: The data set WORK.X1 has 27 observations and 41 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds

NOTE: The PROCEDURE CONTENTS printed pages 1-2.
The SAS System

MPRINT(GETATTR):   proc sort data=vl;
MPRINT(GETATTR):   by name;
MPRINT(GETATTR):  run;

NOTE: There were 19 observations read from the data set WORK.VL.
NOTE: The data set WORK.VL has 19 observations and 23 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GETATTR):   proc sort data=x1;
MPRINT(GETATTR):   by name;
MPRINT(GETATTR):  run;

NOTE: There were 27 observations read from the data set WORK.X1.
NOTE: The data set WORK.X1 has 27 observations and 41 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GETATTR):   data getsdtmattributes1;
MPRINT(GETATTR):   length name $32 label $300;
MPRINT(GETATTR):   merge vl (in=a) x1 (in=b keep=name type length label format: sorted:);
MPRINT(GETATTR):   by name;
MPRINT(GETATTR):   if a;
MPRINT(GETATTR):   if not b then label="Variable not found in sdtm..dm";
MPRINT(GETATTR):   if not(missing(format) and formatl in (. 0)) then do;
MPRINT(GETATTR):   if formatl >0 then format = strip(format)||cats(formatl)||'.';
MPRINT(GETATTR):   else format = strip(format)||'.';
MPRINT(GETATTR):   if formatd ne 0 then format = strip(format)||cats(formatd);
MPRINT(GETATTR):   end;
MPRINT(GETATTR):   run;

NOTE: There were 19 observations read from the data set WORK.VL.
NOTE: There were 27 observations read from the data set WORK.X1.
NOTE: The data set WORK.GETSDTMATTRIBUTES1 has 19 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


The SAS System

MPRINT(GETATTR):   data getsdtmattributes;
MPRINT(GETATTR):   set getsdtmattributes1;
MPRINT(GETATTR):   run;

NOTE: There were 19 observations read from the data set WORK.GETSDTMATTRIBUTES1.
NOTE: The data set WORK.GETSDTMATTRIBUTES has 19 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(GADAMMAKEATTRIB):  ;
MPRINT(GADAMMAKEATTRIB):   data nosdtm;
The SAS System

MPRINT(GADAMMAKEATTRIB):   length name $32 label $300 type 8 format $32;
MPRINT(GADAMMAKEATTRIB):   set nosdtm;
MPRINT(GADAMMAKEATTRIB):   name=strip(name);
MPRINT(GADAMMAKEATTRIB):   label=strip(label);
MPRINT(GADAMMAKEATTRIB):   if lowcase(ctype) in ("char") then type=2;
MPRINT(GADAMMAKEATTRIB):   if lowcase(ctype) in ("num") then type=1;
MPRINT(GADAMMAKEATTRIB):   length = input(clength, best.);
MPRINT(GADAMMAKEATTRIB):   if not missing(cformat) then format=strip(cformat);
MPRINT(GADAMMAKEATTRIB):   run;

NOTE: There were 33 observations read from the data set WORK.NOSDTM.
NOTE: The data set WORK.NOSDTM has 33 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMMAKEATTRIB):   data allspecs;
MPRINT(GADAMMAKEATTRIB):   set nosdtm getSDTMattributes;
MPRINT(GADAMMAKEATTRIB):   run;

NOTE: There were 33 observations read from the data set WORK.NOSDTM.
NOTE: There were 19 observations read from the data set WORK.GETSDTMATTRIBUTES.
NOTE: The data set WORK.ALLSPECS has 52 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMMAKEATTRIB):   proc sort data=allspecs;
MPRINT(GADAMMAKEATTRIB):   by osort;
MPRINT(GADAMMAKEATTRIB):   where not missing(name);
MPRINT(GADAMMAKEATTRIB):   run;

NOTE: There were 52 observations read from the data set WORK.ALLSPECS.
      WHERE not MISSING(name);
NOTE: The data set WORK.ALLSPECS has 52 observations and 30 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(GADAMMAKEATTRIB):   *------------------------------------------------------------------;
MPRINT(GADAMMAKEATTRIB):   * 2. Build attrib file in work directory ;
MPRINT(GADAMMAKEATTRIB):   *------------------------------------------------------------------;
The SAS System

MPRINT(GADAMMAKEATTRIB):   data _null_;
MPRINT(GADAMMAKEATTRIB):   length len $256;
MPRINT(GADAMMAKEATTRIB):   file "/saswork/sas_tmp/SAS_workB57B000010FC_xar05auv/SAS_workCC2C000010FC_xar05auv/attr.sas";
MPRINT(GADAMMAKEATTRIB):   set allspecs end=last;
MPRINT(GADAMMAKEATTRIB):   if lowcase(cats(type)) in ('2' 'char') then len = '$'!!cats(length);
MPRINT(GADAMMAKEATTRIB):   *compress(put(length,8.));
MPRINT(GADAMMAKEATTRIB):   else len = cats(length);
MPRINT(GADAMMAKEATTRIB):   *compress(put(length,8.));
MPRINT(GADAMMAKEATTRIB):   poslen = max(25,length(name)+2);
MPRINT(GADAMMAKEATTRIB):   posformat = max(32,poslen + length(cats(length))) + 10;
MPRINT(GADAMMAKEATTRIB):   poslabel = max(62,posformat + length(format)) + 10;
The SAS System

MPRINT(GADAMMAKEATTRIB):   posinform = max (100,poslabel + length(label)+2) + 9;
MPRINT(GADAMMAKEATTRIB):   if _n_=1 then put 'attrib';
MPRINT(GADAMMAKEATTRIB):   put @1 name @;
MPRINT(GADAMMAKEATTRIB):   if length ne . then put @poslen 'length = ' len @;
MPRINT(GADAMMAKEATTRIB):   if format ne '' then put @posformat 'format = ' format @;
MPRINT(GADAMMAKEATTRIB):   if label ne '' then put @poslabel 'label = "' label'"' @;
MPRINT(GADAMMAKEATTRIB):   put;
MPRINT(GADAMMAKEATTRIB):   if last then put ';';
MPRINT(GADAMMAKEATTRIB):   run;

NOTE: The file "/saswork/sas_tmp/SAS_workB57B000010FC_xar05auv/SAS_workCC2C000010FC_xar05auv/attr.sas" is:
      Filename=/saswork/sas_tmp/SAS_workB57B000010FC_xar05auv/SAS_workCC2C000010FC_xar05auv/attr.sas,
      Owner Name=jbodart,Group Name=webtrust,
      Access Permission=-rw-rw----,
      Last Modified=16Dec2022:22:29:19

NOTE: 54 records were written to the file "/saswork/sas_tmp/SAS_workB57B000010FC_xar05auv/SAS_workCC2C000010FC_xar05auv/attr.sas".
      The minimum record length was 1.
      The maximum record length was 122.
NOTE: There were 52 observations read from the data set WORK.ALLSPECS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMMAKEATTRIB):   *------------------------------------------------------------------;
MPRINT(GADAMMAKEATTRIB):   * 3. Build keep statement (5 variables on 1 line) ;
MPRINT(GADAMMAKEATTRIB):   *------------------------------------------------------------------;
MPRINT(GADAMMAKEATTRIB):   data _null_;
MPRINT(GADAMMAKEATTRIB):   file "/saswork/sas_tmp/SAS_workB57B000010FC_xar05auv/SAS_workCC2C000010FC_xar05auv/keep.sas";
MPRINT(GADAMMAKEATTRIB):   set allspecs end=last;
MPRINT(GADAMMAKEATTRIB):   if _n_ = 1 then put 'keep ' @;
MPRINT(GADAMMAKEATTRIB):   if mod(_n_,5) ne 0 then put name @;
MPRINT(GADAMMAKEATTRIB):   else put name;
MPRINT(GADAMMAKEATTRIB):   if last then put ';';
MPRINT(GADAMMAKEATTRIB):   run;

NOTE: The file "/saswork/sas_tmp/SAS_workB57B000010FC_xar05auv/SAS_workCC2C000010FC_xar05auv/keep.sas" is:
      Filename=/saswork/sas_tmp/SAS_workB57B000010FC_xar05auv/SAS_workCC2C000010FC_xar05auv/keep.sas,
      Owner Name=jbodart,Group Name=webtrust,
      Access Permission=-rw-rw----,
      Last Modified=16Dec2022:22:29:19

NOTE: 11 records were written to the file "/saswork/sas_tmp/SAS_workB57B000010FC_xar05auv/SAS_workCC2C000010FC_xar05auv/keep.sas".
      The minimum record length was 14.
      The maximum record length was 46.
NOTE: There were 52 observations read from the data set WORK.ALLSPECS.
The SAS System

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(GADAMMAKEATTRIB):   *------------------------------------------------------------------;
MPRINT(GADAMMAKEATTRIB):   * 3. Build set and keep statement for starting SDTM/ADAM dataset ;
MPRINT(GADAMMAKEATTRIB):   *------------------------------------------------------------------;
MPRINT(GADAMMAKEATTRIB):   data startfromdm;
The SAS System

MPRINT(GADAMMAKEATTRIB):   file "/saswork/sas_tmp/SAS_workB57B000010FC_xar05auv/SAS_workCC2C000010FC_xar05auv/startfromdm.sas";
MPRINT(GADAMMAKEATTRIB):   set allspecs end=last;
MPRINT(GADAMMAKEATTRIB):   where lowcase(sourcedset)=lowcase("dm");
MPRINT(GADAMMAKEATTRIB):   if _n_ = 1 then put "set  sdtm.dm ;" ;
MPRINT(GADAMMAKEATTRIB):   if _n_ = 1 then put 'keep ' @;
MPRINT(GADAMMAKEATTRIB):   if mod(_n_,5) ne 0 then put name @;
MPRINT(GADAMMAKEATTRIB):   else put name;
MPRINT(GADAMMAKEATTRIB):   if last then put ';';
MPRINT(GADAMMAKEATTRIB):   run;

NOTE: The file "/saswork/sas_tmp/SAS_workB57B000010FC_xar05auv/SAS_workCC2C000010FC_xar05auv/startfromdm.sas" is:
      Filename=/saswork/sas_tmp/SAS_workB57B000010FC_xar05auv/SAS_workCC2C000010FC_xar05auv/startfromdm.sas,
      Owner Name=jbodart,Group Name=webtrust,
      Access Permission=-rw-rw----,
      Last Modified=16Dec2022:22:29:19

NOTE: 5 records were written to the file "/saswork/sas_tmp/SAS_workB57B000010FC_xar05auv/SAS_workCC2C000010FC_xar05auv/startfromdm.sas".
      The minimum record length was 14.
      The maximum record length was 43.
NOTE: There were 19 observations read from the data set WORK.ALLSPECS.
      WHERE LOWCASE(sourcedset)='dm';
NOTE: The data set WORK.STARTFROMDM has 19 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(ADSL):  ;
MPRINT(ADSL):   data adslstart;
NOTE: %INCLUDE (level 1) file /saswork/sas_tmp/SAS_workB57B000010FC_xar05auv/SAS_workCC2C000010FC_xar05auv/startfromdm.sas is file 
      /saswork/sas_tmp/SAS_workB57B000010FC_xar05auv/SAS_workCC2C000010FC_xar05auv/startfromdm.sas.
882       +set  sdtm.dm ;
MPRINT(ADSL):   set sdtm.dm ;
883       +keep STUDYID USUBJID SUBJID RFSTDTC RFENDTC
884       +SITEID AGE AGEU SEX RACE
885       +ETHNIC COUNTRY ARM ACTARMCD ACTARM
886       +RFICDTC RFPENDTC DTHFL DTHDTC ;
MPRINT(ADSL):   keep STUDYID USUBJID SUBJID RFSTDTC RFENDTC SITEID AGE AGEU SEX RACE ETHNIC COUNTRY ARM ACTARMCD ACTARM RFICDTC RFPENDTC DTHFL DTHDTC ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(ADSL):   run;

NOTE: There were 205 observations read from the data set SDTM.DM.
NOTE: The data set WORK.ADSLSTART has 205 observations and 19 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MAUTOCOMPLOC:  The autocall macro DOM_SUPP is compiling using the autocall source file 
The SAS System

            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library/dom_supp.sas.
MSGLEVEL=N
MPRINT(DOM_SUPP):   option msglevel=N;
MPRINT(DOM_SUPP):   *- Create a sorted version of the SUPP dataset -*;
MPRINT(DOM_SUPP):   *- JMB 2022-02-24 - Increment QNAM values in case of dupplicates (should not occur in well-formed SDTM datasets) -*;
MPRINT(DOM_SUPP):   proc sql noprint;
MPRINT(DOM_SUPP):   create table sdtm_suppdm_srt(drop=__obs_n_ rename=(QNAM=QNAM_orig QNAMnew=QNAM)) as select * , strip(QLABEL)||" (n="||cats(count(QVAL))||")" as QLABEL_N from ( 
The SAS System

select
MPRINT(VARLIST):   STUDYID, RDOMAIN, USUBJID, IDVAR, IDVARVAL, QNAM, QLABEL, QVAL, QORIG, QEVAL
MPRINT(DOM_SUPP):   , monotonic() as __obs_n_ , calculated __obs_n_ - min(calculated __obs_n_) + 1 as __repeat_ , case when calculated __repeat_ eq 1 and QNAM not in (" "
MPRINT(VARLIST):   "STUDYID", "DOMAIN", "USUBJID", "SUBJID", "RFSTDTC", "RFENDTC", "RFXSTDTC", "RFXENDTC", "RFICDTC", "RFPENDTC", "DTHDTC", "DTHFL", "SITEID", "INVNAM", "BRTHDTC", 
"AGE", "AGEU", 
"SEX", "RACE", "ETHNIC", "ARMCD", "ARM", "ACTARMCD", "ACTARM", "ARMNRS", "ACTARMUD", "COUNTRY"
MPRINT(DOM_SUPP):  ) then QNAM else cats(QNAM, calculated __repeat_) end as QNAMnew from (select distinct
MPRINT(VARLIST):   STUDYID, USUBJID, IDVAR, IDVARVAL, RDOMAIN, QNAM, QLABEL, QVAL, QORIG, QEVAL
MPRINT(DOM_SUPP):  , monotonic() as __tmp_ from sdtm.suppdm) group by
MPRINT(VARLIST):   STUDYID, USUBJID
MPRINT(DOM_SUPP):  , idvar, idvarval, qnam ) group by
MPRINT(VARLIST):   QNAM, QLABEL
MPRINT(DOM_SUPP):   order by
MPRINT(VARLIST):   STUDYID, USUBJID
MPRINT(DOM_SUPP):  , idvar, idvarval, QNAMnew ;
NOTE: The query requires remerging summary statistics back with the original data.
NOTE: Table WORK.SDTM_SUPPDM_SRT created, with 9 rows and 13 columns.

MPRINT(DOM_SUPP):   select distinct idvar into :idvars separated by " " from sdtm_suppdm_srt;

MPRINT(DOM_SUPP):   select distinct QNAM into :renamed_QNAMs separated by ' ' from sdtm_suppdm_srt where QNAM not in (select distinct QNAM from sdtm.suppdm) ;
NOTE: No rows were selected.

MPRINT(DOM_SUPP):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           1.04 seconds
      cpu time            1.05 seconds


Notice:(DOM_SUPP): Original dataset sdtm.suppdm has 9 obs., Sorted dataset sdtm_suppdm_srt has 9 obs.
MPRINT(DOM_SUPP):   *- Transpose the SUPP dataset records with empty <IDVAR> -*;
MPRINT(DOM_SUPP):   proc transpose data=sdtm_suppdm_srt(where=(idvar=" ")) out=sdtm_suppdm_srt_t(drop=_name: _label:);
MPRINT(DOM_SUPP):   by
MPRINT(VARLIST):   STUDYID USUBJID
MPRINT(DOM_SUPP):  ;
MPRINT(DOM_SUPP):   var QVAL;
MPRINT(DOM_SUPP):   id QNAM;
MPRINT(DOM_SUPP):   idlabel QLABEL_N;
MPRINT(DOM_SUPP):   run;

NOTE: There were 9 observations read from the data set WORK.SDTM_SUPPDM_SRT.
      WHERE idvar=' ';
NOTE: The data set WORK.SDTM_SUPPDM_SRT_T has 9 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds


ALL_SUPP_T_IDS=sdtm_suppdm_srt_t:s
ALL_LIB_MEMS="sdtm.dm",  "work.sdtm_suppdm_srt_t"
ALL_LIB_MEMS2=sdtm.dm     work.sdtm_suppdm_srt_t
MPRINT(DOM_SUPP):   proc sql noprint;
MPRINT(DOM_SUPP):   *- Identify variables with same name that exist in multiple datasets -*;
The SAS System

MPRINT(DOM_SUPP):   select distinct lowcase(name) into :multvars separated by ' ' from sashelp.vcolumn where lowcase(catx('.', libname, memname)) in ("sdtm.dm", "work.sdtm_suppdm_s
rt_t") group by 
lowcase(name) having count(name) > 1 ;
The SAS System

NOTE: The query requires remerging summary statistics back with the original data.
MULTVARS=STUDYID USUBJID
MPRINT(DOM_SUPP):   *- Merge back each of the transposed SUPP datasets by their <IDVAR> -*;
MPRINT(DOM_SUPP):   create table adslstart as select
MPRINT(VARLIST):   coalesce(a.STUDYID, s.STUDYID) as STUDYID length=13 label='Study Identifier' format=$13., coalesce(a.USUBJID, s.USUBJID) as USUBJID length=25 label='Unique Subje
ct Identifier' 
format=$25.,
MPRINT(VARLIST):   a.DOMAIN, a.SUBJID, a.RFSTDTC, a.RFENDTC, a.RFXSTDTC, a.RFXENDTC, a.RFICDTC, a.RFPENDTC, a.DTHDTC, a.DTHFL, a.SITEID, a.INVNAM, a.BRTHDTC, a.AGE, a.AGEU, a.SEX, 
a.RACE, a.ETHNIC, 
a.ARMCD, a.ARM, a.ACTARMCD, a.ACTARM, a.ARMNRS, a.ACTARMUD, a.COUNTRY,
MPRINT(VARLIST):   s.RACEOTH, s.JAPANESE,
MPRINT(DOM_SUPP):   case when 0
MPRINT(VARLIST):   + count(s.STUDYID) + count(s.USUBJID)
MPRINT(DOM_SUPP):   >= 1 then "Y" else " " end as _in_supp_fl label="In Supp dataset" from sdtm.dm as a left join sdtm_suppdm_srt_t as s on
MPRINT(VARLIST):   a.STUDYID = s.STUDYID and a.USUBJID = s.USUBJID
MPRINT(DOM_SUPP):   having
MPRINT(VARLIST):   cats(STUDYID)^='' and cats(USUBJID)^=''
MPRINT(DOM_SUPP):   order by
MPRINT(VARLIST):   usubjid
MPRINT(DOM_SUPP):   ;
NOTE: The query requires remerging summary statistics back with the original data.
NOTE: Table WORK.ADSLSTART created, with 205 rows and 30 columns.

MPRINT(DOM_SUPP):   *- Remove intermediate datasets -*;
MPRINT(DOM_SUPP):   drop table sdtm_suppdm_srt_t ;
NOTE: Table WORK.SDTM_SUPPDM_SRT_T has been dropped.
MPRINT(DOM_SUPP):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           1.49 seconds
      cpu time            1.49 seconds


MPRINT(VARLIST):   proc datasets nolist lib=WORK;
MPRINT(VARLIST):   modify ADSLSTART ;
MPRINT(VARLIST):   format STUDYID USUBJID DOMAIN SUBJID RFSTDTC RFENDTC RFXSTDTC RFXENDTC RFICDTC RFPENDTC DTHDTC DTHFL SITEID INVNAM BRTHDTC AGE AGEU SEX RACE ETHNIC ARMCD ARM ACT
ARMCD ACTARM ARMNRS 
ACTARMUD COUNTRY RACEOTH JAPANESE;
MPRINT(VARLIST):   run;

NOTE: MODIFY was successful for WORK.ADSLSTART.DATA.
MPRINT(VARLIST):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(DOM_SUPP):   ;
Notice:(DOM_SUPP): Original dataset sdtm.dm has 205 obs., Final dataset adslstart has 205 obs.
Notice: Numbered variables created in final dataset:.
MPRINT(DOM_SUPP):   option MSGLEVEL=N;
MPRINT(ADSL):  ;
MAUTOCOMPLOC:  The autocall macro GADAMCHECKSTARTVARIABLES is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/gadam/_library/gadamcheckstartvariables.sas.
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set startfromdm end = last;
MPRINT(GADAMCHECKSTARTVARIABLES):   call symputx("spvar"||strip(put(_n_,8.)),strip(name));
MPRINT(GADAMCHECKSTARTVARIABLES):   call symputx("spvarcore"||strip(put(_n_,8.)),lowcase(strip(core)));
The SAS System

MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx("nb_spvars",strip(put(_n_,8.)));
The SAS System

MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 19 observations read from the data set WORK.STARTFROMDM.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adslstart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where missing(STUDYID);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('missrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 0 observations read from the data set WORK.ADSLSTART.
      WHERE MISSING(STUDYID);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("STUDYID is key variable and has no missing records");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_QCPASS"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_qcpass     |STUDYID is key variable and has no missing records
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_QCPASS):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adslstart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(STUDYID);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 205 observations read from the data set WORK.ADSLSTART.
      WHERE not MISSING(STUDYID);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("STUDYID is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;
The SAS System


l4g_message    |STUDYID is created.
NOTE: DATA statement used (Total process time):
The SAS System

      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adslstart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where missing(USUBJID);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('missrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 0 observations read from the data set WORK.ADSLSTART.
      WHERE MISSING(USUBJID);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("USUBJID is key variable and has no missing records");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_QCPASS"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_qcpass     |USUBJID is key variable and has no missing records
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_QCPASS):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adslstart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(USUBJID);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 205 observations read from the data set WORK.ADSLSTART.
      WHERE not MISSING(USUBJID);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("USUBJID is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
The SAS System

MPRINT(BUILDMSG):   run;

l4g_message    |USUBJID is created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
The SAS System

      cpu time            0.01 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adslstart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(SUBJID);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 205 observations read from the data set WORK.ADSLSTART.
      WHERE not MISSING(SUBJID);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("SUBJID is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |SUBJID is created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adslstart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(RFSTDTC);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 131 observations read from the data set WORK.ADSLSTART.
      WHERE not MISSING(RFSTDTC);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("RFSTDTC is created.");
MPRINT(BUILDMSG):   length mcr $15;
The SAS System

MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |RFSTDTC is created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
The SAS System

      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adslstart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(RFENDTC);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 131 observations read from the data set WORK.ADSLSTART.
      WHERE not MISSING(RFENDTC);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("RFENDTC is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |RFENDTC is created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adslstart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(SITEID);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 205 observations read from the data set WORK.ADSLSTART.
      WHERE not MISSING(SITEID);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
The SAS System

MPRINT(BUILDMSG):   msg=strip("SITEID is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |SITEID is created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
The SAS System

      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adslstart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(AGE);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 205 observations read from the data set WORK.ADSLSTART.
      WHERE not MISSING(AGE);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("AGE is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |AGE is created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adslstart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(AGEU);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 205 observations read from the data set WORK.ADSLSTART.
      WHERE not MISSING(AGEU);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
The SAS System


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("AGEU is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |AGEU is created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
The SAS System

      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adslstart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(SEX);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 205 observations read from the data set WORK.ADSLSTART.
      WHERE not MISSING(SEX);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("SEX is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |SEX is created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adslstart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(RACE);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 205 observations read from the data set WORK.ADSLSTART.
      WHERE not MISSING(RACE);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
The SAS System

      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("RACE is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |RACE is created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
The SAS System

      cpu time            0.01 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adslstart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(ETHNIC);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 205 observations read from the data set WORK.ADSLSTART.
      WHERE not MISSING(ETHNIC);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("ETHNIC is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |ETHNIC is created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adslstart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(COUNTRY);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 205 observations read from the data set WORK.ADSLSTART.
      WHERE not MISSING(COUNTRY);
The SAS System

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("COUNTRY is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |COUNTRY is created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
The SAS System

      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adslstart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(ARM);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 131 observations read from the data set WORK.ADSLSTART.
      WHERE not MISSING(ARM);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("ARM is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |ARM is created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adslstart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(ACTARMCD);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;
The SAS System

NOTE: There were 130 observations read from the data set WORK.ADSLSTART.
      WHERE not MISSING(ACTARMCD);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("ACTARMCD is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |ACTARMCD is created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
The SAS System

      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adslstart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(ACTARM);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 130 observations read from the data set WORK.ADSLSTART.
      WHERE not MISSING(ACTARM);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("ACTARM is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |ACTARM is created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adslstart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(RFICDTC);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
The SAS System

MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 205 observations read from the data set WORK.ADSLSTART.
      WHERE not MISSING(RFICDTC);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("RFICDTC is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |RFICDTC is created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
The SAS System

      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adslstart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(RFPENDTC);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 205 observations read from the data set WORK.ADSLSTART.
      WHERE not MISSING(RFPENDTC);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("RFPENDTC is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |RFPENDTC is created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adslstart end=last;
The SAS System

MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(DTHFL);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 0 observations read from the data set WORK.ADSLSTART.
      WHERE not MISSING(DTHFL);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("DTHFL has only missing records");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |DTHFL has only missing records
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
The SAS System

      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("DTHFL is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |DTHFL is created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(GADAMCHECKSTARTVARIABLES):   data _null_;
MPRINT(GADAMCHECKSTARTVARIABLES):   set adslstart end=last;
MPRINT(GADAMCHECKSTARTVARIABLES):   where not missing(DTHDTC);
MPRINT(GADAMCHECKSTARTVARIABLES):   if last then call symputx('nonmissrecords',strip(put(_n_,8.)));
MPRINT(GADAMCHECKSTARTVARIABLES):   run;

NOTE: There were 0 observations read from the data set WORK.ADSLSTART.
      WHERE not MISSING(DTHDTC);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(BUILDMSG):   data _null_;
The SAS System

MPRINT(BUILDMSG):   msg=strip("DTHDTC has only missing records");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |DTHDTC has only missing records
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("DTHDTC is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |DTHDTC is created.
NOTE: DATA statement used (Total process time):
The SAS System

      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(GADAMCHECKSTARTVARIABLES):  ;
MPRINT(ADSL):  ;
MAUTOCOMPLOC:  The autocall macro GADAMDERIVATIONS is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/gadam/_library/gadamderivations.sas.
MPRINT(GADAMDERIVATIONS):   proc sql noprint;
MPRINT(GADAMDERIVATIONS):   select case when upcase(name) = "PARIDENT" then "Y" else "N" end into: bdsvlm from sashelp.vcolumn where libname = "WORK" and upcase(memname) = "ADSLSPE
C" and upcase(name) 
= "PARIDENT";
NOTE: No rows were selected.
MPRINT(GADAMDERIVATIONS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDERIVATIONS):   proc sort data = ADSLSPEC out=algo nodupkey;
MPRINT(GADAMDERIVATIONS):   by sourceexists sascode;
MPRINT(GADAMDERIVATIONS):   where not missing(sascode);
MPRINT(GADAMDERIVATIONS):   run;

NOTE: There were 32 observations read from the data set WORK.ADSLSPEC.
      WHERE not MISSING(sascode);
NOTE: 18 observations with duplicate key values were deleted.
NOTE: The data set WORK.ALGO has 14 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
The SAS System



MPRINT(GADAMDERIVATIONS):   data algo;
MPRINT(GADAMDERIVATIONS):   set algo;
MPRINT(GADAMDERIVATIONS):   length codetype $6;
MPRINT(GADAMDERIVATIONS):   if lowcase(sascode)=:'%v' then codetype = "macro";
MPRINT(GADAMDERIVATIONS):   else codetype= "inline";
MPRINT(GADAMDERIVATIONS):   if lowcase(sascode)=:'%' and codetype= "inline" then put "WAR" "NING:(GADAMDERIVATIONS): SAS code starting with" '"%" (but not with "%v")' " for derivat
ion of " domain 
@+(-1) "." @+(-1) name / @2 " is considered inline code rather than macro code: " / @2 sascode /;
MPRINT(GADAMDERIVATIONS):   run;

NOTE: There were 14 observations read from the data set WORK.ALGO.
NOTE: The data set WORK.ALGO has 14 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDERIVATIONS):   proc sort data=algo;
MPRINT(GADAMDERIVATIONS):   *by sourceexists codetype;
MPRINT(GADAMDERIVATIONS):   by sourceexists _osortorder;
MPRINT(GADAMDERIVATIONS):   run;

NOTE: There were 14 observations read from the data set WORK.ALGO.
NOTE: The data set WORK.ALGO has 14 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
The SAS System

      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDERIVATIONS):   data a_null_;
MPRINT(GADAMDERIVATIONS):   set algo end=last;
MPRINT(GADAMDERIVATIONS):   by sourceexists _osortorder;
MPRINT(GADAMDERIVATIONS):   if first.sourceexists then algolevel+1;
MPRINT(GADAMDERIVATIONS):   if first.sourceexists then cnt=0;
MPRINT(GADAMDERIVATIONS):   cnt+1;
MPRINT(GADAMDERIVATIONS):   length _startcode _endcode $ 200 ;
MPRINT(GADAMDERIVATIONS):   call missing(_startcode , _endcode ) ;
MPRINT(GADAMDERIVATIONS):   if upcase(ctype) eq "CHAR" and codetype = 'inline' then do;
MPRINT(GADAMDERIVATIONS):   _startcode = "if 0 then " !! strip(name) !! '= put(" ", $' !! strip(clength) !! ".) ; " ;
MPRINT(GADAMDERIVATIONS):   end;
MPRINT(GADAMDERIVATIONS):   call symputx("algo"||strip(put(algolevel,8.))||'_'||strip(put(cnt,8.)),strip(_startcode) !! "  " !! strip(sascode) !! " " !!strip(_endcode) );
MPRINT(GADAMDERIVATIONS):   call symputx("algotype"||strip(put(algolevel,8.))||'_'||strip(put(cnt,8.)),strip(codetype));
MPRINT(GADAMDERIVATIONS):   if last.sourceexists then call symputx("nb_algolevels",strip(put(algolevel,8.)));
MPRINT(GADAMDERIVATIONS):   if last.sourceexists then call symputx("nb_algos"||strip(put(algolevel,8.)),strip(put(cnt,8.)));
MPRINT(GADAMDERIVATIONS):   run;

NOTE: There were 14 observations read from the data set WORK.ALGO.
NOTE: The data set WORK.A_NULL_ has 14 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDERIVATIONS):   data _a_1;
The SAS System

MPRINT(GADAMDERIVATIONS):   set adslstart;
MPRINT(GADAMDERIVATIONS):   run;

NOTE: There were 205 observations read from the data set WORK.ADSLSTART.
NOTE: The data set WORK._A_1 has 205 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDERIVATIONS):   data _a_2;
MPRINT(GADAMDERIVATIONS):   set _a_1;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):   if 0 then COHORT= put(" ", $40.) ;
MPRINT(GADAMDERIVATIONS):   COHORT=DMCOHORT;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):   if prxmatch('/^[1-2]\d{3}-[0-1]\d-[0-3]\dT?.*$/i', cats(RFICDTC)) then do;
MPRINT(GADAMDERIVATIONS):   RFICDTC_date=upcase(prxchange('s/^([1-2]\d{3}-[0-1]\d-[0-3]\d)T?.*$/\1/i', 1, cats(RFICDTC)));
MPRINT(GADAMDERIVATIONS):   if RFICDTC_date ne "" then RFICDT=input(RFICDTC_date,yymmdd10.);
MPRINT(GADAMDERIVATIONS):   drop RFICDTC_date;
MPRINT(GADAMDERIVATIONS):   end;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):   ;
The SAS System

MPRINT(GADAMDERIVATIONS):   run;

NOTE: Variable DMCOHORT is uninitialized.
NOTE: There were 205 observations read from the data set WORK._A_1.
NOTE: The data set WORK._A_2 has 205 observations and 33 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MAUTOCOMPLOC:  The autocall macro VSTUDIES is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/gadam/_library/vstudies.sas.
MPRINT(VSTUDIES):   ;
MPRINT(VSTUDIES):  ;
MPRINT(VSTUDIES):   proc sql noprint;
MPRINT(VSTUDIES):   create table pooldm as select distinct usubjid, coalesce(rficdtc, rfstdtc, rfxstdtc, '9999') as stdtc,
MPRINT(VARLIST):   STUDYID, ARMCD, ACTARMCD
MPRINT(VSTUDIES):   from sdtm.dm;
NOTE: Table WORK.POOLDM created, with 205 rows and 5 columns.

MPRINT(VSTUDIES):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.08 seconds
      cpu time            0.09 seconds


MPRINT(VSTUDIES):   data studies(keep=usubjid studyid studyseq studies armcds armcdas _dsmodte_ rename=(studies=cumstud armcds=cumarmcd armcdas=cumarmca _dsmodte_ = dm_modte)) subj
The SAS System

ects(keep=usubjid 
studyseq studies armcds armcdas rename=(studyseq=nstudies));
MPRINT(VSTUDIES):   set pooldm;
MPRINT(VSTUDIES):   by usubjid studyid notsorted;
MPRINT(VSTUDIES):   length studies armcds armcdas $200;
MPRINT(VSTUDIES):   retain studies armcds armcdas;
MPRINT(VSTUDIES):   if first.usubjid then call missing(of studies, armcds, armcdas, studyseq);
MPRINT(VSTUDIES):   _dsmodte_ = _dsmodte_;
MPRINT(VSTUDIES):   studies = catx(', ', studies, studyid);
MPRINT(VSTUDIES):   armcds = catx(', ', armcds, coalescec(armcd, '-'));
MPRINT(VSTUDIES):   armcdas = catx(', ', armcdas, coalescec(actarmcd, '-'));
MPRINT(VSTUDIES):   studyseq+1;
MPRINT(VSTUDIES):   output studies;
MPRINT(VSTUDIES):   if last.usubjid then output subjects;
MPRINT(VSTUDIES):   label studies = "Studies Identifiers Sequence" studyseq= "Study Sequence Number" armcds = "Planned Arm Codes Sequence" armcdas = "Actual Arm Codes Sequence" ;
MPRINT(VSTUDIES):   run;

NOTE: There were 205 observations read from the data set WORK.POOLDM.
NOTE: The data set WORK.STUDIES has 205 observations and 7 variables.
NOTE: The data set WORK.SUBJECTS has 205 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(VSTUDIES):   option msglevel=I;
MPRINT(VSTUDIES):   data subjects_studies(index=(_idx0_=(studyid usubjid)));
MPRINT(VSTUDIES):   merge subjects studies ;
MPRINT(VSTUDIES):   by usubjid;
MPRINT(VSTUDIES):   label nstudies = "Number of Studies" cumstud = "Cumulated Study Identifiers" cumarmcd = "Cumulated Planned Arm Codes" cumarmca = "Cumulated Actual Arm Codes" dm
_modte = "Source DM 
domain last modified date/time" ;
MPRINT(VSTUDIES):   run;
The SAS System


NOTE: There were 205 observations read from the data set WORK.SUBJECTS.
NOTE: There were 205 observations read from the data set WORK.STUDIES.
NOTE: The data set WORK.SUBJECTS_STUDIES has 205 observations and 11 variables.
NOTE: Composite index _idx0_ has been defined.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VSTUDIES):   option msglevel=N;
MPRINT(VSTUDIES):   data _temp;
MPRINT(VSTUDIES):   set WORK._A_2;
MPRINT(VSTUDIES):   _sort = _n_;
MPRINT(VSTUDIES):   run;

NOTE: There were 205 observations read from the data set WORK._A_2.
NOTE: The data set WORK._TEMP has 205 observations and 34 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
The SAS System

MPRINT(VSTUDIES):   proc sql noprint;
MPRINT(VSTUDIES):   create table WORK._A_2 (drop=_sort) as select distinct a.
MPRINT(VARLIST):  * , b.studies , b.armcds , b.armcdas , b.nstudies , b.cumstud , b.cumarmcd , b.cumarmca , b.studyseq , b.dm_modte
MPRINT(VSTUDIES):   from _temp as a left join subjects_studies as b on a.studyid=b.studyid and a.usubjid=b.usubjid order by _sort;
NOTE: Table WORK._A_2 created, with 205 rows and 42 columns.

MPRINT(VSTUDIES):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.28 seconds
      cpu time            0.27 seconds


MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):   ;
MAUTOCOMPLOC:  The autocall macro VADSLTRT is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/gadam/_library/vadsltrt.sas.
MPRINT(VADSLTRT):   ;
MPRINT(VADSLTRT):   proc sql;
MPRINT(VADSLTRT):   create table _ex as select distinct studyid, usubjid, exstdtc, exendtc, coalesce(extrt,'unknown IMP') as extrt length=200 from sdtm.ex where exstdtc ne "" order
 by usubjid, 
studyid, exstdtc, exendtc, extrt;
NOTE: Table WORK._EX created, with 2431 rows and 5 columns.

MPRINT(VADSLTRT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.02 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("TRTSEQA lists EXTRT.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_DRVVARDEF"));
The SAS System

MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_drvvardef  |TRTSEQA lists EXTRT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_DRVVARDEF):   ;
MPRINT(VADSLTRT):  ;
MPRINT(VADSLTRT):   proc sql;
MPRINT(VADSLTRT):   create table _blind as select distinct studyid, extrt, epoch, count(distinct usubjid) as Nsubj_blind from sdtm.ex where upcase(extrt) in ('BLINDED' '') group by
 studyid, extrt, 
epoch;
NOTE: Table WORK._BLIND created, with 0 rows and 4 columns.

MPRINT(VADSLTRT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
The SAS System

      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(VADSLTRT):   proc sql undo_policy=none;
MPRINT(VADSLTRT):   create table _blind as select distinct *, count(distinct epoch||'missing') as Nepoch from _blind group by studyid order by studyid, extrt, epoch;
NOTE: The query requires remerging summary statistics back with the original data.
NOTE: Table WORK._BLIND created, with 0 rows and 5 columns.

MPRINT(VADSLTRT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VADSLTRT):   proc sql undo_policy=none;
MPRINT(VADSLTRT):   create table _blind as select distinct a.studyid, a.extrt, a.Nepoch, a.epoch, a.Nsubj_blind, count(distinct b.usubjid) as Nsubj_unblind from _blind as a left jo
in sdtm.ex 
(where=(extrt not in ('' 'BLINDED'))) as b on a.studyid=b.studyid and a.epoch=b.epoch group by a.studyid, a.epoch order by studyid, extrt;
NOTE: The query requires remerging summary statistics back with the original data.
NOTE: Table WORK._BLIND created, with 0 rows and 6 columns.

MPRINT(VADSLTRT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(VADSLTRT):   filename adamspec "/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/gadam/metadata/argx-adam1.2.xlsx";
MPRINT(VADSLTRT):   proc import out=_across_studies datafile=adamspec dbms=xlsx replace;
MPRINT(VADSLTRT):   RXLX;
MPRINT(VADSLTRT):   range="ADSL$A2:";
MPRINT(VADSLTRT):   getnames=yes;
MPRINT(VADSLTRT):   run;

NOTE: One or more variables were converted because the data type is not supported by the V9 engine. For more details, run with options MSGLEVEL=I.
NOTE: The import data set has 163 observations and 15 variables.
NOTE: WORK._ACROSS_STUDIES data set was successfully created.
NOTE: PROCEDURE IMPORT used (Total process time):
      real time           0.05 seconds
The SAS System

      cpu time            0.06 seconds


MPRINT(VADSLTRT):   proc sql noprint;
MPRINT(VADSLTRT):   select distinct across_studies into :across_studies from _across_studies where name='TRTSEQA';
MPRINT(VADSLTRT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VADSLTRT):   ;
MPRINT(VADSLTRT):   data _ex;
MPRINT(VADSLTRT):   set _ex;
MPRINT(VADSLTRT):   length trt $200.;
MPRINT(VADSLTRT):   if extrt ne 'unknown IMP' then trt=upcase(extrt);
The SAS System

MPRINT(VADSLTRT):   else trt=extrt;
MPRINT(VADSLTRT):   if index(trt,'ARGX-113')>0 then trt=tranwrd(trt,'ARGX-113','EFGARTIGIMOD');
MPRINT(VADSLTRT):   if index(trt,'PH20')>0 and index(trt,'RHUPH20')=0 then trt=tranwrd(trt,'PH20','RHUPH20');
MPRINT(VADSLTRT):   if index(compress(trt),'MG/KG')>0 then trt = strip(scan(trt,1,' ')) ||' '|| compress(strip(substr( trt, length(strip(scan(trt,1,' ')))+1 )));
MPRINT(VADSLTRT):   if index(trt,'BLIND')>0 and index(trt,'BLINDED')=0 then trt=tranwrd(trt,'BLIND','BLINDED');
MPRINT(VADSLTRT):   run;

NOTE: There were 2431 observations read from the data set WORK._EX.
NOTE: The data set WORK._EX has 2431 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(VADSLTRT):   proc sql undo_policy=none;
MPRINT(VADSLTRT):   create table _ex as select distinct a.*, b.actarmcd from _ex as a left join sdtm.dm as b on a.studyid=b.studyid and a.usubjid=b.usubjid order by usubjid, studyi
d, exstdtc, 
exendtc, extrt;
NOTE: Table WORK._EX created, with 2431 rows and 7 columns.

MPRINT(VADSLTRT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.02 seconds


MPRINT(VADSLTRT):   proc sql undo_policy=none;
MPRINT(VADSLTRT):   create table _ex as select distinct a.*, b.tsval as blind, c.tsval as notblind from _ex as a left join sdtm.ts (where=(tsparmcd="TBLIND" and tsval='DOUBLE BLIND
')) as b on 
a.studyid=b.studyid left join sdtm.ts (where=(tsparmcd="TBLIND" and tsval ne 'DOUBLE BLIND')) as c on a.studyid=c.studyid order by usubjid, studyid, exstdtc, exendtc, extrt;
NOTE: Table WORK._EX created, with 2431 rows and 9 columns.

MPRINT(VADSLTRT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds


MPRINT(VADSLTRT):   data _ex;
MPRINT(VADSLTRT):   set _ex;
MPRINT(VADSLTRT):   if (actarmcd='' and index(trt,'/')>0) or trt='unknown IMP' then do;
MPRINT(VADSLTRT):   if blind='DOUBLE BLIND' and notblind='' then trt='BLINDED';
MPRINT(VADSLTRT):   else trt='unknown IMP';
MPRINT(VADSLTRT):   end;
The SAS System

MPRINT(VADSLTRT):   run;

NOTE: There were 2431 observations read from the data set WORK._EX.
NOTE: The data set WORK._EX has 2431 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VADSLTRT):   data _ex_num;
MPRINT(VADSLTRT):   set _ex (drop=extrt actarmcd blind notblind);
MPRINT(VADSLTRT):   if EXENDTC='' then EXENDTC=EXSTDTC;
The SAS System

MPRINT(IMPUTE_DATETIME):   format start_dtm e8601dt.;
MPRINT(IMPUTE_DATETIME):   d = strip(EXSTDTC);
MPRINT(IMPUTE_DATETIME):   if prxmatch('/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}$/i', cats(d)) then start_dtm=input(cats(d), e8601dt.);
MPRINT(IMPUTE_DATETIME):   else if prxmatch('/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}$/i', cats(d)) then do;
MPRINT(IMPUTE_DATETIME):   start_dtm=input(cats(d)||':00', e8601dt.) ;
MPRINT(IMPUTE_DATETIME):   end;
MPRINT(IMPUTE_DATETIME):   else if prxmatch('/^\d{4}-\d{2}-\d{2}T\d{2}$/i', cats(d)) then do;
MPRINT(IMPUTE_DATETIME):   start_dtm=input(cats(d)||':00:00', e8601dt.) ;
MPRINT(IMPUTE_DATETIME):   end;
MPRINT(IMPUTE_DATETIME):   else if prxmatch('/^\d{4}-\d{2}-\d{2}$/i', cats(d)) then do;
MPRINT(IMPUTE_DATETIME):   start_dtm=input(cats(d)||'T00:00:00', e8601dt.) ;
MPRINT(IMPUTE_DATETIME):   end;
MPRINT(IMPUTE_DATETIME):   else do;
MPRINT(IMPUTE_DATETIME):   if index(d,'T') then d=scan(d,1,'T');
MPRINT(IMPUTE_DATETIME):   if index(d,'--') then d=strip(tranwrd(d,'--',''));
MPRINT(IMPUTE_DATETIME):   if length(d)>10 then d=substr(d,1,10);
MPRINT(IMPUTE_DATETIME):   if prxmatch('/^\d{4}-\d{2}-\d{2}$/i', cats(d)) then dtc=d;
MPRINT(IMPUTE_DATETIME):   else if prxmatch('/^\d{4}-\d{2}$/i', cats(d)) then do;
MPRINT(IMPUTE_DATETIME):   dtc=cats(d)||'-01';
MPRINT(IMPUTE_DATETIME):   ;
MPRINT(IMPUTE_DATETIME):   end;
MPRINT(IMPUTE_DATETIME):   else if prxmatch('/^\d{4}$/i', cats(d)) then do;
MPRINT(IMPUTE_DATETIME):   dtc=cats(d)||'01-01' ;
MPRINT(IMPUTE_DATETIME):   end;
MPRINT(IMPUTE_DATETIME):   if dtc ne '' then do;
MPRINT(IMPUTE_DATETIME):   start_dtm=input(cats(dtc)||'T00:00:00', e8601dt.) ;
MPRINT(IMPUTE_DATETIME):   end;
MPRINT(IMPUTE_DATETIME):   drop dtc;
MPRINT(IMPUTE_DATETIME):   end;
MPRINT(IMPUTE_DATETIME):   drop d;
MPRINT(VADSLTRT):  ;
MPRINT(IMPUTE_DATETIME):   format end_dtm e8601dt.;
MPRINT(IMPUTE_DATETIME):   d = strip(EXENDTC);
MPRINT(IMPUTE_DATETIME):   if prxmatch('/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}$/i', cats(d)) then end_dtm=input(cats(d), e8601dt.);
MPRINT(IMPUTE_DATETIME):   else if prxmatch('/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}$/i', cats(d)) then do;
MPRINT(IMPUTE_DATETIME):   end_dtm=input(cats(d)||':59', e8601dt.) ;
MPRINT(IMPUTE_DATETIME):   end;
MPRINT(IMPUTE_DATETIME):   else if prxmatch('/^\d{4}-\d{2}-\d{2}T\d{2}$/i', cats(d)) then do;
MPRINT(IMPUTE_DATETIME):   end_dtm=input(cats(d)||':59:59', e8601dt.) ;
MPRINT(IMPUTE_DATETIME):   end;
MPRINT(IMPUTE_DATETIME):   else if prxmatch('/^\d{4}-\d{2}-\d{2}$/i', cats(d)) then do;
MPRINT(IMPUTE_DATETIME):   end_dtm=input(cats(d)||'T23:59:59', e8601dt.) ;
MPRINT(IMPUTE_DATETIME):   end;
MPRINT(IMPUTE_DATETIME):   else do;
MPRINT(IMPUTE_DATETIME):   if index(d,'T') then d=scan(d,1,'T');
MPRINT(IMPUTE_DATETIME):   if index(d,'--') then d=strip(tranwrd(d,'--',''));
The SAS System

MPRINT(IMPUTE_DATETIME):   if length(d)>10 then d=substr(d,1,10);
MPRINT(IMPUTE_DATETIME):   if prxmatch('/^\d{4}-\d{2}-\d{2}$/i', cats(d)) then dtc=d;
MPRINT(IMPUTE_DATETIME):   else if prxmatch('/^\d{4}-\d{2}$/i', cats(d)) then do;
MPRINT(IMPUTE_DATETIME):   dtc=cats(d)||'-01';
MPRINT(IMPUTE_DATETIME):   dtc=put( intnx('month',input(cats(dtc),e8601da.),1) - 1 , e8601da.) ;
MPRINT(IMPUTE_DATETIME):   end;
MPRINT(IMPUTE_DATETIME):   else if prxmatch('/^\d{4}$/i', cats(d)) then do;
MPRINT(IMPUTE_DATETIME):   dtc=cats(d)||'12-31' ;
MPRINT(IMPUTE_DATETIME):   end;
MPRINT(IMPUTE_DATETIME):   if dtc ne '' then do;
The SAS System

MPRINT(IMPUTE_DATETIME):   end_dtm=input(cats(dtc)||'T23:59:59', e8601dt.) ;
MPRINT(IMPUTE_DATETIME):   end;
MPRINT(IMPUTE_DATETIME):   drop dtc;
MPRINT(IMPUTE_DATETIME):   end;
MPRINT(IMPUTE_DATETIME):   drop d;
MPRINT(VADSLTRT):  ;
MPRINT(VADSLTRT):   if trt in ('PLACEBO' 'RHUPH20') then ord=2;
MPRINT(VADSLTRT):   else ord=1;
MPRINT(VADSLTRT):   run;

NOTE: There were 2431 observations read from the data set WORK._EX.
NOTE: The data set WORK._EX_NUM has 2431 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds


MPRINT(VADSLTRT):   proc sort data=_ex_num noduprec;
MPRINT(VADSLTRT):   by usubjid start_dtm end_dtm ord trt;
MPRINT(VADSLTRT):   run;

NOTE: There were 2431 observations read from the data set WORK._EX_NUM.
NOTE: 0 duplicate observations were deleted.
NOTE: The data set WORK._EX_NUM has 2431 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VADSLTRT):   data _ex_conc (keep=studyid usubjid TRTSEQA);
MPRINT(VADSLTRT):   set _ex_num;
MPRINT(VADSLTRT):   by usubjid start_dtm end_dtm ord trt;
MPRINT(VADSLTRT):   attrib TRTSEQA trt_prev format=$200. start_dtm_prv end_dtm_prv format=e8601dt.;
MPRINT(VADSLTRT):   retain TRTSEQA trt_prev start_dtm_prv end_dtm_prv;
MPRINT(VADSLTRT):   if first.usubjid then do;
MPRINT(VADSLTRT):   TRTSEQA=trt;
MPRINT(VADSLTRT):   trt_prev=trt;
MPRINT(VADSLTRT):   start_dtm_prv=start_dtm;
MPRINT(VADSLTRT):   end_dtm_prv=end_dtm;
MPRINT(VADSLTRT):   end;
MPRINT(VADSLTRT):   else if trt = trt_prev then do;
MPRINT(VADSLTRT):   end_dtm_prv=end_dtm;
MPRINT(VADSLTRT):   end;
MPRINT(VADSLTRT):   else if trt ne trt_prev then do;
MPRINT(VADSLTRT):   if start_dtm gt end_dtm_prv then do;
MPRINT(VADSLTRT):   TRTSEQA=catx(', ',TRTSEQA,trt);
MPRINT(VADSLTRT):   trt_prev=trt;
MPRINT(VADSLTRT):   start_dtm_prv=start_dtm;
The SAS System

MPRINT(VADSLTRT):   end_dtm_prv=end_dtm;
MPRINT(VADSLTRT):   end;
MPRINT(VADSLTRT):   else if trt in ('PLACEBO' 'RHUPH20') then do;
MPRINT(VADSLTRT):   if start_dtm ge start_dtm_prv and end_dtm le end_dtm_prv then do;
MPRINT(VADSLTRT):   TRTSEQA=TRTSEQA;
MPRINT(VADSLTRT):   end;
MPRINT(VADSLTRT):   else if start_dtm ge start_dtm_prv and end_dtm gt end_dtm_prv then do;
MPRINT(VADSLTRT):   TRTSEQA=catx(', ',TRTSEQA,trt);
The SAS System

MPRINT(VADSLTRT):   trt_prev=trt;
MPRINT(VADSLTRT):   start_dtm_prv=start_dtm;
MPRINT(VADSLTRT):   end_dtm_prv=end_dtm;
MPRINT(VADSLTRT):   end;
MPRINT(VADSLTRT):   end;
MPRINT(VADSLTRT):   else do;
MPRINT(VADSLTRT):   *if treatB not PLACEBO or RHUPH20;
MPRINT(VADSLTRT):   if start_dtm=start_dtm_prv and end_dtm=end_dtm_prv then do;
MPRINT(VADSLTRT):   TRTSEQA=catx('+',TRTSEQA,trt);
MPRINT(VADSLTRT):   trt_prev=trt;
MPRINT(VADSLTRT):   end;
MPRINT(VADSLTRT):   else if start_dtm gt start_dtm_prv and end_dtm=end_dtm_prv then do;
MPRINT(VADSLTRT):   TRTSEQA=cats(TRTSEQA)||', '||catx('+',trt_prev,trt);
MPRINT(VADSLTRT):   start_dtm_prv=start_dtm;
MPRINT(VADSLTRT):   trt_prev=trt;
MPRINT(VADSLTRT):   end;
MPRINT(VADSLTRT):   else if start_dtm gt start_dtm_prv and end_dtm lt end_dtm_prv then do;
MPRINT(VADSLTRT):   TRTSEQA=cats(TRTSEQA)||', '||catx('+',trt_prev,trt)||', '||cats(trt_prev);
MPRINT(VADSLTRT):   end;
MPRINT(VADSLTRT):   else if start_dtm gt start_dtm_prv and end_dtm gt end_dtm_prv then do;
MPRINT(VADSLTRT):   TRTSEQA=cats(TRTSEQA)||', '||catx('+',trt_prev,trt)||', '||cats(trt);
MPRINT(VADSLTRT):   trt_prev=trt;
MPRINT(VADSLTRT):   start_dtm_prv=end_dtm_prv;
MPRINT(VADSLTRT):   end_dtm_prv=end_dtm;
MPRINT(VADSLTRT):   end;
MPRINT(VADSLTRT):   end;
MPRINT(VADSLTRT):   end;
MPRINT(VADSLTRT):   if last.usubjid;
MPRINT(VADSLTRT):   run;

NOTE: There were 2431 observations read from the data set WORK._EX_NUM.
NOTE: The data set WORK._EX_CONC has 131 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(VADSLTRT):   proc sql undo_policy=none;
MPRINT(VADSLTRT):   create table WORK._A_2 as select distinct a.*, e.TRTSEQA from WORK._A_2 as a left join _ex_conc as e on a.usubjid=e.usubjid order by usubjid, studyid;
NOTE: Table WORK._A_2 created, with 205 rows and 43 columns.

MPRINT(VADSLTRT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.02 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("TRTSEQA is created.");
MPRINT(BUILDMSG):   length mcr $15;
The SAS System

MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |TRTSEQA is created.
NOTE: DATA statement used (Total process time):
The SAS System

      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(VADSLTRT):  ;
MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):   ;
MAUTOCOMPLOC:  The autocall macro VEOSD is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/gadam/_library/veosd.sas.
MPRINT(VEOSD):   ;
MPRINT(VEOSD):   data _temp;
MPRINT(VEOSD):   set WORK._A_2;
MPRINT(VEOSD):   _sort = _n_;
MPRINT(VEOSD):   run;

NOTE: There were 205 observations read from the data set WORK._A_2.
NOTE: The data set WORK._TEMP has 205 observations and 44 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VEOSD):   proc sql;
MPRINT(VEOSD):   create table _ds as select distinct a.studyid, a.usubjid , case when b.dsdecod ne '' then 'COMPLETED' when c.dsdecod ne '' then 'DISCONTINUED' when s.dsdecod ne ''
 then 'SCREEN 
FAILURE' when r.dsdecod ne '' then 'RESERVE SUBJECT' else '' end as EOSSTT , case when coalesce(b.dsstdtc,c.dsstdtc,s.dsstdtc,r.dsstdtc) ne '' then 
input(coalesce(b.dsstdtc,c.dsstdtc,s.dsstdtc,r.dsstdtc),e8601da.) else . end as dsdt format=e8601da. from sdtm.ds as a left join sdtm.ds (where=( dscat="DISPOSITION EVENT"
MPRINT(VEOSD):   and dsscat in ('TRIAL' 'END OF STUDY') and index(dsdecod,'COMPLET')>0 )) as b on a.studyid=b.studyid and a.usubjid=b.usubjid left join sdtm.ds (where=( dscat="DISP
OSITION EVENT"
MPRINT(VEOSD):   and dsscat in ('TRIAL' 'END OF STUDY') and dsdecod ne '' and prxmatch('/SCREEN.*FAIL/', dsdecod)=0 and prxmatch('/RESERVE.*/', dsdecod)=0 )) as c on a.studyid=c.st
udyid and 
a.usubjid=c.usubjid left join sdtm.ds (where=( dscat="DISPOSITION EVENT" and prxmatch('/SCREEN.*FAIL/', dsdecod) )) as s on a.studyid=s.studyid and a.usubjid=s.usubjid left join sd
tm.ds (where=( 
dscat="DISPOSITION EVENT" and prxmatch('/RESERVE.*/', dsdecod) )) as r on a.studyid=r.studyid and a.usubjid=r.usubjid ;
NOTE: Table WORK._DS created, with 208 rows and 4 columns.

MPRINT(VEOSD):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.11 seconds
      cpu time            0.12 seconds


MPRINT(VEOSD):   proc sql;
MPRINT(VEOSD):   create table _ongoing as select distinct studyid, usubjid, input(dsstdtc,e8601da.) as dsdt format=e8601da. from sdtm.ds where dscat="PROTOCOL MILESTONE" and 
prxmatch('/(RANDOM.+|ELIGIBILITY CRITERIA MET|ENROLLED)/', dsdecod) and dsstdtc ^= ' ' group by studyid, usubjid having input(dsstdtc,e8601da.)=max(input(dsstdtc,e8601da.));
NOTE: The query requires remerging summary statistics back with the original data.
NOTE: Table WORK._ONGOING created, with 131 rows and 3 columns.

MPRINT(VEOSD):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
The SAS System
The SAS System

      cpu time            0.02 seconds


MPRINT(VEOSD):   proc sql;
MPRINT(VEOSD):   create table _ds_final as select distinct a.studyid, a.usubjid , case when a.EOSSTT in ('COMPLETED' 'DISCONTINUED') then a.EOSSTT when b.dsdt ne . then 'ONGOING' w
hen a.EOSSTT in 
('SCREEN FAILURE' 'RESERVE SUBJECT') then a.EOSSTT else '' end as EOSSTT from _ds as a left join _ongoing as b on a.studyid=b.studyid and a.usubjid=b.usubjid and b.dsdt gt a.dsdt;
NOTE: Table WORK._DS_FINAL created, with 205 rows and 3 columns.

MPRINT(VEOSD):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VEOSD):   proc sql undo_policy=none;
MPRINT(VEOSD):   create table _temp as select distinct a.*, coalesce(b.EOSSTT,'ONGOING') as EOSSTT from _temp as a left join _ds_final as b on a.studyid=b.studyid and a.usubjid=b.u
subjid order by 
_sort;
NOTE: Table WORK._TEMP created, with 205 rows and 45 columns.

MPRINT(VEOSD):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


MPRINT(VEOSD):   proc sql;
MPRINT(VEOSD):   create table _dsdt as select distinct studyid, usubjid, dsstdtc from sdtm.ds where dscat="DISPOSITION EVENT" and dsstdtc ne ''
MPRINT(VEOSD):   and dsscat in ('TRIAL' 'END OF STUDY') ;
NOTE: Table WORK._DSDT created, with 235 rows and 3 columns.

MPRINT(VEOSD):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.05 seconds
      cpu time            0.05 seconds


MPRINT(VEOSD):   data _dsdt;
MPRINT(VEOSD):   set _dsdt;
MPRINT(VEOSD):   by studyid usubjid dsstdtc;
MPRINT(VEOSD):   format EOSDT e8601da.;
MPRINT(VEOSD):   if prxmatch('/^[1-2]\d{3}-[0-1]\d-[0-3]\dT?.*$/i', cats(dsstdtc)) then do;
MPRINT(VEOSD):   dsstdtc_date=upcase(prxchange('s/^([1-2]\d{3}-[0-1]\d-[0-3]\d)T?.*$/\1/i', 1, cats(dsstdtc)));
MPRINT(VEOSD):   if dsstdtc_date ne "" then EOSDT=input(substr(dsstdtc_date,1,10),e8601da.);
MPRINT(VEOSD):   drop dsstdtc_date;
MPRINT(VEOSD):   end;
MPRINT(VEOSD):   if last.usubjid;
MPRINT(VEOSD):   *- JMB 2022-02-15 - keep only last disposition event (e.g. in case subject was an initial screen failure then re-screened and randomized) -*;
MPRINT(VEOSD):   run;

NOTE: There were 235 observations read from the data set WORK._DSDT.
NOTE: The data set WORK._DSDT has 205 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
The SAS System

MPRINT(VEOSD):   proc sql undo_policy=none;
MPRINT(VEOSD):   create table _temp as select distinct a.*, b.EOSDT from _temp as a left join _dsdt as b on a.studyid=b.studyid and a.usubjid=b.usubjid order by _sort;
The SAS System

NOTE: Table WORK._TEMP created, with 205 rows and 46 columns.

MPRINT(VEOSD):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.02 seconds


MPRINT(VEOSD):   proc sql;
MPRINT(VEOSD):   create table _dsreas as select distinct a.*, b.dsseq , b.dsdecod as DCSREAS, case when b.dsdecod='OTHER' then b.dsterm else '' end as DCSREASP from _dsdt as a left
 join sdtm.ds 
(where=( DSCAT="DISPOSITION EVENT" and dsdecod ne '' and index(dsdecod,'COMPLET')=0 and prxmatch('/SCREEN.*FAIL/', dsdecod)=0 and prxmatch('/RESERVE.*/', dsdecod)=0
MPRINT(VEOSD):   and dsscat in ('TRIAL' 'END OF STUDY') )) as b on a.studyid=b.studyid and a.usubjid=b.usubjid and a.dsstdtc=b.dsstdtc;
NOTE: Table WORK._DSREAS created, with 205 rows and 7 columns.

MPRINT(VEOSD):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.05 seconds
      cpu time            0.05 seconds


MPRINT(VEOSD):   data _dsreas (rename=(DCSREASP_=DCSREASP));
MPRINT(VEOSD):   set _dsreas;
MPRINT(VEOSD):   by studyid usubjid DCSREAS DCSREASP;
MPRINT(VEOSD):   format DCSREASP_ $200.;
MPRINT(VEOSD):   retain DCSREASP_;
MPRINT(VEOSD):   if first.DCSREAS then DCSREASP_=DCSREASP;
MPRINT(VEOSD):   else if DCSREASP_ ne '' and DCSREASP ne '' then DCSREASP_=catx( '+ ',DCSREASP_,DCSREASP);
MPRINT(VEOSD):   else if DCSREASP ne '' then DCSREASP_=DCSREASP;
MPRINT(VEOSD):   if last.DCSREAS then do;
MPRINT(VEOSD):   if DCSREAS in ('ADVERSE EVENT' 'OTHER') and DCSREASP_='' then DCSREASP_='Missing';
MPRINT(VEOSD):   output;
MPRINT(VEOSD):   end;
MPRINT(VEOSD):   drop DCSREASP;
MPRINT(VEOSD):   run;

NOTE: There were 205 observations read from the data set WORK._DSREAS.
NOTE: The data set WORK._DSREAS has 205 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VEOSD):   data _dsreas (rename=(DCSREAS_=DCSREAS DCSREASP_=DCSREASP));
MPRINT(VEOSD):   set _dsreas;
MPRINT(VEOSD):   by studyid usubjid DCSREAS;
MPRINT(VEOSD):   format DCSREAS_ DCSREASP_ $200.;
MPRINT(VEOSD):   retain DCSREAS_ DCSREASP_;
MPRINT(VEOSD):   if first.usubjid then do;
MPRINT(VEOSD):   DCSREAS_=DCSREAS;
MPRINT(VEOSD):   DCSREASP_=DCSREASP;
MPRINT(VEOSD):   end;
MPRINT(VEOSD):   else do;
MPRINT(VEOSD):   DCSREAS_=catx(' + ',DCSREAS_,DCSREAS);
The SAS System

MPRINT(VEOSD):   DCSREASP_=catx(' + ',DCSREASP_,DCSREASP);
MPRINT(VEOSD):   end;
MPRINT(VEOSD):   if last.usubjid;
MPRINT(VEOSD):   drop DCSREAS DCSREASP;
MPRINT(VEOSD):   run;
The SAS System


NOTE: There were 205 observations read from the data set WORK._DSREAS.
NOTE: The data set WORK._DSREAS has 205 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VEOSD):   proc sql undo_policy=none;
MPRINT(VEOSD):   create table WORK._A_2 (drop=_sort) as select distinct a.*, b.DCSREAS, b.DCSREASP from _temp as a left join _dsreas as b on a.studyid=b.studyid and a.usubjid=b.usu
bjid order by _sort;
NOTE: Table WORK._A_2 created, with 205 rows and 47 columns.

MPRINT(VEOSD):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.02 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("EOSSTT/EOSDT/DCSREAS/DCSREASP are defined from DS.DSDECOD and DS.DSSTDTC.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_DRVVARDEF"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_drvvardef  |EOSSTT/EOSDT/DCSREAS/DCSREASP are defined from DS.DSDECOD and DS.DSSTDTC.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_DRVVARDEF):   ;
MPRINT(VEOSD):  ;
MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("EOSSTT, EOSDT, DCSREAS/DCSREASP are created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |EOSSTT, EOSDT, DCSREAS/DCSREASP are created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(VEOSD):  ;
The SAS System

MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):   ;
MAUTOCOMPLOC:  The autocall macro VADSLTRTSDT is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/gadam/_library/vadsltrtsdt.sas.
MPRINT(VADSLTRTSDT):   data din;
MPRINT(VADSLTRTSDT):   set WORK._A_2 ;
MPRINT(VADSLTRTSDT):   osortorder = _n_;
The SAS System

MPRINT(VADSLTRTSDT):   run;

NOTE: There were 205 observations read from the data set WORK._A_2.
NOTE: The data set WORK.DIN has 205 observations and 48 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VADSLTRTSDT):   filename adamspec "/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/gadam/metadata/argx-adam1.2.xlsx";
MAUTOCOMPLOC:  The autocall macro GET_XLS_SHEETNAMES is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library/get_xls_sheetnames.sas.
MPRINT(GET_XLS_SHEETNAMES):   *- The following 3 macros definitions are from SAS Support / Samples and Notes: Sample 38518: Dynamically setting the CLASSPATH for use in a DATA step
 that uses the Java 
object component available at https://support.sas.com/kb/38/518.html -------------------------------------------------------------------------------------------------------------*;
MPRINT(INIT_CLASSPATH_UPDATE):   DATA _null_;
MPRINT(INIT_CLASSPATH_UPDATE):   LENGTH path_separator $ 2 orig_classpath $ 500;
MPRINT(INIT_CLASSPATH_UPDATE):   DECLARE JavaObj f("java.io.File", "");
MPRINT(INIT_CLASSPATH_UPDATE):   f.getStaticStringField("pathSeparator", path_separator);
MPRINT(INIT_CLASSPATH_UPDATE):   orig_classpath = STRIP(SYSGET("CLASSPATH"));
MPRINT(INIT_CLASSPATH_UPDATE):   IF _ERROR_ = 1 OR LENGTH(orig_classpath) = 0 THEN DO;
MPRINT(INIT_CLASSPATH_UPDATE):   PUT "NOTE: Ignore any messages from the next statement(s)";
MPRINT(INIT_CLASSPATH_UPDATE):   orig_classpath = "";
MPRINT(INIT_CLASSPATH_UPDATE):   END;
MPRINT(INIT_CLASSPATH_UPDATE):   if orig_classpath = "" then CALL SYMPUT('CP_orig_classpath', SYSGET("CLASSPATH"));
MPRINT(INIT_CLASSPATH_UPDATE):   else CALL SYMPUT('CP_orig_classpath', STRIP(orig_classpath));
MPRINT(INIT_CLASSPATH_UPDATE):   CALL SYMPUT('CP_path_separator', COMPRESS(path_separator));
MPRINT(INIT_CLASSPATH_UPDATE):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GET_XLS_SHEETNAMES):  ;
MPRINT(ADD_TO_CLASSPATH):   DATA _null_;
MPRINT(ADD_TO_CLASSPATH):   LENGTH current_classpath $ 500 new_classpath $ 500;
MPRINT(ADD_TO_CLASSPATH):   current_classpath = STRIP(SYSGET("CLASSPATH"));
MPRINT(ADD_TO_CLASSPATH):   IF _ERROR_ = 1 OR LENGTH(current_classpath) = 0 THEN DO;
MPRINT(ADD_TO_CLASSPATH):   PUT "NOTE: Ignore any messages from the nearby statement(s)";
MPRINT(ADD_TO_CLASSPATH):   new_classpath = "/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library/excelprop.jar";
MPRINT(ADD_TO_CLASSPATH):   END;
MPRINT(ADD_TO_CLASSPATH):   ELSE DO;
MPRINT(ADD_TO_CLASSPATH):   new_classpath = COMPRESS(current_classpath) || ":" || 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library/excelprop.jar";
MPRINT(ADD_TO_CLASSPATH):   END;
MPRINT(ADD_TO_CLASSPATH):   CALL SYMPUT('CP_new_classpath', STRIP(new_classpath));
MPRINT(ADD_TO_CLASSPATH):   RUN;
The SAS System


NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


NOTE: Setting Java classpath to !CLASSPATH:/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library/excelprop.jar
MPRINT(ADD_TO_CLASSPATH):   OPTIONS SET=CLASSPATH "!CLASSPATH:/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library
/excelprop.jar";
MPRINT(GET_XLS_SHEETNAMES):  ;
MPRINT(GET_XLS_SHEETNAMES):   data _codelist_sheet _null_;
MPRINT(GET_XLS_SHEETNAMES):   attrib FILENAME length=$400 label='[FILENAME]' SHEET_NAMES length=$400 label='[SHEET_NAMES]' ;
The SAS System

MPRINT(GET_XLS_SHEETNAMES):   FILENAME = "/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/gadam/metadata/argx-adam1.2.xlsx";
MPRINT(GET_XLS_SHEETNAMES):   declare javaobj ExcelProperty("app/ExcelProperty");
MPRINT(GET_XLS_SHEETNAMES):   ExcelProperty.callStaticVoidMethod("setExcelFileName", 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/gadam/metadata/argx-adam1.2.xlsx");
MPRINT(GET_XLS_SHEETNAMES):   ExcelProperty.callStaticStringMethod("getSheetList", SHEET_NAMES);
MPRINT(GET_XLS_SHEETNAMES):   call symputx("_codelist_sheet", strip(SHEET_NAMES), ifc(symexist("_codelist_sheet"), " ", "G"));
MPRINT(GET_XLS_SHEETNAMES):   run;

NOTE: The data set WORK._CODELIST_SHEET has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           6.41 seconds
      cpu time            0.00 seconds


NOTE: Setting Java classpath back to its original state: !CLASSPATH
MPRINT(RESET_CLASSPATH):   OPTIONS SET=CLASSPATH "!CLASSPATH";
MPRINT(GET_XLS_SHEETNAMES):  ;
MPRINT(VADSLTRTSDT):  ;
MPRINT(VADSLTRTSDT):   proc import out=_across_studies datafile=adamspec dbms=xlsx replace;
MPRINT(VADSLTRTSDT):   RXLX;
MPRINT(VADSLTRTSDT):   range="ADSL$A2:";
MPRINT(VADSLTRTSDT):   getnames=yes;
MPRINT(VADSLTRTSDT):   run;

NOTE: One or more variables were converted because the data type is not supported by the V9 engine. For more details, run with options MSGLEVEL=I.
NOTE: The import data set has 163 observations and 15 variables.
NOTE: WORK._ACROSS_STUDIES data set was successfully created.
NOTE: PROCEDURE IMPORT used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds


MPRINT(VADSLTRTSDT):   proc sql noprint;
MPRINT(VADSLTRTSDT):   select distinct across_studies into :across_studies from _across_studies where name='TRTSDT';
MPRINT(VADSLTRTSDT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VADSLTRTSDT):   ;
MAUTOCOMPLOC:  The autocall macro GADAMDATETIME is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/gadam/_library/gadamdatetime.sas.
USER MESSAGE: MACRO addtm: Create date and datetime variables in a dataset
The SAS System

MPRINT(GADAMDATETIME):   proc contents data=sdtm.ex out=_addtm01(keep=name label) noprint;
MPRINT(GADAMDATETIME):   run;

NOTE: The data set WORK._ADDTM01 has 18 observations and 2 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDATETIME):   data _addtm02;
MPRINT(GADAMDATETIME):   set _addtm01;
MPRINT(GADAMDATETIME):   where "EXSTDTC" contains upcase(strip(name));
MPRINT(GADAMDATETIME):   name=upcase(name);
MPRINT(GADAMDATETIME):   if substr(name,length(name)-2,3)='DTC';
The SAS System

MPRINT(GADAMDATETIME):   name1=tranwrd(name,'DTC','DT');
MPRINT(GADAMDATETIME):   name1=tranwrd(name1,'STDT','SDT');
MPRINT(GADAMDATETIME):   name1=tranwrd(name1,'ENDT','EDT');
MPRINT(GADAMDATETIME):   name2=tranwrd(name,'DTC','DTM');
MPRINT(GADAMDATETIME):   name2=tranwrd(name2,'STDTM','SDTM');
MPRINT(GADAMDATETIME):   name2=tranwrd(name2,'ENDTM','EDTM');
MPRINT(GADAMDATETIME):   name3=tranwrd(name,'DTC','TM');
MPRINT(GADAMDATETIME):   name3=tranwrd(name3,'STTM','STM');
MPRINT(GADAMDATETIME):   name3=tranwrd(name3,'ENTM','ETM');
MPRINT(GADAMDATETIME):   label1=compbl(tranwrd(label,'/Time', ' '));
MPRINT(GADAMDATETIME):   label3=compbl(tranwrd(label,'Date/', ' '));
MPRINT(GADAMDATETIME):   run;

NOTE: There were 1 observations read from the data set WORK._ADDTM01.
      WHERE 'EXSTDTC' contains UPCASE(STRIP(name));
NOTE: The data set WORK._ADDTM02 has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDATETIME):   data _null_;
MPRINT(GADAMDATETIME):   set _addtm02 end=eof;
MPRINT(GADAMDATETIME):   retain count 0;
MPRINT(GADAMDATETIME):   count+1;
MPRINT(GADAMDATETIME):   call symput('var' !! left(put(count,8.)),trim(name));
MPRINT(GADAMDATETIME):   call symput('date' !! left(put(count,8.)),trim(name1));
MPRINT(GADAMDATETIME):   call symput('dtime' !! left(put(count,8.)),trim(name2));
MPRINT(GADAMDATETIME):   call symput('time' !! left(put(count,8.)),trim(name3));
MPRINT(GADAMDATETIME):   call symput('dlbl' !! left(put(count,8.)),trim(left(label1)));
MPRINT(GADAMDATETIME):   call symput('dtlbl' !! left(put(count,8.)),trim(left(label)));
MPRINT(GADAMDATETIME):   call symput('tlbl' !! left(put(count,8.)),trim(left(label3)));
MPRINT(GADAMDATETIME):   if eof then do;
MPRINT(GADAMDATETIME):   call symput('numvar',left(put(count,8.)));
MPRINT(GADAMDATETIME):   end;
MPRINT(GADAMDATETIME):   run;

NOTE: There were 1 observations read from the data set WORK._ADDTM02.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
The SAS System


MPRINT(GADAMDATETIME):   data _addtm03;
MPRINT(GADAMDATETIME):   set sdtm.ex end=eof;
MPRINT(GADAMDATETIME):   format EXSDT date9. EXSDTM datetime20. EXSTM time8.;
MPRINT(GADAMDATETIME):   if length(EXSTDTC)>=16 then do;
MPRINT(GADAMDATETIME):   EXSDT=input(substr(EXSTDTC,1,10),yymmdd10.);
MPRINT(GADAMDATETIME):   EXSDTM=dhms(EXSDT,0,0,input(substr(EXSTDTC,12),time.));
MPRINT(GADAMDATETIME):   EXSTM=input(substr(EXSTDTC,12),time.);
MPRINT(GADAMDATETIME):   end;
MPRINT(GADAMDATETIME):   else if 10<=length(EXSTDTC)<16 and index(substr(EXSTDTC,1,10),'T')=0 then EXSDT=input(substr(EXSTDTC,1,10),yymmdd10.);
MPRINT(GADAMDATETIME):   else if index(EXSTDTC,'T')>0 then EXSTM=input(scan(EXSTDTC,2,'T'),time.);
MPRINT(GADAMDATETIME):   if EXSDTM>. then _dt1+1;
MPRINT(GADAMDATETIME):   if EXSDT>. then _d1+1;
MPRINT(GADAMDATETIME):   if EXSTM>. then _t1+1;
MPRINT(GADAMDATETIME):   if eof and _dt1<1 and "N" = "N" then call symput("dropdt1",'y');
MPRINT(GADAMDATETIME):   else if eof and _dt1<1 and "N"="Y" then call symput("dropdt1",'n');
The SAS System

MPRINT(GADAMDATETIME):   if eof and _t1<1 and "N" = "N" then call symput("dropt1",'y');
MPRINT(GADAMDATETIME):   else if eof and _t1<1 and "N"="Y" then call symput("dropt1",'n');
MPRINT(GADAMDATETIME):   drop _dt1 _d1 _t1;
MPRINT(GADAMDATETIME):   run;

NOTE: There were 5851 observations read from the data set SDTM.EX.
NOTE: The data set WORK._ADDTM03 has 5851 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


MPRINT(GADAMDATETIME):   data ex(drop=);
MPRINT(GADAMDATETIME):   set _addtm03;
MPRINT(GADAMDATETIME):   label EXSDT = "Start Date of Treatment";
MPRINT(GADAMDATETIME):   label EXSDTM= "Start Date/Time of Treatment";
MPRINT(GADAMDATETIME):   label EXSTM = "Start Time of Treatment";
MPRINT(GADAMDATETIME):   ;
MPRINT(GADAMDATETIME):  ;
MPRINT(GADAMDATETIME):   ;
MPRINT(GADAMDATETIME):   drop EXSTDTC ;
MPRINT(GADAMDATETIME):   run;

NOTE: There were 5851 observations read from the data set WORK._ADDTM03.
NOTE: The data set WORK.EX has 5851 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(GADAMDATETIME):   proc datasets lib=work memtype=data nolist;
MPRINT(GADAMDATETIME):   delete _addtm: ;
MPRINT(GADAMDATETIME):   quit;

NOTE: Deleting WORK._ADDTM01 (memtype=DATA).
NOTE: Deleting WORK._ADDTM02 (memtype=DATA).
NOTE: Deleting WORK._ADDTM03 (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
The SAS System



MPRINT(VADSLTRTSDT):  ;
MPRINT(VADSLTRTSDT):   proc sort data=ex ( keep = usubjid exsdt exsdtm where = (exsdt ne .) );
MPRINT(VADSLTRTSDT):   by usubjid exsdt exsdtm;
MPRINT(VADSLTRTSDT):   run;

NOTE: There were 5851 observations read from the data set WORK.EX.
      WHERE exsdt not = .;
NOTE: The data set WORK.EX has 5851 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(VADSLTRTSDT):   data firstdose (drop=exsdt exsdtm);
MPRINT(VADSLTRTSDT):   set ex;
MPRINT(VADSLTRTSDT):   by usubjid exsdt exsdtm;
The SAS System

MPRINT(VADSLTRTSDT):   retain trtsdt trtsdtm;
MPRINT(VADSLTRTSDT):   if first.usubjid then do;
MPRINT(VADSLTRTSDT):   trtsdt = exsdt;
MPRINT(VADSLTRTSDT):   trtsdtm = exsdtm;
MPRINT(VADSLTRTSDT):   end;
MPRINT(VADSLTRTSDT):   else if trtsdtm = . and exsdtm ne . and exsdt = trtsdt then trtsdtm=exsdtm;
MPRINT(VADSLTRTSDT):   if last.usubjid;
MPRINT(VADSLTRTSDT):   run;

NOTE: There were 5851 observations read from the data set WORK.EX.
NOTE: The data set WORK.FIRSTDOSE has 131 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(VADSLTRTSDT):   proc sort data=din;
MPRINT(VADSLTRTSDT):   by usubjid;
MPRINT(VADSLTRTSDT):   run;

NOTE: There were 205 observations read from the data set WORK.DIN.
NOTE: The data set WORK.DIN has 205 observations and 48 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(UNI_VLENGTH):   *- Harmonize length of character variables in Data= datasets According to the length found in Ref= datasests (if specified) -*;
MPRINT(UNI_VLENGTH):   proc sql noprint;
MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated by " " from (select distinct 
upcase(LIBNAME) as 
LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.DIN" "WORK.FIRSTDOSE" )) then 
LENGTH else . end ) 
as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.DIN" "WORK.DIN" "WORK.FIRSTDOSE" ) group by upcase(name)) group by upcase(name), upcase(typ
e) having 
sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK.DIN" and TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.DIN" "WORK.FIRSTDOSE" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
The SAS System

MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(UNI_VLENGTH):   alter table WORK.DIN modify ACTARM character(20), ACTARMCD character(6), ACTARMUD character(63), AGEU character(5), ARM character(20), ARMCD character(6), AR
MCDAS 
character(200), ARMCDS character(200), ARMNRS character(19), BRTHDTC character(4), COHORT character(40), COUNTRY character(3), CUMARMCA character(200), CUMARMCD character(200), CUM
STUD 
character(200), DCSREAS character(200), DCSREASP character(200), DMCOHORT character(8), DOMAIN character(2), DTHDTC character(1), DTHFL character(1), EOSSTT character(15), ETHNIC c
haracter(22), 
INVNAM character(25), JAPANESE character(4), RACE character(25), RACEOTH character(4), RFENDTC character(10), RFICDTC character(10), RFPENDTC character(19), RFSTDTC character(16), 
RFXENDTC 
character(16), RFXSTDTC character(16), SEX character(1), SITEID character(7), STUDIES character(200), STUDYID character(13), SUBJID character(10), TRTSEQA character(200), USUBJID c
haracter(25), 
_IN_SUPP_FL character(1) ;
NOTE: Table WORK.DIN has been modified, with 48 columns.
MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated by " " from (select distinct 
upcase(LIBNAME) as 
LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.DIN" "WORK.FIRSTDOSE" )) then 
LENGTH else . end ) 
as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.FIRSTDOSE" "WORK.DIN" "WORK.FIRSTDOSE" ) group by upcase(name)) group by upcase(name), upca
se(type) having 
sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK.FIRSTDOSE" and TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.DIN" "WORK.FIRSTDOSE" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(UNI_VLENGTH):   alter table WORK.FIRSTDOSE modify USUBJID character(25) ;
NOTE: Table WORK.FIRSTDOSE has been modified, with 3 columns.
MPRINT(UNI_VLENGTH):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.31 seconds
      cpu time            0.31 seconds


The SAS System

MPRINT(VADSLTRTSDT):  ;
MPRINT(VADSLTRTSDT):   data dinfd;
MPRINT(VADSLTRTSDT):   merge din (in=a) firstdose;
MPRINT(VADSLTRTSDT):   by usubjid;
MPRINT(VADSLTRTSDT):   if a;
MPRINT(VADSLTRTSDT):   run;

NOTE: There were 205 observations read from the data set WORK.DIN.
NOTE: There were 131 observations read from the data set WORK.FIRSTDOSE.
NOTE: The data set WORK.DINFD has 205 observations and 50 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(VADSLTRTSDT):   proc sort data=dinfd out=WORK._A_2 (drop=osortorder);
MPRINT(VADSLTRTSDT):   by osortorder;
MPRINT(VADSLTRTSDT):   run;

NOTE: There were 205 observations read from the data set WORK.DINFD.
NOTE: The data set WORK._A_2 has 205 observations and 49 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
The SAS System


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("TRTSDT(M) is defined as minimum of EXSTDTC per USUBJID.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_DRVVARDEF"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_drvvardef  |TRTSDT(M) is defined as minimum of EXSTDTC per USUBJID.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_DRVVARDEF):   ;
MPRINT(VADSLTRTSDT):  ;
MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("trtsdt, trtsdtm is/are created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |trtsdt, trtsdtm is/are created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(VADSLTRTSDT):  ;
The SAS System

MPRINT(VADSLTRTSDT):   *- JMB 2022-03-21 - adapt code in case TRTSDTM is not defined. -*;
MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):   ;
MAUTOCOMPLOC:  The autocall macro VADSLTRTEDT is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/gadam/_library/vadsltrtedt.sas.
MPRINT(VADSLTRTEDT):   data din;
MPRINT(VADSLTRTEDT):   set WORK._A_2 ;
MPRINT(VADSLTRTEDT):   osortorder = _n_;
MPRINT(VADSLTRTEDT):   run;

NOTE: There were 205 observations read from the data set WORK._A_2.
NOTE: The data set WORK.DIN has 205 observations and 50 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VADSLTRTEDT):   filename adamspec "/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/gadam/metadata/argx-adam1.2.xlsx";
MPRINT(GET_XLS_SHEETNAMES):   *- The following 3 macros definitions are from SAS Support / Samples and Notes: Sample 38518: Dynamically setting the CLASSPATH for use in a DATA step
 that uses the Java 
object component available at https://support.sas.com/kb/38/518.html -------------------------------------------------------------------------------------------------------------*;
MPRINT(INIT_CLASSPATH_UPDATE):   DATA _null_;
MPRINT(INIT_CLASSPATH_UPDATE):   LENGTH path_separator $ 2 orig_classpath $ 500;
The SAS System

MPRINT(INIT_CLASSPATH_UPDATE):   DECLARE JavaObj f("java.io.File", "");
MPRINT(INIT_CLASSPATH_UPDATE):   f.getStaticStringField("pathSeparator", path_separator);
MPRINT(INIT_CLASSPATH_UPDATE):   orig_classpath = STRIP(SYSGET("CLASSPATH"));
MPRINT(INIT_CLASSPATH_UPDATE):   IF _ERROR_ = 1 OR LENGTH(orig_classpath) = 0 THEN DO;
MPRINT(INIT_CLASSPATH_UPDATE):   PUT "NOTE: Ignore any messages from the next statement(s)";
MPRINT(INIT_CLASSPATH_UPDATE):   orig_classpath = "";
MPRINT(INIT_CLASSPATH_UPDATE):   END;
MPRINT(INIT_CLASSPATH_UPDATE):   if orig_classpath = "" then CALL SYMPUT('CP_orig_classpath', SYSGET("CLASSPATH"));
MPRINT(INIT_CLASSPATH_UPDATE):   else CALL SYMPUT('CP_orig_classpath', STRIP(orig_classpath));
MPRINT(INIT_CLASSPATH_UPDATE):   CALL SYMPUT('CP_path_separator', COMPRESS(path_separator));
MPRINT(INIT_CLASSPATH_UPDATE):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GET_XLS_SHEETNAMES):  ;
MPRINT(ADD_TO_CLASSPATH):   DATA _null_;
MPRINT(ADD_TO_CLASSPATH):   LENGTH current_classpath $ 500 new_classpath $ 500;
MPRINT(ADD_TO_CLASSPATH):   current_classpath = STRIP(SYSGET("CLASSPATH"));
MPRINT(ADD_TO_CLASSPATH):   IF _ERROR_ = 1 OR LENGTH(current_classpath) = 0 THEN DO;
MPRINT(ADD_TO_CLASSPATH):   PUT "NOTE: Ignore any messages from the nearby statement(s)";
MPRINT(ADD_TO_CLASSPATH):   new_classpath = "/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library/excelprop.jar";
MPRINT(ADD_TO_CLASSPATH):   END;
MPRINT(ADD_TO_CLASSPATH):   ELSE DO;
MPRINT(ADD_TO_CLASSPATH):   new_classpath = COMPRESS(current_classpath) || ":" || 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library/excelprop.jar";
MPRINT(ADD_TO_CLASSPATH):   END;
MPRINT(ADD_TO_CLASSPATH):   CALL SYMPUT('CP_new_classpath', STRIP(new_classpath));
MPRINT(ADD_TO_CLASSPATH):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds

The SAS System


NOTE: Setting Java classpath to !CLASSPATH:/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library/excelprop.jar
MPRINT(ADD_TO_CLASSPATH):   OPTIONS SET=CLASSPATH "!CLASSPATH:/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library
/excelprop.jar";
MPRINT(GET_XLS_SHEETNAMES):  ;
MPRINT(GET_XLS_SHEETNAMES):   data _codelist_sheet _null_;
MPRINT(GET_XLS_SHEETNAMES):   attrib FILENAME length=$400 label='[FILENAME]' SHEET_NAMES length=$400 label='[SHEET_NAMES]' ;
MPRINT(GET_XLS_SHEETNAMES):   FILENAME = "/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/gadam/metadata/argx-adam1.2.xlsx";
MPRINT(GET_XLS_SHEETNAMES):   declare javaobj ExcelProperty("app/ExcelProperty");
MPRINT(GET_XLS_SHEETNAMES):   ExcelProperty.callStaticVoidMethod("setExcelFileName", 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/gadam/metadata/argx-adam1.2.xlsx");
MPRINT(GET_XLS_SHEETNAMES):   ExcelProperty.callStaticStringMethod("getSheetList", SHEET_NAMES);
MPRINT(GET_XLS_SHEETNAMES):   call symputx("_codelist_sheet", strip(SHEET_NAMES), ifc(symexist("_codelist_sheet"), " ", "G"));
MPRINT(GET_XLS_SHEETNAMES):   run;

NOTE: The data set WORK._CODELIST_SHEET has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           5.80 seconds
      cpu time            0.00 seconds
The SAS System


NOTE: Setting Java classpath back to its original state: !CLASSPATH
MPRINT(RESET_CLASSPATH):   OPTIONS SET=CLASSPATH "!CLASSPATH";
MPRINT(GET_XLS_SHEETNAMES):  ;
MPRINT(VADSLTRTEDT):  ;
MPRINT(VADSLTRTEDT):   proc import out=_across_studies datafile=adamspec dbms=xlsx replace;
MPRINT(VADSLTRTEDT):   RXLX;
MPRINT(VADSLTRTEDT):   range="ADSL$A2:";
MPRINT(VADSLTRTEDT):   getnames=yes;
MPRINT(VADSLTRTEDT):   run;

NOTE: One or more variables were converted because the data type is not supported by the V9 engine. For more details, run with options MSGLEVEL=I.
NOTE: The import data set has 163 observations and 15 variables.
NOTE: WORK._ACROSS_STUDIES data set was successfully created.
NOTE: PROCEDURE IMPORT used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds


MPRINT(VADSLTRTEDT):   proc sql noprint;
MPRINT(VADSLTRTEDT):   select distinct across_studies into :across_studies from _across_studies where name='TRTEDT';
MPRINT(VADSLTRTEDT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VADSLTRTEDT):   ;
USER MESSAGE: MACRO addtm: Create date and datetime variables in a dataset
MPRINT(GADAMDATETIME):   proc contents data=sdtm.ex out=_addtm01(keep=name label) noprint;
MPRINT(GADAMDATETIME):   run;

NOTE: The data set WORK._ADDTM01 has 18 observations and 2 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDATETIME):   data _addtm02;
The SAS System

MPRINT(GADAMDATETIME):   set _addtm01;
MPRINT(GADAMDATETIME):   where "EXSTDTC EXENDTC" contains upcase(strip(name));
MPRINT(GADAMDATETIME):   name=upcase(name);
MPRINT(GADAMDATETIME):   if substr(name,length(name)-2,3)='DTC';
MPRINT(GADAMDATETIME):   name1=tranwrd(name,'DTC','DT');
MPRINT(GADAMDATETIME):   name1=tranwrd(name1,'STDT','SDT');
MPRINT(GADAMDATETIME):   name1=tranwrd(name1,'ENDT','EDT');
MPRINT(GADAMDATETIME):   name2=tranwrd(name,'DTC','DTM');
MPRINT(GADAMDATETIME):   name2=tranwrd(name2,'STDTM','SDTM');
MPRINT(GADAMDATETIME):   name2=tranwrd(name2,'ENDTM','EDTM');
MPRINT(GADAMDATETIME):   name3=tranwrd(name,'DTC','TM');
MPRINT(GADAMDATETIME):   name3=tranwrd(name3,'STTM','STM');
MPRINT(GADAMDATETIME):   name3=tranwrd(name3,'ENTM','ETM');
MPRINT(GADAMDATETIME):   label1=compbl(tranwrd(label,'/Time', ' '));
MPRINT(GADAMDATETIME):   label3=compbl(tranwrd(label,'Date/', ' '));
MPRINT(GADAMDATETIME):   run;
The SAS System

NOTE: There were 2 observations read from the data set WORK._ADDTM01.
      WHERE 'EXSTDTC EXENDTC' contains UPCASE(STRIP(name));
NOTE: The data set WORK._ADDTM02 has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(GADAMDATETIME):   data _null_;
MPRINT(GADAMDATETIME):   set _addtm02 end=eof;
MPRINT(GADAMDATETIME):   retain count 0;
MPRINT(GADAMDATETIME):   count+1;
MPRINT(GADAMDATETIME):   call symput('var' !! left(put(count,8.)),trim(name));
MPRINT(GADAMDATETIME):   call symput('date' !! left(put(count,8.)),trim(name1));
MPRINT(GADAMDATETIME):   call symput('dtime' !! left(put(count,8.)),trim(name2));
MPRINT(GADAMDATETIME):   call symput('time' !! left(put(count,8.)),trim(name3));
MPRINT(GADAMDATETIME):   call symput('dlbl' !! left(put(count,8.)),trim(left(label1)));
MPRINT(GADAMDATETIME):   call symput('dtlbl' !! left(put(count,8.)),trim(left(label)));
MPRINT(GADAMDATETIME):   call symput('tlbl' !! left(put(count,8.)),trim(left(label3)));
MPRINT(GADAMDATETIME):   if eof then do;
MPRINT(GADAMDATETIME):   call symput('numvar',left(put(count,8.)));
MPRINT(GADAMDATETIME):   end;
MPRINT(GADAMDATETIME):   run;

NOTE: There were 2 observations read from the data set WORK._ADDTM02.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(GADAMDATETIME):   data _addtm03;
MPRINT(GADAMDATETIME):   set sdtm.ex end=eof;
MPRINT(GADAMDATETIME):   format EXEDT date9. EXEDTM datetime20. EXETM time8.;
MPRINT(GADAMDATETIME):   if length(EXENDTC)>=16 then do;
MPRINT(GADAMDATETIME):   EXEDT=input(substr(EXENDTC,1,10),yymmdd10.);
MPRINT(GADAMDATETIME):   EXEDTM=dhms(EXEDT,0,0,input(substr(EXENDTC,12),time.));
MPRINT(GADAMDATETIME):   EXETM=input(substr(EXENDTC,12),time.);
MPRINT(GADAMDATETIME):   end;
MPRINT(GADAMDATETIME):   else if 10<=length(EXENDTC)<16 and index(substr(EXENDTC,1,10),'T')=0 then EXEDT=input(substr(EXENDTC,1,10),yymmdd10.);
MPRINT(GADAMDATETIME):   else if index(EXENDTC,'T')>0 then EXETM=input(scan(EXENDTC,2,'T'),time.);
MPRINT(GADAMDATETIME):   if EXEDTM>. then _dt1+1;
The SAS System

MPRINT(GADAMDATETIME):   if EXEDT>. then _d1+1;
MPRINT(GADAMDATETIME):   if EXETM>. then _t1+1;
MPRINT(GADAMDATETIME):   if eof and _dt1<1 and "N" = "N" then call symput("dropdt1",'y');
MPRINT(GADAMDATETIME):   else if eof and _dt1<1 and "N"="Y" then call symput("dropdt1",'n');
MPRINT(GADAMDATETIME):   if eof and _t1<1 and "N" = "N" then call symput("dropt1",'y');
MPRINT(GADAMDATETIME):   else if eof and _t1<1 and "N"="Y" then call symput("dropt1",'n');
MPRINT(GADAMDATETIME):   drop _dt1 _d1 _t1;
MPRINT(GADAMDATETIME):   format EXSDT date9. EXSDTM datetime20. EXSTM time8.;
MPRINT(GADAMDATETIME):   if length(EXSTDTC)>=16 then do;
MPRINT(GADAMDATETIME):   EXSDT=input(substr(EXSTDTC,1,10),yymmdd10.);
MPRINT(GADAMDATETIME):   EXSDTM=dhms(EXSDT,0,0,input(substr(EXSTDTC,12),time.));
MPRINT(GADAMDATETIME):   EXSTM=input(substr(EXSTDTC,12),time.);
MPRINT(GADAMDATETIME):   end;
MPRINT(GADAMDATETIME):   else if 10<=length(EXSTDTC)<16 and index(substr(EXSTDTC,1,10),'T')=0 then EXSDT=input(substr(EXSTDTC,1,10),yymmdd10.);
MPRINT(GADAMDATETIME):   else if index(EXSTDTC,'T')>0 then EXSTM=input(scan(EXSTDTC,2,'T'),time.);
The SAS System

MPRINT(GADAMDATETIME):   if EXSDTM>. then _dt2+1;
MPRINT(GADAMDATETIME):   if EXSDT>. then _d2+1;
MPRINT(GADAMDATETIME):   if EXSTM>. then _t2+1;
MPRINT(GADAMDATETIME):   if eof and _dt2<1 and "N" = "N" then call symput("dropdt2",'y');
MPRINT(GADAMDATETIME):   else if eof and _dt2<1 and "N"="Y" then call symput("dropdt2",'n');
MPRINT(GADAMDATETIME):   if eof and _t2<1 and "N" = "N" then call symput("dropt2",'y');
MPRINT(GADAMDATETIME):   else if eof and _t2<1 and "N"="Y" then call symput("dropt2",'n');
MPRINT(GADAMDATETIME):   drop _dt2 _d2 _t2;
MPRINT(GADAMDATETIME):   run;

NOTE: There were 5851 observations read from the data set SDTM.EX.
NOTE: The data set WORK._ADDTM03 has 5851 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.02 seconds


MPRINT(GADAMDATETIME):   data ex(drop=);
MPRINT(GADAMDATETIME):   set _addtm03;
MPRINT(GADAMDATETIME):   label EXEDT = "End Date of Treatment";
MPRINT(GADAMDATETIME):   label EXEDTM= "End Date/Time of Treatment";
MPRINT(GADAMDATETIME):   label EXETM = "End Time of Treatment";
MPRINT(GADAMDATETIME):   ;
MPRINT(GADAMDATETIME):  ;
MPRINT(GADAMDATETIME):   ;
MPRINT(GADAMDATETIME):   drop EXENDTC ;
MPRINT(GADAMDATETIME):   label EXSDT = "Start Date of Treatment";
MPRINT(GADAMDATETIME):   label EXSDTM= "Start Date/Time of Treatment";
MPRINT(GADAMDATETIME):   label EXSTM = "Start Time of Treatment";
MPRINT(GADAMDATETIME):   ;
MPRINT(GADAMDATETIME):  ;
MPRINT(GADAMDATETIME):   ;
MPRINT(GADAMDATETIME):   drop EXSTDTC ;
MPRINT(GADAMDATETIME):   run;

NOTE: There were 5851 observations read from the data set WORK._ADDTM03.
NOTE: The data set WORK.EX has 5851 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(GADAMDATETIME):   proc datasets lib=work memtype=data nolist;
The SAS System

MPRINT(GADAMDATETIME):   delete _addtm: ;
MPRINT(GADAMDATETIME):   quit;

NOTE: Deleting WORK._ADDTM01 (memtype=DATA).
NOTE: Deleting WORK._ADDTM02 (memtype=DATA).
NOTE: Deleting WORK._ADDTM03 (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VADSLTRTEDT):  ;
MPRINT(VADSLTRTEDT):   data ex;
The SAS System

MPRINT(VADSLTRTEDT):   set ex;
MPRINT(VADSLTRTEDT):   if exsdt ne . and exedt ne . then lastdt = max(exsdt, exedt);
MPRINT(VADSLTRTEDT):   else if exedt ne . then lastdt = exedt;
MPRINT(VADSLTRTEDT):   else lastdt = exsdt;
MPRINT(VADSLTRTEDT):   if exsdtm ne . and exedtm ne . then lastdtm = max(exsdtm, exedtm);
MPRINT(VADSLTRTEDT):   else if exedtm ne . then lastdtm = exedtm;
MPRINT(VADSLTRTEDT):   else if exsdtm ne . then lastdtm = exsdtm;
MPRINT(VADSLTRTEDT):   run;

NOTE: There were 5851 observations read from the data set WORK.EX.
NOTE: The data set WORK.EX has 5851 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.13 seconds
      cpu time            0.13 seconds


MPRINT(VADSLTRTEDT):   proc sort data=ex ( keep = usubjid lastdt lastdtm );
MPRINT(VADSLTRTEDT):   by usubjid lastdt lastdtm ;
MPRINT(VADSLTRTEDT):   run;

NOTE: There were 5851 observations read from the data set WORK.EX.
NOTE: The data set WORK.EX has 5851 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(VADSLTRTEDT):   data lastdose (drop=lastdt lastdtm);
MPRINT(VADSLTRTEDT):   set ex;
MPRINT(VADSLTRTEDT):   by usubjid lastdt lastdtm ;
MPRINT(VADSLTRTEDT):   if last.usubjid;
MPRINT(VADSLTRTEDT):   TRTEDT = lastdt;
MPRINT(VADSLTRTEDT):   TRTEDTM = lastdtm;
MPRINT(VADSLTRTEDT):   run;

NOTE: There were 5851 observations read from the data set WORK.EX.
NOTE: The data set WORK.LASTDOSE has 131 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(VADSLTRTEDT):   proc sort data=din;
MPRINT(VADSLTRTEDT):   by usubjid ;
MPRINT(VADSLTRTEDT):   run;
The SAS System


NOTE: There were 205 observations read from the data set WORK.DIN.
NOTE: The data set WORK.DIN has 205 observations and 50 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(UNI_VLENGTH):   *- Harmonize length of character variables in Data= datasets According to the length found in Ref= datasests (if specified) -*;
MPRINT(UNI_VLENGTH):   proc sql noprint;
MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
The SAS System

MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated by " " from (select distinct 
upcase(LIBNAME) as 
LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.DIN" "WORK.LASTDOSE" )) then L
ENGTH else . end ) 
as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.DIN" "WORK.DIN" "WORK.LASTDOSE" ) group by upcase(name)) group by upcase(name), upcase(type
) having 
sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK.DIN" and TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.DIN" "WORK.LASTDOSE" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(UNI_VLENGTH):   alter table WORK.DIN modify ACTARM character(20), ACTARMCD character(6), ACTARMUD character(63), AGEU character(5), ARM character(20), ARMCD character(6), AR
MCDAS 
character(200), ARMCDS character(200), ARMNRS character(19), BRTHDTC character(4), COHORT character(40), COUNTRY character(3), CUMARMCA character(200), CUMARMCD character(200), CUM
STUD 
character(200), DCSREAS character(200), DCSREASP character(200), DMCOHORT character(8), DOMAIN character(2), DTHDTC character(1), DTHFL character(1), EOSSTT character(15), ETHNIC c
haracter(22), 
INVNAM character(25), JAPANESE character(4), RACE character(25), RACEOTH character(4), RFENDTC character(10), RFICDTC character(10), RFPENDTC character(19), RFSTDTC character(16), 
RFXENDTC 
character(16), RFXSTDTC character(16), SEX character(1), SITEID character(7), STUDIES character(200), STUDYID character(13), SUBJID character(10), TRTSEQA character(200), USUBJID c
haracter(25), 
_IN_SUPP_FL character(1) ;
NOTE: Table WORK.DIN has been modified, with 50 columns.
MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated by " " from (select distinct 
upcase(LIBNAME) as 
LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.DIN" "WORK.LASTDOSE" )) then L
ENGTH else . end ) 
as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.LASTDOSE" "WORK.DIN" "WORK.LASTDOSE" ) group by upcase(name)) group by upcase(name), upcase
(type) having 
sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK.LASTDOSE" and TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.DIN" "WORK.LASTDOSE" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(UNI_VLENGTH):   alter table WORK.LASTDOSE modify USUBJID character(25) ;
NOTE: Table WORK.LASTDOSE has been modified, with 3 columns.
MPRINT(UNI_VLENGTH):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.29 seconds
      cpu time            0.29 seconds


MPRINT(VADSLTRTEDT):  ;
MPRINT(VADSLTRTEDT):   data dinfd;
MPRINT(VADSLTRTEDT):   merge din (in=a) lastdose;
MPRINT(VADSLTRTEDT):   by usubjid ;
MPRINT(VADSLTRTEDT):   if a;
MPRINT(VADSLTRTEDT):   run;

NOTE: There were 205 observations read from the data set WORK.DIN.
NOTE: There were 131 observations read from the data set WORK.LASTDOSE.
NOTE: The data set WORK.DINFD has 205 observations and 52 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(VADSLTRTEDT):   proc sort data=dinfd out=WORK._A_2 (drop=osortorder);
MPRINT(VADSLTRTEDT):   by osortorder;
MPRINT(VADSLTRTEDT):   run;
The SAS System

The SAS System

NOTE: There were 205 observations read from the data set WORK.DINFD.
NOTE: The data set WORK._A_2 has 205 observations and 51 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("TRTEDT(M) is defined as maximum of EXSTDTC and EXENDTC per USUBJID.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_DRVVARDEF"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_drvvardef  |TRTEDT(M) is defined as maximum of EXSTDTC and EXENDTC per USUBJID.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_DRVVARDEF):   ;
MPRINT(VADSLTRTEDT):  ;
MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("TRTEDT, TRTEDTM is/are created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |TRTEDT, TRTEDTM is/are created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(VADSLTRTEDT):  ;
MPRINT(VADSLTRTEDT):   *- JMB 2022-03-21 adapt code in case TRTSDTM is not defined. -*;
MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):   ;
MAUTOCOMPLOC:  The autocall macro VTREATDISCONT is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/gadam/_library/vtreatdiscont.sas.
MPRINT(VTREATDISCONT):   ;
MPRINT(VTREATDISCONT):   data _temp;
MPRINT(VTREATDISCONT):   set WORK._A_2;
MPRINT(VTREATDISCONT):   _sort = _n_;
MPRINT(VTREATDISCONT):   run;

NOTE: There were 205 observations read from the data set WORK._A_2.
NOTE: The data set WORK._TEMP has 205 observations and 52 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
The SAS System


MPRINT(VTREATDISCONT):   proc sql;
The SAS System

MPRINT(VTREATDISCONT):   create table _ds as select distinct a.studyid, a.usubjid , case when b.dsdecod ne '' then 'COMPLETED' when c.dsdecod ne '' then 'DISCONTINUED' when d.dsdec
od ne '' then 
'COMPLETED' when e.dsdecod in ('RESERVE SUBJECT' 'SCREEN FAILURE') then e.dsdecod when e.dsdecod in ('WITHDRAWAL BY SUBJECT') then 'DISCONTINUED' else '' end as EOTSTT , case when 
coalesce(b.dsstdtc,c.dsstdtc,d.dsstdtc) ne '' then input(coalesce(b.dsstdtc,c.dsstdtc,d.dsstdtc),e8601da.) when e.dsdecod in ('RESERVE SUBJECT' 'SCREEN FAILURE' 'WITHDRAWAL BY SUBJ
ECT') and e.dsstdtc 
ne '' then input(e.dsstdtc,e8601da.) else . end as EOTDT format=e8601da. , coalesce(c.dsdecod,e.dsdecod) as DCTREAS , case when c.dsdecod='OTHER' then c.dsterm when e.dsdecod='OTHE
R' then d.dsterm 
else '' end as DCTREASP , case when c.dsseq ne . then c.dsseq else e.dsseq end as dsseq from WORK._A_2 as a left join sdtm.ds (where=( dscat='DISPOSITION EVENT' and dsscat in ('TRE
ATMENT' 'END OF 
TREATMENT') and index(dsdecod,'COMPLET')>0 )) as b on a.studyid=b.studyid and a.usubjid=b.usubjid left join sdtm.ds (where=( dscat='DISPOSITION EVENT' and dsscat in ('TREATMENT' 'E
ND OF TREATMENT') 
and index(dsdecod,'COMPLET')=0 )) as c on a.studyid=c.studyid and a.usubjid=c.usubjid left join sdtm.ds (where=( dscat='DISPOSITION EVENT' and dsscat='' and index(dsdecod,'COMPLET'
)>0 )) as d on 
a.studyid=d.studyid and a.usubjid=d.usubjid left join sdtm.ds (where=( dscat='DISPOSITION EVENT' and dsscat='' and index(dsdecod,'COMPLET')=0 )) as e on a.studyid=e.studyid and a.u
subjid=e.usubjid ;
NOTE: Table WORK._DS created, with 205 rows and 7 columns.

MPRINT(VTREATDISCONT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


MPRINT(VTREATDISCONT):   proc sql undo_policy=none;
MPRINT(VTREATDISCONT):   create table _ds as select distinct studyid, usubjid, max(EOTDT) as EOTDT format=e8601da., EOTSTT, DCTREAS, DCTREASP, dsseq from _ds group by studyid, usub
jid;
NOTE: The query requires remerging summary statistics back with the original data.
NOTE: Table WORK._DS created, with 205 rows and 7 columns.

MPRINT(VTREATDISCONT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VTREATDISCONT):   data _ds (rename=(DCTREASP_=DCTREASP));
MPRINT(VTREATDISCONT):   set _ds;
MPRINT(VTREATDISCONT):   by studyid usubjid EOTSTT DCTREAS DCTREASP;
MPRINT(VTREATDISCONT):   format DCTREASP_ $200.;
MPRINT(VTREATDISCONT):   retain DCTREASP_;
MPRINT(VTREATDISCONT):   if first.DCTREAS then DCTREASP_=DCTREASP;
MPRINT(VTREATDISCONT):   else if DCTREASP ne '' and DCTREASP_ ne '' then DCTREASP_=catx( '+ ',DCTREASP_,DCTREASP);
MPRINT(VTREATDISCONT):   else if DCTREASP ne '' then DCTREASP_=DCTREASP;
MPRINT(VTREATDISCONT):   if last.DCTREAS then do;
MPRINT(VTREATDISCONT):   if DCTREAS in ('ADVERSE EVENT' 'OTHER') and DCTREASP_='' then DCTREASP_='MISSING';
MPRINT(VTREATDISCONT):   output;
MPRINT(VTREATDISCONT):   end;
MPRINT(VTREATDISCONT):   drop DCTREASP;
MPRINT(VTREATDISCONT):   run;

NOTE: There were 205 observations read from the data set WORK._DS.
NOTE: The data set WORK._DS has 205 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
The SAS System

      cpu time            0.00 seconds


MPRINT(VTREATDISCONT):   data _ds (rename=(EOTSTT_=EOTSTT DCTREAS_=DCTREAS DCTREASP_=DCTREASP));
MPRINT(VTREATDISCONT):   set _ds;
MPRINT(VTREATDISCONT):   by studyid usubjid EOTSTT DCTREAS;
MPRINT(VTREATDISCONT):   format EOTSTT_ DCTREAS_ DCTREASP_ $200.;
MPRINT(VTREATDISCONT):   retain EOTSTT_ DCTREAS_ DCTREASP_;
MPRINT(VTREATDISCONT):   if first.usubjid then do;
MPRINT(VTREATDISCONT):   EOTSTT_=EOTSTT;
MPRINT(VTREATDISCONT):   DCTREAS_=DCTREAS;
MPRINT(VTREATDISCONT):   DCTREASP_=DCTREASP;
The SAS System

MPRINT(VTREATDISCONT):   end;
MPRINT(VTREATDISCONT):   else do;
MPRINT(VTREATDISCONT):   EOTSTT_=catx(' + ',EOTSTT_,EOTSTT);
MPRINT(VTREATDISCONT):   DCTREAS_=catx(' + ',DCTREAS_,DCTREAS);
MPRINT(VTREATDISCONT):   DCTREASP_=catx(' + ',DCTREASP_,DCTREASP_);
MPRINT(VTREATDISCONT):   end;
MPRINT(VTREATDISCONT):   if last.usubjid;
MPRINT(VTREATDISCONT):   drop EOTSTT DCTREAS DCTREASP;
MPRINT(VTREATDISCONT):   run;

NOTE: There were 205 observations read from the data set WORK._DS.
NOTE: The data set WORK._DS has 205 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.02 seconds


MPRINT(VTREATDISCONT):   proc sql undo_policy=none;
MPRINT(VTREATDISCONT):   create table WORK._A_2 (drop=_sort) as select distinct a.*, b.EOTSTT, b.EOTDT, b.DCTREAS, b.DCTREASP from _temp as a left join _ds as b on a.studyid=b.stud
yid and 
a.usubjid=b.usubjid order by _sort;
NOTE: Table WORK._A_2 created, with 205 rows and 55 columns.

MPRINT(VTREATDISCONT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("EOTSTT/EOTDT/DCTREAS/DCTREASP are defined from DS.DSDECOD and DS.DSSTDTC.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_DRVVARDEF"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_drvvardef  |EOTSTT/EOTDT/DCTREAS/DCTREASP are defined from DS.DSDECOD and DS.DSSTDTC.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_DRVVARDEF):   ;
The SAS System

MPRINT(VTREATDISCONT):  ;
MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("EOTSTT,EOTDT,DCTREAS,DCTREASP are created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |EOTSTT,EOTDT,DCTREAS,DCTREASP are created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
The SAS System

MPRINT(L4G_MESSAGE):   ;
MPRINT(VTREATDISCONT):  ;
MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):   ;
MAUTOCOMPLOC:  The autocall macro VBMI is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/gadam/_library/vbmi.sas.
MPRINT(VBMI):   ;
MPRINT(VBMI):  ;
MPRINT(VBMI):  ;
MPRINT(VBMI):   filename adamspec "/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/gadam/metadata/argx-adam1.2.xlsx";
MPRINT(VBMI):   proc import out=_across_studies datafile=adamspec dbms=xlsx replace;
MPRINT(VBMI):   RXLX;
MPRINT(VBMI):   range="ADSL$A2:";
MPRINT(VBMI):   getnames=yes;
MPRINT(VBMI):   run;

NOTE: One or more variables were converted because the data type is not supported by the V9 engine. For more details, run with options MSGLEVEL=I.
NOTE: The import data set has 163 observations and 15 variables.
NOTE: WORK._ACROSS_STUDIES data set was successfully created.
NOTE: PROCEDURE IMPORT used (Total process time):
      real time           0.05 seconds
      cpu time            0.05 seconds


MPRINT(VBMI):   proc sql;
MPRINT(VBMI):   create table _temp as select distinct across_studies from _across_studies where name in ('BLWEI' 'BLHEI' 'BLBMI' 'LPBMI') and across_studies in ('Y' 'N');
NOTE: Table WORK._TEMP created, with 1 rows and 1 columns.

MPRINT(VBMI):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VBMI):   proc sql noprint;
MPRINT(VBMI):   select distinct across_studies into :across_studies from _temp;
MPRINT(VBMI):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
The SAS System



MPRINT(VBMI):   proc sql;
MPRINT(VBMI):   create table _dm as select distinct usubjid, studyid , case when prxmatch('/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}(:\d{2})?$/i',cats(rfxstdtc)) then input(strip(rfxstdtc),e
8601dt.) else . end 
as trtdtm format=e8601dt. , case when prxmatch('/^\d{4}-\d{2}-\d{2}.*$/i',cats(rfxstdtc)) then input(prxchange('s/^(\d{4}-\d{2}-\d{2}).*$/\1/i',1,cats(rfxstdtc)),e8601da.) else . e
nd as trtdt 
format=e8601da. from sdtm.dm where rfxstdtc ne '' order by usubjid, studyid, trtdt, trtdtm;
NOTE: Table WORK._DM created, with 131 rows and 4 columns.

MPRINT(VBMI):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(VBMI):   proc sql undo_policy=none;
MPRINT(VBMI):   create table _dm as select distinct usubjid, min(trtdtm) as trtdtm format=e8601dt., min(trtdt) as trtdt format=e8601da. from _dm group by usubjid;
NOTE: Table WORK._DM created, with 131 rows and 3 columns.
The SAS System


MPRINT(VBMI):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(VBMI):   proc sql;
MPRINT(VBMI):   create table vs as select distinct usubjid, studyid, vsdtc , case when prxmatch('/^\d{4}-\d{2}-\d{2}.*$/i',cats(vsdtc)) then 
input(prxchange('s/^(\d{4}-\d{2}-\d{2}).*$/\1/i',1,cats(vsdtc)), e8601da.) else . end as vsdt format=e8601da. , case when prxmatch('/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}(:\d{2})?$/i', ca
ts(vsdtc)) then 
input(strip(vsdtc),e8601dt.) else . end as vsdtm format=e8601dt. , vstestcd, vsstresn, vsstresu from sdtm.vs where vstestcd in ("HEIGHT" "WEIGHT" "BMI") and vsstresu in ('cm' 'kg' 
'kg/m2' '') and 
vsstresn > .z having vsdt ne . order by usubjid, studyid, vsdt, vsdtm, vstestcd;
NOTE: Table WORK.VS created, with 3009 rows and 8 columns.

MPRINT(VBMI):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.02 seconds


MPRINT(VBMI):   data vs_;
MPRINT(VBMI):   set vs;
MPRINT(VBMI):   run;

NOTE: There were 3009 observations read from the data set WORK.VS.
NOTE: The data set WORK.VS_ has 3009 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VBMI):   proc sql;
MPRINT(VBMI):   create table vs_prior as select distinct a.usubjid , '' as studyid , a.trtdt, a.trtdtm , vsdtc, vsdt, vsdtm, vstestcd, vsstresn, vsstresu from _dm as a inner join v
s_ as b on 
a.usubjid=b.usubjid and ( (trtdtm ne . and vsdtm ne . and vsdtm le trtdtm) or ( (trtdtm=. or vsdtm=.) and trtdt ne . and vsdt ne . and vsdt le trtdt ) ) order by usubjid, studyid, 
The SAS System

vsdt, vsdtm, 
vstestcd;
NOTE: At least one nonessential ordering column reference has been removed from an ORDER BY's reference list.
NOTE: Table WORK.VS_PRIOR created, with 439 rows and 10 columns.

MPRINT(VBMI):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(VBMI):   proc sql;
MPRINT(VBMI):   create table vs_hwb as select distinct a.usubjid, a.studyid, a.trtdt, a.trtdtm, a.vsdtc, a.vsdt, a.vsdtm , case when h.vsstresn ne . then round(h.vsstresn,0.1) else
 . end as hei, 
h.vsstresu as heiu , case when w.vsstresn ne . then round(w.vsstresn,0.1) else . end as wei, w.vsstresu as weiu , case when b.vsstresn ne . then round(b.vsstresn,0.1) else . end as
 bmi, b.vsstresu as 
bmiu from vs_prior as a left join vs_prior (where=(vstestcd='HEIGHT')) as h on a.usubjid=h.usubjid and a.vsdtc=h.vsdtc left join vs_prior (where=(vstestcd='WEIGHT')) as w on a.usub
jid=w.usubjid and 
a.vsdtc=w.vsdtc left join vs_prior (where=(vstestcd='BMI')) as b on a.usubjid=b.usubjid and a.vsdtc=b.vsdtc order by usubjid, studyid, vsdt, vsdtm, heiu, weiu, bmiu, hei;
NOTE: Table WORK.VS_HWB created, with 286 rows and 13 columns.

MPRINT(VBMI):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


MPRINT(VBMI):   data vs_imputed (drop=heiu weiu bmiu);
The SAS System

MPRINT(VBMI):   set vs_hwb;
MPRINT(VBMI):   by usubjid studyid vsdt vsdtm;
MPRINT(VBMI):   retain hei_i heiu_i wei_i weiu_i bmi_i bmiu_i;
MPRINT(VBMI):   if first.studyid then do;
MPRINT(VBMI):   hei_i=hei;
MPRINT(VBMI):   heiu_i=heiu;
MPRINT(VBMI):   wei_i=wei;
MPRINT(VBMI):   weiu_i=weiu;
MPRINT(VBMI):   bmi_i=bmi;
MPRINT(VBMI):   bmiu_i=bmiu;
MPRINT(VBMI):   end;
MPRINT(VBMI):   else do;
MPRINT(VBMI):   if bmi ne . then do;
MPRINT(VBMI):   bmi_i=bmi;
MPRINT(VBMI):   bmiu_i=bmiu;
MPRINT(VBMI):   end;
MPRINT(VBMI):   else if (hei=. or hei=hei_i) and (wei=. or wei=wei_i) then do;
MPRINT(VBMI):   bmi_i=bmi_i;
MPRINT(VBMI):   bmiu_i=bmiu_i;
MPRINT(VBMI):   end;
MPRINT(VBMI):   else do;
MPRINT(VBMI):   bmi_i=.;
MPRINT(VBMI):   bmiu_i='';
MPRINT(VBMI):   end;
MPRINT(VBMI):   if hei ne . then do;
MPRINT(VBMI):   hei_i=hei;
MPRINT(VBMI):   heiu_i=heiu;
MPRINT(VBMI):   end;
The SAS System

MPRINT(VBMI):   if wei ne . then do;
MPRINT(VBMI):   wei_i=wei;
MPRINT(VBMI):   weiu_i=weiu;
MPRINT(VBMI):   end;
MPRINT(VBMI):   end;
MPRINT(VBMI):   if n(hei_i,wei_i)=2 then do;
MPRINT(VBMI):   bmi_calc = round(wei_i/((hei_i/100)*(hei_i/100)),0.01);
MPRINT(VBMI):   bmi_calcu=catx('/',weiu_i,heiu_i)||'2';
MPRINT(VBMI):   end;
MPRINT(VBMI):   if bmi_calc ne . and bmi_i ne . then bmi_diff=abs(bmi_calc-bmi_i);
MPRINT(VBMI):   if last.studyid;
MPRINT(VBMI):   run;

NOTE: There were 286 observations read from the data set WORK.VS_HWB.
NOTE: The data set WORK.VS_IMPUTED has 131 observations and 19 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(VBMI):   data _check;
MPRINT(VBMI):   set vs_imputed;
MPRINT(VBMI):   if hei_i ne . and not(20 < hei_i < 300) then output;
MPRINT(VBMI):   if wei_i ne . and not( 1 < wei_i < 700) then output;
MPRINT(VBMI):   if bmi_calc ne . and not(15 < bmi_calc < 50) then output;
MPRINT(VBMI):   if bmi_i ne . and not(15 < bmi_i < 50) then output;
MPRINT(VBMI):   run;

NOTE: There were 131 observations read from the data set WORK.VS_IMPUTED.
NOTE: The data set WORK._CHECK has 1 observations and 19 variables.
The SAS System

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VBMI):   data _temp;
MPRINT(VBMI):   set _check (obs=1);
MPRINT(VBMI):   call symput('usubjid',cats(usubjid));
MPRINT(VBMI):   call symput('hei_i',cats(hei_i));
MPRINT(VBMI):   call symput('wei_i',cats(wei_i));
MPRINT(VBMI):   call symput('bmi_calc',cats(bmi_calc));
MPRINT(VBMI):   run;

NOTE: There were 1 observations read from the data set WORK._CHECK.
NOTE: The data set WORK._TEMP has 1 observations and 19 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("At least one baseline BMI/HEIGHT/WEIGHT record has unexpected value: eg: usubjid=ARGX-113-1801-0010040-173 hei_i=162.6 wei_i=135.9 bmi_calc=51.4.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_WARNING"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;
The SAS System


l4g_warning    |At least one baseline BMI/HEIGHT/WEIGHT record has unexpected value: eg: usubjid=ARGX-113-1801-0010040-173 hei_i=162.6 wei_i=135.9 bmi_calc=51.4.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_WARNING):   ;
MPRINT(VBMI):  ;
MPRINT(VBMI):   data _check;
MPRINT(VBMI):   set vs_imputed (where=(bmi_diff gt 0.5));
MPRINT(VBMI):   run;

NOTE: There were 0 observations read from the data set WORK.VS_IMPUTED.
      WHERE bmi_diff>0.5;
NOTE: The data set WORK._CHECK has 0 observations and 19 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: No observations in data set WORK._CHECK.
MPRINT(VBMI):   data _temp;
MPRINT(VBMI):   set WORK._A_2;
MPRINT(VBMI):   _sort = _n_;
MPRINT(VBMI):   run;

NOTE: There were 205 observations read from the data set WORK._A_2.
NOTE: The data set WORK._TEMP has 205 observations and 56 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
The SAS System

      cpu time            0.00 seconds


MPRINT(VBMI):   proc sql undo_policy=none;
MPRINT(VBMI):   create table _temp as select distinct a.*, b.hei_i as blhei, b.wei_i as blwei, coalesce(bmi_calc,bmi_i) as blbmi from _temp as a left join vs_imputed as b on a.usub
jid=b.usubjid order 
by _sort;
NOTE: Table WORK._TEMP created, with 205 rows and 59 columns.

MPRINT(VBMI):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.02 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("BLBMI, BLHEI, BLWEI are set to values at latest date prior the first treatment taken across studies.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_DRVVARDEF"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_drvvardef  |BLBMI, BLHEI, BLWEI are set to values at latest date prior the first treatment taken across studies.
NOTE: DATA statement used (Total process time):
The SAS System

      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_DRVVARDEF):   ;
MPRINT(VBMI):  ;
MPRINT(VBMI):   proc sql;
MPRINT(VBMI):   create table vs_post as select distinct a.usubjid , '' as studyid , a.trtdt, a.trtdtm , vsdtc, vsdt, vsdtm, vstestcd, vsstresn, vsstresu from _dm as a inner join vs
_ as b on 
a.usubjid=b.usubjid and ( (trtdtm ne . and vsdtm ne . and vsdtm gt trtdtm) or ( (trtdtm=. or vsdtm=.) and trtdt ne . and vsdt ne . and vsdt gt trtdt ) ) order by usubjid, studyid, 
vsdt, vsdtm, 
vstestcd;
NOTE: At least one nonessential ordering column reference has been removed from an ORDER BY's reference list.
NOTE: Table WORK.VS_POST created, with 2424 rows and 10 columns.

MPRINT(VBMI):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.02 seconds


MPRINT(VBMI):   proc sql;
MPRINT(VBMI):   create table vs_post_hwb as select distinct a.usubjid, a.studyid, a.trtdt, a.trtdtm, a.vsdtc, a.vsdt, a.vsdtm , case when h.vsstresn ne . then round(h.vsstresn,0.1)
 else . end as hei, 
h.vsstresu as heiu , case when w.vsstresn ne . then round(w.vsstresn,0.1) else . end as wei, w.vsstresu as weiu , case when b.vsstresn ne . then round(b.vsstresn,0.1) else . end as
 bmi, b.vsstresu as 
bmiu from vs_post as a left join vs_post (where=(vstestcd='HEIGHT')) as h on a.usubjid=h.usubjid and a.vsdtc=h.vsdtc left join vs_post (where=(vstestcd='WEIGHT')) as w on a.usubjid
=w.usubjid and 
a.vsdtc=w.vsdtc left join vs_post (where=(vstestcd='BMI')) as b on a.usubjid=b.usubjid and a.vsdtc=b.vsdtc order by usubjid, studyid, vsdt, vsdtm, heiu, weiu, bmiu, hei;
NOTE: Table WORK.VS_POST_HWB created, with 2424 rows and 13 columns.

MPRINT(VBMI):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.02 seconds


MPRINT(VBMI):   data vs_post_imputed (drop=heiu weiu bmiu);
MPRINT(VBMI):   set vs_post_hwb;
The SAS System

MPRINT(VBMI):   by usubjid studyid vsdt vsdtm;
MPRINT(VBMI):   retain hei_i heiu_i wei_i weiu_i bmi_i bmiu_i;
MPRINT(VBMI):   if first.studyid then do;
MPRINT(VBMI):   hei_i=hei;
MPRINT(VBMI):   heiu_i=heiu;
MPRINT(VBMI):   wei_i=wei;
MPRINT(VBMI):   weiu_i=weiu;
MPRINT(VBMI):   bmi_i=bmi;
MPRINT(VBMI):   bmiu_i=bmiu;
MPRINT(VBMI):   end;
MPRINT(VBMI):   else do;
MPRINT(VBMI):   if bmi ne . then do;
MPRINT(VBMI):   bmi_i=bmi;
MPRINT(VBMI):   bmiu_i=bmiu;
MPRINT(VBMI):   end;
MPRINT(VBMI):   else if (hei=. or hei=hei_i) and (wei=. or wei=wei_i) then do;
The SAS System

MPRINT(VBMI):   bmi_i=bmi_i;
MPRINT(VBMI):   bmiu_i=bmiu_i;
MPRINT(VBMI):   end;
MPRINT(VBMI):   else do;
MPRINT(VBMI):   bmi_i=.;
MPRINT(VBMI):   bmiu_i='';
MPRINT(VBMI):   end;
MPRINT(VBMI):   if hei ne . then do;
MPRINT(VBMI):   hei_i=hei;
MPRINT(VBMI):   heiu_i=heiu;
MPRINT(VBMI):   end;
MPRINT(VBMI):   if wei ne . then do;
MPRINT(VBMI):   wei_i=wei;
MPRINT(VBMI):   weiu_i=weiu;
MPRINT(VBMI):   end;
MPRINT(VBMI):   end;
MPRINT(VBMI):   if n(hei_i,wei_i)=2 then do;
MPRINT(VBMI):   bmi_calc = round(wei_i/((hei_i/100)*(hei_i/100)),0.01);
MPRINT(VBMI):   bmi_calcu=catx('/',weiu_i,heiu_i)||'2';
MPRINT(VBMI):   end;
MPRINT(VBMI):   if bmi_calc ne . and bmi_i ne . then bmi_diff=abs(bmi_calc-bmi_i);
MPRINT(VBMI):   if last.studyid;
MPRINT(VBMI):   run;

NOTE: There were 2424 observations read from the data set WORK.VS_POST_HWB.
NOTE: The data set WORK.VS_POST_IMPUTED has 131 observations and 19 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.02 seconds


MPRINT(VBMI):   proc sql;
MPRINT(VBMI):   create table WORK._A_2 (drop=_sort) as select distinct a.*, coalesce(bmi_calc,bmi_i) as lpbmi from _temp as a left join vs_post_imputed as b on a.usubjid=b.usubjid 
order by _sort;
NOTE: Table WORK._A_2 created, with 205 rows and 59 columns.

MPRINT(VBMI):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


MPRINT(BUILDMSG):   data _null_;
The SAS System

MPRINT(BUILDMSG):   msg=strip("LPBMI is set to values at latest date post first treatment taken across studies.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_DRVVARDEF"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_drvvardef  |LPBMI is set to values at latest date post first treatment taken across studies.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
The SAS System

MPRINT(L4G_DRVVARDEF):   ;
MPRINT(VBMI):  ;
MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("BLBMI, BLHEI, BLWEI, LPBMI are created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |BLBMI, BLHEI, BLWEI, LPBMI are created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(VBMI):  ;
MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):   ;
MAUTOCOMPLOC:  The autocall macro VDOSENR is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/gadam/_library/vdosenr.sas.
MPRINT(VDOSENR):   ;
MPRINT(VDOSENR):   data din;
MPRINT(VDOSENR):   set WORK._A_2;
MPRINT(VDOSENR):   osortorder = _n_;
MPRINT(VDOSENR):   run;

NOTE: There were 205 observations read from the data set WORK._A_2.
NOTE: The data set WORK.DIN has 205 observations and 60 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VDOSENR):   filename adamspec "/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/gadam/metadata/argx-adam1.2.xlsx";
MPRINT(VDOSENR):   proc import out=_across_studies datafile=adamspec dbms=xlsx replace;
MPRINT(VDOSENR):   RXLX;
MPRINT(VDOSENR):   range="ADSL$A2:";
MPRINT(VDOSENR):   getnames=yes;
MPRINT(VDOSENR):   run;

NOTE: One or more variables were converted because the data type is not supported by the V9 engine. For more details, run with options MSGLEVEL=I.
NOTE: The import data set has 163 observations and 15 variables.
NOTE: WORK._ACROSS_STUDIES data set was successfully created.
The SAS System

NOTE: PROCEDURE IMPORT used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds


MPRINT(VDOSENR):   proc sql;
MPRINT(VDOSENR):   create table _temp as select distinct across_studies from _across_studies where name='DOSENR' and across_studies in ('Y' 'N');
NOTE: Table WORK._TEMP created, with 1 rows and 1 columns.

MPRINT(VDOSENR):   quit;
NOTE: PROCEDURE SQL used (Total process time):
The SAS System

      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VDOSENR):   proc sql noprint;
MPRINT(VDOSENR):   select distinct across_studies into :across_studies from _temp;
MPRINT(VDOSENR):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("DOSENR is defined as number of non missing exposure dates in EX across studies.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_DRVVARDEF"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_drvvardef  |DOSENR is defined as number of non missing exposure dates in EX across studies.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_DRVVARDEF):   ;
MPRINT(VDOSENR):  ;
MPRINT(VDOSENR):   proc sql;
MPRINT(VDOSENR):   create table _doses_ as select distinct usubjid, case when index(exstdtc,'T')>0 then strip(scan(exstdtc,1,'T')) else exstdtc end as exdate from sdtm.ex where exs
tdtc ne '' order by 
usubjid;
NOTE: Table WORK._DOSES_ created, with 2430 rows and 2 columns.

MPRINT(VDOSENR):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds


MPRINT(VDOSENR):   proc sql undo_policy=none;
MPRINT(VDOSENR):   create table _doses_ as select distinct usubjid, count(distinct exdate) as dosenr from _doses_ group by usubjid;
NOTE: Table WORK._DOSES_ created, with 131 rows and 2 columns.

MPRINT(VDOSENR):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
The SAS System



MPRINT(VDOSENR):   proc sql undo_policy=none;
MPRINT(VDOSENR):   create table WORK._A_2 (drop=osortorder) as select distinct a.*, coalesce(b.dosenr,0) as dosenr from din as a left join _doses_ as b on a.usubjid=b.usubjid
MPRINT(VDOSENR):   order osortorder;
NOTE: Table WORK._A_2 created, with 205 rows and 60 columns.

MPRINT(VDOSENR):   quit;
The SAS System

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.02 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("DOSENR is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |DOSENR is created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(VDOSENR):  ;
MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):   data _a_3;
MPRINT(GADAMDERIVATIONS):   set _a_2;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):   if 0 then TSEQAG1= put(" ", $50.) ;
MPRINT(GADAMDERIVATIONS):   if index(TRTSEQA,'EFGARTIGIMOD')>0 then TSEQAG1='EFGARTIGIMOD';
MPRINT(GADAMDERIVATIONS):   else if index(TRTSEQA,'BLINDED')>0 then TSEQAG1='BLINDED';
MPRINT(GADAMDERIVATIONS):   else if index(TRTSEQA,'PLACEBO')>0 then TSEQAG1='PLACEBO';
MPRINT(GADAMDERIVATIONS):   else if TRTSEQA not in ('' 'unknown IMP') then TSEQAG1='COMPARATOR';
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):   run;

NOTE: There were 205 observations read from the data set WORK._A_2.
NOTE: The data set WORK._A_3 has 205 observations and 61 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.02 seconds


MAUTOCOMPLOC:  The autocall macro VSAFFL is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/gadam/_library/vsaffl.sas.
MPRINT(VSAFFL):   filename adamspec "/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/gadam/metadata/argx-adam1.2.xlsx";
MPRINT(VSAFFL):   proc import out=_across_studies datafile=adamspec dbms=xlsx replace;
MPRINT(VSAFFL):   RXLX;
MPRINT(VSAFFL):   range="ADSL$A2:";
MPRINT(VSAFFL):   getnames=yes;
The SAS System

MPRINT(VSAFFL):   run;

NOTE: One or more variables were converted because the data type is not supported by the V9 engine. For more details, run with options MSGLEVEL=I.
NOTE: The import data set has 163 observations and 15 variables.
NOTE: WORK._ACROSS_STUDIES data set was successfully created.
NOTE: PROCEDURE IMPORT used (Total process time):
The SAS System

      real time           0.07 seconds
      cpu time            0.07 seconds


MPRINT(VSAFFL):   proc sql;
MPRINT(VSAFFL):   create table _temp as select distinct across_studies from _across_studies where name='SAFFL' and across_studies in ('Y' 'N');
NOTE: Table WORK._TEMP created, with 1 rows and 1 columns.

MPRINT(VSAFFL):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VSAFFL):   proc sql noprint;
MPRINT(VSAFFL):   select distinct across_studies into :across_studies from _temp;
MPRINT(VSAFFL):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VSAFFL):   data WORK._A_3;
MPRINT(VSAFFL):   set WORK._A_3;
MPRINT(VSAFFL):   if N(OF
MPRINT(VARLIST):   trtsdt trtsdtm
MPRINT(VSAFFL):  ) > 0 then SAFFL='Y';
MPRINT(VSAFFL):   else SAFFL='N';
MPRINT(VSAFFL):   run;

NOTE: There were 205 observations read from the data set WORK._A_3.
NOTE: The data set WORK._A_3 has 205 observations and 62 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.11 seconds


MPRINT(VSAFFL):   data _temp;
MPRINT(VSAFFL):   set WORK._A_3;
MPRINT(VSAFFL):   _sort = _n_;
MPRINT(VSAFFL):   run;

NOTE: There were 205 observations read from the data set WORK._A_3.
NOTE: The data set WORK._TEMP has 205 observations and 63 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VSAFFL):   proc sql ;
MPRINT(VSAFFL):   create table WORK._A_3 (drop=_sort) as select distinct a.*, case when b.SAFFL='Y' then 'Y' else 'N' end as SAFFL from _temp (drop=SAFFL) as a left join _temp (whe
re=(SAFFL='Y')) as 
b on a.usubjid=b.usubjid order by _sort;
The SAS System

NOTE: Table WORK._A_3 created, with 205 rows and 62 columns.

MPRINT(VSAFFL):   quit;
The SAS System

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("SAFFL is set to Y when at least one IMP in one study.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_DRVVARDEF"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_drvvardef  |SAFFL is set to Y when at least one IMP in one study.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_DRVVARDEF):   ;
MPRINT(VSAFFL):  ;
MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("SAFFL is created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |SAFFL is created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(VSAFFL):  ;
MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):   ;
MAUTOCOMPLOC:  The autocall macro VLASTCONTACT is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/gadam/_library/vlastcontact.sas.
MPRINT(VLASTCONTACT):   ;
MPRINT(VLASTCONTACT):   filename adamspec "/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/gadam/metadata/argx-adam1.2.xlsx";
MPRINT(VLASTCONTACT):   proc import out=_across_studies datafile=adamspec dbms=xlsx replace;
MPRINT(VLASTCONTACT):   RXLX;
MPRINT(VLASTCONTACT):   range="ADSL$A2:";
MPRINT(VLASTCONTACT):   getnames=yes;
MPRINT(VLASTCONTACT):   run;

NOTE: One or more variables were converted because the data type is not supported by the V9 engine. For more details, run with options MSGLEVEL=I.
NOTE: The import data set has 163 observations and 15 variables.
NOTE: WORK._ACROSS_STUDIES data set was successfully created.
The SAS System

NOTE: PROCEDURE IMPORT used (Total process time):
The SAS System

      real time           0.05 seconds
      cpu time            0.05 seconds


MPRINT(VLASTCONTACT):   proc sql noprint;
MPRINT(VLASTCONTACT):   select distinct across_studies into :across_studies from _across_studies where name='LSTCNDT';
MPRINT(VLASTCONTACT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VLASTCONTACT):   proc sql;
MPRINT(VLASTCONTACT):   create table _rfpendtc as select distinct usubjid, rfpendtc from WORK._A_3 order by usubjid;
NOTE: Table WORK._RFPENDTC created, with 205 rows and 2 columns.

MPRINT(VLASTCONTACT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(VLASTCONTACT):   data _rfpendtc;
MPRINT(VLASTCONTACT):   set _rfpendtc;
MPRINT(DT_IMPUT):   format d $20. rfpendt e8601da.;
MPRINT(DT_IMPUT):   d = strip(rfpendtc);
MPRINT(DT_IMPUT):   if index(d,'T') then d=scan(d,1,'T');
MPRINT(DT_IMPUT):   if index(d,'--') then d=strip(tranwrd(d,'--',''));
MPRINT(DT_IMPUT):   if length(d)>10 then d=substr(d,1,10);
MPRINT(DT_IMPUT):   if prxmatch('/^\d{4}-\d{2}-\d{2}$/i', cats(d)) then rfpendt=input(cats(d), e8601da.);
MPRINT(DT_IMPUT):   else if prxmatch('/^\d{4}-\d{2}$/i', cats(d)) then rfpendt=input(cats(d)||'-01', e8601da.);
MPRINT(DT_IMPUT):   else if prxmatch('/^\d{4}$/i', cats(d)) then rfpendt=input(cats(d)||'-01-01', e8601da.);
MPRINT(DT_IMPUT):   drop d;
MPRINT(VLASTCONTACT):  ;
MPRINT(VLASTCONTACT):   run;

NOTE: There were 205 observations read from the data set WORK._RFPENDTC.
NOTE: The data set WORK._RFPENDTC has 205 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VLASTCONTACT):   data _dates;
MPRINT(VLASTCONTACT):   set sdtm.ex ( keep=domain usubjid exstdtc rename=(exstdtc=lstcndrvc) where=(lstcndrvc ne '') ) sdtm.ex ( keep=domain usubjid exendtc rename=(exendtc=lstcndr
vc) 
where=(lstcndrvc ne '') );
MPRINT(VLASTCONTACT):   run;

NOTE: There were 5851 observations read from the data set SDTM.EX.
      WHERE lstcndrvc not = ' ';
NOTE: There were 5851 observations read from the data set SDTM.EX.
      WHERE lstcndrvc not = ' ';
NOTE: The data set WORK._DATES has 11702 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
The SAS System

The SAS System


MPRINT(VLASTCONTACT):   proc sort data=_dates noduprec;
MPRINT(VLASTCONTACT):   by domain usubjid lstcndrvc;
MPRINT(VLASTCONTACT):   run;

NOTE: There were 11702 observations read from the data set WORK._DATES.
NOTE: 6843 duplicate observations were deleted.
NOTE: The data set WORK._DATES has 4859 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(M_DS):   data _temp;
MPRINT(M_DS):   set sdtm.sv ( in=b keep=domain usubjid svstdtc rename=(svstdtc=lstcndrvc) where=(lstcndrvc ne '') );
MPRINT(M_DS):   run;

NOTE: There were 3389 observations read from the data set SDTM.SV.
      WHERE lstcndrvc not = ' ';
NOTE: The data set WORK._TEMP has 3389 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(M_DS):   proc sort data=_temp noduprec;
MPRINT(M_DS):   by domain usubjid lstcndrvc;
MPRINT(M_DS):   run;

NOTE: There were 3389 observations read from the data set WORK._TEMP.
NOTE: 208 duplicate observations were deleted.
NOTE: The data set WORK._TEMP has 3181 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(UNI_VLENGTH):   *- Harmonize length of character variables in Data= datasets According to the length found in Ref= datasests (if specified) -*;
MPRINT(UNI_VLENGTH):   proc sql noprint;
MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated by " " from (select distinct 
upcase(LIBNAME) as 
LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._TEMP" )) then L
ENGTH else . end ) 
as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._DATES" "WORK._TEMP" ) group by upcase(name)) group by upcase(name), upcase(t
ype) having 
sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK._DATES" and TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._TEMP" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(UNI_VLENGTH):   alter table WORK._DATES modify DOMAIN character(2), LSTCNDRVC character(16), USUBJID character(25) ;
NOTE: Table WORK._DATES has been modified, with 3 columns.
MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated by " " from (select distinct 
upcase(LIBNAME) as 
LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._TEMP" )) then L
ENGTH else . end ) 
The SAS System

as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._TEMP" "WORK._DATES" "WORK._TEMP" ) group by upcase(name)) group by upcase(name), upcase(ty
pe) having 
sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK._TEMP" and TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._TEMP" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(UNI_VLENGTH):   alter table WORK._TEMP modify DOMAIN character(2), LSTCNDRVC character(16), USUBJID character(25) ;
NOTE: Table WORK._TEMP has been modified, with 3 columns.
MPRINT(UNI_VLENGTH):   quit;
The SAS System

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.31 seconds
      cpu time            0.32 seconds


MPRINT(M_DS):  ;
MPRINT(M_DS):   data _dates;
MPRINT(M_DS):   set _dates _temp;
MPRINT(M_DS):   run;
NOTE: There were 4859 observations read from the data set WORK._DATES.
NOTE: There were 3181 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._DATES has 8040 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VLASTCONTACT):  ;
MPRINT(M_DS):   data _temp;
MPRINT(M_DS):   set sdtm.sv ( in=b keep=domain usubjid svendtc rename=(svendtc=lstcndrvc) where=(lstcndrvc ne '') );
MPRINT(M_DS):   run;

NOTE: There were 3389 observations read from the data set SDTM.SV.
      WHERE lstcndrvc not = ' ';
NOTE: The data set WORK._TEMP has 3389 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(M_DS):   proc sort data=_temp noduprec;
MPRINT(M_DS):   by domain usubjid lstcndrvc;
MPRINT(M_DS):   run;

NOTE: There were 3389 observations read from the data set WORK._TEMP.
NOTE: 219 duplicate observations were deleted.
NOTE: The data set WORK._TEMP has 3170 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(UNI_VLENGTH):   *- Harmonize length of character variables in Data= datasets According to the length found in Ref= datasests (if specified) -*;
MPRINT(UNI_VLENGTH):   proc sql noprint;
MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated by " " from (select distinct 
upcase(LIBNAME) as 
LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._TEMP" )) then L
The SAS System

ENGTH else . end ) 
as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._DATES" "WORK._TEMP" ) group by upcase(name)) group by upcase(name), upcase(t
ype) having 
sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK._DATES" and TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._TEMP" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(UNI_VLENGTH):   alter table WORK._DATES modify DOMAIN character(2), LSTCNDRVC character(16), USUBJID character(25) ;
NOTE: Table WORK._DATES has been modified, with 3 columns.
MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated by " " from (select distinct 
upcase(LIBNAME) as 
LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._TEMP" )) then L
ENGTH else . end ) 
as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._TEMP" "WORK._DATES" "WORK._TEMP" ) group by upcase(name)) group by upcase(name), upcase(ty
pe) having 
sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK._TEMP" and TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._TEMP" ) ;
The SAS System

NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(UNI_VLENGTH):   alter table WORK._TEMP modify DOMAIN character(2), LSTCNDRVC character(16), USUBJID character(25) ;
NOTE: Table WORK._TEMP has been modified, with 3 columns.
MPRINT(UNI_VLENGTH):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.29 seconds
      cpu time            0.31 seconds


MPRINT(M_DS):  ;
MPRINT(M_DS):   data _dates;
MPRINT(M_DS):   set _dates _temp;
MPRINT(M_DS):   run;
NOTE: There were 8040 observations read from the data set WORK._DATES.
NOTE: There were 3170 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._DATES has 11210 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VLASTCONTACT):  ;
MPRINT(M_DS):   data _temp;
MPRINT(M_DS):   set sdtm.ae ( in=b keep=domain usubjid aestdtc rename=(aestdtc=lstcndrvc) where=(lstcndrvc ne '') );
MPRINT(M_DS):   run;

NOTE: There were 969 observations read from the data set SDTM.AE.
      WHERE lstcndrvc not = ' ';
NOTE: The data set WORK._TEMP has 969 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(M_DS):   proc sort data=_temp noduprec;
MPRINT(M_DS):   by domain usubjid lstcndrvc;
MPRINT(M_DS):   run;

NOTE: There were 969 observations read from the data set WORK._TEMP.
The SAS System

NOTE: 150 duplicate observations were deleted.
NOTE: The data set WORK._TEMP has 819 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(UNI_VLENGTH):   *- Harmonize length of character variables in Data= datasets According to the length found in Ref= datasests (if specified) -*;
MPRINT(UNI_VLENGTH):   proc sql noprint;
MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated by " " from (select distinct 
upcase(LIBNAME) as 
LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._TEMP" )) then L
ENGTH else . end ) 
as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._DATES" "WORK._TEMP" ) group by upcase(name)) group by upcase(name), upcase(t
ype) having 
sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK._DATES" and TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._TEMP" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(UNI_VLENGTH):   alter table WORK._DATES modify DOMAIN character(2), LSTCNDRVC character(16), USUBJID character(25) ;
NOTE: Table WORK._DATES has been modified, with 3 columns.
The SAS System

MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated by " " from (select distinct 
upcase(LIBNAME) as 
LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._TEMP" )) then L
ENGTH else . end ) 
as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._TEMP" "WORK._DATES" "WORK._TEMP" ) group by upcase(name)) group by upcase(name), upcase(ty
pe) having 
sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK._TEMP" and TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._TEMP" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(UNI_VLENGTH):   alter table WORK._TEMP modify DOMAIN character(2), LSTCNDRVC character(16), USUBJID character(25) ;
NOTE: Table WORK._TEMP has been modified, with 3 columns.
MPRINT(UNI_VLENGTH):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.29 seconds
      cpu time            0.30 seconds


MPRINT(M_DS):  ;
MPRINT(M_DS):   data _dates;
MPRINT(M_DS):   set _dates _temp;
MPRINT(M_DS):   run;
NOTE: There were 11210 observations read from the data set WORK._DATES.
NOTE: There were 819 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._DATES has 12029 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VLASTCONTACT):  ;
MPRINT(M_DS):   data _temp;
MPRINT(M_DS):   set sdtm.ae ( in=b keep=domain usubjid aeendtc rename=(aeendtc=lstcndrvc) where=(lstcndrvc ne '') );
MPRINT(M_DS):   run;
The SAS System

NOTE: There were 817 observations read from the data set SDTM.AE.
      WHERE lstcndrvc not = ' ';
NOTE: The data set WORK._TEMP has 817 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(M_DS):   proc sort data=_temp noduprec;
MPRINT(M_DS):   by domain usubjid lstcndrvc;
MPRINT(M_DS):   run;

NOTE: There were 817 observations read from the data set WORK._TEMP.
NOTE: 110 duplicate observations were deleted.
NOTE: The data set WORK._TEMP has 707 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(UNI_VLENGTH):   *- Harmonize length of character variables in Data= datasets According to the length found in Ref= datasests (if specified) -*;
MPRINT(UNI_VLENGTH):   proc sql noprint;
MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated by " " from (select distinct 
upcase(LIBNAME) as 
LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._TEMP" )) then L
ENGTH else . end ) 
as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._DATES" "WORK._TEMP" ) group by upcase(name)) group by upcase(name), upcase(t
ype) having 
The SAS System

sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK._DATES" and TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._TEMP" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(UNI_VLENGTH):   alter table WORK._DATES modify DOMAIN character(2), LSTCNDRVC character(16), USUBJID character(25) ;
NOTE: Table WORK._DATES has been modified, with 3 columns.
MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated by " " from (select distinct 
upcase(LIBNAME) as 
LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._TEMP" )) then L
ENGTH else . end ) 
as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._TEMP" "WORK._DATES" "WORK._TEMP" ) group by upcase(name)) group by upcase(name), upcase(ty
pe) having 
sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK._TEMP" and TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._TEMP" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(UNI_VLENGTH):   alter table WORK._TEMP modify DOMAIN character(2), LSTCNDRVC character(16), USUBJID character(25) ;
NOTE: Table WORK._TEMP has been modified, with 3 columns.
MPRINT(UNI_VLENGTH):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.30 seconds
      cpu time            0.31 seconds


MPRINT(M_DS):  ;
MPRINT(M_DS):   data _dates;
MPRINT(M_DS):   set _dates _temp;
MPRINT(M_DS):   run;
The SAS System

NOTE: There were 12029 observations read from the data set WORK._DATES.
NOTE: There were 707 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._DATES has 12736 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VLASTCONTACT):  ;
MPRINT(M_DS):   data _temp;
MPRINT(M_DS):   set sdtm.vs ( in=b keep=domain usubjid vsdtc rename=(vsdtc=lstcndrvc) where=(lstcndrvc ne '') );
MPRINT(M_DS):   run;

NOTE: There were 15372 observations read from the data set SDTM.VS.
      WHERE lstcndrvc not = ' ';
NOTE: The data set WORK._TEMP has 15372 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(M_DS):   proc sort data=_temp noduprec;
MPRINT(M_DS):   by domain usubjid lstcndrvc;
MPRINT(M_DS):   run;

NOTE: There were 15372 observations read from the data set WORK._TEMP.
NOTE: 12269 duplicate observations were deleted.
NOTE: The data set WORK._TEMP has 3103 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(UNI_VLENGTH):   *- Harmonize length of character variables in Data= datasets According to the length found in Ref= datasests (if specified) -*;
The SAS System

MPRINT(UNI_VLENGTH):   proc sql noprint;
MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated by " " from (select distinct 
upcase(LIBNAME) as 
LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._TEMP" )) then L
ENGTH else . end ) 
as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._DATES" "WORK._TEMP" ) group by upcase(name)) group by upcase(name), upcase(t
ype) having 
sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK._DATES" and TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._TEMP" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(UNI_VLENGTH):   alter table WORK._DATES modify DOMAIN character(2), LSTCNDRVC character(16), USUBJID character(25) ;
NOTE: Table WORK._DATES has been modified, with 3 columns.
MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated by " " from (select distinct 
upcase(LIBNAME) as 
LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._TEMP" )) then L
ENGTH else . end ) 
as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._TEMP" "WORK._DATES" "WORK._TEMP" ) group by upcase(name)) group by upcase(name), upcase(ty
pe) having 
sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK._TEMP" and TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._TEMP" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
The SAS System

MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(UNI_VLENGTH):   alter table WORK._TEMP modify DOMAIN character(2), LSTCNDRVC character(16), USUBJID character(25) ;
NOTE: Table WORK._TEMP has been modified, with 3 columns.
MPRINT(UNI_VLENGTH):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.30 seconds
      cpu time            0.31 seconds


MPRINT(M_DS):  ;
MPRINT(M_DS):   data _dates;
MPRINT(M_DS):   set _dates _temp;
MPRINT(M_DS):   run;
NOTE: There were 12736 observations read from the data set WORK._DATES.
NOTE: There were 3103 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._DATES has 15839 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VLASTCONTACT):  ;
MPRINT(M_DS):   data _temp;
MPRINT(M_DS):   set sdtm.lb ( in=b keep=domain usubjid lbdtc rename=(lbdtc=lstcndrvc) where=(lstcndrvc ne '') );
MPRINT(M_DS):   run;

NOTE: There were 120653 observations read from the data set SDTM.LB.
      WHERE lstcndrvc not = ' ';
NOTE: The data set WORK._TEMP has 120653 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.05 seconds


MPRINT(M_DS):   proc sort data=_temp noduprec;
MPRINT(M_DS):   by domain usubjid lstcndrvc;
MPRINT(M_DS):   run;

NOTE: There were 120653 observations read from the data set WORK._TEMP.
NOTE: 113704 duplicate observations were deleted.
NOTE: The data set WORK._TEMP has 6949 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
The SAS System

      real time           0.06 seconds
      cpu time            0.06 seconds


MPRINT(UNI_VLENGTH):   *- Harmonize length of character variables in Data= datasets According to the length found in Ref= datasests (if specified) -*;
MPRINT(UNI_VLENGTH):   proc sql noprint;
MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated by " " from (select distinct 
upcase(LIBNAME) as 
LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._TEMP" )) then L
ENGTH else . end ) 
as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._DATES" "WORK._TEMP" ) group by upcase(name)) group by upcase(name), upcase(t
ype) having 
sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK._DATES" and TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._TEMP" ) ;
The SAS System

NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(UNI_VLENGTH):   alter table WORK._DATES modify DOMAIN character(2), LSTCNDRVC character(16), USUBJID character(25) ;
NOTE: Table WORK._DATES has been modified, with 3 columns.
MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated by " " from (select distinct 
upcase(LIBNAME) as 
LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._TEMP" )) then L
ENGTH else . end ) 
as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._TEMP" "WORK._DATES" "WORK._TEMP" ) group by upcase(name)) group by upcase(name), upcase(ty
pe) having 
sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK._TEMP" and TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._TEMP" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(UNI_VLENGTH):   alter table WORK._TEMP modify DOMAIN character(2), LSTCNDRVC character(16), USUBJID character(25) ;
NOTE: Table WORK._TEMP has been modified, with 3 columns.
MPRINT(UNI_VLENGTH):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.29 seconds
      cpu time            0.30 seconds


MPRINT(M_DS):  ;
MPRINT(M_DS):   data _dates;
MPRINT(M_DS):   set _dates _temp;
MPRINT(M_DS):   run;
NOTE: There were 15839 observations read from the data set WORK._DATES.
NOTE: There were 6949 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._DATES has 22788 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(VLASTCONTACT):  ;
MPRINT(M_DS):   data _temp;
MPRINT(M_DS):   set sdtm.eg ( in=b keep=domain usubjid egdtc rename=(egdtc=lstcndrvc) where=(lstcndrvc ne '') );
MPRINT(M_DS):   run;

NOTE: There were 11161 observations read from the data set SDTM.EG.
      WHERE lstcndrvc not = ' ';
NOTE: The data set WORK._TEMP has 11161 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(M_DS):   proc sort data=_temp noduprec;
MPRINT(M_DS):   by domain usubjid lstcndrvc;
MPRINT(M_DS):   run;
The SAS System


NOTE: There were 11161 observations read from the data set WORK._TEMP.
NOTE: 8817 duplicate observations were deleted.
NOTE: The data set WORK._TEMP has 2344 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
The SAS System

      cpu time            0.01 seconds


MPRINT(UNI_VLENGTH):   *- Harmonize length of character variables in Data= datasets According to the length found in Ref= datasests (if specified) -*;
MPRINT(UNI_VLENGTH):   proc sql noprint;
MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated by " " from (select distinct 
upcase(LIBNAME) as 
LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._TEMP" )) then L
ENGTH else . end ) 
as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._DATES" "WORK._TEMP" ) group by upcase(name)) group by upcase(name), upcase(t
ype) having 
sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK._DATES" and TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._TEMP" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(UNI_VLENGTH):   alter table WORK._DATES modify DOMAIN character(2), LSTCNDRVC character(19), USUBJID character(25) ;
NOTE: Table WORK._DATES has been modified, with 3 columns.
MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated by " " from (select distinct 
upcase(LIBNAME) as 
LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._TEMP" )) then L
ENGTH else . end ) 
as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._TEMP" "WORK._DATES" "WORK._TEMP" ) group by upcase(name)) group by upcase(name), upcase(ty
pe) having 
sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK._TEMP" and TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._TEMP" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(UNI_VLENGTH):   alter table WORK._TEMP modify DOMAIN character(2), LSTCNDRVC character(19), USUBJID character(25) ;
NOTE: Table WORK._TEMP has been modified, with 3 columns.
MPRINT(UNI_VLENGTH):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.32 seconds
      cpu time            0.34 seconds


MPRINT(M_DS):  ;
MPRINT(M_DS):   data _dates;
MPRINT(M_DS):   set _dates _temp;
MPRINT(M_DS):   run;
NOTE: There were 22788 observations read from the data set WORK._DATES.
NOTE: There were 2344 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._DATES has 25132 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VLASTCONTACT):  ;
MPRINT(M_DS):   data _temp;
MPRINT(M_DS):   set sdtm.ds ( in=b keep=domain usubjid dsstdtc rename=(dsstdtc=lstcndrvc) where=(lstcndrvc ne '') );
MPRINT(M_DS):   run;

NOTE: There were 1662 observations read from the data set SDTM.DS.
      WHERE lstcndrvc not = ' ';
NOTE: The data set WORK._TEMP has 1662 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
The SAS System

The SAS System



MPRINT(M_DS):   proc sort data=_temp noduprec;
MPRINT(M_DS):   by domain usubjid lstcndrvc;
MPRINT(M_DS):   run;

NOTE: There were 1662 observations read from the data set WORK._TEMP.
NOTE: 771 duplicate observations were deleted.
NOTE: The data set WORK._TEMP has 891 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(UNI_VLENGTH):   *- Harmonize length of character variables in Data= datasets According to the length found in Ref= datasests (if specified) -*;
MPRINT(UNI_VLENGTH):   proc sql noprint;
MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated by " " from (select distinct 
upcase(LIBNAME) as 
LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._TEMP" )) then L
ENGTH else . end ) 
as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._DATES" "WORK._TEMP" ) group by upcase(name)) group by upcase(name), upcase(t
ype) having 
sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK._DATES" and TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._TEMP" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(UNI_VLENGTH):   alter table WORK._DATES modify DOMAIN character(2), LSTCNDRVC character(19), USUBJID character(25) ;
NOTE: Table WORK._DATES has been modified, with 3 columns.
MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated by " " from (select distinct 
upcase(LIBNAME) as 
LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._TEMP" )) then L
ENGTH else . end ) 
as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._TEMP" "WORK._DATES" "WORK._TEMP" ) group by upcase(name)) group by upcase(name), upcase(ty
pe) having 
sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK._TEMP" and TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._DATES" "WORK._TEMP" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(UNI_VLENGTH):   alter table WORK._TEMP modify DOMAIN character(2), LSTCNDRVC character(19), USUBJID character(25) ;
NOTE: Table WORK._TEMP has been modified, with 3 columns.
MPRINT(UNI_VLENGTH):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.29 seconds
      cpu time            0.30 seconds


MPRINT(M_DS):  ;
MPRINT(M_DS):   data _dates;
MPRINT(M_DS):   set _dates _temp;
MPRINT(M_DS):   run;
NOTE: There were 25132 observations read from the data set WORK._DATES.
NOTE: There were 891 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._DATES has 26023 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
The SAS System



MPRINT(VLASTCONTACT):  ;
MPRINT(VLASTCONTACT):   data _dates;
MPRINT(VLASTCONTACT):   set _dates;
MPRINT(DT_IMPUT):   format d $20. lstcndrv e8601da.;
MPRINT(DT_IMPUT):   d = strip(lstcndrvc);
MPRINT(DT_IMPUT):   if index(d,'T') then d=scan(d,1,'T');
The SAS System

MPRINT(DT_IMPUT):   if index(d,'--') then d=strip(tranwrd(d,'--',''));
MPRINT(DT_IMPUT):   if length(d)>10 then d=substr(d,1,10);
MPRINT(DT_IMPUT):   if prxmatch('/^\d{4}-\d{2}-\d{2}$/i', cats(d)) then lstcndrv=input(cats(d), e8601da.);
MPRINT(DT_IMPUT):   else if prxmatch('/^\d{4}-\d{2}$/i', cats(d)) then lstcndrv=input(cats(d)||'-01', e8601da.);
MPRINT(DT_IMPUT):   else if prxmatch('/^\d{4}$/i', cats(d)) then lstcndrv=input(cats(d)||'-01-01', e8601da.);
MPRINT(DT_IMPUT):   drop d;
MPRINT(VLASTCONTACT):  ;
MPRINT(VLASTCONTACT):   run;

NOTE: There were 26023 observations read from the data set WORK._DATES.
NOTE: The data set WORK._DATES has 26023 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.05 seconds


MPRINT(VLASTCONTACT):   proc sql;
MPRINT(VLASTCONTACT):   create table _dates_final as select distinct a.usubjid , a.rfpendtc, a.rfpendt, b.lstcndrv, b.domain from _rfpendtc as a left join _dates as b on a.usubjid=
b.usubjid order by 
usubjid, lstcndrv, domain;
NOTE: Table WORK._DATES_FINAL created, with 15436 rows and 5 columns.

MPRINT(VLASTCONTACT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.04 seconds
      cpu time            0.06 seconds


MPRINT(VLASTCONTACT):   proc sql;
MPRINT(VLASTCONTACT):   create table _lstcndrv as select distinct * from _dates_final group by usubjid having lstcndrv=max(lstcndrv) order by usubjid, domain;
NOTE: The query requires remerging summary statistics back with the original data.
NOTE: Table WORK._LSTCNDRV created, with 625 rows and 5 columns.

MPRINT(VLASTCONTACT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VLASTCONTACT):   data _lstcndrv (drop=domain domain_prev);
MPRINT(VLASTCONTACT):   set _lstcndrv;
MPRINT(VLASTCONTACT):   by usubjid domain;
MPRINT(VLASTCONTACT):   format lstcnsrc $50. domain_prev $2.;
MPRINT(VLASTCONTACT):   retain lstcnsrc domain_prev;
MPRINT(VLASTCONTACT):   if first.usubjid then do;
MPRINT(VLASTCONTACT):   lstcnsrc=domain;
MPRINT(VLASTCONTACT):   domain_prev=domain;
MPRINT(VLASTCONTACT):   end;
The SAS System

MPRINT(VLASTCONTACT):   else if domain ne domain_prev then do;
MPRINT(VLASTCONTACT):   lstcnsrc=strip(lstcnsrc)||', '||strip(domain);
MPRINT(VLASTCONTACT):   domain_prev=domain;
MPRINT(VLASTCONTACT):   end;
MPRINT(VLASTCONTACT):   if last.usubjid;
MPRINT(VLASTCONTACT):   run;

NOTE: There were 625 observations read from the data set WORK._LSTCNDRV.
NOTE: The data set WORK._LSTCNDRV has 205 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
The SAS System

      cpu time            0.00 seconds


MPRINT(VLASTCONTACT):   data lstcndrv;
MPRINT(VLASTCONTACT):   set _lstcndrv;
MPRINT(VLASTCONTACT):   format lstcndt e8601da.;
MPRINT(VLASTCONTACT):   if lstcndrv ne . and rfpendt ne . then rfpenddif = rfpendt - lstcndrv;
MPRINT(VLASTCONTACT):   if n(rfpendt,lstcndrv)=2 then lstcndt = max(rfpendt,lstcndrv);
MPRINT(VLASTCONTACT):   else if lstcndrv ne . then lstcndt = lstcndrv;
MPRINT(VLASTCONTACT):   else if rfpendt ne . then lstcndt = rfpendt;
MPRINT(VLASTCONTACT):   run;

NOTE: There were 205 observations read from the data set WORK._LSTCNDRV.
NOTE: The data set WORK.LSTCNDRV has 205 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(VLASTCONTACT):   data _check;
MPRINT(VLASTCONTACT):   set lstcndrv (where=(rfpenddif ne . and rfpenddif lt 0));
MPRINT(VLASTCONTACT):   run;

NOTE: There were 0 observations read from the data set WORK.LSTCNDRV.
      WHERE (rfpenddif not = .) and (rfpenddif<0);
NOTE: The data set WORK._CHECK has 0 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(VLASTCONTACT):   proc sql undo_policy=none;
MPRINT(VLASTCONTACT):   create table WORK._A_3 as select distinct a.*, b.lstcndrv, b.rfpenddif, b.lstcnsrc, b.lstcndt from WORK._A_3 as a left join lstcndrv as b on a.usubjid=b.usu
bjid order by 
usubjid, studyid;
NOTE: Table WORK._A_3 created, with 205 rows and 66 columns.

MPRINT(VLASTCONTACT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.02 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("lstcndrv/rfpeddif/lstcnsrc/lstcndt variables derived from rfpendtc and lasted dates for usubjid in EX, SV, AE, VS, LB, EG, DS.");
The SAS System

MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_DRVVARDEF"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_drvvardef  |lstcndrv/rfpeddif/lstcnsrc/lstcndt variables derived from rfpendtc and lasted dates for usubjid in EX, SV, AE, VS, LB, EG, DS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_DRVVARDEF):   ;
MPRINT(VLASTCONTACT):  ;
The SAS System

MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("lstcndrv/rfpeddif/lstcnsrc/lstcndt variables are created.");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |lstcndrv/rfpeddif/lstcnsrc/lstcndt variables are created.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(VLASTCONTACT):  ;
MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):   data _a_4;
MPRINT(GADAMDERIVATIONS):   set _a_3;
MPRINT(GADAMDERIVATIONS):   If n(trtsdt,trtedt) = 2 then trtdurd = trtedt - trtsdt + 1;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):   run;

NOTE: There were 205 observations read from the data set WORK._A_3.
NOTE: The data set WORK._A_4 has 205 observations and 67 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(GADAMDERIVATIONS):  ;
MPRINT(GADAMDERIVATIONS):   ;
MPRINT(GADAMDERIVATIONS):   data adslder;
MPRINT(GADAMDERIVATIONS):   set _a_4;
MPRINT(GADAMDERIVATIONS):   run;

NOTE: There were 205 observations read from the data set WORK._A_4.
NOTE: The data set WORK.ADSLDER has 205 observations and 67 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
The SAS System

      cpu time            0.00 seconds


MPRINT(ADSL):  ;
MPRINT(ADSL):   *- derive additional variables from sdtm pool -*;
MPRINT(ADSL):   data adslder2;
MPRINT(ADSL):   set adslder;
MPRINT(ADSL):   run;

NOTE: There were 205 observations read from the data set WORK.ADSLDER.
NOTE: The data set WORK.ADSLDER2 has 205 observations and 67 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


The SAS System

MPRINT(ADSL):   *- minimize character variables length according to contents -*;
MPRINT(ADSL):   option mcompilenote=all;
MAUTOCOMPLOC:  The autocall macro MINI_VLENGTH is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library/mini_vlength.sas.
NOTE: The macro MINI_VLENGTH completed compilation without errors.
      184 instructions 5200 bytes.
MPRINT(ADSL):   option MCOMPILENOTE=NONE;
MPRINT(MINI_VLENGTH):   *- Minimize length of character variables in Data= datasets -*;
MPRINT(MINI_VLENGTH):   proc sql noprint;
MPRINT(MINI_VLENGTH):   *- identify character variables in current dataset &libds -*;
MPRINT(MINI_VLENGTH):   select distinct name, count(distinct name) into :c_vars separated by " ", :n_c_vars trimmed from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNA
ME)) in 
("WORK.ADSLDER2" ) and upcase(TYPE)="CHAR" ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(MINI_VLENGTH):   *- retrieve length of longest value for each character variable in current dataset &libds -*;
MPRINT(MINI_VLENGTH):   select "ACTARM character("||cats(max(1, max(length("ACTARM"N)) ))||")" ||", "|| "ACTARMCD character("||cats(max(1, max(length("ACTARMCD"N)) ))||")" ||", "||
 "ACTARMUD 
character("||cats(max(1, max(length("ACTARMUD"N)) ))||")" ||", "|| "AGEU character("||cats(max(1, max(length("AGEU"N)) ))||")" ||", "|| "ARM character("||cats(max(1, max(length("AR
M"N)) ))||")" ||", 
"|| "ARMCD character("||cats(max(1, max(length("ARMCD"N)) ))||")" ||", "|| "ARMNRS character("||cats(max(1, max(length("ARMNRS"N)) ))||")" ||", "|| "BRTHDTC character("||cats(max(1
, 
max(length("BRTHDTC"N)) ))||")" ||", "|| "COHORT character("||cats(max(1, max(length("COHORT"N)) ))||")" ||", "|| "COUNTRY character("||cats(max(1, max(length("COUNTRY"N)) ))||")" 
||", "|| "DCSREAS 
character("||cats(max(1, max(length("DCSREAS"N)) ))||")" ||", "|| "DCSREASP character("||cats(max(1, max(length("DCSREASP"N)) ))||")" ||", "|| "DCTREAS character("||cats(max(1, 
max(length("DCTREAS"N)) ))||")" ||", "|| "DCTREASP character("||cats(max(1, max(length("DCTREASP"N)) ))||")" ||", "|| "DMCOHORT character("||cats(max(1, max(length("DMCOHORT"N)) ))
||")" ||", "|| 
"DOMAIN character("||cats(max(1, max(length("DOMAIN"N)) ))||")" ||", "|| "DTHDTC character("||cats(max(1, max(length("DTHDTC"N)) ))||")" ||", "|| "DTHFL character("||cats(max(1, ma
x(length("DTHFL"N)) 
))||")" ||", "|| "EOSSTT character("||cats(max(1, max(length("EOSSTT"N)) ))||")" ||", "|| "EOTSTT character("||cats(max(1, max(length("EOTSTT"N)) ))||")" ||", "|| "ETHNIC character
("||cats(max(1, 
max(length("ETHNIC"N)) ))||")" ||", "|| "INVNAM character("||cats(max(1, max(length("INVNAM"N)) ))||")" ||", "|| "JAPANESE character("||cats(max(1, max(length("JAPANESE"N)) ))||")"
 ||", "|| "RACE 
character("||cats(max(1, max(length("RACE"N)) ))||")" ||", "|| "RACEOTH character("||cats(max(1, max(length("RACEOTH"N)) ))||")" ||", "|| "RFENDTC character("||cats(max(1, max(leng
th("RFENDTC"N)) 
))||")" ||", "|| "RFICDTC character("||cats(max(1, max(length("RFICDTC"N)) ))||")" ||", "|| "RFPENDTC character("||cats(max(1, max(length("RFPENDTC"N)) ))||")" ||", "|| "RFSTDTC 
character("||cats(max(1, max(length("RFSTDTC"N)) ))||")" ||", "|| "RFXENDTC character("||cats(max(1, max(length("RFXENDTC"N)) ))||")" ||", "|| "RFXSTDTC character("||cats(max(1, 
max(length("RFXSTDTC"N)) ))||")" ||", "|| "SAFFL character("||cats(max(1, max(length("SAFFL"N)) ))||")" ||", "|| "SEX character("||cats(max(1, max(length("SEX"N)) ))||")" ||", "|| 
"SITEID 
character("||cats(max(1, max(length("SITEID"N)) ))||")" ||", "|| "STUDYID character("||cats(max(1, max(length("STUDYID"N)) ))||")" ||", "|| "SUBJID character("||cats(max(1, max(len
gth("SUBJID"N)) 
The SAS System

))||")" ||", "|| "TRTSEQA character("||cats(max(1, max(length("TRTSEQA"N)) ))||")" ||", "|| "TSEQAG1 character("||cats(max(1, max(length("TSEQAG1"N)) ))||")" ||", "|| "USUBJID 
character("||cats(max(1, max(length("USUBJID"N)) ))||")" ||", "|| "_in_supp_fl character("||cats(max(1, max(length("_in_supp_fl"N)) ))||")" ||", "|| "armcdas character("||cats(max(
1, 
max(length("armcdas"N)) ))||")" ||", "|| "armcds character("||cats(max(1, max(length("armcds"N)) ))||")" ||", "|| "cumarmca character("||cats(max(1, max(length("cumarmca"N)) ))||")
" ||", "|| 
"cumarmcd character("||cats(max(1, max(length("cumarmcd"N)) ))||")" ||", "|| "cumstud character("||cats(max(1, max(length("cumstud"N)) ))||")" ||", "|| "lstcnsrc character("||cats(
max(1, 
max(length("lstcnsrc"N)) ))||")" ||", "|| "studies character("||cats(max(1, max(length("studies"N)) ))||")" into :char_vars trimmed from WORK.ADSLDER2 ;
MPRINT(MINI_VLENGTH):   *- adjust character variable lengths -*;
MPRINT(MINI_VLENGTH):   alter table WORK.ADSLDER2 modify ACTARM character(20), ACTARMCD character(6), ACTARMUD character(63), AGEU character(5), ARM character(20), ARMCD character(
6), ARMNRS 
character(19), BRTHDTC character(4), COHORT character(1), COUNTRY character(3), DCSREAS character(21), DCSREASP character(7), DCTREAS character(21), DCTREASP character(63), DMCOHOR
T character(1), 
DOMAIN character(2), DTHDTC character(1), DTHFL character(1), EOSSTT character(14), EOTSTT character(12), ETHNIC character(22), INVNAM character(25), JAPANESE character(1), RACE ch
aracter(25), 
RACEOTH character(4), RFENDTC character(10), RFICDTC character(10), RFPENDTC character(19), RFSTDTC character(16), RFXENDTC character(16), RFXSTDTC character(16), SAFFL character(1
), SEX 
character(1), SITEID character(7), STUDYID character(13), SUBJID character(10), TRTSEQA character(12), TSEQAG1 character(12), USUBJID character(25), _in_supp_fl character(1), armcd
as character(6), 
armcds character(6), cumarmca character(6), cumarmcd character(6), cumstud character(13), lstcnsrc character(22), studies character(13);
NOTE: Table WORK.ADSLDER2 has been modified, with 67 columns.
MPRINT(MINI_VLENGTH):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds


MPRINT(ADSL):  ;
MPRINT(ADSL):   *- create empty adsl based on specs -*;
MPRINT(ADSL):   data _empty_adsl;
NOTE: %INCLUDE (level 1) file /saswork/sas_tmp/SAS_workB57B000010FC_xar05auv/SAS_workCC2C000010FC_xar05auv/attr.sas is file 
      /saswork/sas_tmp/SAS_workB57B000010FC_xar05auv/SAS_workCC2C000010FC_xar05auv/attr.sas.
887       +attrib
888       +STUDYID                 length = $13     format = $13.                 label = "Study Identifier "
889       +STUDIES                 length = $200                                  label = "Studies Identifiers Sequence "
890       +NSTUDIES                length = 8                                     label = "Number of Studies "
891       +STUDYSEQ                length = 8                                     label = "Study Sequence Number "
892       +USUBJID                 length = $25     format = $25.                 label = "Unique Subject Identifier "
The SAS System

893       +SUBJID                  length = $10     format = $10.                 label = "Subject Identifier for the Study "
894       +RFSTDTC                 length = $16     format = $16.                 label = "Subject Reference Start Date/Time "
895       +RFENDTC                 length = $10     format = $10.                 label = "Subject Reference End Date/Time "
896       +SITEID                  length = $7      format = $7.                  label = "Study Site Identifier "
897       +AGE                     length = 8       format = 2.                   label = "Age "
898       +AGEU                    length = $5      format = $5.                  label = "Age Units "
899       +SEX                     length = $1      format = $1.                  label = "Sex "
900       +RACE                    length = $25     format = $25.                 label = "Race "
901       +RACEOTH                 length = $20                                   label = "Other Race "
902       +ETHNIC                  length = $22     format = $22.                 label = "Ethnicity "
903       +COUNTRY                 length = $3      format = $3.                  label = "Country "
904       +SAFFL                   length = $1                                    label = "Safety Population Flag "
905       +COHORT                  length = $40                                   label = "Cohort "
906       +ARM                     length = $20     format = $20.                 label = "Description of Planned Arm "
907       +ACTARMCD                length = $6      format = $6.                  label = "Actual Arm Code "
908       +ACTARM                  length = $20     format = $20.                 label = "Description of Actual Arm "
909       +ARMCDS                  length = $200                                  label = "Planned Arm Codes Sequence "
910       +ARMCDAS                 length = $200                                  label = "Actual Arm Codes Sequence "
The SAS System

911       +TRTSEQA                 length = $200                                  label = "Actual Sequence of Treatments "
912       +TSEQAG1                 length = $50                                   label = "Actual Sequence of active Treatments "
913       +RFICDTC                 length = $10     format = $10.                 label = "Date/Time of Informed Consent "
914       +RFICDT                  length = 8       format = e8601da.             label = "Date of Informed Consent "
915       +EOSSTT                  length = $30                                   label = "End of Study Status "
916       +EOSDT                   length = 8       format = e8601da.             label = "End of Study Date "
917       +DCSREAS                 length = $200                                  label = "Reason for Discontinuation from Study "
918       +DCSREASP                length = $200                                  label = "Reason Spec for Discont from Study "
919       +RFPENDTC                length = $19     format = $19.                 label = "Date/Time of End of Participation "
920       +LSTCNDRV                length = 8       format = e8601da.             label = "Date of Last Contact derived "
921       +LSTCNSRC                length = $50                                   label = "Domains of Last Contact date derived "
922       +RFPENDDIF                                                              label = "Difference between RFPENDTC and LSTCNDRV "
923       +LSTCNDT                 length = 8       format = e8601da.             label = "Date of Last Contact "
924       +DTHFL                   length = $1      format = $1.                  label = "Subject Death Flag "
925       +DTHDTC                  length = $1      format = $1.                  label = "Date/Time of Death "
926       +TRTSDT                  length = 8       format = e8601da.             label = "Date of First Exposure to Treatment "
927       +TRTSDTM                 length = 8       format = e8601dt.             label = "Datetime of First Exposure to Treatment "
928       +TRTEDT                  length = 8       format = e8601da.             label = "Date of Last Exposure to Treatment "
929       +TRTEDTM                 length = 8       format = e8601dt.             label = "Datetime of Last Exposure to Treatment "
930       +TRTDURD                 length = 8                                     label = "Total Treatment Duration (Days) "
931       +EOTSTT                  length = $12                                   label = "End of Treatment Status "
932       +EOTDT                   length = 8       format = e8601da.             label = "End of Treatment date "
933       +DCTREAS                 length = $200                                  label = "Reason for Discontinuation of Treatment "
934       +DCTREASP                length = $200                                  label = "Reason Specify for Discont of Treatment "
935       +BLWEI                   length = 8                                     label = "Baseline Weight (kg) "
936       +BLHEI                   length = 8                                     label = "Baseline Height (cm) "
937       +BLBMI                   length = 8                                     label = "Baseline Body Mass Index (kg/m2) "
938       +LPBMI                   length = 8                                     label = "Latest post Body Mass Index (kg/m2) "
939       +DOSENR                  length = 8                                     label = "Total Number of Doses "
940       +;
MPRINT(ADSL):   attrib STUDYID length = $13 format = $13. label = "Study Identifier " STUDIES length = $200 label = "Studies Identifiers Sequence " NSTUDIES length = 8 label = "Num
ber of Studies " 
STUDYSEQ length = 8 label = "Study Sequence Number " USUBJID length = $25 format = $25. label = "Unique Subject Identifier " SUBJID length = $10 format = $10. label = "Subject Iden
tifier for the 
Study " RFSTDTC length = $16 format = $16. label = "Subject Reference Start Date/Time " RFENDTC length = $10 format = $10. label = "Subject Reference End Date/Time " SITEID length 
= $7 format = $7. 
label = "Study Site Identifier " AGE length = 8 format = 2. label = "Age " AGEU length = $5 format = $5. label = "Age Units " SEX length = $1 format = $1. label = "Sex " RACE lengt
h = $25 format = 
$25. label = "Race " RACEOTH length = $20 label = "Other Race " ETHNIC length = $22 format = $22. label = "Ethnicity " COUNTRY length = $3 format = $3. label = "Country " SAFFL len
gth = $1 label = 
"Safety Population Flag " COHORT length = $40 label = "Cohort " ARM length = $20 format = $20. label = "Description of Planned Arm " ACTARMCD length = $6 format = $6. label = "Actu
al Arm Code " 
ACTARM length = $20 format = $20. label = "Description of Actual Arm " ARMCDS length = $200 label = "Planned Arm Codes Sequence " ARMCDAS length = $200 label = "Actual Arm Codes Se
quence " TRTSEQA 
length = $200 label = "Actual Sequence of Treatments " TSEQAG1 length = $50 label = "Actual Sequence of active Treatments " RFICDTC length = $10 format = $10. label = "Date/Time of
 Informed Consent " 
RFICDT length = 8 format = e8601da. label = "Date of Informed Consent " EOSSTT length = $30 label = "End of Study Status " EOSDT length = 8 format = e8601da. label = "End of Study 
Date " DCSREAS 
length = $200 label = "Reason for Discontinuation from Study " DCSREASP length = $200 label = "Reason Spec for Discont from Study " RFPENDTC length = $19 format = $19. label = "Dat
e/Time of End of 
The SAS System

Participation " LSTCNDRV length = 8 format = e8601da. label = "Date of Last Contact derived " LSTCNSRC length = $50 label = "Domains of Last Contact date derived " RFPENDDIF label 
= "Difference 
between RFPENDTC and LSTCNDRV " LSTCNDT length = 8 format = e8601da. label = "Date of Last Contact " DTHFL length = $1 format = $1. label = "Subject Death Flag " DTHDTC length = $1
 format = $1. label 
= "Date/Time of Death " TRTSDT length = 8 format = e8601da. label = "Date of First Exposure to Treatment " TRTSDTM length = 8 format = e8601dt. label = "Datetime of First Exposure 
to Treatment " 
The SAS System

TRTEDT length = 8 format = e8601da. label = "Date of Last Exposure to Treatment " TRTEDTM length = 8 format = e8601dt. label = "Datetime of Last Exposure to Treatment " TRTDURD len
gth = 8 label = 
"Total Treatment Duration (Days) " EOTSTT length = $12 label = "End of Treatment Status " EOTDT length = 8 format = e8601da. label = "End of Treatment date " DCTREAS length = $200 
label = "Reason for 
Discontinuation of Treatment " DCTREASP length = $200 label = "Reason Specify for Discont of Treatment " BLWEI length = 8 label = "Baseline Weight (kg) " BLHEI length = 8 label = "
Baseline Height 
(cm) " BLBMI length = 8 label = "Baseline Body Mass Index (kg/m2) " LPBMI length = 8 label = "Latest post Body Mass Index (kg/m2) " DOSENR length = 8 label = "Total Number of Doses
 " ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(ADSL):   array _n _numeric_;
MPRINT(ADSL):   array _c _character_;
MPRINT(ADSL):   do over _n;
MPRINT(ADSL):   call missing(of _n);
MPRINT(ADSL):   end;
MPRINT(ADSL):   do over _c;
MPRINT(ADSL):   call missing(of _c);
MPRINT(ADSL):   end;
NOTE: %INCLUDE (level 1) file /saswork/sas_tmp/SAS_workB57B000010FC_xar05auv/SAS_workCC2C000010FC_xar05auv/keep.sas is file 
      /saswork/sas_tmp/SAS_workB57B000010FC_xar05auv/SAS_workCC2C000010FC_xar05auv/keep.sas.
941       +keep STUDYID STUDIES NSTUDIES STUDYSEQ USUBJID
942       +SUBJID RFSTDTC RFENDTC SITEID AGE
943       +AGEU SEX RACE RACEOTH ETHNIC
944       +COUNTRY SAFFL COHORT ARM ACTARMCD
945       +ACTARM ARMCDS ARMCDAS TRTSEQA TSEQAG1
946       +RFICDTC RFICDT EOSSTT EOSDT DCSREAS
947       +DCSREASP RFPENDTC LSTCNDRV LSTCNSRC RFPENDDIF
948       +LSTCNDT DTHFL DTHDTC TRTSDT TRTSDTM
949       +TRTEDT TRTEDTM TRTDURD EOTSTT EOTDT
950       +DCTREAS DCTREASP BLWEI BLHEI BLBMI
951       +LPBMI DOSENR ;
MPRINT(ADSL):   keep STUDYID STUDIES NSTUDIES STUDYSEQ USUBJID SUBJID RFSTDTC RFENDTC SITEID AGE AGEU SEX RACE RACEOTH ETHNIC COUNTRY SAFFL COHORT ARM ACTARMCD ACTARM ARMCDS ARMCDA
S TRTSEQA TSEQAG1 
RFICDTC RFICDT EOSSTT EOSDT DCSREAS DCSREASP RFPENDTC LSTCNDRV LSTCNSRC RFPENDDIF LSTCNDT DTHFL DTHDTC TRTSDT TRTSDTM TRTEDT TRTEDTM TRTDURD EOTSTT EOTDT DCTREAS DCTREASP BLWEI BLH
EI BLBMI LPBMI 
DOSENR ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(ADSL):   delete;
MPRINT(ADSL):   run;
NOTE: The data set WORK._EMPTY_ADSL has 0 observations and 52 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(ADSL):   *- uniformaize lengths between both datasets -*;
MPRINT(UNI_VLENGTH):   *- Harmonize length of character variables in Data= datasets According to the length found in Ref= datasests (if specified) -*;
MPRINT(UNI_VLENGTH):   proc sql noprint;
MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated by " " from (select distinct 
upcase(LIBNAME) as 
LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.ADSLDER2" "WORK._EMPTY_ADSL" )
) then LENGTH else 
. end ) as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.ADSLDER2" "WORK.ADSLDER2" "WORK._EMPTY_ADSL" ) group by upcase(name)) group by upca
se(name), 
upcase(type) having sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK.ADSLDER2" and TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.ADSLDER2" "WORK._EMPTY_AD
SL" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
The SAS System

MPRINT(UNI_VLENGTH):   alter table WORK.ADSLDER2 modify ACTARM character(20), ACTARMCD character(6), ACTARMUD character(63), AGEU character(5), ARM character(20), ARMCD character(6
), ARMCDAS 
character(200), ARMCDS character(200), ARMNRS character(19), BRTHDTC character(4), COHORT character(40), COUNTRY character(3), CUMARMCA character(6), CUMARMCD character(6), CUMSTUD
 character(13), 
DCSREAS character(200), DCSREASP character(200), DCTREAS character(200), DCTREASP character(200), DMCOHORT character(1), DOMAIN character(2), DTHDTC character(1), DTHFL character(1
), EOSSTT 
character(30), EOTSTT character(12), ETHNIC character(22), INVNAM character(25), JAPANESE character(1), LSTCNSRC character(50), RACE character(25), RACEOTH character(20), RFENDTC c
haracter(10), 
RFICDTC character(10), RFPENDTC character(19), RFSTDTC character(16), RFXENDTC character(16), RFXSTDTC character(16), SAFFL character(1), SEX character(1), SITEID character(7), STU
DIES 
character(200), STUDYID character(13), SUBJID character(10), TRTSEQA character(200), TSEQAG1 character(50), USUBJID character(25), _IN_SUPP_FL character(1) ;
NOTE: Table WORK.ADSLDER2 has been modified, with 67 columns.
The SAS System

MPRINT(UNI_VLENGTH):   *- identify common variables (with possibly different lengths) -*;
MPRINT(UNI_VLENGTH):   select distinct cats(name)||" character("||cats(length)||")", 'x' into :common_vars separated by ", ", :n_common_vars separated by " " from (select distinct 
upcase(LIBNAME) as 
LIBNAME, upcase(MEMNAME) as MEMNAME, upcase(NAME) as NAME, upcase(TYPE) as TYPE , max( case when (upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.ADSLDER2" "WORK._EMPTY_ADSL" )
) then LENGTH else 
. end ) as LENGTH from sashelp.vcolumn where upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK._EMPTY_ADSL" "WORK.ADSLDER2" "WORK._EMPTY_ADSL" ) group by upcase(name)) group by u
pcase(name), 
upcase(type) having sum(upcase(cats(LIBNAME)||"."||cats(MEMNAME))="WORK._EMPTY_ADSL" and TYPE="CHAR") and upcase(cats(LIBNAME)||"."||cats(MEMNAME)) in ("WORK.ADSLDER2" "WORK._EMPTY
_ADSL" ) ;
NOTE: The query requires remerging summary statistics back with the original data.
NOTE: No observations in data set WORK._EMPTY_ADSL.
NOTE: No observations in data set WORK._EMPTY_ADSL.
MPRINT(UNI_VLENGTH):   *- uniformize variable lengths -*;
MPRINT(UNI_VLENGTH):   alter table WORK._EMPTY_ADSL modify ACTARM character(20), ACTARMCD character(6), AGEU character(5), ARM character(20), ARMCDAS character(200), ARMCDS charact
er(200), COHORT 
character(40), COUNTRY character(3), DCSREAS character(200), DCSREASP character(200), DCTREAS character(200), DCTREASP character(200), DTHDTC character(1), DTHFL character(1), EOSS
TT character(30), 
EOTSTT character(12), ETHNIC character(22), LSTCNSRC character(50), RACE character(25), RACEOTH character(20), RFENDTC character(10), RFICDTC character(10), RFPENDTC character(19),
 RFSTDTC 
character(16), SAFFL character(1), SEX character(1), SITEID character(7), STUDIES character(200), STUDYID character(13), SUBJID character(10), TRTSEQA character(200), TSEQAG1 chara
cter(50), USUBJID 
character(25) ;
NOTE: Table WORK._EMPTY_ADSL has been modified, with 52 columns.
MPRINT(UNI_VLENGTH):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.25 seconds
      cpu time            0.24 seconds


MPRINT(ADSL):  ;
MPRINT(ADSL):   proc sql noprint;
NOTE: Composite index _idx2_ has been defined.
MPRINT(ADSL):   create index _idx2_ on adslder2(usubjid, studyid) quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(ADSL):   data adamtmp.adsl;
MPRINT(ADSL):   set _empty_adsl(obs=0) adslder2 ;
MPRINT(ADSL):   by usubjid studyid;
NOTE: %INCLUDE (level 1) file /saswork/sas_tmp/SAS_workB57B000010FC_xar05auv/SAS_workCC2C000010FC_xar05auv/keep.sas is file 
      /saswork/sas_tmp/SAS_workB57B000010FC_xar05auv/SAS_workCC2C000010FC_xar05auv/keep.sas.
952       +keep STUDYID STUDIES NSTUDIES STUDYSEQ USUBJID
The SAS System

953       +SUBJID RFSTDTC RFENDTC SITEID AGE
954       +AGEU SEX RACE RACEOTH ETHNIC
955       +COUNTRY SAFFL COHORT ARM ACTARMCD
956       +ACTARM ARMCDS ARMCDAS TRTSEQA TSEQAG1
957       +RFICDTC RFICDT EOSSTT EOSDT DCSREAS
958       +DCSREASP RFPENDTC LSTCNDRV LSTCNSRC RFPENDDIF
959       +LSTCNDT DTHFL DTHDTC TRTSDT TRTSDTM
960       +TRTEDT TRTEDTM TRTDURD EOTSTT EOTDT
961       +DCTREAS DCTREASP BLWEI BLHEI BLBMI
962       +LPBMI DOSENR ;
MPRINT(ADSL):   keep STUDYID STUDIES NSTUDIES STUDYSEQ USUBJID SUBJID RFSTDTC RFENDTC SITEID AGE AGEU SEX RACE RACEOTH ETHNIC COUNTRY SAFFL COHORT ARM ACTARMCD ACTARM ARMCDS ARMCDA
S TRTSEQA TSEQAG1 
RFICDTC RFICDT EOSSTT EOSDT DCSREAS DCSREASP RFPENDTC LSTCNDRV LSTCNSRC RFPENDDIF LSTCNDT DTHFL DTHDTC TRTSDT TRTSDTM TRTEDT TRTEDTM TRTDURD EOTSTT EOTDT DCTREAS DCTREASP BLWEI BLH
EI BLBMI LPBMI 
DOSENR ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(ADSL):   keep
MPRINT(VARLIST):   studies armcds armcdas nstudies cumstud cumarmcd cumarmca studyseq dm_modte blbmi blhei blwei
MPRINT(ADSL):  ;
MPRINT(ADSL):   run;

NOTE: There were 0 observations read from the data set WORK._EMPTY_ADSL.
NOTE: There were 205 observations read from the data set WORK.ADSLDER2.
NOTE: The data set ADAMTMP.ADSL has 205 observations and 56 variables.
The SAS System

NOTE: Compressing data set ADAMTMP.ADSL decreased size by 50.00 percent. 
      Compressed is 3 pages; un-compressed would require 6 pages.
NOTE: DATA statement used (Total process time):
      real time           0.23 seconds
      cpu time            0.24 seconds


MPRINT(BUILDMSG):   data _null_;
MPRINT(BUILDMSG):   msg=strip("adamtmp.adsl generated");
MPRINT(BUILDMSG):   length mcr $15;
MPRINT(BUILDMSG):   mcr=strip(lowcase("L4G_MESSAGE"));
MPRINT(BUILDMSG):   call execute('%log4sas_debug(monitor, '||quote(mcr||"|"||strip(msg))||')');
MPRINT(BUILDMSG):   run;

l4g_message    |adamtmp.adsl generated
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: CALL EXECUTE routine executed successfully, but no SAS statements were generated.
MPRINT(L4G_MESSAGE):   ;
MPRINT(ADSL):  ;
963        
964        %programend;
MAUTOCOMPLOC:  The autocall macro PROGRAMEND is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library/programend.sas.
MPRINT(PROGRAMEND):   ;
MPRINT(PROGRAMEND):  *';
MPRINT(PROGRAMEND):  *";
MPRINT(PROGRAMEND):  */;
MPRINT(PROGRAMEND):  *);
The SAS System

MPRINT(PROGRAMEND):  run;
MPRINT(PROGRAMEND):  quit;
MPRINT(PROGRAMEND):  ;
MPRINT(PROGRAMEND):   option nosyntaxcheck obs=max;
MPRINT(PROGRAMEND):   option LS=180 PS=60;
MPRINT(PROGRAMEND):   option VALIDVARNAME=V7;
_PARENTJOB_WRK_= PARWRK_LIBREF_ASSIGNED=0
MPRINT(PROGRAMEND):   options nosymbolgen nomlogic;
sbg=NOSYMBOLGEN
MPRINT(PROGRAMEND):   * seconds ;
MPRINT(PROGRAMEND):   * convert seconds to days ;
MPRINT(PROGRAMEND):   * subtract days from run time ;


=================================================================================================================
SAS PROGRAM : /clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/programs/adsl.sas
RUN ENVIRONMENT: repository  -  SYSMEXECDEPTH:1  - DEBUG: 1
SAS LOG     : /clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/log/__adsl.log
PRINTTO LOG : LOGF =  /clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/log/__adsl.log
SAS OUTPUT  : /clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/output/__adsl.lst
PRINTTO LIST: OF =  /clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/lst/__adsl.lst
-----------------------------------------------------------------------------------------------------------------
USER                                  : jbodart
SAS VERSION                           : 9.04.01M6P11072018
PLATFORM                              : Linux LIN X64 3.10.0-957.27.2.el7.x86_64 #1 SMP Tue Jul 9 16:53:14 UTC 2019 x86_64 Red Hat Enterprise Linux Server release 7.6 (Maipo)
HOSTNAME                              : xar05auv
The SAS System

ENCODING                              : utf-8
JOBID                                 : 4348
START DATE AND TIME OF EXECUTION      : Friday, 16 December 2022 at 22:29:17
COMPLETION DATE AND TIME OF EXECUTION : Friday, 16 December 2022 at 22:29:44
COMPUTATION TIME                      : 0 days 0 hours 0 minutes 26.5 seconds
=================================================================================================================


MPRINT(PROGRAMEND):   options NOSYMBOLGEN NOMLOGIC;

Notice: === (PROGRAMEND): Starting, 2022-12-16T22:29:43.67 - SYSMEXECDEPTH: 1 - DEBUG: 1 ===
Notice: === (PROGRAMEND): OUTPUTFILENAME=__adsl ===
MAUTOCOMPLOC:  The autocall macro ODSDEST is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library/odsdest.sas.
Notice: === (PROGRAMEND): ODS LISTING is now OPEN. ===
Notice: === (PROGRAMEND): SYSPRINTTOLIST=OF = 
/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/lst/__adsl.lst ===
Notice: === (PROGRAMEND): SYSPRINTTOLOG=LOGF = 
/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/log/__adsl.log ===
MPRINT(PROGRAMEND):   ods listing;
Notice: === (PROGRAMEND): ODS LISTING is now OPEN. ===
Current LISTING select list is set to default value (ALL).
Current OVERALL select list is: ALL
MPRINT(ODSDEST):   ODS LISTING show ;
MPRINT(PROGRAMEND):   ;
MPRINT(PROGRAMEND):   ods rtf close;
MPRINT(PROGRAMEND):   ods pdf close;
MPRINT(PROGRAMEND):   proc printto print=print;
MPRINT(PROGRAMEND):   run;
NOTE: At least one W.D format was too small for the number to be printed. The decimal may be shifted by the "BEST" format.
The SAS System

NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(PROGRAMEND):   footnote;
MPRINT(PROGRAMEND):   *- resetting the footnotes so they do not appear in the Synopsis of Program Execution -*;
MPRINT(PROGRAMEND):   *- For Tables and Listings, systematically generate a TXT and a PDF file -*;
MPRINT(PROGRAMEND):   option nomautolocdisplay;
MPRINT(PROGRAMEND):   option nosyntaxcheck obs=max;
DEBUG=1 RUNENVIRONMENT=repository
MPRINT(PROGRAMEND):   proc printto log=log;
MPRINT(PROGRAMEND):   run;


===                                                                                                                                                                              ===
===                                                                                                                                                                              ===
====================================================================================================================================================================================
=== End of Redirected Log Content from File:                                                                                                                                     ===
=== /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/log/__adsl.log       ===
====================================================================================================================================================================================
NOTE: 7441 records were read from the infile LOGF.
      The minimum record length was 0.
      The maximum record length was 200.
NOTE: The data set WORK.LOG1 has 1093 observations and 7 variables.
NOTE: The data set WORK.MAUTO has 150 observations and 3 variables.
NOTE: The data set WORK.FULLLOG has 7441 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
      

MPRINT(PROGRAMEND):   *- detect log issues and information about submitted jobs - jbodart -2022-09-14 -*;
MPRINT(PROGRAMEND):   *- identify blocs of lines by the presence of a specific pattern in their first line -*;
MPRINT(PROGRAMEND):   data fulllog1;
MPRINT(PROGRAMEND):   set fulllog;
MPRINT(PROGRAMEND):   length msg_type $10 job_submission_id job_compl_status $40 job_path $200;
MPRINT(PROGRAMEND):   retain msg_num msg_type msg_start thesassystem job_submission_id job_compl_status job_path;
MPRINT(PROGRAMEND):   prx1 = prxparse('/^(ER[R]OR( \d+-\d+)?|WA[R]NING|NO[T]E|DE[B]UG|No[t]ice|SYMB[O]LGEN|MAUTO(COMPLOC|LOCDISPLAY)|(MP[R]INT|ML[O]GIC)\(\w+(\.\w+)*\)):/');
MPRINT(PROGRAMEND):   prx2 = prxparse('/\b[Jj]ob(?: [Ww]ith)? Submission ID: ([0-9a-f]+(-[0-9a-f]+)+)?/');
MPRINT(PROGRAMEND):   prx3 = prxparse('/\b[Jj]ob\b.+has completed with status: (COMPLETED(_\w+)+\b)?/');
MPRINT(PROGRAMEND):   prx4 = prxparse('!(?:\b[Ss]ubmitted (?:REPOSITORY |WORKSPACE )?[Jj]ob\:? |\%submit_job\( *)(/(general|clinical)/(\w+/)+\w+.job\b)?!');
MPRINT(PROGRAMEND):   drop prx1-prx4;
MPRINT(PROGRAMEND):   msg_num=0;
MPRINT(PROGRAMEND):   if message = " " and line-1 > thesassystem then do;
MPRINT(PROGRAMEND):   msg_type = " ";
MPRINT(PROGRAMEND):   msg_start = .;
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   else if prxmatch(prx1, message) then do;
MPRINT(PROGRAMEND):   msg_type = scan(prxposn(prx1, 1, message), 1);
MPRINT(PROGRAMEND):   msg_start=line;
MPRINT(PROGRAMEND):   msg_num+1;
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   else if prxmatch("/^\x0C\d{0,8} *The SAS System /", message) then do;
MPRINT(PROGRAMEND):   thesassystem = line;
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   else if substr(message, 1, 1) ^= " " then do;
MPRINT(PROGRAMEND):   msg_type = " ";
The SAS System

MPRINT(PROGRAMEND):   msg_start = .;
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   if prxmatch(prx2, message) then do;
MPRINT(PROGRAMEND):   if msg_type=' ' then msg_type="JOB_SUBMIT";
MPRINT(PROGRAMEND):   job_submission_id = prxposn(prx2, 1, message);
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   if prxmatch(prx3, message) then do;
MPRINT(PROGRAMEND):   if msg_type=' ' then msg_type="JOB_COMPL";
MPRINT(PROGRAMEND):   job_compl_status = prxposn(prx3, 1, message);
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   if prxmatch(prx4, message) then do;
MPRINT(PROGRAMEND):   if msg_type=' ' then msg_type="JOB_PATH";
MPRINT(PROGRAMEND):   job_path = prxposn(prx4, 1, message);
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   if prxmatch("/^Not[i]ce:(\(\w+(\.\w+)*\))? (Updated )?Job parameters: /", message) then do;
MPRINT(PROGRAMEND):   if msg_type in ("Notice") then msg_type = "JOB_PARAM";
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   run;

NOTE: There were 7441 observations read from the data set WORK.FULLLOG.
NOTE: The data set WORK.FULLLOG1 has 7441 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.26 seconds
      cpu time            0.26 seconds
      

MPRINT(PROGRAMEND):   *- "remove" from the blocks the lines containing "The SAS System" after a page break -*;
MPRINT(PROGRAMEND):   *- also, identify job-related blocks by the first occurrence of a differnt job path -*;
MPRINT(PROGRAMEND):   data fulllog1;
MPRINT(PROGRAMEND):   set fulllog1(
MPRINT(PROGRAMEND):  );
MPRINT(PROGRAMEND):   by job_path notsorted;
MPRINT(PROGRAMEND):   retain job_start job_num 0;
MPRINT(PROGRAMEND):   if (line = thesassystem) or (line = ifn(thesassystem = ., ., sum(thesassystem,1)) and message = ' ') then do;
MPRINT(PROGRAMEND):   msg_type="SASSYSTEM";
MPRINT(PROGRAMEND):   msg_num = msg_num + 0.1;
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   else do;
MPRINT(PROGRAMEND):   adj_line+1;
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   if first.job_path then do;
MPRINT(PROGRAMEND):   job_start = line;
MPRINT(PROGRAMEND):   job_num+1;
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   run;

NOTE: There were 7441 observations read from the data set WORK.FULLLOG1.
NOTE: The data set WORK.FULLLOG1 has 7441 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.05 seconds
      

MPRINT(PROGRAMEND):   data fulllog1;
MPRINT(PROGRAMEND):   set fulllog1;
MPRINT(PROGRAMEND):   if msg_type="SASSYSTEM" then adj_line = -100;
MPRINT(PROGRAMEND):   run;

The SAS System

NOTE: There were 7441 observations read from the data set WORK.FULLLOG1.
NOTE: The data set WORK.FULLLOG1 has 7441 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(PROGRAMEND):   *- get the ending line number of each block and of each job-related block -*;
MPRINT(PROGRAMEND):   proc sql noprint;
MPRINT(PROGRAMEND):   create table fulllog2 as select *, max(line) as msg_end from (select *, max(line * (message ^= " ")) as job_end from fulllog1(
MPRINT(VARLIST):  drop= thesassystem
MPRINT(PROGRAMEND):  ) group by job_num) group by msg_num, msg_type order by line ;
NOTE: The query requires remerging summary statistics back with the original data.
NOTE: Table WORK.FULLLOG2 created, with 7441 rows and 14 columns.

MPRINT(PROGRAMEND):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.10 seconds
      cpu time            0.12 seconds
      

MPRINT(PROGRAMEND):   *- for each line retrieve the next 2 lines with same msg_type and msg_num in order to reconstruct complete lines that were wrapped -*;
MPRINT(PROGRAMEND):   proc sql noprint;
MPRINT(PROGRAMEND):   create table fulllog3(compress=Y) as select a.* ,b.message as message2 ,coalesce(b.length, 0) as length2 ,c.message as message3 ,coalesce(c.length, 0) as 
length3 ,d.message as message4 ,coalesce(d.length, 0) as length4 from fulllog2 as a left join fulllog2 as b on a.adj_line+1 = b.adj_line and a.msg_type = b.msg_type and a.msg_num 
= b.msg_num left join fulllog2 as c on a.adj_line+2 = c.adj_line and a.msg_type = c.msg_type and a.msg_num = c.msg_num left join fulllog2 as d on a.adj_line+3 = d.adj_line and 
a.msg_type = d.msg_type and a.msg_num = d.msg_num order by line ;
NOTE: Compressing data set WORK.FULLLOG3 decreased size by 89.01 percent. 
      Compressed is 20 pages; un-compressed would require 182 pages.
NOTE: Table WORK.FULLLOG3 created, with 7441 rows and 20 columns.

MPRINT(PROGRAMEND):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.18 seconds
      cpu time            0.22 seconds
      

MPRINT(PROGRAMEND):   *- detect the presence of specific messages in specific block types and assign a severity level: issue_lvl -*;
MPRINT(PROGRAMEND):   data job_messages0(compress=Y);
MPRINT(PROGRAMEND):   length parent_job_instance $200 message_concat $1200;
MPRINT(PROGRAMEND):   format parent_job_stdtm E8601DT.;
MPRINT(PROGRAMEND):   set fulllog3(rename
MPRINT(PROGRAMEND):  =(job_submission_id = _job_submission_id job_compl_status = _job_compl_status job_path = _job_path)) end = last;
MPRINT(PROGRAMEND):   where ( msg_type not in (" " "SASSYSTEM" "MPRINT" "MLOGIC" "DEBUG" "MAUTOCOMPLOC" "MAUTOLOCDISPLAY") ) ;
MPRINT(VARLIST):   if _job_submission_id ^= " " then job_submission_id = _job_submission_id ;
MPRINT(VARLIST):   if _job_compl_status ^= " " then job_compl_status = _job_compl_status ;
MPRINT(VARLIST):   if _job_path ^= " " then job_path = _job_path ;
MPRINT(PROGRAMEND):   ;
MPRINT(PROGRAMEND):   retain indent job_submission_id job_compl_status job_path;
MPRINT(PROGRAMEND):   if symexist('startdatetime') then parent_job_stdtm = input(symget('startdatetime'), best32.);
MPRINT(PROGRAMEND):   else parent_job_stdtm = input("16DEC2022:22:29", datetime.);
MPRINT(PROGRAMEND):   if symexist('job_instance') then do;
MPRINT(PROGRAMEND):   parent_job_instance = symget('job_instance');
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   if parent_job_instance = " " then parent_job_instance = catx("_", put(symget("sysjobid"), $20.), "T222945", 'xx');
MPRINT(PROGRAMEND):   if msg_type in ("ERROR", "WARNING", "NOTE") then do;
MPRINT(PROGRAMEND):   *- case of indented blocks -*;
MPRINT(PROGRAMEND):   if line = msg_start and 0 < index(message, ": ") then do;
The SAS System

MPRINT(PROGRAMEND):   *- first line of block defines indentation of next lines -*;
MPRINT(PROGRAMEND):   if prxmatch("/^NOTE: (DATA statement|PROCEDURE [A-Z]+) used /", message) then do;
MPRINT(PROGRAMEND):   *- special case -*;
MPRINT(PROGRAMEND):   indent = index(message, ": ");
MPRINT(PROGRAMEND):   message_concat = substrn(message, 1, length) || ","|| compbl(substrn(message2, indent + 1, length2 - indent)) || ","|| compbl(substrn(message3, indent + 1, 
length3 - indent)) || ","|| compbl(substrn(message4, indent + 1, length4 - indent)) ;
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   else do;
MPRINT(PROGRAMEND):   *- common case -*;
MPRINT(PROGRAMEND):   indent = index(message, ": ")+1;
MPRINT(PROGRAMEND):   message_concat = substrn(message, 1, length) || substrn(message2, indent + 1, length2 - indent) || substrn(message3, indent + 1, length3 - indent) || 
substrn(message4, indent + 1, length4 - indent) ;
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   else do;
MPRINT(PROGRAMEND):   *- block lines 2 and above use the indent calculated in line 1 -*;
MPRINT(PROGRAMEND):   message_concat = substrn(message, indent + 1, length - indent ) || substrn(message2, indent + 1, length2 - indent) || substrn(message3, indent + 1, length3 - 
indent) || substrn(message4, indent + 1, length4 - indent) ;
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   else do;
MPRINT(PROGRAMEND):   *- cas of non-indented blocks -*;
MPRINT(PROGRAMEND):   indent = 0;
MPRINT(PROGRAMEND):   message_concat = substrn(message, 1, length) || substrn(message2, 1, length2) || substrn(message3, 1, length3) || substrn(message4, 1, length4);
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   message_concat = compbl(message_concat);
MPRINT(PROGRAMEND):   *- 2nd attempt to retrieve Job Submission ID, completion status, and path, using concatenated message, in case 1st attempt failed due to log messge 
truncation (wrapping) -*;
MPRINT(PROGRAMEND):   prx2 = prxparse('/\b[Jj]ob(?: [Ww]ith)? Submission ID: ([0-9a-f]+(-[0-9a-f]+)+)/');
MPRINT(PROGRAMEND):   prx3 = prxparse('/\b[Jj]ob\b.+has completed with status: (COMPLETED(_\w+)+\b)/');
MPRINT(PROGRAMEND):   prx4 = prxparse('!(?:\b[Ss]ubmitted (?:REPOSITORY |WORKSPACE )?[Jj]ob\:? |\%submit_job\( *)(/(general|clinical)/(\w+/)+\w+.job\b)!');
MPRINT(PROGRAMEND):   drop prx2-prx4;
MPRINT(PROGRAMEND):   if substr(msg_type, 1, 4)="JOB_" then do;
MPRINT(PROGRAMEND):   if prxmatch(prx2, message_concat) then do;
MPRINT(PROGRAMEND):   job_submission_id = prxposn(prx2, 1, message_concat);
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   if prxmatch(prx3, message_concat) then do;
MPRINT(PROGRAMEND):   job_compl_status = prxposn(prx3, 1, message_concat);
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   if prxmatch(prx4, message_concat) then do;
MPRINT(PROGRAMEND):   job_path = prxposn(prx4, 1, message_concat);
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   run;

NOTE: There were 2013 observations read from the data set WORK.FULLLOG3.
      WHERE msg_type not in (' ', 'DEBUG', 'MLOGIC', 'MPRINT', 'SASSYSTEM');
NOTE: The data set WORK.JOB_MESSAGES0 has 2013 observations and 27 variables.
NOTE: Compressing data set WORK.JOB_MESSAGES0 decreased size by 89.66 percent. 
      Compressed is 6 pages; un-compressed would require 58 pages.
NOTE: DATA statement used (Total process time):
      real time           0.23 seconds
      cpu time            0.23 seconds
      

MPRINT(PROGRAMEND):   data job_messages01;
MPRINT(PROGRAMEND):   set job_messages0(drop
MPRINT(PROGRAMEND):  =_job_submission_id _job_compl_status _job_path);
The SAS System

MPRINT(PROGRAMEND):   by job_num notsorted;
MPRINT(PROGRAMEND):   if (msg_type = "ER"||"ROR") then issue_lvl = 5;
MPRINT(PROGRAMEND):   else if (msg_type = "WAR"||"NING" and prxmatch("/(YOUR SYSTEM|IS ASSOCIATED) (WILL|IS SCHEDULED TO) EXPIRE/i", message) = 0 and prxmatch("/Unable to copy 
SAS[U]SER registry to WORK registry/i", message) = 0 ) then issue_lvl = 3;
MPRINT(PROGRAMEND):   else if (msg_type = "NO"||"TE") then do;
MPRINT(PROGRAMEND):   if prxmatch("/(\bINV[A]LID( \w+)? ARGUMENT TO FUNCTION\b" ||"|MERGE STA[T]EMENT HAS MORE T[H]AN ONE |DATA SET WITH RE[P]EATS (OF BY VALUES)?" ||"|SAS SET 
OP[T]ION OBS=0 AND WILL CON[T]INUE (TO CHECK STATEMENTS)?" ||"|SAS (SYSTEM )?STOP[P]ED PROCESSING THIS STEP" ||")/i", message) then issue_lvl = 4;
MPRINT(PROGRAMEND):   else if prxmatch("/(\bunin[i]titalized\b" ||"|Mis[s]ing values were ge[n]erated" ||"|for[m]at was too small" ||"|values have been con[v]erted" ||"|ER[R]OR 
DETECTED IN ANNOTATE" ||")/i", message) then issue_lvl = 2;
MPRINT(PROGRAMEND):   else issue_lvl = 0;
MPRINT(PROGRAMEND):   end;
MPRINT(PROGRAMEND):   else issue_lvl = 0;
MPRINT(PROGRAMEND):   if ( (line = job_start or line = job_end or last.job_num) and job_path^= " ") or (msg_type = "JOB_"||"PARAM") or issue_lvl >= 2 ;
MPRINT(PROGRAMEND):   run;

NOTE: There were 2013 observations read from the data set WORK.JOB_MESSAGES0.
NOTE: The data set WORK.JOB_MESSAGES01 has 1 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.42 seconds
      cpu time            0.43 seconds
      

MPRINT(PROGRAMEND):   proc sql noprint;
MPRINT(PROGRAMEND):   create table job_messages1 as select parent_job_instance, parent_job_stdtm ,max(job_path) as job_path ,max(job_submission_id) as job_submission_id 
,max(job_compl_status) as job_compl_status ,
MPRINT(VARLIST):  line, message, length, msg_type, msg_num, msg_start, job_start, job_num, job_end, msg_end
MPRINT(PROGRAMEND):   ,max(issue_lvl) as job_max_issue_lvl ,issue_lvl from job_messages01 group by job_num order by
MPRINT(VARLIST):   parent_job_instance, parent_job_stdtm, job_path, job_submission_id, line
MPRINT(PROGRAMEND):  ;
NOTE: The query requires remerging summary statistics back with the original data.
NOTE: Table WORK.JOB_MESSAGES1 created, with 1 rows and 17 columns.

MPRINT(PROGRAMEND):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.34 seconds
      cpu time            0.34 seconds
      

MPRINT(PROGRAMEND):   *- Add messages from current log scan to Job Messages Tracker data -*;
_PARENTJOB_WRK_= PARWRK_LIBREF_ASSIGNED=0
MPRINT(PROGRAMEND):   data work.__job_messages_tracker;
MPRINT(PROGRAMEND):   set job_messages1;
MPRINT(PROGRAMEND):   by parent_job_instance parent_job_stdtm job_path job_submission_id line;
MPRINT(PROGRAMEND):   run;

NOTE: There were 1 observations read from the data set WORK.JOB_MESSAGES1.
NOTE: The data set WORK.__JOB_MESSAGES_TRACKER has 1 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(PROGRAMEND):   proc sql noprint;
MPRINT(PROGRAMEND):   create index _idx0_ on work.__job_messages_tracker(
MPRINT(VARLIST):  parent_job_instance, parent_job_stdtm, job_path, job_submission_id, line
NOTE: Composite index _idx0_ has been defined.
MPRINT(PROGRAMEND):  ) quit;
NOTE: PROCEDURE SQL used (Total process time):
The SAS System

      real time           0.09 seconds
      cpu time            0.10 seconds
      

MPRINT(PROGRAMEND):   data log2;
MPRINT(PROGRAMEND):   set log1 ;
MPRINT(PROGRAMEND):   where (war = 1 and (index(upmsg,'PRODUCT WITH WHICH') eq 0 and index(upmsg,'IS ASSOCIATED WILL EXPIRE') eq 0 and index(upmsg,'MPRINT') eq 0 and 
index(upmsg,'MLOGIC') eq 0 and index(upmsg,'SYMBOLGEN') eq 0 and index(upmsg,'IS ASSOCIATED IS SCHEDULED TO EXPIRE') eq 0 and index(upmsg,'YOUR SYSTEM IS SCHEDULED TO EXPIRE') eq 
0)) or un or (err and index(upmsg,'MPRINT') eq 0 and index(upmsg,'MLOGIC') eq 0 and index(upmsg,'SYMBOLGEN') eq 0 and upmsg ne:'GLOBAL') or ( upmsg like "NOTE: MIS"||"SING VALUES 
WERE GEN"||"ERATED AS A RESULT OF PERFORMING AN OPERATION ON MIS"||"SING VALUES.#" or upmsg like "NOTE: AT LEAST ONE W.D FOR"||"MAT WAS TOO SMALL FOR THE NUMBER TO BE PRINTED. THE 
DECIMAL MAY BE#" or upmsg like "NOTE: NUMERIC VALUES HAVE BEEN CONV"||"ERTED TO CHARACTER VALUES AT THE PLACES GIVEN BY:#" or upmsg like "NOTE: INV"||"ALID ARGUMENT TO%#" or upmsg 
like "NOTE: % UNINI"||"TIALIZED%#" or upmsg like "NOTE: MERGE STA"||"TEMENT HAS MORE TH"||"AN ONE DATA SET WITH RE"||"PEATS OF BY VALUES." or upmsg like "NOTE: THE SAS SYSTEM 
STOP"||"PED PROCESSING THIS STEP BECAUSE OF ER"||"RORS." or upmsg like "NOTE: SAS SET OP"||"TION OBS=0 AND WILL CONTINUE TO CHECK STATEMENTS." or upmsg like "NOTE: ER"||"ROR 
DETECTED IN ANNOTATE= DATASET" );
MPRINT(PROGRAMEND):   run;

NOTE: There were 1 observations read from the data set WORK.LOG1.
      WHERE ((war=1) and (INDEX(upmsg, 'PRODUCT WITH WHICH')=0) and (INDEX(upmsg, 'IS ASSOCIATED WILL EXPIRE')=0) and (INDEX(upmsg, 'MPRINT')=0) and (INDEX(upmsg, 'MLOGIC')=0) and 
      (INDEX(upmsg, 'SYMBOLGEN')=0) and (INDEX(upmsg, 'IS ASSOCIATED IS SCHEDULED TO EXPIRE')=0) and (INDEX(upmsg, 'YOUR SYSTEM IS SCHEDULED TO EXPIRE')=0)) or un or (err and 
      (INDEX(upmsg, 'MPRINT')=0) and (INDEX(upmsg, 'MLOGIC')=0) and (INDEX(upmsg, 'SYMBOLGEN')=0) and (upmsg not =: 'GLOBAL')) or upmsg like ('NOTE: MIS'||'SING VALUES WERE 
      GEN'||'ERATED AS A RESULT OF PERFORMING AN OPERATION ON MIS'||'SING VALUES.#') or upmsg like ('NOTE: AT LEAST ONE W.D FOR'||'MAT WAS TOO SMALL FOR THE NUMBER TO BE PRINTED. 
      THE DECIMAL MAY BE#') or upmsg like ('NOTE: NUMERIC VALUES HAVE BEEN CONV'||'ERTED TO CHARACTER VALUES AT THE PLACES GIVEN BY:#') or upmsg like ('NOTE: INV'||'ALID ARGUMENT 
      TO%#') or upmsg like ('NOTE: % UNINI'||'TIALIZED%#') or upmsg like ('NOTE: MERGE STA'||'TEMENT HAS MORE TH'||'AN ONE DATA SET WITH RE'||'PEATS OF BY VALUES.') or upmsg like 
      ('NOTE: THE SAS SYSTEM STOP'||'PED PROCESSING THIS STEP BECAUSE OF ER'||'RORS.') or upmsg like ('NOTE: SAS SET OP'||'TION OBS=0 AND WILL CONTINUE TO CHECK STATEMENTS.') or 
      upmsg like ('NOTE: ER'||'ROR DETECTED IN ANNOTATE= DATASET');
NOTE: The data set WORK.LOG2 has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.02 seconds
      

MAUTOCOMPLOC:  The autocall macro LOG2JSON is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library/log2json.sas.
MPRINT(LOG2JSON):   data _null_;
MPRINT(LOG2JSON):   runinclinical = 
max(index("/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/log/__adsl.log","
/clinical/"),index("/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/log/__ad
sl.log","\clinical\"));
MPRINT(LOG2JSON):   repoloc = max(index("no","/clinical/"),index("no","\clinical\"));
MPRINT(LOG2JSON):   call symputx("runinclinical",strip(put(runinclinical,8.)));
MPRINT(LOG2JSON):   call symputx("runinrepoloc",strip(put(repoloc,8.)));
MPRINT(LOG2JSON):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

RUNINCLINICAL=87 RUNINREPOLOC=0
MPRINT(LOG2JSON):   data _null_;
MPRINT(LOG2JSON):   *fp = substr("&logfilepath",index("&logfilepath","/clinical/"));
MPRINT(LOG2JSON):   fp = 
substr("/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/log/__adsl.log",prxm
atch("?[/\\]clinical[/\\]?","/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam
/log/__adsl.log"));
MPRINT(LOG2JSON):   *- jbodart 2022-07-12 -*;
MPRINT(LOG2JSON):   call symputx("logfpath",strip(fp));
MPRINT(LOG2JSON):   run;
The SAS System


NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

LOGFPATH=/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/log/__adsl.log
LOGFNAMENOEXT=__adsl
LOGFDIR=/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/log/
DOCMETADIR=/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/documents/meta/
MPRINT(LOG2JSON):   options dlcreatedir;
MPRINT(LOG2JSON):   libname sublog 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/documents/meta/";
NOTE: Library SUBLOG was created.
NOTE: Libref SUBLOG was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: 
      /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/documents/meta
MPRINT(LOG2JSON):   libname sublog;
NOTE: Libref SUBLOG has been deassigned.
MPRINT(LOG2JSON):   options DLCREATEDIR;
MPRINT(LOG2JSON):   data logsumm;
MPRINT(LOG2JSON):   set log1 (obs=1);
MPRINT(LOG2JSON):   message="Summary";
MPRINT(LOG2JSON):   war=0;
MPRINT(LOG2JSON):  err=0;
MPRINT(LOG2JSON):  un=0;
MPRINT(LOG2JSON):   note=0;
MPRINT(LOG2JSON):   line=0;
MPRINT(LOG2JSON):  path="/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/log/__adsl.log";
MPRINT(LOG2JSON):   run;

NOTE: There were 1 observations read from the data set WORK.LOG1.
NOTE: The data set WORK.LOGSUMM has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LOG2JSON):   data log2note;
MPRINT(LOG2JSON):   set log2;
MPRINT(LOG2JSON):   if err=0 and war=0 and un=0 then note=1;
MPRINT(LOG2JSON):   else note=0;
MPRINT(LOG2JSON):   run;

NOTE: There were 1 observations read from the data set WORK.LOG2.
NOTE: The data set WORK.LOG2NOTE has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(LOG2JSON):   proc means data=log2note noprint;
MPRINT(LOG2JSON):   output out=summ sum=;
MPRINT(LOG2JSON):   run;

NOTE: There were 1 observations read from the data set WORK.LOG2NOTE.
NOTE: The data set WORK.SUMM has 1 observations and 8 variables.
The SAS System

NOTE: PROCEDURE MEANS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LOG2JSON):   data summ;
MPRINT(LOG2JSON):   set summ;
MPRINT(LOG2JSON):   line=0;
MPRINT(LOG2JSON):   drop _:;
MPRINT(LOG2JSON):   run;

NOTE: There were 1 observations read from the data set WORK.SUMM.
NOTE: The data set WORK.SUMM has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LOG2JSON):   data logsumm2 ;
MPRINT(LOG2JSON):   merge logsumm summ;
MPRINT(LOG2JSON):   by line;
MPRINT(LOG2JSON):   run;

NOTE: There were 1 observations read from the data set WORK.LOGSUMM.
NOTE: There were 1 observations read from the data set WORK.SUMM.
NOTE: The data set WORK.LOGSUMM2 has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LOG2JSON):   proc sort data=log2note out=log2small;
MPRINT(LOG2JSON):   by message line;
MPRINT(LOG2JSON):   run;

NOTE: There were 1 observations read from the data set WORK.LOG2NOTE.
NOTE: The data set WORK.LOG2SMALL has 1 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(LOG2JSON):   proc freq data=log2 noprint;
MPRINT(LOG2JSON):   table message/ norow nocol nopercent nocum list out=fmessage (rename=(count=f_msg) drop=percent);
MPRINT(LOG2JSON):   run;

NOTE: There were 1 observations read from the data set WORK.LOG2.
NOTE: The data set WORK.FMESSAGE has 1 observations and 2 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LOG2JSON):   data log2smallA;
MPRINT(LOG2JSON):   set log2small;
MPRINT(LOG2JSON):   by message line;
MPRINT(LOG2JSON):   if first.message;
MPRINT(LOG2JSON):   run;
The SAS System


NOTE: There were 1 observations read from the data set WORK.LOG2SMALL.
NOTE: The data set WORK.LOG2SMALLA has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LOG2JSON):   data log2smallB;
MPRINT(LOG2JSON):   merge log2smallA (obs=100) fmessage;
MPRINT(LOG2JSON):   by message;
MPRINT(LOG2JSON):   run;

NOTE: There were 1 observations read from the data set WORK.LOG2SMALLA.
NOTE: There were 1 observations read from the data set WORK.FMESSAGE.
NOTE: The data set WORK.LOG2SMALLB has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LOG2JSON):   data logres(drop=upmsg);
MPRINT(LOG2JSON):   set logsumm2 log2smallB;
MPRINT(LOG2JSON):   run;

NOTE: There were 1 observations read from the data set WORK.LOGSUMM2.
NOTE: There were 1 observations read from the data set WORK.LOG2SMALLB.
NOTE: The data set WORK.LOGRES has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(LOWC):   proc contents noprint data=logres out=cnt (keep=name);
MPRINT(LOWC):   run;

NOTE: The data set WORK.CNT has 9 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LOWC):   data _null_;
MPRINT(LOWC):   set cnt end=last;
MPRINT(LOWC):   where name ne lowcase(name);
MPRINT(LOWC):   call symputx("lowvar"||strip(put(_n_,8.)),strip(lowcase(name)));
MPRINT(LOWC):   call symputx("highvar"||strip(put(_n_,8.)),strip(upcase(name)));
MPRINT(LOWC):   if last then call symputx("nbvars",strip(put(_n_,8.)));
MPRINT(LOWC):   run;

NOTE: There were 0 observations read from the data set WORK.CNT.
      WHERE name not = LOWCASE(name);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LOG2JSON):  ;
The SAS System

MPRINT(LOG2JSON):   filename flogjson 
"/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam/documents/meta/log___adsl.j
son";
MPRINT(LOG2JSON):   proc json out=flogjson pretty;
MPRINT(LOG2JSON):   export logres / nosastags;
MPRINT(LOG2JSON):   run;

NOTE: PROCEDURE JSON used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(LOG2JSON):   filename flogjson;
NOTE: Fileref FLOGJSON has been deassigned.
MPRINT(LOG2JSON):   *- unassign fileref -*;
MPRINT(PROGRAMEND):  ;
MPRINT(PROGRAMEND):   data mac;
MPRINT(PROGRAMEND):   length order 8;
MPRINT(PROGRAMEND):   set mauto;
MPRINT(PROGRAMEND):   upmsg=strip(COMPBL(upmsg));
MPRINT(PROGRAMEND):   if index(upmsg,'MAUTOLOCDISPLAY') or index(upmsg,'THIS MACRO WAS COMPILED FROM')>0 or index(upmsg,'MAUTOCOMPLOC') or index(upmsg,'IS COMPILING USING THE 
AUTOCALL SOURCE FILE')>0 then order+1;
MPRINT(PROGRAMEND):   if index(upmsg,'THE SAS SYSTEM')>0 then delete;
MPRINT(PROGRAMEND):   upmsg=compress(upmsg);
MPRINT(PROGRAMEND):   run;

NOTE: There were 150 observations read from the data set WORK.MAUTO.
NOTE: The data set WORK.MAC has 149 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

COPYNEEDED=0
(PROGRAMEND): sysmexecdepth =1
MPRINT(ODSDEST):   ods LISTING close;
MPRINT(PROGRAMEND):   ;
MPRINT(PROGRAMEND):   ods listing;
MPRINT(PROGRAMEND):   data _null_;
MPRINT(PROGRAMEND):   set log2 end=last;
MPRINT(PROGRAMEND):   if last then call symputx('nb_loglines',_n_);
MPRINT(PROGRAMEND):   run;

NOTE: There were 1 observations read from the data set WORK.LOG2.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(PROGRAMEND):   proc freq data= log2 noprint;
MPRINT(PROGRAMEND):   table MESSAGE/ out=messagelist;
MPRINT(PROGRAMEND):   run;

NOTE: There were 1 observations read from the data set WORK.LOG2.
NOTE: The data set WORK.MESSAGELIST has 1 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
The SAS System

      

MPRINT(PROGRAMEND):   title "LOG CHECK of adsl.sas for output: __adsl";
MPRINT(PROGRAMEND):   footnote;
MPRINT(PROGRAMEND):   *-2021-04-12 - Jean-Michel Bodart - use proc report with flow option allowing to display long messages without truncation -*;
MPRINT(PROGRAMEND):   proc report data=messagelist nowindows split='|' headline headskip contents='' formchar(2)='_' missing spacing=2 NOCOMPLETECOLS SPANROWS;
MPRINT(PROGRAMEND):   ***- Option SPANROWS allows corresponding value of group variables to be printed on 1st row of each page, without being repeated on subsequent rows -***;
MPRINT(PROGRAMEND):  ;
MPRINT(PROGRAMEND):   columns count message;
MPRINT(PROGRAMEND):   define count / "Count" order=data width = 6;
MPRINT(PROGRAMEND):   define message / "Message" order=data flow width=170;
MPRINT(PROGRAMEND):   run;

NOTE: There were 1 observations read from the data set WORK.MESSAGELIST.
NOTE: The PROCEDURE REPORT printed page 3.
NOTE: PROCEDURE REPORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.02 seconds
      

MPRINT(PROGRAMEND):   title;
MPRINT(PROGRAMEND):   filename of;
NOTE: Fileref OF has been deassigned.
MPRINT(PROGRAMEND):   filename logf;
NOTE: Fileref LOGF has been deassigned.
(PROGRAMEND): SYSMEXECDEPTH =1
_PARENTJOB_WRK_= PARWRK_LIBREF_ASSIGNED=0
MPRINT(PROGRAMEND):   *- Process Job Messages Tracker data from child jobs (if any) -*;
MPRINT(PROGRAMEND):   *- Save Job Messages Tracker data to Library OUT if defined -*;
WEEKDAY=6
TRACKER=out.jobtrack86f6330f_d6 NEW_TRACKER=1 OUT_LIBREF_ASSIGNED=0
MPRINT(PROGRAMEND):   *- close active ods HTML destinations -*;
MPRINT(PROGRAMEND):   ;
MPRINT(PROGRAMEND):   *- launch dashboard job -*;
RELREPEVPATH=/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam
MPRINT(PROGRAMEND):   data _null_;
MPRINT(PROGRAMEND):   runinclinical = max(index("/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam", "/clinical/"), 
index("/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam", "\clinical\"));
MPRINT(PROGRAMEND):   call symputx("_runinclinical", strip(put(runinclinical, 8.)));
MPRINT(PROGRAMEND):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

_RUNINCLINICAL=1
MAUTOCOMPLOC:  The autocall macro SUBMIT_JOB is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library/submit_job.sas.
NUM_JOBS_SPAWNED=1
MACROAPIVER=2.3
MPRINT(SUBMIT_JOB):   option nomprint;


NOTE: SAS Life Science Analytics Framework Macro: *  The item exists: /general/biostat/jobs/dashboard/dev/jobs/pp.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_exists
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
The SAS System

NOTE: SAS Life Science Analytics Framework Macro: *  _lsafExists_= 1
NOTE: DATA statement used (Total process time):
      real time           0.22 seconds
      cpu time            0.01 seconds
      

Notice:(SUBMIT_JOB): LSAF Job Path exists: /general/biostat/jobs/dashboard/dev/jobs/pp.job.
NOTE: Format $JOBABBR has been output.

NOTE: PROCEDURE FORMAT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MAUTOCOMPLOC:  The autocall macro LSAF_GETJOBPARAMETERS is compiling using the autocall source file 
            /sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.3/sasmacros/lsaf_getjobparameters.sas.


NOTE: SAS Life Science Analytics Framework Macro: *  Parameters were returned for job /general/biostat/jobs/dashboard/dev/jobs/pp.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_getjobparameters
NOTE: SAS Life Science Analytics Framework Macro: *  5  records written to data set work.job_Parameters
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: The data set WORK.JOB_PARAMETERS has 5 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.26 seconds
      cpu time            0.01 seconds
      

NOTE: The dataset WORK.JOB_PARAMETERS has 5 observations and 8 variables.

Notice:(SUBMIT_JOB): Updated Job parameters:
 - refolder=/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam [type=FOLDER, includeSubFolders=0]
 - dbg=no [type=CHARACTER]
 - job_instance=lglsT222329_4_x0_5_1_1 [type=CHARACTER]
 - _PARENTJOB_WS_=/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae [type=CHARACTER]
 - _PARENTJOB_WRK_=  [type=CHARACTER]
NOTE: There were 5 observations read from the data set WORK.JOB_PARAMETERS.
NOTE: The data set WORK.LSAF_JOB_PARAMS has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

N_PARAMS=5

NOTE: There were 5 observations read from the data set WORK.LSAF_JOB_PARAMS.
NOTE: The data set WORK.LSAF_JOB_PARAMS has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


=== 2022-12-16T22:29:46 - Submit job: /general/biostat/jobs/dashboard/dev/jobs/pp.job (with parameters: 
       refolder=/clinical/test/gadam-tests/test-0001/biostat/staging/generic_adam  (type=FOLDER includeSubFolders=0)   
       _PARENTJOB_WS_=/lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae   dbg=no   job_instance=lglsT222329_4_x0_5_1_1           ) ===
NOTE: 3 lines were written to file PRINT.
The SAS System

NOTE: There were 1 observations read from the data set WORK.LSAF_JOB_PARAMS.
      WHERE PRXMATCH('/^(FOLDER|FILE)$/', TRIM(type));
NOTE: There were 3 observations read from the data set WORK.LSAF_JOB_PARAMS.
      WHERE (PRXMATCH('/^(FOLDER|FILE)$/', TRIM(type))=0) and (value not = ' ');
NOTE: The DATA step printed page 4.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MAUTOCOMPLOC:  The autocall macro LSAF_SUBMITJOB is compiling using the autocall source file 
            /sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.3/sasmacros/lsaf_submitjob.sas.
MAUTOCOMPLOC:  The autocall macro CMPRES is compiling using the autocall source file /sso/sfw/sas/940/SASFoundation/9.4/sasautos/cmpres.sas.
MAUTOCOMPLOC:  The autocall macro LEFT is compiling using the autocall source file /sso/sfw/sas/940/SASFoundation/9.4/sasautos/left.sas.
MAUTOCOMPLOC:  The autocall macro QTRIM is compiling using the autocall source file /sso/sfw/sas/940/SASFoundation/9.4/sasautos/qtrim.sas.
MAUTOCOMPLOC:  The autocall macro VERIFY is compiling using the autocall source file /sso/sfw/sas/940/SASFoundation/9.4/sasautos/verify.sas.
MAUTOCOMPLOC:  The autocall macro LSAF_VALIDATE_PARAMETERS_DATASET is compiling using the autocall source file 
            /sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.3/sasmacros/lsaf_validate_parameters_dataset.sas.
NOTE: lsaf_submitjob: Validating dataset lsaf_job_params
MAUTOCOMPLOC:  The autocall macro LSAF_VALIDATE_SASDATASET is compiling using the autocall source file 
            /sso/sfw/sas/940/SASFoundation/9.4/lsafapi/lsaf-sas-macro-2.3/sasmacros/lsaf_validate_sasdataset.sas.
MAUTOCOMPLOC:  The autocall macro QCMPRES is compiling using the autocall source file /sso/sfw/sas/940/SASFoundation/9.4/sasautos/qcmpres.sas.
MAUTOCOMPLOC:  The autocall macro QLEFT is compiling using the autocall source file /sso/sfw/sas/940/SASFoundation/9.4/sasautos/qleft.sas.


NOTE: SAS Life Science Analytics Framework Macro: *  Submitted job /general/biostat/jobs/dashboard/dev/jobs/pp.job
NOTE: SAS Life Science Analytics Framework Macro: *  lsaf_submitjob
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafMsg_= Success.
NOTE: SAS Life Science Analytics Framework Macro: *  _lsafRC_= 0
NOTE: SAS Life Science Analytics Framework Macro: * sas_dsname = lsaf_job_params
NOTE: SAS Life Science Analytics Framework Macro: * _lsafJobSubmissionId_= 088de0ad-7be8-499e-875e-5564ac0c231c
NOTE: There were 5 observations read from the data set WORK.LSAF_JOB_PARAMS.
NOTE: DATA statement used (Total process time):
      real time           1.76 seconds
      cpu time            0.02 seconds
      

MAUTOCOMPLOC:  The autocall macro GET_LSAF_JOB_SUBMISSION_STATUS is compiling using the autocall source file 
            /lsafshared/SASWorkspaces/.transient/job_adsl.job-2326a815-2524-425c-a2cb-55a956dc22ae/general/biostat/macros/_library/get_lsaf_job_submission_status.sas.
(SUBMIT_JOB): 2022-12-16T22:29:49 - Submitted REPOSITORY Job /general/biostat/jobs/dashboard/dev/jobs/pp.job          with Submission ID: 088de0ad-7be8-499e-875e-5564ac0c231c, 
Status: STARTED
(SUBMIT_JOB): 22:29:49.21 Elapsed: 00:00:03.48 Job Submission Status: STARTED
(SUBMIT_JOB): 22:29:51.74 Elapsed: 00:00:06.00 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 22:29:54.46 Elapsed: 00:00:08.73 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 22:29:57.59 Elapsed: 00:00:11.86 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 22:30:00.92 Elapsed: 00:00:15.19 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 22:30:03.85 Elapsed: 00:00:18.12 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 22:30:06.77 Elapsed: 00:00:21.04 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 22:30:09.30 Elapsed: 00:00:23.57 Job Submission Status: RUNNING_TASKS
(SUBMIT_JOB): 22:30:12.23 Elapsed: 00:00:26.50 Job Submission Status: COMPLETED_SUCCESSFUL
(SUBMIT_JOB): 2022-12-16T22:30:15 - Submitted REPOSITORY job: /general/biostat/jobs/dashboard/dev/jobs/pp.job has completed with status: COMPLETED_SUCCESSFUL
pp.job: get job status: 0: Success.:       Elapsed: 00:00:29.00       REPOSITORY Job /general/biostat/jobs/dashboard/dev/jobs/pp.job with Submission ID: 
088de0ad-7be8-499e-875e-5564ac0c231c, Status: COMPLETED_SUCCESSFUL
MPRINT(PROGRAMEND):  ;

Notice: === (PROGRAMEND): Done, 2022-12-16T22:30:14.74 - SYSMEXECDEPTH: 1 - DEBUG: 1 ===
965        
966        
The SAS System

967        
968        
969        
970        
971        ;*';*";*/;*);run;quit;
972        proc scaproc; write; run;
973        options nonotes;
974        

/**********************************************************************************************************************
 * Submission End: adsl.sas
 * Dec 16, 2022 22:30:14 GMT
 *********************************************************************************************************************/
